// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Debugging tools - Heap
//========================================
var HEAP_WATCHED = [];
var HEAP_HISTORY = [];
function SAFE_HEAP_CLEAR(dest) {
  HEAP_HISTORY[dest] = undefined;
}
var SAFE_HEAP_ERRORS = 0;
var ACCEPTABLE_SAFE_HEAP_ERRORS = 0;

function SAFE_HEAP_ACCESS(dest, type, store, ignore, storeValue) {
  //if (dest === A_NUMBER) Module.print ([dest, type, store, ignore, storeValue] + ' ' + stackTrace()); // Something like this may be useful, in debugging

  assert(dest > 0, 'segmentation fault');

  // When using typed arrays, reads over the top of TOTAL_MEMORY will fail silently, so we must
  // correct that by growing TOTAL_MEMORY as needed. Without typed arrays, memory is a normal
  // JS array so it will work (potentially slowly, depending on the engine).
  assert(ignore || dest < Math.max(DYNAMICTOP, STATICTOP));
  assert(ignore || DYNAMICTOP <= TOTAL_MEMORY);

  return; // It is legitimate to violate the load-store assumption in this case
  if (type && type.charAt(type.length-1) == '*') type = 'i32'; // pointers are ints, for our purposes here
  // Note that this will pass even with unions: You can store X, load X, then store Y and load Y.
  // You cannot, however, do the nonportable act of store X and load Y!
  if (store) {
    HEAP_HISTORY[dest] = ignore ? null : type;
  } else {
    if (type === null) return;
    var history = HEAP_HISTORY[dest];
    if (history === null) return;
    if (!ignore)
      assert(history, 'Must have a history for a safe heap load! ' + dest + ':' + type); // Warning - bit fields in C structs cause loads+stores for each store, so
                                                                                         //           they will show up here...
//    assert((history && history[0]) /* || HEAP[dest] === 0 */, "Loading from where there was no store! " + dest + ',' + HEAP[dest] + ',' + type + ', \n\n' + stackTrace() + '\n');
//    if (history[0].type !== type) {
    if (history !== type && !ignore) {
      Module.print('Load-store consistency assumption failure! ' + dest);
      Module.print('\n');
      Module.print(JSON.stringify(history));
      Module.print('\n');
      Module.print('LOAD: ' + type + ', ' + stackTrace());
      Module.print('\n');
      SAFE_HEAP_ERRORS++;
      assert(SAFE_HEAP_ERRORS <= ACCEPTABLE_SAFE_HEAP_ERRORS, 'Load-store consistency assumption failure!');
    }
  }
}

function SAFE_HEAP_STORE(dest, value, type, ignore) {

  if (!ignore && !value && (value === null || value === undefined)) {
    throw('Warning: Writing an invalid value of ' + JSON.stringify(value) + ' at ' + dest + ' :: ' + stackTrace() + '\n');
  }
  //if (!ignore && (value === Infinity || value === -Infinity || isNaN(value))) throw [value, typeof value, stackTrace()];

  SAFE_HEAP_ACCESS(dest, type, true, ignore, value);
  if (dest in HEAP_WATCHED) {
    Module.print((new Error()).stack);
    throw "Bad store!" + dest;
  }

  // Check alignment
  switch(type) {
    case 'i16': assert(dest % 2 == 0); break;
    case 'i32': assert(dest % 4 == 0); break;
    case 'i64': assert(dest % 8 == 0); break;
    case 'float': assert(dest % 4 == 0); break;
    case 'double': assert(dest % 4 == 0); break;
  }

  setValue(dest, value, type, 1);
}

function SAFE_HEAP_LOAD(dest, type, unsigned, ignore) {
  SAFE_HEAP_ACCESS(dest, type, false, ignore);


  // Check alignment
  switch(type) {
    case 'i16': assert(dest % 2 == 0); break;
    case 'i32': assert(dest % 4 == 0); break;
    case 'i64': assert(dest % 8 == 0); break;
    case 'float': assert(dest % 4 == 0); break;
    case 'double': assert(dest % 4 == 0); break;
  }

  var ret = getValue(dest, type, 1);
  if (unsigned) ret = unSign(ret, parseInt(type.substr(1)), 1);
  return ret;
}

function SAFE_HEAP_COPY_HISTORY(dest, src) {
  HEAP_HISTORY[dest] = HEAP_HISTORY[src];
  SAFE_HEAP_ACCESS(dest, HEAP_HISTORY[dest] || null, true, false);
}

function SAFE_HEAP_FILL_HISTORY(from, to, type) {
  for (var i = from; i < to; i++) {
    HEAP_HISTORY[i] = type;
  }
}

//==========================================






//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': SAFE_HEAP_STORE(ptr, value, "i1", 0); break;
      case 'i8': SAFE_HEAP_STORE(ptr, value, "i8", 0); break;
      case 'i16': SAFE_HEAP_STORE(ptr, value, "i16", 0); break;
      case 'i32': SAFE_HEAP_STORE(ptr, value, "i32", 0); break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],SAFE_HEAP_STORE(ptr, tempI64[0], "i32", 0),SAFE_HEAP_STORE((ptr)+(4), tempI64[1], "i32", 0)); break;
      case 'float': SAFE_HEAP_STORE(ptr, value, "float", 0); break;
      case 'double': SAFE_HEAP_STORE(ptr, value, "double", 0); break;
      default: abort('invalid type for setValue: ' + type);
    }
  }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': return SAFE_HEAP_LOAD(ptr, "i1", 0, 0);
      case 'i8': return SAFE_HEAP_LOAD(ptr, "i8", 0, 0);
      case 'i16': return SAFE_HEAP_LOAD(ptr, "i16", 0, 0);
      case 'i32': return SAFE_HEAP_LOAD(ptr, "i32", 0, 0);
      case 'i64': return SAFE_HEAP_LOAD(ptr, "i64", 0, 0);
      case 'float': return SAFE_HEAP_LOAD(ptr, "float", 0, 0);
      case 'double': return SAFE_HEAP_LOAD(ptr, "double", 0, 0);
      default: abort('invalid type for setValue: ' + type);
    }
  }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      SAFE_HEAP_STORE(ptr, 0, "i32", 1);
    }
    stop = ret + size;
    while (ptr < stop) {
      SAFE_HEAP_STORE(ptr++, 0, "i8", 1);
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = SAFE_HEAP_LOAD((ptr)+(i), "i8", 1, 0);
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = SAFE_HEAP_LOAD((ptr)+(i), "i8", 1, 0);
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = SAFE_HEAP_LOAD((ptr)+(i*2), "i16", 0, 0);
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    SAFE_HEAP_STORE((outPtr)+(i*2), codeUnit, "i16", 0);
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE((outPtr)+(str.length*2), 0, "i16", 0);
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = SAFE_HEAP_LOAD((ptr)+(i*4), "i32", 0, 0);
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    SAFE_HEAP_STORE((outPtr)+(iChar*4), codeUnit, "i32", 0);
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE((outPtr)+(iChar*4), 0, "i32", 0);
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    return rawList ? list : ret + flushList();
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    SAFE_HEAP_STORE((buffer)+(i), chr, "i8", 0);
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    SAFE_HEAP_STORE((buffer)+(i), array[i], "i8", 0);
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    SAFE_HEAP_STORE((buffer)+(i), str.charCodeAt(i), "i8", 0);
  }
  if (!dontAddNull) SAFE_HEAP_STORE((buffer)+(str.length), 0, "i8", 0);
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 16544;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });















































































































var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































/* memory initializer */ allocate([136,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,255,255,255,10,0,0,0,0,0,0,0,0,0,0,0,135,0,0,0,10,56,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,77,0,0,0,16,5,0,0,0,0,0,0,0,0,0,0,60,0,0,0,16,6,0,0,0,0,0,0,0,0,0,0,64,0,0,0,16,5,0,0,0,0,0,0,0,0,0,0,15,0,0,0,16,6,0,0,0,0,0,0,0,0,0,0,134,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,133,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,11,24,0,0,0,0,0,0,0,0,0,0,75,0,0,0,11,16,0,0,0,0,0,0,0,0,0,0,73,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,27,1,0,0,0,0,0,0,0,0,0,0,70,0,0,0,27,2,0,0,0,0,0,0,0,0,0,0,63,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,11,8,0,0,0,0,0,0,0,0,0,0,56,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,10,24,0,0,0,0,0,0,0,0,0,0,52,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,7,0,0,0,1,0,0,128,0,0,0,0,251,255,255,255,255,255,239,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,7,0,0,0,255,255,255,127,0,0,0,0,251,255,255,255,255,255,239,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,34,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,38,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,155,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,130,0,0,0,124,0,0,0,124,0,0,0,124,0,0,0,123,0,0,0,122,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,128,0,0,0,113,0,0,0,119,0,0,0,110,0,0,0,107,0,0,0,107,0,0,0,124,0,0,0,105,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,45,68,84,251,33,9,64,24,45,68,84,251,33,9,64,24,45,68,84,251,33,9,64,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,103,96,166,251,33,249,63,0,0,0,0,0,0,0,0,24,45,68,84,251,33,9,64,181,190,100,200,241,103,237,63,158,250,235,255,120,128,102,64,98,145,56,64,151,64,154,64,101,200,195,169,80,0,52,64,98,145,56,64,151,64,138,64,79,100,161,64,145,180,175,60,24,45,68,84,251,33,25,64,26,164,65,26,164,65,122,63,125,60,153,217,176,106,95,191,35,255,24,43,30,149,75,63,20,56,129,19,56,129,67,191,26,160,1,26,160,1,74,63,23,108,193,22,108,193,102,191,85,85,85,85,85,85,181,63,181,190,100,200,241,103,253,63,0,0,0,0,0,0,0,0,84,1,0,0,0,0,0,0,170,0,0,0,0,0,0,0,107,239,180,145,248,91,236,63,55,159,125,174,70,197,44,64,246,134,155,176,227,47,105,64,57,182,122,4,194,170,131,192,98,225,137,215,148,54,150,192,171,168,253,118,36,245,177,64,197,28,210,190,22,26,188,64,46,5,243,176,9,160,36,192,130,231,244,25,228,103,38,64,53,230,8,159,225,243,20,64,191,28,216,127,32,93,79,192,250,34,193,181,96,4,145,64,71,228,145,245,188,121,168,64,3,228,152,85,166,20,109,64,7,53,52,107,227,54,232,191,107,239,180,145,248,91,236,63,55,159,125,174,70,197,44,64,246,134,155,176,227,47,105,64,57,182,122,4,194,170,131,192,98,225,137,215,148,54,150,192,171,168,253,118,36,245,177,64,197,28,210,190,22,26,188,64,46,5,243,176,9,160,36,192,130,231,244,25,228,103,38,64,53,230,8,159,225,243,20,64,191,28,216,127,32,93,79,192,250,34,193,181,96,4,145,64,71,228,145,245,188,121,168,64,3,228,152,85,166,20,109,64,7,53,52,107,227,54,232,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,175,84,181,187,177,107,2,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,127,0,0,0,123,0,0,0,113,0,0,0,108,0,0,0,231,3,0,0,0,0,0,0,127,0,0,0,122,0,0,0,113,0,0,0,124,0,0,0,109,0,0,0,231,3,0,0,126,0,0,0,105,0,0,0,122,0,0,0,123,0,0,0,231,3,0,0,0,0,0,0,176,15,0,0,152,15,0,0,128,15,0,0,104,15,0,0,88,15,0,0,64,15,0,0,48,15,0,0,24,15,0,0,8,15,0,0,240,14,0,0,224,14,0,0,200,14,0,0,176,14,0,0,160,14,0,0,136,14,0,0,120,14,0,0,96,14,0,0,240,13,0,0,216,13,0,0,192,13,0,0,0,0,0,0,0,0,0,0,123,0,0,0,113,0,0,0,118,0,0,0,116,0,0,0,231,3,0,0,0,0,0,0,123,0,0,0,113,0,0,0,231,3,0,0,0,0,0,0,123,0,0,0,105,0,0,0,126,0,0,0,109,0,0,0,231,3,0,0,0,0,0,0,122,0,0,0,125,0,0,0,118,0,0,0,231,3,0,0,122,0,0,0,109,0,0,0,105,0,0,0,108,0,0,0,231,3,0,0,0,0,0,0,120,0,0,0,107,0,0,0,119,0,0,0,120,0,0,0,129,0,0,0,231,3,0,0,119,0,0,0,110,0,0,0,110,0,0,0,231,3,0,0,116,0,0,0,119,0,0,0,105,0,0,0,108,0,0,0,231,3,0,0,0,0,0,0,116,0,0,0,113,0,0,0,106,0,0,0,231,3,0,0,111,0,0,0,122,0,0,0,120,0,0,0,123,0,0,0,231,3,0,0,0,0,0,0,111,0,0,0,122,0,0,0,120,0,0,0,231,3,0,0,111,0,0,0,122,0,0,0,119,0,0,0,125,0,0,0,120,0,0,0,231,3,0,0,110,0,0,0,118,0,0,0,123,0,0,0,231,3,0,0,109,0,0,0,122,0,0,0,105,0,0,0,123,0,0,0,109,0,0,0,231,3,0,0,108,0,0,0,122,0,0,0,119,0,0,0,120,0,0,0,231,3,0,0,0,0,0,0,107,0,0,0,119,0,0,0,120,0,0,0,129,0,0,0,231,3,0,0,0,0,0,0,107,0,0,0,116,0,0,0,109,0,0,0,105,0,0,0,122,0,0,0,231,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,80,57,0,0,0,0,0,0,64,49,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,105,0,0,0,231,3,0,0,0,0,0,0,125,0,0,0,116,0,0,0,231,3,0,0,0,0,0,0,124,0,0,0,130,0,0,0,231,3,0,0,0,0,0,0,124,0,0,0,124,0,0,0,231,3,0,0,0,0,0,0,124,0,0,0,123,0,0,0,231,3,0,0,0,0,0,0,124,0,0,0,107,0,0,0,231,3,0,0,0,0,0,0,122,0,0,0,116,0,0,0,231,3,0,0,0,0,0,0,120,0,0,0,127,0,0,0,231,3,0,0,0,0,0,0,120,0,0,0,120,0,0,0,231,3,0,0,0,0,0,0,118,0,0,0,116,0,0,0,231,3,0,0,0,0,0,0,118,0,0,0,107,0,0,0,231,3,0,0,0,0,0,0,116,0,0,0,128,0,0,0,231,3,0,0,0,0,0,0,116,0,0,0,107,0,0,0,231,3,0,0,0,0,0,0,113,0,0,0,119,0,0,0,231,3,0,0,0,0,0,0,112,0,0,0,124,0,0,0,231,3,0,0,0,0,0,0,110,0,0,0,128,0,0,0,231,3,0,0,0,0,0,0,110,0,0,0,107,0,0,0,231,3,0,0,0,0,0,0,109,0,0,0,128,0,0,0,231,3,0,0,0,0,0,0,109,0,0,0,105,0,0,0,231,3,0,0,0,0,0,0,108,0,0,0,116,0,0,0,231,3,0,0,0,0,0,0,107,0,0,0,124,0,0,0,231,3,0,0,0,0,0,0,107,0,0,0,122,0,0,0,231,3,0,0,0,0,0,0,105,0,0,0,126,0,0,0,231,3,0,0,0,0,0,0,105,0,0,0,113,0,0,0,231,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([232,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,136,0,0,0,133,0,0,0,66,0,0,0,67,0,0,0,134,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,135,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,0,0,0,0,248,31,0,0,0,50,0,0,136,46,0,0,208,43,0,0,56,41,0,0,144,38,0,0,112,35,0,0,200,32,0,0,200,29,0,0,0,27,0,0,248,60,0,0,160,57,0,0,80,55,0,0,104,52,0,0,200,51,0,0,80,51,0,0,152,50,0,0,40,50,0,0,168,49,0,0,56,49,0,0,232,48,0,0,120,48,0,0,32,48,0,0,208,47,0,0,96,47,0,0,32,47,0,0,240,46,0,0,184,46,0,0,128,46,0,0,48,46,0,0,200,45,0,0,64,45,0,0,232,44,0,0,184,44,0,0,128,44,0,0,80,44,0,0,32,44,0,0,248,43,0,0,200,43,0,0,144,43,0,0,80,43,0,0,224,42,0,0,136,42,0,0,80,42,0,0,16,42,0,0,248,41,0,0,192,41,0,0,136,41,0,0,48,41,0,0,208,40,0,0,160,40,0,0,32,40,0,0,232,39,0,0,184,39,0,0,120,39,0,0,56,39,0,0,0,39,0,0,208,38,0,0,136,38,0,0,0,38,0,0,176,37,0,0,64,37,0,0,248,36,0,0,192,36,0,0,120,36,0,0,32,36,0,0,208,35,0,0,168,35,0,0,104,35,0,0,40,35,0,0,216,34,0,0,88,34,0,0,16,34,0,0,208,33,0,0,136,33,0,0,80,33,0,0,16,33,0,0,224,32,0,0,120,32,0,0,56,32,0,0,240,31,0,0,152,31,0,0,88,31,0,0,48,31,0,0,224,30,0,0,144,30,0,0,56,30,0,0,0,30,0,0,192,29,0,0,112,29,0,0,72,29,0,0,208,28,0,0,152,28,0,0,88,28,0,0,16,28,0,0,176,27,0,0,96,27,0,0,32,27,0,0,248,26,0,0,208,26,0,0,168,62,0,0,80,62,0,0,40,62,0,0,0,62,0,0,216,61,0,0,168,61,0,0,88,61,0,0,56,61,0,0,240,60,0,0,168,60,0,0,32,60,0,0,144,59,0,0,72,59,0,0,16,59,0,0,208,58,0,0,136,58,0,0,8,58,0,0,216,57,0,0,144,57,0,0,72,57,0,0,240,56,0,0,128,56,0,0,96,56,0,0,48,56,0,0,248,55,0,0,200,55,0,0,160,55,0,0,128,55,0,0,72,55,0,0,0,55,0,0,200,54,0,0,64,54,0,0,32,54,0,0,200,53,0,0,120,53,0,0,56,53,0,0,240,52,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,96,117,0,0,0,0,0,0,49,48,48,32,45,32,102,105,108,101,32,100,111,101,115,110,39,116,32,101,120,105,115,116,46,0,0,0,0,0,0,0,96,116,0,0,0,0,0,0,41,0,0,0,0,0,0,0,57,57,32,45,32,117,110,107,110,111,119,110,32,99,111,109,109,97,110,100,46,0,0,0,96,115,0,0,0,0,0,0,57,56,32,45,32,110,111,32,114,101,116,117,114,110,101,100,32,118,97,108,117,101,32,102,114,111,109,32,117,115,101,114,32,102,117,110,99,116,105,111,110,32,119,104,101,110,32,101,120,101,99,116,101,100,46,0,96,114,0,0,0,0,0,0,57,55,32,45,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,32,110,97,109,101,115,32,97,110,100,32,108,97,98,101,108,115,32,99,97,110,39,116,32,98,101,32,115,121,110,111,110,121,109,115,32,105,110,32,97,32,102,117,110,99,116,105,111,110,46,0,0,0,96,113,0,0,0,0,0,0,57,54,32,45,32,97,32,108,111,99,97,108,32,110,97,109,101,32,99,97,110,39,116,32,98,101,32,114,101,112,101,97,116,101,100,32,105,110,32,97,32,102,117,110,99,116,105,111,110,32,104,101,97,100,101,114,46,0,0,0,0,0,0,0,108,111,97,100,32,102,114,111,109,32,119,104,101,114,101,63,0,0,0,0,0,0,0,0,96,112,0,0,0,0,0,0,57,53,32,45,32,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,61,32,114,105,103,104,116,32,97,114,114,111,119,32,116,104,101,110,32,99,97,112,95,110,117,108,108,32,105,110,32,102,117,110,99,116,105,111,110,46,0,0,0,0,96,111,0,0,0,0,0,0,57,52,32,45,32,117,115,101,114,32,102,117,110,99,116,105,111,110,32,119,105,116,104,111,117,116,32,114,101,115,117,108,116,32,109,117,115,116,32,115,116,97,110,100,32,97,108,111,110,101,46,0,0,0,0,0,96,110,0,0,0,0,0,0,57,51,32,45,32,105,110,118,97,108,105,100,32,115,121,110,116,97,120,32,105,110,32,102,117,110,99,116,105,111,110,32,104,101,97,100,101,114,46,0,46,0,0,0,0,0,0,0,96,109,0,0,0,0,0,0,49,48,32,45,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,114,101,115,104,97,112,101,32,109,117,115,116,32,98,101,32,111,102,32,114,97,110,107,32,48,32,111,114,32,49,46,0,0,0,57,50,32,45,32,118,97,114,105,97,98,108,101,32,115,105,122,101,32,105,115,32,116,111,111,32,98,105,103,32,102,111,114,32,116,104,105,115,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,46,0,0,96,108,0,0,0,0,0,0,57,49,32,45,32,99,97,110,39,116,32,97,115,115,105,103,110,32,116,111,32,97,32,108,97,98,101,108,46,0,0,0,96,107,0,0,0,0,0,0,57,48,32,45,32,105,110,112,117,116,32,116,111,32,113,117,97,100,32,102,120,32,109,47,98,32,99,104,97,114,97,99,116,101,114,32,109,97,116,114,105,120,44,32,111,114,32,110,101,115,116,101,100,32,118,101,99,116,111,114,46,0,0,0,46,44,42,48,95,0,0,0,96,106,0,0,0,0,0,0,40,0,0,0,0,0,0,0,56,57,32,45,32,97,120,105,115,32,105,110,100,105,99,97,116,101,100,32,119,104,101,114,101,32,105,116,39,115,32,110,111,116,32,97,99,99,101,112,116,101,100,46,0,0,0,0,96,105,0,0,0,0,0,0,56,56,32,45,32,115,121,115,116,101,109,32,118,97,114,105,97,98,108,101,32,110,111,116,32,121,101,116,32,105,109,112,108,101,109,101,110,116,101,100,46,0,0,0,0,0,0,0,96,104,0,0,0,0,0,0,56,55,32,45,32,101,120,112,111,110,101,110,116,32,109,117,115,116,32,97,112,112,114,111,120,105,109,97,116,101,32,114,97,116,105,111,110,97,108,32,110,117,109,98,101,114,32,105,102,32,108,101,102,116,32,110,101,103,97,116,105,118,101,32,116,111,32,112,111,119,101,114,46,0,0,0,0,0,0,0,96,103,0,0,0,0,0,0,56,54,32,45,32,100,101,110,111,109,105,110,97,116,111,114,32,111,102,32,101,120,112,111,110,101,110,116,32,109,117,115,116,32,98,101,32,111,100,100,32,105,102,32,108,101,102,116,32,110,101,103,97,116,105,118,101,32,116,111,32,112,111,119,101,114,46,0,0,0,0,0,96,102,0,0,0,0,0,0,56,53,32,45,32,108,101,102,116,32,118,97,108,117,101,32,116,111,32,99,105,114,99,117,108,97,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,98,101,32,105,110,116,101,103,101,114,32,45,49,50,32,116,104,114,117,32,49,50,46,0,0,0,0,0,0,0,96,101,0,0,0,0,0,0,56,52,32,45,32,97,114,116,97,110,104,32,97,114,103,117,109,101,110,116,32,62,32,49,46,0,0,0,0,0,0,0,96,100,0,0,0,0,0,0,56,51,32,45,32,97,120,105,115,32,109,117,115,116,32,98,101,32,97,32,111,110,101,45,101,108,101,109,101,110,116,32,118,101,99,116,111,114,32,111,114,32,115,99,97,108,97,114,46,0,0,0,0,0,0,0,96,99,0,0,0,0,0,0,57,32,45,32,105,110,118,97,108,105,100,32,97,120,105,115,32,118,97,108,117,101,0,0,56,50,32,45,32,116,111,107,101,110,32,101,120,112,101,99,116,101,100,32,116,111,32,116,104,101,32,108,101,102,116,32,111,102,32,108,101,102,116,32,98,114,97,99,107,101,116,46,0,0,0,0,0,0,0,0,96,98,0,0,0,0,0,0,32,0,0,0,0,0,0,0,56,49,32,45,32,115,101,109,105,99,111,108,111,110,32,110,111,116,32,102,111,117,110,100,32,119,104,101,110,32,101,120,112,101,99,116,101,100,32,105,110,32,101,120,101,99,117,116,101,46,0,0,0,0,0,0,96,97,0,0,0,0,0,0,56,48,32,45,32,108,101,102,116,32,98,114,97,99,107,101,116,32,110,111,116,32,102,111,117,110,100,32,119,104,101,110,32,101,120,112,101,99,116,101,100,32,105,110,32,101,120,101,99,117,116,101,46,0,0,0,96,95,0,0,0,0,0,0,55,57,32,45,32,109,105,115,115,105,110,103,32,115,99,97,108,97,114,32,102,117,110,99,116,105,111,110,32,116,111,32,116,104,101,32,108,101,102,116,32,111,102,32,114,101,100,117,99,101,47,115,99,97,110,32,111,112,101,114,97,116,111,114,46,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,110,111,116,32,102,111,117,110,100,0,0,0,0,0,0,0,96,92,0,0,0,0,0,0,55,56,32,45,32,110,117,108,108,32,111,117,116,112,117,116,32,102,114,111,109,32,100,111,116,32,112,114,111,100,117,99,116,46,0,0,0,0,0,0,96,90,0,0,0,0,0,0,55,55,32,45,32,97,112,108,32,110,117,108,108,32,40,106,111,116,41,32,109,117,115,116,32,98,101,32,115,117,99,99,101,101,100,101,100,32,98,121,32,97,32,112,101,114,105,111,100,46,0,0,0,0,0,0,96,88,0,0,0,0,0,0,55,54,32,45,32,115,99,97,110,32,100,111,101,115,32,110,111,116,32,97,99,99,101,112,116,32,97,32,108,101,102,116,32,97,114,103,117,109,101,110,116,46,0,0,0,0,0,0,96,87,0,0,0,0,0,0,55,53,32,45,32,111,110,108,121,32,101,113,117,97,108,47,110,111,116,32,101,113,117,97,108,32,99,97,110,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,99,104,97,114,97,99,116,101,114,32,100,97,116,97,46,0,0,0,0,0,96,86,0,0,0,0,0,0,55,52,32,45,32,117,110,101,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,111,112,101,114,97,110,100,32,116,111,32,100,111,116,32,112,114,111,100,117,99,116,46,0,0,0,0,0,0,0,0,96,85,0,0,0,0,0,0,55,51,32,45,32,117,110,107,110,111,119,110,32,109,111,110,97,100,105,99,32,102,117,110,99,116,105,111,110,46,0,0,66,97,100,32,115,121,110,116,97,120,32,102,111,114,32,68,69,76,32,100,105,115,112,108,97,121,46,0,0,0,0,0,96,82,0,0,0,0,0,0,56,32,45,32,114,105,103,104,116,32,97,114,103,117,109,101,110,116,32,116,111,32,109,100,105,118,105,100,101,32,111,114,32,109,97,116,105,110,118,32,105,115,110,39,116,32,105,110,118,101,114,116,105,98,108,101,46,0,0,0,0,0,0,0,55,50,32,45,32,105,110,118,97,108,105,100,32,115,99,97,108,97,114,32,102,117,110,99,116,105,111,110,32,117,115,101,100,32,119,105,116,104,32,114,101,100,117,99,101,32,111,114,32,115,99,97,110,46,0,0,96,79,0,0,0,0,0,0,55,49,32,45,32,110,117,108,108,32,97,114,103,117,109,101,110,116,32,100,117,114,105,110,103,32,109,111,110,97,100,105,99,32,112,114,111,99,101,115,115,105,110,103,32,105,110,32,109,111,100,117,108,101,32,101,120,101,99,109,111,110,98,46,0,0,0,0,0,0,0,0,96,73,0,0,0,0,0,0,55,48,32,45,32,109,105,115,115,105,110,103,32,114,105,103,104,116,32,97,114,103,117,109,101,110,116,32,100,117,114,105,110,103,32,101,120,101,99,117,116,101,46,0,0,0,0,0,32,0,0,0,0,0,0,0,96,71,0,0,0,0,0,0,38,0,0,0,0,0,0,0,54,57,32,45,32,117,110,107,110,111,119,110,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,100,117,114,105,110,103,32,101,120,101,99,117,116,101,46,0,0,0,0,0,0,96,67,0,0,0,0,0,0,54,56,32,45,32,115,99,97,108,97,114,32,99,97,110,39,116,32,98,101,32,105,110,100,101,120,101,100,46,0,0,0,96,65,0,0,0,0,0,0,54,55,32,45,32,109,105,115,115,105,110,103,32,109,111,110,97,100,105,99,32,97,114,103,117,109,101,110,116,32,100,117,114,105,110,103,32,101,120,101,99,117,116,101,32,112,114,111,99,101,115,115,105,110,103,46,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,96,49,0,0,0,0,0,0,54,54,32,45,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,97,115,115,105,103,110,109,101,110,116,32,109,117,115,116,32,98,101,32,97,32,118,97,114,105,97,98,108,101,32,110,97,109,101,46,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,37,115,0,0,0,0,0,96,47,0,0,0,0,0,0,54,53,32,45,32,117,110,107,110,111,119,110,32,102,117,110,99,116,105,111,110,32,102,111,117,110,100,32,100,117,114,105,110,103,32,100,121,97,100,105,99,32,101,120,101,99,117,116,101,32,112,114,111,99,101,115,115,105,110,103,46,0,0,0,95,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,54,52,32,45,32,117,110,101,120,112,101,99,116,101,100,32,98,114,97,99,107,101,116,101,100,32,118,97,108,117,101,46,0,0,0,0,0,0,0,0,94,61,0,0,0,0,0,0,54,51,32,45,32,109,105,115,115,105,110,103,32,111,112,101,114,97,116,111,114,47,102,117,110,99,116,105,111,110,32,100,117,114,105,110,103,32,101,120,101,99,117,116,101,32,112,114,111,99,101,115,115,105,110,103,46,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,55,32,45,32,114,111,119,32,100,105,109,101,110,115,105,111,110,32,109,117,115,116,32,109,97,116,99,104,32,105,110,32,116,104,101,32,116,119,111,32,97,114,103,117,109,101,110,116,115,32,116,111,32,109,100,105,118,105,100,101,46,0,0,0,54,50,32,45,32,105,110,118,97,108,105,100,32,114,101,115,117,108,116,32,102,114,111,109,32,101,120,101,99,117,116,101,46,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,37,115,91,37,100,93,0,0,37,115,91,37,100,93,0,0,54,49,32,45,32,115,116,97,99,107,32,110,111,116,32,101,109,112,116,121,32,97,116,32,101,110,100,32,111,102,32,101,120,112,114,101,115,115,105,111,110,32,105,110,32,101,120,101,99,117,116,101,46,0,0,0,91,0,0,0,0,0,0,0,37,115,91,37,100,93,0,0,54,48,32,45,32,109,105,115,115,105,110,103,32,114,101,115,117,108,116,32,100,117,114,105,110,103,32,101,120,101,99,117,116,101,46,0,0,0,0,0,84,104,101,32,101,114,114,111,114,32,111,99,99,117,114,114,101,100,32,105,110,32,102,117,110,99,116,105,111,110,32,37,115,0,0,0,0,0,0,0,78,117,109,98,101,114,32,110,111,116,32,119,104,101,114,101,32,101,120,112,101,99,116,101,100,32,105,110,32,68,69,76,32,101,100,105,116,46,0,0,90,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,53,57,32,45,32,97,114,103,117,109,101,110,116,32,110,111,116,32,102,111,117,110,100,32,119,104,101,114,101,32,101,120,112,101,99,116,101,100,32,100,117,114,105,110,103,32,101,120,101,99,117,116,101,46,0,0,89,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,37,46,37,100,101,0,0,53,56,32,45,32,115,121,110,116,97,120,32,101,114,114,111,114,46,0,0,0,0,0,0,88,0,0,0,0,0,0,0,53,55,32,45,32,97,114,103,117,109,101,110,116,32,116,111,32,101,120,101,99,117,116,101,32,109,117,115,116,32,98,101,32,99,104,97,114,97,99,116,101,114,46,0,0,0,0,0,87,0,0,0,0,0,0,0,53,54,32,45,32,97,114,103,117,109,101,110,116,32,116,111,32,101,120,101,99,117,116,101,32,104,97,115,32,114,97,110,107,32,103,114,101,97,116,101,114,32,116,104,97,110,32,111,110,101,46,0,0,0,0,0,86,0,0,0,0,0,0,0,37,37,37,100,46,37,100,102,0,0,0,0,0,0,0,0,37,37,37,100,46,37,100,101,0,0,0,0,0,0,0,0,53,53,32,45,32,101,114,114,111,114,32,105,110,32,97,115,115,105,103,110,46,0,0,0,85,0,0,0,0,0,0,0,53,52,32,45,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,32,105,110,32,105,110,100,101,120,109,46,0,0,0,0,0,0,84,0,0,0,0,0,0,0,37,102,0,0,0,0,0,0,53,51,32,45,32,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,105,110,100,105,99,101,115,32,116,111,32,105,110,100,101,120,109,0,0,83,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,54,32,45,32,35,32,114,111,119,115,32,109,47,98,32,62,61,32,35,32,99,111,108,117,109,110,115,32,105,110,32,114,105,103,104,116,32,97,114,103,117,109,101,110,116,32,116,111,32,109,100,105,118,105,100,101,32,97,110,100,32,109,97,116,105,110,118,46,0,0,0,0,53,50,32,45,32,97,120,105,115,32,116,111,111,32,108,97,114,103,101,32,105,110,32,108,97,109,105,110,97,116,101,46,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,53,49,32,45,32,97,120,105,115,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,32,105,110,32,108,97,109,105,110,97,116,101,46,0,81,0,0,0,0,0,0,0,53,48,32,45,32,115,104,97,112,101,115,32,111,102,32,108,101,102,116,32,97,110,100,32,114,105,103,104,116,32,109,117,115,116,32,109,97,116,99,104,32,105,110,32,108,97,109,105,110,97,116,101,46,0,0,0,66,97,100,32,115,121,110,116,97,120,32,102,111,114,32,68,69,76,32,109,111,100,105,102,121,46,0,0,0,0,0,0,80,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,52,57,32,45,32,115,104,97,112,101,115,32,111,102,32,108,101,102,116,32,97,110,100,32,114,105,103,104,116,32,101,120,99,108,117,100,105,110,103,32,97,120,105,115,32,109,117,115,116,32,109,97,116,99,104,32,105,110,32,114,111,116,97,116,101,46,0,0,0,0,0,0,79,0,0,0,0,0,0,0,52,56,32,45,32,114,105,103,104,116,32,97,114,103,117,109,101,110,116,32,116,111,32,114,111,116,97,116,101,32,104,97,115,32,98,97,100,32,115,104,97,112,101,46,0,0,0,0,78,0,0,0,0,0,0,0,52,55,32,45,32,97,114,103,117,109,101,110,116,32,116,111,32,103,114,97,100,101,32,99,97,110,39,116,32,98,101,32,99,104,97,114,97,99,116,101,114,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,52,54,32,45,32,101,114,114,111,114,46,0,0,0,0,0,76,0,0,0,0,0,0,0,52,53,32,45,32,97,114,103,117,109,101,110,116,32,116,111,32,105,110,100,101,120,103,101,110,32,109,117,115,116,32,98,101,32,97,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,46,0,0,0,75,0,0,0,0,0,0,0,52,52,32,45,32,110,117,108,108,32,97,114,103,117,109,101,110,116,32,116,111,32,113,117,97,100,111,117,116,32,111,114,32,101,120,101,99,100,121,97,109,46,0,0,0,0,0,0,74,0,0,0,0,0,0,0,52,51,32,45,32,108,101,102,116,32,109,117,115,116,32,98,101,32,60,61,32,114,105,103,104,116,32,105,110,32,100,101,97,108,46,0,0,0,0,0,66,114,97,99,107,101,116,32,110,111,116,32,102,111,117,110,100,32,119,104,101,114,101,32,101,120,112,101,99,116,101,100,46,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,53,32,45,32,97,114,103,117,109,101,110,116,115,32,116,111,32,109,100,105,118,105,100,101,32,109,117,115,116,32,104,97,118,101,32,114,97,110,107,115,32,60,61,32,50,46,0,0,52,50,32,45,32,97,114,103,117,109,101,110,116,115,32,116,111,32,100,101,97,108,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,115,46,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,37,99,0,0,0,0,0,0,52,49,32,45,32,97,114,103,117,109,101,110,116,115,32,116,111,32,100,101,97,108,32,109,117,115,116,32,98,101,32,49,32,105,116,101,109,32,108,111,110,103,46,0,0,0,0,0,71,0,0,0,0,0,0,0,52,48,32,45,32,117,110,115,117,112,112,111,114,116,101,100,32,118,97,108,117,101,115,32,116,111,32,98,105,110,111,109,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,70,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,51,57,32,45,32,114,101,97,108,32,100,105,118,105,115,105,111,110,32,98,121,32,48,46,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,51,56,32,45,32,105,110,116,101,103,101,114,32,100,105,118,105,115,105,111,110,32,98,121,32,48,46,0,0,0,0,0,68,0,0,0,0,0,0,0,51,55,32,45,32,97,114,103,117,109,101,110,116,32,116,111,32,105,114,111,108,108,32,105,115,32,108,101,115,115,32,116,104,97,110,32,48,46,0,0,67,0,0,0,0,0,0,0,51,54,32,45,32,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,111,32,102,97,99,116,111,114,105,97,108,46,0,0,0,0,0,66,0,0,0,0,0,0,0,51,53,32,45,32,98,97,100,32,110,117,109,98,101,114,32,111,102,32,114,101,112,108,97,99,101,109,101,110,116,115,32,105,110,32,105,110,100,101,120,118,46,0,0,0,0,0,0,65,0,0,0,0,0,0,0,51,52,32,45,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,51,51,32,45,32,108,101,102,116,32,105,115,32,109,105,115,115,105,110,103,32,97,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,32,102,114,111,109,32,48,32,116,111,32,110,32,105,110,32,116,114,97,110,115,112,111,115,101,46,0,0,0,0,0,0,0,37,115,37,115,37,115,32,0,63,0,0,0,0,0,0,0,52,32,45,32,105,110,118,97,108,105,100,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,99,111,109,112,114,101,115,115,47,101,120,112,97,110,100,32,100,101,114,105,118,101,100,32,102,117,110,99,116,105,111,110,46,0,0,51,50,32,45,32,110,111,32,109,97,116,99,104,44,32,108,101,102,116,32,99,111,117,110,116,32,97,110,100,32,114,105,103,104,116,39,115,32,114,97,110,107,32,105,110,32,116,114,97,110,115,112,111,115,101,46,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,51,49,32,45,32,110,111,32,109,97,116,99,104,44,32,108,101,102,116,32,99,111,117,110,116,32,97,110,100,32,114,105,103,104,116,39,115,32,97,120,105,115,32,105,110,32,101,120,112,97,110,100,46,0,0,0,66,97,100,32,115,121,110,116,97,120,32,102,111,114,32,68,69,76,32,100,101,108,101,116,101,46,0,0,0,0,0,0,61,0,0,0,0,0,0,0,51,48,32,45,32,110,111,32,109,97,116,99,104,44,32,99,111,117,110,116,32,111,102,32,110,111,110,122,101,114,111,32,108,101,102,116,32,105,116,101,109,115,32,97,110,100,32,114,105,103,104,116,39,115,32,97,120,105,115,32,105,110,32,101,120,112,97,110,100,46,0,0,60,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,50,57,32,45,32,97,32,119,105,100,116,104,32,105,115,32,116,111,111,32,115,109,97,108,108,32,105,110,32,102,111,114,109,97,116,46,0,0,0,0,59,0,0,0,0,0,0,0,50,56,32,45,32,97,32,119,105,100,116,104,32,105,115,32,116,111,111,32,108,97,114,103,101,32,105,110,32,102,111,114,109,97,116,46,0,0,0,0,46,97,112,108,0,0,0,0,58,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,50,55,32,45,32,111,117,116,32,111,102,32,109,97,105,110,32,115,116,111,114,97,103,101,46,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,50,54,32,45,32,116,104,101,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,102,111,114,109,97,116,32,104,97,115,32,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,46,0,0,56,0,0,0,0,0,0,0,66,97,100,32,115,121,110,116,97,120,32,105,110,32,98,114,97,99,107,101,116,115,46,0,94,32,37,115,10,0,0,0,50,53,32,45,32,116,104,101,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,100,121,97,100,105,99,32,102,111,114,109,97,116,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,114,97,110,107,46,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,50,52,32,45,32,100,105,109,101,110,115,105,111,110,115,32,109,117,115,116,32,99,111,110,102,111,114,109,32,105,110,32,105,110,110,101,114,32,112,114,111,100,117,99,116,32,97,110,100,32,100,101,99,111,100,101,46,0,0,0,0,0,0,0,100,101,108,101,116,101,100,0,54,0,0,0,0,0,0,0,50,51,32,45,32,118,97,108,117,101,32,104,97,115,32,98,101,101,110,32,112,97,115,115,101,100,32,97,110,32,101,109,112,116,121,32,118,97,114,105,97,98,108,101,46,0,0,0,110,111,116,32,99,111,112,105,101,100,0,0,0,0,0,0,37,115,91,37,100,93,32,37,115,10,0,0,0,0,0,0,53,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,99,104,97,114,97,99,116,101,114,46,0,0,0,0,0,0,51,32,45,32,105,110,118,97,108,105,100,32,97,120,105,115,46,0,0,0,0,0,0,0,50,50,32,45,32,105,118,97,108,117,101,32,104,97,115,32,98,101,101,110,32,112,97,115,115,101,100,32,97,110,32,101,109,112,116,121,32,118,97,114,105,97,98,108,101,46,0,0,119,97,115,0,0,0,0,0,52,0,0,0,0,0,0,0,102,105,108,101,0,0,0,0,50,49,32,45,32,99,111,110,118,101,114,115,105,111,110,32,102,114,111,109,32,110,117,109,101,114,105,99,32,116,111,32,99,104,97,114,97,99,116,101,114,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,51,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,46,97,112,108,0,0,0,0,50,48,32,45,32,97,110,32,97,114,105,116,104,109,101,116,105,99,32,40,43,45,47,41,32,111,114,32,109,97,116,104,32,40,115,105,110,44,32,99,111,115,41,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,0,0,110,111,116,32,99,111,112,105,101,100,0,0,0,0,0,0,115,97,118,101,100,46,0,0,50,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,49,57,32,45,32,99,104,97,114,97,99,116,101,114,45,116,111,45,105,110,116,101,103,101,114,32,99,111,110,118,101,114,115,105,111,110,32,105,115,110,39,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,33,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,117,110,98,97,108,97,110,99,101,100,32,113,117,111,116,101,115,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,83,116,97,116,101,109,101,110,116,32,116,111,32,100,105,115,112,108,97,121,32,110,111,116,32,102,111,117,110,100,46,0,49,56,32,45,32,99,104,97,114,97,99,116,101,114,45,116,111,45,114,101,97,108,32,99,111,110,118,101,114,115,105,111,110,32,105,115,110,39,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,110,111,116,32,102,111,117,110,100,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,49,55,32,45,32,100,121,97,100,105,99,32,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,97,114,101,32,110,111,116,32,99,111,110,102,111,114,109,97,98,108,101,46,0,0,0,0,0,117,110,98,97,108,97,110,99,101,100,32,98,114,97,99,107,101,116,115,0,0,0,0,0,32,37,115,37,100,0,0,0,73,110,118,97,108,105,100,32,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,105,110,32,68,69,76,32,101,100,105,116,46,0,0,0,0,97,112,108,62,0,0,0,0,117,110,98,97,108,97,110,99,101,100,32,98,114,97,99,107,101,116,115,0,0,0,0,0,47,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,101,69,0,0,0,0,0,0,49,54,32,45,32,105,110,32,116,97,107,101,32,111,114,32,100,114,111,112,44,32,116,104,101,32,108,101,102,116,39,115,32,99,111,117,110,116,32,109,117,115,116,32,101,113,117,97,108,32,114,105,103,104,116,39,115,32,114,97,110,107,46,0,83,116,97,116,101,109,101,110,116,32,116,111,32,109,111,100,105,102,121,32,110,111,116,32,102,111,117,110,100,46,0,0,46,0,0,0,0,0,0,0,78,111,32,118,97,108,117,101,32,105,110,32,98,114,97,99,107,101,116,115,46,0,0,0,49,53,32,45,32,116,104,101,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,116,97,107,101,32,111,114,32,100,114,111,112,32,99,97,110,39,116,32,104,97,118,101,32,114,97,110,107,32,62,32,49,46,0,0,0,0,0,32,0,0,0,0,0,0,0,57,57,57,32,45,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,0,0,0,0,57,57,56,32,45,32,101,110,100,32,111,102,32,97,112,108,32,112,114,111,99,101,115,115,105,110,103,46,0,0,0,0,45,0,0,0,0,0,0,0,57,57,55,32,45,32,99,108,101,97,114,105,110,103,32,115,116,97,116,101,32,105,110,100,105,99,97,116,111,114,32,116,111,32,108,97,115,116,32,115,117,115,112,101,110,100,101,100,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,57,57,54,32,45,32,110,111,110,45,105,110,116,101,103,101,114,32,112,111,119,101,114,115,32,111,102,32,99,111,109,112,108,101,120,32,110,117,109,98,101,114,115,32,110,111,116,32,121,101,116,32,115,117,112,112,111,114,116,101,100,46,0,0,96,50,0,0,0,0,0,0,57,57,53,32,45,32,109,97,116,114,105,120,32,100,105,118,105,100,101,32,111,102,32,99,111,109,112,108,101,120,32,110,117,109,98,101,114,115,32,110,111,116,32,121,101,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,0,96,81,0,0,0,0,0,0,49,51,54,32,45,32,114,101,97,108,32,97,114,103,117,109,101,110,116,32,116,111,32,97,99,111,115,104,32,109,117,115,116,32,110,111,116,32,98,101,32,108,101,115,115,32,116,104,97,110,32,49,46,0,0,0,96,69,0,0,0,0,0,0,49,51,53,32,45,32,112,97,114,116,105,116,105,111,110,32,110,101,101,100,115,32,108,101,102,116,32,116,111,32,98,101,32,115,105,109,112,108,101,32,118,101,99,116,111,114,32,111,102,32,110,111,110,110,101,103,97,116,105,118,101,32,105,110,116,101,103,101,114,115,46,0,96,61,0,0,0,0,0,0,49,51,52,32,45,32,105,116,101,109,115,32,111,102,32,114,105,103,104,116,32,116,111,32,102,111,114,109,32,109,47,98,32,115,105,109,112,108,101,32,110,117,109,101,114,105,99,32,115,99,97,108,97,114,32,111,114,32,99,104,97,114,97,99,116,101,114,32,118,101,99,116,111,114,46,0,0,0,0,0,126,0,0,0,0,0,0,0,49,51,51,32,45,32,100,111,109,97,105,110,32,101,114,114,111,114,46,0,0,0,0,0,124,0,0,0,0,0,0,0,49,52,32,45,32,116,104,101,32,97,114,103,117,109,101,110,116,115,32,116,111,32,102,111,114,109,97,116,32,109,117,115,116,32,98,101,32,110,117,109,101,114,105,99,46,0,0,0,49,51,50,32,45,32,105,110,118,97,108,105,100,32,109,111,100,101,108,32,102,111,114,32,102,111,114,109,97,116,32,98,121,32,101,120,97,109,112,108,101,46,0,0,0,0,0,0,83,116,97,116,101,109,101,110,116,32,116,111,32,100,101,108,101,116,101,32,110,111,116,32,102,111,117,110,100,46,0,0,122,0,0,0,0,0,0,0,49,51,49,32,45,32,105,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,32,102,111,114,32,102,111,114,109,97,116,32,98,121,32,101,120,97,109,112,108,101,46,0,0,121,0,0,0,0,0,0,0,49,51,48,32,45,32,97,114,103,117,109,101,110,116,32,111,102,32,99,111,109,112,108,101,120,32,103,97,109,109,97,32,102,117,110,99,116,105,111,110,32,116,111,111,32,99,108,111,115,101,32,116,111,32,97,32,112,111,108,101,46,0,0,0,120,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,49,50,57,32,45,32,114,97,110,107,32,101,114,114,111,114,46,0,0,0,0,0,0,0,110,111,116,32,100,101,108,101,116,101,100,0,0,0,0,0,119,0,0,0,0,0,0,0,49,50,56,32,45,32,108,101,110,103,116,104,32,101,114,114,111,114,46,0,0,0,0,0,118,0,0,0,0,0,0,0,49,50,55,32,45,32,105,116,101,109,32,111,117,116,32,111,102,32,112,108,97,99,101,46,0,0,0,0,0,0,0,0,117,0,0,0,0,0,0,0,49,50,54,32,45,32,98,97,100,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,110,45,119,105,115,101,46,0,0,0,0,0,0,116,0,0,0,0,0,0,0,49,50,53,32,45,32,110,101,115,116,101,100,32,118,97,114,105,97,98,108,101,32,105,115,32,97,114,103,117,109,101,110,116,32,116,111,32,105,110,116,101,103,101,114,40,41,46,0,115,0,0,0,0,0,0,0,49,50,52,32,45,32,97,114,103,117,109,101,110,116,115,32,105,110,99,111,110,115,105,115,116,101,110,116,32,105,110,32,112,105,99,107,46,0,0,0,114,0,0,0,0,0,0,0,49,50,51,32,45,32,105,110,118,97,108,105,100,32,97,120,101,115,46,0,0,0,0,0,113,0,0,0,0,0,0,0,49,51,32,45,32,97,110,32,101,109,112,116,121,32,118,101,99,116,111,114,32,97,110,100,32,117,110,100,101,102,105,110,101,100,32,105,100,101,110,116,105,116,121,32,105,110,32,114,101,100,117,99,101,46,0,0,119,115,32,110,111,116,32,102,111,117,110,100,0,0,0,0,49,50,50,32,45,32,114,97,110,107,115,32,100,105,102,102,101,114,32,105,110,32,100,105,115,99,108,111,115,101,46,0,112,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,49,50,49,32,45,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,114,101,112,108,105,99,97,116,101,32,109,97,121,32,99,111,110,116,97,105,110,32,111,110,108,121,32,112,111,115,105,116,105,118,101,32,118,97,108,117,101,115,46,0,0,0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,48,32,45,32,110,111,32,102,117,110,99,116,105,111,110,32,105,115,32,99,117,114,114,101,110,116,108,121,32,115,117,115,112,101,110,100,101,100,32,116,111,32,98,114,97,110,99,104,32,105,110,46,0,0,110,0,0,0,0,0,0,0,102,105,108,101,0,0,0,0,43,0,0,0,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,49,49,57,32,45,32,103,114,111,117,112,32,110,97,109,101,32,105,115,32,117,110,100,101,102,105,110,101,100,46,0,0,109,0,0,0,0,0,0,0,49,49,56,32,45,32,110,111,116,32,103,114,111,117,112,101,100,44,32,110,97,109,101,32,105,110,32,117,115,101,46,46,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,117,110,98,97,108,97,110,99,101,100,32,112,97,114,101,110,116,104,101,115,101,115,0,0,117,110,98,97,108,97,110,99,101,100,32,112,97,114,101,110,116,104,101,115,101,115,0,0,49,49,55,32,45,32,113,117,97,100,32,110,108,32,97,99,99,101,112,116,115,32,111,110,108,121,32,118,97,108,117,101,115,32,49,44,32,50,44,32,97,110,100,32,51,32,105,110,32,116,104,101,32,114,105,103,104,116,32,97,114,103,117,109,101,110,116,46,0,0,0,0,107,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,49,49,54,32,45,32,100,101,108,32,101,100,105,116,111,114,32,100,105,100,110,39,116,32,102,105,110,100,32,110,97,109,101,100,32,102,117,110,99,116,105,111,110,32,116,111,32,101,100,105,116,46,0,0,0,0,106,0,0,0,0,0,0,0,49,49,53,32,45,32,100,101,108,32,101,100,105,116,111,114,32,102,111,117,110,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,97,108,114,101,97,100,121,32,105,110,32,117,115,101,46,0,0,0,0,105,0,0,0,0,0,0,0,49,49,52,32,45,32,100,101,108,32,101,100,105,116,111,114,32,101,120,112,101,99,116,101,100,32,97,32,102,117,110,99,116,105,111,110,32,110,97,109,101,46,0,0,0,0,0,0,104,0,0,0,0,0,0,0,49,49,51,32,45,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,114,101,115,104,97,112,101,32,109,117,115,116,32,98,101,32,122,101,114,111,32,111,114,32,112,111,115,105,116,105,118,101,46,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,49,50,32,45,32,105,110,118,97,108,105,100,32,99,111,110,115,116,97,110,116,46,0,0,50,32,45,32,97,114,103,117,109,101,110,116,115,32,116,111,32,99,97,116,101,110,97,116,101,32,97,114,101,110,39,116,32,99,111,110,102,111,114,109,97,98,108,101,46,0,0,0,49,49,50,32,45,32,98,97,100,32,110,117,109,98,101,114,32,111,102,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,115,32,105,110,32,105,110,100,101,120,109,46,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,49,49,49,32,45,32,108,101,102,116,32,97,114,103,117,109,101,110,116,32,116,111,32,113,117,97,100,110,108,32,109,47,98,32,99,104,97,114,97,99,116,101,114,32,118,101,99,116,111,114,46,0,0,0,0,0,49,32,45,32,110,111,110,32,101,109,112,116,121,32,118,97,114,105,97,98,108,101,115,32,111,102,32,100,105,115,115,105,109,105,108,97,114,32,116,121,112,101,32,97,114,101,32,105,110,118,97,108,105,100,32,116,111,32,100,121,97,100,105,99,46,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,49,49,48,32,45,32,105,110,112,117,116,32,116,111,32,113,117,97,100,99,120,32,111,114,32,113,117,97,100,110,99,32,109,47,98,32,99,104,97,114,97,99,116,101,114,32,118,101,99,116,111,114,32,111,114,32,109,97,116,114,105,120,46,0,100,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,49,48,57,32,45,32,105,110,112,117,116,32,116,111,32,113,117,97,100,99,114,32,109,47,98,32,97,32,110,111,110,45,101,109,112,116,121,32,99,104,97,114,97,99,116,101,114,32,118,101,99,116,111,114,46,0,99,0,0,0,0,0,0,0,49,48,56,32,45,32,41,115,97,118,101,32,119,104,101,114,101,63,46,0,0,0,0,0,98,0,0,0,0,0,0,0,49,48,55,32,45,32,41,115,97,118,101,32,115,112,101,99,105,102,105,101,115,32,97,110,32,101,120,105,115,116,105,110,103,32,119,111,114,107,115,112,97,99,101,32,119,104,105,99,104,32,105,115,32,110,111,116,32,116,104,101,32,99,117,114,114,101,110,116,46,0,0,0,97,0,0,0,0,0,0,0,49,48,54,32,45,32,119,111,114,107,115,112,97,99,101,32,118,101,114,115,105,111,110,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,96,122,0,0,0,0,0,0,49,48,53,32,45,32,102,105,108,101,32,99,97,110,39,116,32,98,101,32,114,101,97,100,32,102,114,111,109,46,0,0,96,121,0,0,0,0,0,0,49,48,52,32,45,32,102,105], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5640);
/* memory initializer */ allocate([108,101,32,99,97,110,39,116,32,98,101,32,99,108,111,115,101,100,46,0,0,0,0,0,96,120,0,0,0,0,0,0,49,48,51,32,45,32,102,105,108,101,32,99,97,110,39,116,32,98,101,32,119,114,105,116,116,101,110,32,116,111,46,0,96,119,0,0,0,0,0,0,49,49,32,45,32,99,97,110,39,116,32,114,101,115,104,97,112,101,32,115,111,109,101,116,104,105,110,103,32,102,114,111,109,32,110,111,116,104,105,110,103,46,0,0,0,0,0,0,49,48,50,32,45,32,102,105,108,101,32,99,97,110,39,116,32,98,101,32,111,112,101,110,101,100,46,0,0,0,0,0,96,118,0,0,0,0,0,0,49,48,49,32,45,32,102,105,108,101,32,99,97,110,39,116,32,98,101,32,99,114,101,97,116,101,100,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+15880);
function runPostSets() {


}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _log=Math_log;

  var _sqrt=Math_sqrt;

  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      SAFE_HEAP_STORE(___errno_state, value, "i32", 0);
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        SAFE_HEAP_STORE(_stdin, FS.getPtrForStream(stdin), "void*", 0);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        SAFE_HEAP_STORE(_stdout, FS.getPtrForStream(stdout), "void*", 0);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        SAFE_HEAP_STORE(_stderr, FS.getPtrForStream(stderr), "void*", 0);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              SAFE_HEAP_STORE(arg, bytes, "i32", 0);
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      return FS.getStreamFromPtr(stream).fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (SAFE_HEAP_LOAD(curr, "i8", 0, 0)) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = SAFE_HEAP_LOAD((varargs)+(argIndex), "double", 0, 1);
        } else if (type == 'i64') {
          ret = [SAFE_HEAP_LOAD((varargs)+(argIndex), "i32", 0, 1),
                 SAFE_HEAP_LOAD((varargs)+(argIndex+8), "i32", 0, 1)];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = SAFE_HEAP_LOAD((varargs)+(argIndex), "i32", 0, 1);
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = SAFE_HEAP_LOAD(textIndex, "i8", 0, 0);
        if (curr === 0) break;
        next = SAFE_HEAP_LOAD(textIndex+1, "i8", 0, 0);
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = SAFE_HEAP_LOAD(textIndex+1, "i8", 0, 0);
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = SAFE_HEAP_LOAD(textIndex+1, "i8", 0, 0);
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = SAFE_HEAP_LOAD(textIndex+1, "i8", 0, 0);
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = SAFE_HEAP_LOAD(textIndex+1, "i8", 0, 0);
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = SAFE_HEAP_LOAD(textIndex+1, "i8", 0, 0);
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = SAFE_HEAP_LOAD(textIndex+1, "i8", 0, 0);
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = SAFE_HEAP_LOAD(textIndex+2, "i8", 0, 0);
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = SAFE_HEAP_LOAD(textIndex+2, "i8", 0, 0);
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = SAFE_HEAP_LOAD(textIndex+1, "i8", 0, 0);
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(SAFE_HEAP_LOAD(arg++, "i8", 1, 0));
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              SAFE_HEAP_STORE(ptr, ret.length, "i32", 0);
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(SAFE_HEAP_LOAD(i, "i8", 0, 0));
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = SAFE_HEAP_LOAD(_stdout, "void*", 0, 0);
      return _fprintf(stdout, format, varargs);
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        SAFE_HEAP_STORE(s, buf, "i8*", 0);
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        SAFE_HEAP_STORE((s)+(i), result[i], "i8", 0);
      }
      if (limit < n || (n === undefined)) SAFE_HEAP_STORE((s)+(i), 0, "i8", 0);
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }


  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = SAFE_HEAP_LOAD((varargs)+(argIndex), "void*", 0, 0);
          argIndex += Runtime.getAlignSize('void*', null, true);
          SAFE_HEAP_STORE(argPtr, soFar, "i32", 0);
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = SAFE_HEAP_LOAD((varargs)+(argIndex), "void*", 0, 0);
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                SAFE_HEAP_STORE(argPtr++, next, "i8", 0);
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = SAFE_HEAP_LOAD((varargs)+(argIndex), "void*", 0, 0);
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  SAFE_HEAP_STORE(argPtr++, next, "i8", 0);
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  SAFE_HEAP_STORE(argPtr++, next, "i8", 0);
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            SAFE_HEAP_STORE(argPtr++, 0, "i8", 0);
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = SAFE_HEAP_LOAD((varargs)+(argIndex), "void*", 0, 0);
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                SAFE_HEAP_STORE(argPtr, parseInt(text, 10), "i16", 0);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],SAFE_HEAP_STORE(argPtr, tempI64[0], "i32", 0),SAFE_HEAP_STORE((argPtr)+(4), tempI64[1], "i32", 0));
              } else {
                SAFE_HEAP_STORE(argPtr, parseInt(text, 10), "i32", 0);
              }
              break;
            case 'X':
            case 'x':
              SAFE_HEAP_STORE(argPtr, parseInt(text, 16), "i32", 0);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                SAFE_HEAP_STORE(argPtr, parseFloat(text), "double", 0);
              } else {
                SAFE_HEAP_STORE(argPtr, parseFloat(text), "float", 0);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                SAFE_HEAP_STORE((argPtr)+(j), array[j], "i8", 0);
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return SAFE_HEAP_LOAD((s)+(index++), "i8", 0, 0); };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        SAFE_HEAP_STORE((pdest+i)|0, SAFE_HEAP_LOAD((psrc+i)|0, "i8", 0, 0), "i8", 0);
        i = (i+1)|0;
      } while (SAFE_HEAP_LOAD((psrc)+(i-1), "i8", 0, 0));
      return pdest|0;
    }

  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      var pdestEnd = 0;
      pdestEnd = (pdest + (_strlen(pdest)|0))|0;
      do {
        SAFE_HEAP_STORE(pdestEnd+i, SAFE_HEAP_LOAD(psrc+i, "i8", 0, 0), "i8", 0);
        i = (i+1)|0;
      } while (SAFE_HEAP_LOAD((psrc)+(i-1), "i8", 0, 0));
      return pdest|0;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = SAFE_HEAP_LOAD(varargs, "i32", 0, 0);
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        SAFE_HEAP_STORE(ptr++, streamObj.ungotten.pop(), "i8", 0);
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return SAFE_HEAP_LOAD(_fgetc.ret, "i8", 1, 0);
      }
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          SAFE_HEAP_STORE(dest, SAFE_HEAP_LOAD(src, "i8", 0, 0), "i8", 0);
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          SAFE_HEAP_STORE(dest, SAFE_HEAP_LOAD(src, "i32", 0, 0), "i32", 0);
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        SAFE_HEAP_STORE(dest, SAFE_HEAP_LOAD(src, "i8", 0, 0), "i8", 0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var entries;
      try {
        entries = FS.readdir(stream.path);
      } catch (e) {
        return FS.handleFSError(e);
      }
      if (stream.position < 0 || stream.position >= entries.length) {
        SAFE_HEAP_STORE(result, 0, "i8*", 0);
        return 0;
      }
      var id;
      var type;
      var name = entries[stream.position];
      var offset = stream.position + 1;
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        var child = FS.lookupNode(stream.node, name);
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      SAFE_HEAP_STORE(entry, id, "i32", 0);
      SAFE_HEAP_STORE((entry)+(4), offset, "i32", 0);
      SAFE_HEAP_STORE((entry)+(8), name.length + 1, "i32", 0);
      for (var i = 0; i < name.length; i++) {
        SAFE_HEAP_STORE((entry + 11)+(i), name.charCodeAt(i), "i8", 0);
      }
      SAFE_HEAP_STORE((entry + 11)+(i), 0, "i8", 0);
      SAFE_HEAP_STORE((entry)+(10), type, "i8", 0);
      SAFE_HEAP_STORE(result, entry, "i8*", 0);
      stream.position++;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return SAFE_HEAP_LOAD(_readdir.result, "i8*", 0, 0);
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      return _close(fd);
    }

  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        SAFE_HEAP_STORE(buf, stat.dev, "i32", 0);
        SAFE_HEAP_STORE((buf)+(4), 0, "i32", 0);
        SAFE_HEAP_STORE((buf)+(8), stat.ino, "i32", 0);
        SAFE_HEAP_STORE((buf)+(12), stat.mode, "i32", 0);
        SAFE_HEAP_STORE((buf)+(16), stat.nlink, "i32", 0);
        SAFE_HEAP_STORE((buf)+(20), stat.uid, "i32", 0);
        SAFE_HEAP_STORE((buf)+(24), stat.gid, "i32", 0);
        SAFE_HEAP_STORE((buf)+(28), stat.rdev, "i32", 0);
        SAFE_HEAP_STORE((buf)+(32), 0, "i32", 0);
        SAFE_HEAP_STORE((buf)+(36), stat.size, "i32", 0);
        SAFE_HEAP_STORE((buf)+(40), 4096, "i32", 0);
        SAFE_HEAP_STORE((buf)+(44), stat.blocks, "i32", 0);
        SAFE_HEAP_STORE((buf)+(48), Math.floor(stat.atime.getTime() / 1000), "i32", 0);
        SAFE_HEAP_STORE((buf)+(52), 0, "i32", 0);
        SAFE_HEAP_STORE((buf)+(56), Math.floor(stat.mtime.getTime() / 1000), "i32", 0);
        SAFE_HEAP_STORE((buf)+(60), 0, "i32", 0);
        SAFE_HEAP_STORE((buf)+(64), Math.floor(stat.ctime.getTime() / 1000), "i32", 0);
        SAFE_HEAP_STORE((buf)+(68), 0, "i32", 0);
        SAFE_HEAP_STORE((buf)+(72), stat.ino, "i32", 0);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }




  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      SAFE_HEAP_STORE(_fputc.ret, chr, "i8", 0);
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, SAFE_HEAP_LOAD(_stdout, "void*", 0, 0));
    }

  function _creat(path, mode) {
      // int creat(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/creat.html
      return _open(path, 1 | 64 | 512, allocate([mode, 0, 0, 0], 'i32', ALLOC_STACK));
    }


  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC);function _srand(seed) {
      SAFE_HEAP_STORE(___rand_seed, seed, "i32", 0)
    }


  var _floor=Math_floor;

  var _atan=Math_atan;

  var _acos=Math_acos;

  var _asin=Math_asin;

  var _sin=Math_sin;

  var _cos=Math_cos;

  var _tan=Math_tan;

  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }

  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }

  function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  function _fmod(x, y) {
      return x % y;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        SAFE_HEAP_STORE(ptr, ret, "i32", 0);
      }
      return ret;
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      SAFE_HEAP_STORE(_timezone, -(new Date()).getTimezoneOffset() * 60, "i32", 0);
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      SAFE_HEAP_STORE(_daylight, Number(winter.getTimezoneOffset() != summer.getTimezoneOffset()), "i32", 0);
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      SAFE_HEAP_STORE(_tzname, winterNamePtr, "i32", 0);
      SAFE_HEAP_STORE((_tzname)+(4), summerNamePtr, "i32", 0);
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(SAFE_HEAP_LOAD(time, "i32", 0, 0)*1000);
      SAFE_HEAP_STORE(tmPtr, date.getSeconds(), "i32", 0);
      SAFE_HEAP_STORE((tmPtr)+(4), date.getMinutes(), "i32", 0);
      SAFE_HEAP_STORE((tmPtr)+(8), date.getHours(), "i32", 0);
      SAFE_HEAP_STORE((tmPtr)+(12), date.getDate(), "i32", 0);
      SAFE_HEAP_STORE((tmPtr)+(16), date.getMonth(), "i32", 0);
      SAFE_HEAP_STORE((tmPtr)+(20), date.getFullYear()-1900, "i32", 0);
      SAFE_HEAP_STORE((tmPtr)+(24), date.getDay(), "i32", 0);
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      SAFE_HEAP_STORE((tmPtr)+(28), yday, "i32", 0);
      SAFE_HEAP_STORE((tmPtr)+(36), start.getTimezoneOffset() * 60, "i32", 0);
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      SAFE_HEAP_STORE((tmPtr)+(32), dst, "i32", 0);
  
      SAFE_HEAP_STORE((tmPtr)+(40), ___tm_timezone, "i32", 0);
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  var _exp=Math_exp;

  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = SAFE_HEAP_LOAD(str, "i8", 0, 0);
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = SAFE_HEAP_LOAD(set, "i8", 0, 0);
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = SAFE_HEAP_LOAD(ptr, "i8", 0, 0);
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }


  var _atan2=Math_atan2;

  function _getchar() {
      // int getchar(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getchar.html
      return _fgetc(SAFE_HEAP_LOAD(_stdin, "void*", 0, 0));
    }

  
  function _rand_r(seedp) {
      seedp = seedp|0; 
      var val = 0;
      val = ((Math_imul(SAFE_HEAP_LOAD(seedp, "i32", 0, 0), 31010991)|0) + 0x676e6177 ) & 2147483647; // assumes RAND_MAX is in bit mask form (power of 2 minus 1)
      SAFE_HEAP_STORE(seedp, val, "i32", 0);
      return val|0;
    }function _rand() {
      return _rand_r(___rand_seed)|0;
    }

  var _pow=Math_pow;

  function _abort() {
      Module['abort']();
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            SAFE_HEAP_STORE(ptr, value, "i8", 0);
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          SAFE_HEAP_STORE(ptr, value4, "i32", 0);
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        SAFE_HEAP_STORE(ptr, value, "i8", 0);
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }




  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = SAFE_HEAP_LOAD(SDL.screen+Runtime.QUANTUM_SIZE*0, "i32", 1, 0);
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	SAFE_HEAP_STORE(SDL.screen+Runtime.QUANTUM_SIZE*0, flags, "i32", 0)
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = SAFE_HEAP_LOAD(SDL.screen+Runtime.QUANTUM_SIZE*0, "i32", 1, 0);
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	SAFE_HEAP_STORE(SDL.screen+Runtime.QUANTUM_SIZE*0, flags, "i32", 0)
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); SAFE_HEAP_STORE(___errno_state, 0, "i32", 0);
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,_dblne,0,_residuex,0,Math_exp,0,_residuep,0,_dabs,0,_execqext,0,_powerx,0,_residue,0,_scanfrnt,0,_aplcomex,0,_indexgen,0,_recip,0,_logrithm,0,_first,0,_ceilp,0,_conjugx,0,_execdyam,0,_execdyal,0,_match,0,_execdyaj,0,_compute,0,_conjugp,0,_rotate,0,_dblorp,0,_logrithx,0,_ine,0,_nreduce,0,_iandp,0,_intone,0,_dblandp,0,_recipp,0,_execjot,0,_logrithp,0,_binomp,0,_divide,0,_itimes,0,_binomx,0,_slashtra,0,_dblmax,0,_pitimesx,0,_conjug,0,_mdivide,0,_dblltp,0,_ieq,0,_monfront,0,_dividep,0,_dbleqp,0,_dblge,0,_dividex,0,_dblor,0,_iminus,0,_and,0,_dbleq,0,_dblgt,0,_expp,0,_roll,0,_gradeup2,0,_inorp,0,_inand,0,_each,0,_reducef,0,_nscan,0,_compress,0,_funcmain,0,_pick,0,_iconjug,0,_signdblx,0,_intzero,0,_inot,0,_minus,0,_inor,0,_expand,0,_signdblp,0,_derived,0,_lt,0,_dblnand,0,_ceq,0,_pitimes,0,_deal,0,_timesx,0,_plusx,0,_execqcr,0,_pitimesp,0,_eqx,0,_inandp,0,_timesp,0,_disclose,0,_eqp,0,_nep,0,_execdot,0,_circulap,0,_logx,0,_nex,0,_powerp,0,_decode,0,_circulax,0,_logp,0,_dbllep,0,_dblminp,0,_ige,0,_encodbl,0,_nand,0,_eq,0,_dblmin,0,_binom,0,_le,0,_enclose,0,_dblnep,0,_eachtran,0,_reverse,0,_ravel2,0,_expx,0,_without,0,_iminp,0,_gtp,0,_imaxp,0,_iand,0,_gep,0,_depth,0,_signdbl,0,_igep,0,_shape,0,_enlist,0,_ceilx,0,_dblnot,0,_irollp,0,_norp,0,Math_floor,0,_ilep,0,_inegativ,0,_andp,0,_cscan,0,_gradedn2,0,_matinv,0,_ceqpd,0,_ne,0,_floorp,0,_ilt,0,_dbland,0,_transpos,0,_factorlx,0,_ge,0,_isign,0,_indexof,0,_recipx,0,_ifactorl,0,_factorlp,0,_not,0,_cnepd,0,_nor,0,Math_log,0,_orp,0,_gt,0,_minusp,0,_dblnotp,0,_iroll,0,_circular,0,_minusx,0,_power,0,_negativx,0,_logamma,0,_ceqp,0,_find,0,_plus,0,_reshape,0,_creduce,0,_plusp,0,_cnep,0,_imin,0,_negative,0,_form,0,_iplus,0,Math_ceil,0,_iltp,0,_execjot2,0,_ior,0,_factorl,0,_dblgep,0,_execqdl,0,_rollp,0,_cat,0,_dabsp,0,_execalt,0,_partitn,0,_dbllt,0,_take2,0,_dabsx,0,_execqex,0,_cne,0,_squadix,0,_ile,0,_iabs,0,_dblle,0,_dottran,0,_floorx,0,_ltp,0,_dblgtp,0,_laminate,0,_imax,0,_negativp,0,_dblmaxp,0,_or,0,_nandp,0,_lep,0,_drop2,0,_formdft,0,_execqnct,0,_member,0,_dblnor,0,_execqnl,0,_execqnc,0,_igt,0,_execqfx,0,_dblnorp,0,_dblnandp,0,_iorp,0,_times,0,_igtp,0];

// EMSCRIPTEN_START_FUNCS

function _acosh($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$rite;
 var $3=$2;
 var $4=$3<1;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 SAFE_HEAP_STORE(4592, 136, "i32", 0);
 $1=0;
 label=4;break;
 case 3: 
 var $7=$2;
 var $8=$2;
 var $9=$2;
 var $10=($8)*($9);
 var $11=($10)-(1);
 var $12=Math_sqrt($11);
 var $13=($7)+($12);
 var $14=Math_log($13);
 $1=$14;
 label=4;break;
 case 4: 
 var $16=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }

}


function _acoshx($rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $wa=sp;
 var $wb=(sp)+(16);
 $1=$rrr;
 $2=$ret;
 var $3=$1;
 var $4=$1;
 var $5=(($wa)|0);
 _timesx($3,$4,$5);
 var $6=(($wa)|0);
 var $7=(($wb)|0);
 _plusx(6832,$6,$7);
 var $8=(($wb)|0);
 var $9=(($wa)|0);
 _powerx($8,6848,$9);
 var $10=$1;
 var $11=(($wa)|0);
 var $12=(($wb)|0);
 _plusx($10,$11,$12);
 var $13=(($wb)|0);
 var $14=$2;
 _logx($13,$14);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _acosx($rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ixr=sp;
 var $wa=(sp)+(16);
 var $wb=(sp)+(32);
 var $wc=(sp)+(48);
 $1=$rrr;
 $2=$ret;
 var $3=$1;
 var $4=$1;
 var $5=(($wa)|0);
 _timesx($3,$4,$5);
 var $6=(($wa)|0);
 var $7=(($wb)|0);
 _minusx(6784,$6,$7);
 var $8=(($wb)|0);
 var $9=(($wa)|0);
 _powerx($8,6816,$9);
 var $10=(($wa)|0);
 var $11=(($wb)|0);
 _timesx(6800,$10,$11);
 var $12=$1;
 var $13=(($wb)|0);
 var $14=(($wa)|0);
 _minusx($12,$13,$14);
 var $15=(($wa)|0);
 var $16=(($wb)|0);
 _logx($15,$16);
 var $17=(($wb)|0);
 var $18=$2;
 _timesx(6800,$17,$18);
 var $19=$2;
 var $20=SAFE_HEAP_LOAD($19, "double", 0, 0);
 var $21=((-.0))-($20);
 var $22=$2;
 SAFE_HEAP_STORE($22, $21, "double", 0);
 var $23=$2;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "double", 0, 0);
 var $26=((-.0))-($25);
 var $27=$2;
 var $28=(($27+8)|0);
 SAFE_HEAP_STORE($28, $26, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _allcopy($to,$from,$count,$incr,$itype,$otype){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $dp;
 var $dwrk=sp;
 var $ip;
 var $cop;
 var $dop;
 var $iop;
 $2=$to;
 $3=$from;
 $4=$count;
 $5=$incr;
 $6=$itype;
 $7=$otype;
 var $8=$6;
 var $9=$7;
 var $10=($8|0)==($9|0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$2;
 var $13=$3;
 var $14=$4;
 var $15=$5;
 var $16=$6;
 var $17=_dtacopy($12,$13,$14,$15,$16);
 $1=$17;
 label=27;break;
 case 3: 
 var $19=$2;
 $cop=$19;
 var $20=$2;
 var $21=$20;
 $dop=$21;
 var $22=$2;
 var $23=$22;
 $iop=$23;
 var $24=$6;
 if(($24|0)==2){ label=11;break;}else if(($24|0)==4){ label=18;break;}else if(($24|0)==64){ label=4;break;}else{label=25;break;}
 case 4: 
 var $26=$3;
 var $27=$26;
 $dp=$27;
 label=5;break;
 case 5: 
 var $29=$4;
 var $30=((($29)-(1))|0);
 $4=$30;
 var $31=($29|0)!=0;
 if($31){label=6;break;}else{label=10;break;}
 case 6: 
 var $33=$dp;
 var $34=(($dwrk)|0);
 _dabsx($33,$34);
 var $35=$7;
 if(($35|0)==4){ label=7;break;}else if(($35|0)==2){ label=8;break;}else{label=9;break;}
 case 7: 
 var $37=(($dwrk)|0);
 var $38=SAFE_HEAP_LOAD($37, "double", 0, 0);
 var $39=(($38)&-1);
 var $40=$iop;
 var $41=(($40+4)|0);
 $iop=$41;
 SAFE_HEAP_STORE($40, $39, "i32", 0);
 label=9;break;
 case 8: 
 var $43=(($dwrk)|0);
 var $44=SAFE_HEAP_LOAD($43, "double", 0, 0);
 var $45=$dop;
 var $46=(($45+8)|0);
 $dop=$46;
 SAFE_HEAP_STORE($45, $44, "double", 0);
 label=9;break;
 case 9: 
 var $48=$5;
 var $49=$dp;
 var $50=(($49+($48<<3))|0);
 $dp=$50;
 label=5;break;
 case 10: 
 label=26;break;
 case 11: 
 var $53=$3;
 var $54=$53;
 $dp=$54;
 label=12;break;
 case 12: 
 var $56=$4;
 var $57=((($56)-(1))|0);
 $4=$57;
 var $58=($56|0)!=0;
 if($58){label=13;break;}else{label=17;break;}
 case 13: 
 var $60=$7;
 if(($60|0)==64){ label=14;break;}else if(($60|0)==4){ label=15;break;}else{label=16;break;}
 case 14: 
 var $62=$dp;
 var $63=SAFE_HEAP_LOAD($62, "double", 0, 0);
 var $64=$dop;
 var $65=(($64+8)|0);
 $dop=$65;
 SAFE_HEAP_STORE($64, $63, "double", 0);
 var $66=$dop;
 var $67=(($66+8)|0);
 $dop=$67;
 SAFE_HEAP_STORE($66, 0, "double", 0);
 label=16;break;
 case 15: 
 var $69=$dp;
 var $70=SAFE_HEAP_LOAD($69, "double", 0, 0);
 var $71=(($70)&-1);
 var $72=$iop;
 var $73=(($72+4)|0);
 $iop=$73;
 SAFE_HEAP_STORE($72, $71, "i32", 0);
 label=16;break;
 case 16: 
 var $75=$5;
 var $76=$dp;
 var $77=(($76+($75<<3))|0);
 $dp=$77;
 label=12;break;
 case 17: 
 label=26;break;
 case 18: 
 var $80=$3;
 var $81=$80;
 $ip=$81;
 label=19;break;
 case 19: 
 var $83=$4;
 var $84=((($83)-(1))|0);
 $4=$84;
 var $85=($83|0)!=0;
 if($85){label=20;break;}else{label=24;break;}
 case 20: 
 var $87=$7;
 if(($87|0)==64){ label=21;break;}else if(($87|0)==2){ label=22;break;}else{label=23;break;}
 case 21: 
 var $89=$ip;
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=($90|0);
 var $92=$dop;
 var $93=(($92+8)|0);
 $dop=$93;
 SAFE_HEAP_STORE($92, $91, "double", 0);
 var $94=$dop;
 var $95=(($94+8)|0);
 $dop=$95;
 SAFE_HEAP_STORE($94, 0, "double", 0);
 label=23;break;
 case 22: 
 var $97=$ip;
 var $98=SAFE_HEAP_LOAD($97, "i32", 0, 0);
 var $99=($98|0);
 var $100=$dop;
 var $101=(($100+8)|0);
 $dop=$101;
 SAFE_HEAP_STORE($100, $99, "double", 0);
 label=23;break;
 case 23: 
 var $103=$5;
 var $104=$ip;
 var $105=(($104+($103<<2))|0);
 $ip=$105;
 label=19;break;
 case 24: 
 label=26;break;
 case 25: 
 $1=0;
 label=27;break;
 case 26: 
 $1=0;
 label=27;break;
 case 27: 
 var $110=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $110;
  default: assert(0, "bad label: " + label);
 }

}


function _and($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ileft;
 var $irite;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $5=((-.0))-($4);
 var $6=$3>=$5;
 var $7=($6&1);
 var $8=$1;
 var $9=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $10=$8<=$9;
 var $11=($10&1);
 var $12=$7&$11;
 var $13=($12|0)!=0;
 var $14=$13^1;
 var $15=($14&1);
 $ileft=$15;
 var $16=$2;
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=((-.0))-($17);
 var $19=$16>=$18;
 var $20=($19&1);
 var $21=$2;
 var $22=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $23=$21<=$22;
 var $24=($23&1);
 var $25=$20&$24;
 var $26=($25|0)!=0;
 var $27=$26^1;
 var $28=($27&1);
 $irite=$28;
 var $29=$ileft;
 var $30=$irite;
 var $31=$29&$30;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $31;
}


function _andp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $ileft;
 var $irite;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=((-.0))-($6);
 var $8=$5>=$7;
 var $9=($8&1);
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $13=$11<=$12;
 var $14=($13&1);
 var $15=$9&$14;
 var $16=($15|0)!=0;
 var $17=$16^1;
 var $18=($17&1);
 $ileft=$18;
 var $19=$2;
 var $20=SAFE_HEAP_LOAD($19, "double", 0, 0);
 var $21=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $22=((-.0))-($21);
 var $23=$20>=$22;
 var $24=($23&1);
 var $25=$2;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $28=$26<=$27;
 var $29=($28&1);
 var $30=$24&$29;
 var $31=($30|0)!=0;
 var $32=$31^1;
 var $33=($32&1);
 $irite=$33;
 var $34=$ileft;
 var $35=$irite;
 var $36=$34&$35;
 var $37=$3;
 SAFE_HEAP_STORE($37, $36, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _aplclean(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $workhdr;
 var $1=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $2=($1|0)!=0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 _aplfree($4);
 SAFE_HEAP_STORE(4584, 0, "i8*", 0);
 label=3;break;
 case 3: 
 var $6=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 label=11;break;
 case 5: 
 label=6;break;
 case 6: 
 var $11=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $workhdr=$11;
 var $12=0!=($11|0);
 if($12){label=7;break;}else{label=11;break;}
 case 7: 
 label=8;break;
 case 8: 
 var $15=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $16=(($15+40)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.execstk*", 0, 0);
 var $18=0!=($17|0);
 if($18){label=9;break;}else{label=10;break;}
 case 9: 
 _execterm();
 label=8;break;
 case 10: 
 var $21=$workhdr;
 var $22=(($21)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.treelist*", 0, 0);
 SAFE_HEAP_STORE(2376, $23, "%struct.treelist*", 0);
 var $24=$workhdr;
 var $25=(($24+4)|0);
 var $26=SAFE_HEAP_LOAD($25, "%struct.avlnode*", 0, 0);
 _aplclsub($26);
 var $27=$workhdr;
 var $28=$27;
 _aplfree($28);
 label=6;break;
 case 11: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplclsub($node){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$node;
 var $2=$1;
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $6=$1;
 var $7=(($6)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.avlnode*", 0, 0);
 _aplclsub($8);
 var $9=$1;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.avlnode*", 0, 0);
 _aplclsub($11);
 var $12=$1;
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i8*", 0, 0);
 var $15=$14;
 _leafdel($15);
 var $16=$1;
 var $17=(($16+16)|0);
 var $18=SAFE_HEAP_LOAD($17, "i8*", 0, 0);
 _aplfree($18);
 var $19=$1;
 var $20=$19;
 _aplfree($20);
 label=4;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplclear(){
 var label=0;


 _aplclean();
 _aplinit();
 return;
}


function _aplcomex($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $out;
 var $axis;
 $2=$dp;
 $3=$left;
 $4=$rite;
 $out=0;
 var $5=$3;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_errstop(4,$8,$9,0);
 $1=$10;
 label=6;break;
 case 3: 
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 $axis=$14;
 var $15=$axis;
 var $16=($15|0)==-1;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+20)|0);
 var $20=SAFE_HEAP_LOAD($19, "i8*", 0, 0);
 var $21=$20;
 var $22=$4;
 var $23=_axisdft($21,$22);
 $axis=$23;
 label=5;break;
 case 5: 
 var $25=$2;
 var $26=(($25+28)|0);
 var $27=(($26+20)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0, 0);
 var $30=$2;
 var $31=(($30+28)|0);
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.aplcb*", 0, 0);
 var $34=$4;
 var $35=$axis;
 var $36=FUNCTION_TABLE[$29]($33,$34,$35);
 $out=$36;
 var $37=$out;
 var $38=_errstop(0,0,0,$37);
 $1=$38;
 label=6;break;
 case 6: 
 var $40=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $40;
  default: assert(0, "bad label: " + label);
 }

}


function _aplcopy($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 var $proto;
 $2=$rite;
 var $3=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$2;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=16;break;
 case 4: 
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$2;
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=$2;
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=_getcb(0,$12,$15,$18,0);
 $out=$19;
 var $20=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=16;break;
 case 6: 
 var $24=$out;
 var $25=(($24+12)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=($26|0)>1;
 if($27){label=7;break;}else{label=8;break;}
 case 7: 
 var $29=$out;
 var $30=(($29+16)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32*", 0, 0);
 var $32=$31;
 var $33=$2;
 var $34=(($33+16)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32*", 0, 0);
 var $36=$35;
 var $37=$out;
 var $38=(($37+12)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=_intcopy($32,$36,$39,1);
 label=8;break;
 case 8: 
 var $42=$out;
 var $43=(($42+8)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=($44|0)!=0;
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $47=$out;
 var $48=(($47)|0);
 var $49=$48;
 var $50=SAFE_HEAP_LOAD($49, "i32*", 0, 0);
 var $51=$50;
 var $52=$2;
 var $53=(($52)|0);
 var $54=$53;
 var $55=SAFE_HEAP_LOAD($54, "i32*", 0, 0);
 var $56=$55;
 var $57=$out;
 var $58=(($57+8)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=$out;
 var $61=(($60+4)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=$62&110;
 var $64=_dtacopy($51,$56,$59,1,$63);
 label=15;break;
 case 10: 
 var $66=$out;
 var $67=(($66+4)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=$68&32;
 var $70=($69|0)!=0;
 if($70){label=11;break;}else{label=14;break;}
 case 11: 
 var $72=$2;
 var $73=(($72)|0);
 var $74=$73;
 var $75=SAFE_HEAP_LOAD($74, "%struct.aplcb**", 0, 0);
 var $76=SAFE_HEAP_LOAD($75, "%struct.aplcb*", 0, 0);
 $proto=$76;
 var $77=0!=($76|0);
 if($77){label=12;break;}else{label=13;break;}
 case 12: 
 var $79=$proto;
 var $80=_aplcopy($79);
 var $81=$out;
 var $82=(($81)|0);
 var $83=$82;
 var $84=SAFE_HEAP_LOAD($83, "%struct.aplcb**", 0, 0);
 SAFE_HEAP_STORE($84, $80, "%struct.aplcb*", 0);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $88=$out;
 $1=$88;
 label=16;break;
 case 16: 
 var $90=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }

}


function _aplcpya($fromtree,$name,$pcopy){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $leaf;
 var $p;
 var $symp;
 $1=$fromtree;
 $2=$name;
 $3=$pcopy;
 var $4=$1;
 $symp=$4;
 label=2;break;
 case 2: 
 var $6=$symp;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.avlnode*", 0, 0);
 var $9=$2;
 var $10=_avlsrch($8,$9);
 $p=$10;
 var $11=$p;
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 label=8;break;
 case 4: 
 var $15=$symp;
 var $16=(($15)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.treelist*", 0, 0);
 var $18=($17|0)==0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 var $22=$symp;
 var $23=(($22)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.treelist*", 0, 0);
 $symp=$24;
 label=2;break;
 case 8: 
 var $26=$p;
 var $27=($26|0)==0;
 if($27){label=9;break;}else{label=10;break;}
 case 9: 
 var $34=0;label=11;break;
 case 10: 
 var $30=$p;
 var $31=(($30+8)|0);
 var $32=SAFE_HEAP_LOAD($31, "i8*", 0, 0);
 var $34=$32;label=11;break;
 case 11: 
 var $34;
 var $35=$34;
 $leaf=$35;
 var $36=$leaf;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 var $39=$2;
 var $40=$2;
 var $41=_strlen($40);
 var $42=$2;
 var $43=_strlen($42);
 _execmsg($39,$41,$43,12936);
 label=14;break;
 case 13: 
 var $45=$1;
 var $46=$2;
 var $47=$leaf;
 var $48=$47;
 var $49=$3;
 _aplcpyc($45,$46,$48,$49);
 label=14;break;
 case 14: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplcpyb($fromtree,$node,$pcopy){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$fromtree;
 $2=$node;
 $3=$pcopy;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=6;break;
 case 3: 
 var $8=$1;
 var $9=$2;
 var $10=(($9)|0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.avlnode*", 0, 0);
 var $12=$3;
 _aplcpyb($8,$11,$12);
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$1;
 var $19=$2;
 var $20=(($19+16)|0);
 var $21=SAFE_HEAP_LOAD($20, "i8*", 0, 0);
 var $22=$2;
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "i8*", 0, 0);
 var $25=$3;
 _aplcpyc($18,$21,$24,$25);
 label=5;break;
 case 5: 
 var $27=$1;
 var $28=$2;
 var $29=(($28+4)|0);
 var $30=SAFE_HEAP_LOAD($29, "%struct.avlnode*", 0, 0);
 var $31=$3;
 _aplcpyb($27,$30,$31);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplcpy($rite,$cp,$cpend,$pcopy){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $savfile;
 var $savfuzz;
 var $savxorg;
 var $savtree;
 var $tok;
 var $tokhdr=sp;
 var $name=(sp)+(8);
 var $fromtree;
 var $totree;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 $4=$pcopy;
 var $5=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 $savfile=$5;
 SAFE_HEAP_STORE(4584, 0, "i8*", 0);
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 $savfuzz=$6;
 var $7=SAFE_HEAP_LOAD(2376, "i8*", 0, 0);
 $savtree=$7;
 SAFE_HEAP_STORE(2376, 0, "i8*", 0);
 var $8=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 $savxorg=$8;
 var $9=$2;
 var $10=(($name)|0);
 var $11=_sscanf($9,12808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $10, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $12=$1;
 var $13=(($12)|0);
 var $14=$13;
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=(($name)|0);
 var $17=(($name)|0);
 var $18=(($name)|0);
 var $19=_strlen($18);
 var $20=(($17+$19)|0);
 var $21=_aplloae($15,$16,$20);
 var $22=($21|0)!=0;
 if($22){label=2;break;}else{label=18;break;}
 case 2: 
 var $24=$savtree;
 var $25=$24;
 $totree=$25;
 label=3;break;
 case 3: 
 var $27=$totree;
 var $28=(($27)|0);
 var $29=SAFE_HEAP_LOAD($28, "%struct.treelist*", 0, 0);
 var $30=($29|0)!=0;
 if($30){label=4;break;}else{label=6;break;}
 case 4: 
 label=5;break;
 case 5: 
 var $33=$totree;
 var $34=(($33)|0);
 var $35=SAFE_HEAP_LOAD($34, "%struct.treelist*", 0, 0);
 $totree=$35;
 label=3;break;
 case 6: 
 var $37=SAFE_HEAP_LOAD(2376, "i8*", 0, 0);
 var $38=$37;
 $fromtree=$38;
 var $39=$totree;
 var $40=$39;
 SAFE_HEAP_STORE(2376, $40, "i8*", 0);
 var $41=(($name)|0);
 var $42=_strlen($41);
 var $43=$2;
 var $44=(($43+$42)|0);
 $2=$44;
 var $45=$2;
 var $46=$3;
 var $47=$2;
 var $48=$46;
 var $49=$47;
 var $50=((($48)-($49))|0);
 var $51=_execpars($45,$50);
 SAFE_HEAP_STORE($tokhdr, $51, "%struct.apltoken*", 0);
 $tok=$51;
 label=7;break;
 case 7: 
 var $53=$tok;
 var $54=($53|0)!=0;
 if($54){label=8;break;}else{var $59=0;label=9;break;}
 case 8: 
 var $56=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $57=($56|0)==0;
 var $59=$57;label=9;break;
 case 9: 
 var $59;
 if($59){label=10;break;}else{label=15;break;}
 case 10: 
 var $61=$tok;
 var $62=(($61+4)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=($63|0)!=-4;
 if($64){label=11;break;}else{label=12;break;}
 case 11: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=13;break;
 case 12: 
 var $67=$fromtree;
 var $68=$tok;
 var $69=(($68+12)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "i8*", 0, 0);
 var $72=$4;
 _aplcpya($67,$71,$72);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $75=$tok;
 var $76=(($75)|0);
 var $77=$76;
 var $78=SAFE_HEAP_LOAD($77, "%struct.apltoken*", 0, 0);
 $tok=$78;
 label=7;break;
 case 15: 
 var $80=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $81=($80|0)==0;
 if($81){label=16;break;}else{label=17;break;}
 case 16: 
 var $83=$fromtree;
 var $84=$fromtree;
 var $85=(($84+4)|0);
 var $86=SAFE_HEAP_LOAD($85, "%struct.avlnode*", 0, 0);
 var $87=$4;
 _aplcpyb($83,$86,$87);
 label=17;break;
 case 17: 
 var $89=$fromtree;
 var $90=$89;
 SAFE_HEAP_STORE(2376, $90, "i8*", 0);
 label=18;break;
 case 18: 
 _aplclean();
 var $92=$savfile;
 SAFE_HEAP_STORE(4584, $92, "i8*", 0);
 var $93=$savfuzz;
 SAFE_HEAP_STORE(2784, $93, "double", 0);
 var $94=$savtree;
 SAFE_HEAP_STORE(2376, $94, "i8*", 0);
 var $95=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 $savxorg=$95;
 _execpop($tokhdr);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplcpyc($fromtree,$name,$rite,$pcopy){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 $1=$fromtree;
 $2=$name;
 $3=$rite;
 $4=$pcopy;
 var $5=$2;
 var $6=_treenode($5);
 $p=$6;
 var $7=$p;
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=7;break;}
 case 2: 
 var $10=$p;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "i8*", 0, 0);
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=7;break;}
 case 3: 
 var $15=$4;
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=$2;
 var $20=_strlen($19);
 var $21=$2;
 var $22=_strlen($21);
 _execmsg($18,$20,$22,12688);
 label=12;break;
 case 5: 
 var $24=$p;
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i8*", 0, 0);
 var $27=_leafdel($26);
 var $28=$p;
 var $29=(($28+8)|0);
 SAFE_HEAP_STORE($29, 0, "i8*", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $32=$3;
 var $33=$32;
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$35&256;
 var $37=($36|0)!=0;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=$3;
 var $40=$39;
 var $41=(($40+24)|0);
 var $42=SAFE_HEAP_LOAD($41, "%struct.aplcb*", 0, 0);
 var $43=_execqfx($42);
 _endoper($43);
 label=12;break;
 case 9: 
 var $45=$2;
 var $46=$3;
 var $47=$46;
 var $48=_assign($45,$47);
 var $49=$48;
 $3=$49;
 var $50=$3;
 var $51=$50;
 var $52=(($51+4)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=$53&512;
 var $55=($54|0)!=0;
 if($55){label=10;break;}else{label=11;break;}
 case 10: 
 var $57=$1;
 var $58=$3;
 var $59=$58;
 var $60=$4;
 _aplcpyd($57,$59,$60);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplcpyd($fromtree,$rite,$pcopy){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cp;
 var $s=sp;
 var $wrk;
 var $cols;
 var $i;
 var $k;
 var $rows;
 $1=$fromtree;
 $2=$rite;
 $3=$pcopy;
 var $4=$2;
 var $5=(($4+8)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=0==($6|0);
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 label=16;break;
 case 3: 
 var $10=$2;
 var $11=(($10+12)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=($12|0)==2;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=$2;
 var $16=(($15+16)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32*", 0, 0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 $rows=$18;
 var $19=$2;
 var $20=(($19+16)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32*", 0, 0);
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 $cols=$23;
 label=6;break;
 case 5: 
 $rows=1;
 var $25=$2;
 var $26=(($25+8)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 $cols=$27;
 label=6;break;
 case 6: 
 var $29=$cols;
 var $30=((($29)+(1))|0);
 var $31=_aplmall($30);
 $wrk=$31;
 var $32=$wrk;
 var $33=($32|0)==0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 label=16;break;
 case 8: 
 $i=0;
 label=9;break;
 case 9: 
 var $37=$i;
 var $38=$rows;
 var $39=($37|0)<($38|0);
 if($39){label=10;break;}else{label=15;break;}
 case 10: 
 var $41=$2;
 var $42=(($41)|0);
 var $43=$42;
 var $44=SAFE_HEAP_LOAD($43, "i8*", 0, 0);
 var $45=$cols;
 var $46=$i;
 var $47=_namelen($44,$45,$46,$s);
 $k=$47;
 var $48=0==($47|0);
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 var $50=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $51=$cols;
 var $52=$cols;
 _execmsg($50,$51,$52,12376);
 label=13;break;
 case 12: 
 var $54=$wrk;
 var $55=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $56=$k;
 var $57=_chrcopy($54,$55,$56,1);
 $cp=$57;
 var $58=$cp;
 SAFE_HEAP_STORE($58, 0, "i8", 0);
 var $59=$1;
 var $60=$wrk;
 var $61=$3;
 _aplcpya($59,$60,$61);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $64=$i;
 var $65=((($64)+(1))|0);
 $i=$65;
 label=9;break;
 case 15: 
 var $67=$wrk;
 _aplfree($67);
 label=16;break;
 case 16: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apldrop($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $q;
 var $work;
 var $filename=sp;
 var $i;
 var $j;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 var $4=$3;
 var $5=$2;
 var $6=$4;
 var $7=$5;
 var $8=((($6)-($7))|0);
 $j=$8;
 var $9=0>=($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 label=16;break;
 case 3: 
 var $12=$j;
 var $13=($12|0)>80;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=80;label=6;break;
 case 5: 
 var $16=$j;
 var $18=$16;label=6;break;
 case 6: 
 var $18;
 $j=$18;
 $i=0;
 var $19=(($filename)|0);
 $work=$19;
 label=7;break;
 case 7: 
 var $21=$i;
 var $22=$j;
 var $23=($21|0)<($22|0);
 if($23){label=8;break;}else{label=10;break;}
 case 8: 
 var $25=$2;
 var $26=$i;
 var $27=(($25+$26)|0);
 var $28=SAFE_HEAP_LOAD($27, "i8", 0, 0);
 var $29=$work;
 var $30=(($29+1)|0);
 $work=$30;
 SAFE_HEAP_STORE($29, $28, "i8", 0);
 label=9;break;
 case 9: 
 var $32=$i;
 var $33=((($32)+(1))|0);
 $i=$33;
 label=7;break;
 case 10: 
 var $35=SAFE_HEAP_LOAD(5648, "i8*", 0, 0);
 $q=$35;
 label=11;break;
 case 11: 
 var $37=$q;
 var $38=(($37+1)|0);
 $q=$38;
 var $39=SAFE_HEAP_LOAD($37, "i8", 0, 0);
 var $40=$work;
 var $41=(($40+1)|0);
 $work=$41;
 SAFE_HEAP_STORE($40, $39, "i8", 0);
 var $42=(($39<<24)>>24);
 var $43=0!=($42|0);
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 label=11;break;
 case 13: 
 var $46=(($filename)|0);
 var $47=_unlink($46);
 $i=$47;
 var $48=___errno_location();
 SAFE_HEAP_STORE($48, 0, "i32", 0);
 var $49=$i;
 var $50=($49|0)!=0;
 if($50){label=14;break;}else{label=15;break;}
 case 14: 
 var $52=$2;
 var $53=$j;
 var $54=$j;
 var $55=_execmsg($52,$53,$54,14192);
 label=16;break;
 case 15: 
 var $57=$2;
 var $58=$j;
 var $59=$j;
 var $60=_execmsg($57,$58,$59,12312);
 label=16;break;
 case 16: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledcl($e){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$e;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.aplfunc*", 0, 0);
 var $5=(($4+36)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 var $7=$1;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.aplfunc*", 0, 0);
 var $10=(($9+12)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=_expungf($6,$11);
 var $13=$1;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "%struct.aplfunc*", 0, 0);
 var $16=(($15+36)|0);
 SAFE_HEAP_STORE($16, 0, "%struct.apltoken*", 0);
 var $17=$1;
 var $18=(($17+8)|0);
 var $19=SAFE_HEAP_LOAD($18, "%struct.aplfunc*", 0, 0);
 var $20=(($19+12)|0);
 SAFE_HEAP_STORE($20, 0, "i32", 0);
 var $21=$1;
 var $22=(($21+8)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.aplfunc*", 0, 0);
 var $24=(($23+20)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 SAFE_HEAP_STORE($25, 0, "i32", 0);
 var $26=$1;
 var $27=(($26+8)|0);
 var $28=SAFE_HEAP_LOAD($27, "%struct.aplfunc*", 0, 0);
 var $29=(($28+32)|0);
 var $30=SAFE_HEAP_LOAD($29, "%struct.apltoken**", 0, 0);
 SAFE_HEAP_STORE($30, 0, "%struct.apltoken*", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _apledcm($newed,$stmt,$stmtlen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cp;
 $1=$newed;
 $2=$stmt;
 $3=$stmtlen;
 var $4=$3;
 var $5=((($4)+(1))|0);
 var $6=_aplmall($5);
 var $7=$1;
 var $8=(($7+28)|0);
 SAFE_HEAP_STORE($8, $6, "i8*", 0);
 var $9=0!=($6|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=SAFE_HEAP_LOAD($12, "i8*", 0, 0);
 var $14=$2;
 var $15=$3;
 var $16=_chrcopy($13,$14,$15,1);
 $cp=$16;
 var $17=$cp;
 SAFE_HEAP_STORE($17, 0, "i8", 0);
 label=3;break;
 case 3: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apleddl($e,$cp,$stmtlen,$tokcnt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $tok;
 var $tokhdr;
 var $ed;
 var $delno;
 var $delta_len;
 var $in_len;
 var $ok;
 var $tempsave;
 var $delta_ptr;
 var $in=sp;
 var $in_end;
 $1=$e;
 $2=$cp;
 $3=$stmtlen;
 $4=$tokcnt;
 var $5=$1;
 var $6=(($5+8)|0);
 var $7=SAFE_HEAP_LOAD($6, "%struct.aplfunc*", 0, 0);
 var $8=(($7+32)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.apltoken**", 0, 0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.apltoken*", 0, 0);
 $tokhdr=$10;
 var $11=_codechar(40);
 $delta_ptr=$11;
 var $12=_strlen($11);
 $delta_len=$12;
 var $13=$tokhdr;
 var $14=$4;
 var $15=(($13+((($14)*(24))&-1))|0);
 var $16=((($15)-(48))|0);
 var $17=(($16+12)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "i8*", 0, 0);
 SAFE_HEAP_STORE($in, $19, "i8*", 0);
 var $20=_strlen($19);
 $in_len=$20;
 label=2;break;
 case 2: 
 var $22=SAFE_HEAP_LOAD($in, "i8*", 0, 0);
 var $23=$delta_ptr;
 var $24=$delta_len;
 var $25=_memcmp($22,$23,$24);
 var $26=0==($25|0);
 var $27=($26&1);
 $ok=$27;
 var $28=$ok;
 var $29=($28|0)!=0;
 if($29){label=4;break;}else{label=3;break;}
 case 3: 
 label=16;break;
 case 4: 
 var $32=$in_len;
 var $33=$delta_len;
 var $34=($32|0)>($33|0);
 if($34){label=5;break;}else{label=10;break;}
 case 5: 
 var $36=$delta_len;
 var $37=SAFE_HEAP_LOAD($in, "i8*", 0, 0);
 var $38=(($37+$36)|0);
 SAFE_HEAP_STORE($in, $38, "i8*", 0);
 var $39=SAFE_HEAP_LOAD($in, "i8*", 0, 0);
 var $40=$in_len;
 var $41=(($39+$40)|0);
 var $42=$delta_len;
 var $43=(((-$42))|0);
 var $44=(($41+$43)|0);
 $in_end=$44;
 var $45=$in_end;
 var $46=_vector($in,$45,0);
 var $47=_value($46);
 $delno=$47;
 var $48=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $49=($48|0)==0;
 if($49){label=6;break;}else{var $54=0;label=7;break;}
 case 6: 
 var $51=$delno;
 var $52=$51>=0;
 var $54=$52;label=7;break;
 case 7: 
 var $54;
 var $55=($54&1);
 $ok=$55;
 var $56=$ok;
 var $57=($56|0)!=0;
 if($57){label=9;break;}else{label=8;break;}
 case 8: 
 label=16;break;
 case 9: 
 label=11;break;
 case 10: 
 $delno=0;
 label=11;break;
 case 11: 
 var $62=$4;
 var $63=($62|0)==3;
 if($63){label=12;break;}else{label=13;break;}
 case 12: 
 label=16;break;
 case 13: 
 var $66=$4;
 var $67=($66|0)==4;
 var $68=($67&1);
 $ok=$68;
 var $69=$ok;
 var $70=($69|0)!=0;
 if($70){label=15;break;}else{label=14;break;}
 case 14: 
 label=16;break;
 case 15: 
 var $73=$tokhdr;
 var $74=$4;
 var $75=(($73+((($74)*(24))&-1))|0);
 var $76=((($75)-(72))|0);
 var $77=$2;
 var $78=$3;
 var $79=_apledno($76,$77,$78);
 var $80=$delno;
 var $81=($80)+($79);
 $delno=$81;
 label=16;break;
 case 16: 
 var $83=$ok;
 var $84=($83|0)!=0;
 if($84){label=18;break;}else{label=17;break;}
 case 17: 
 var $86=$2;
 var $87=$3;
 _execmsg($86,$87,0,11792);
 label=29;break;
 case 18: 
 var $89=$1;
 var $90=(($89)|0);
 var $91=SAFE_HEAP_LOAD($90, "%struct.apled*", 0, 0);
 $ed=$91;
 label=19;break;
 case 19: 
 var $93=$ed;
 var $94=($93|0)!=0;
 if($94){label=20;break;}else{var $102=0;label=21;break;}
 case 20: 
 var $96=$delno;
 var $97=$ed;
 var $98=(($97+8)|0);
 var $99=SAFE_HEAP_LOAD($98, "double", 0, 0);
 var $100=$96!=$99;
 var $102=$100;label=21;break;
 case 21: 
 var $102;
 if($102){label=22;break;}else{label=24;break;}
 case 22: 
 label=23;break;
 case 23: 
 var $105=$ed;
 var $106=(($105)|0);
 var $107=SAFE_HEAP_LOAD($106, "%struct.apled*", 0, 0);
 $ed=$107;
 label=19;break;
 case 24: 
 var $109=$ed;
 var $110=($109|0)==0;
 if($110){label=25;break;}else{label=26;break;}
 case 25: 
 var $112=$2;
 var $113=$3;
 _execmsg($112,$113,0,13992);
 label=29;break;
 case 26: 
 var $115=$ed;
 var $116=(($115)|0);
 var $117=SAFE_HEAP_LOAD($116, "%struct.apled*", 0, 0);
 var $118=$1;
 var $119=(($118+16)|0);
 SAFE_HEAP_STORE($119, $117, "%struct.apled*", 0);
 var $120=0==($117|0);
 var $121=($120?1:0);
 var $122=$1;
 var $123=(($122+24)|0);
 SAFE_HEAP_STORE($123, $121, "double", 0);
 var $124=$1;
 var $125=$124;
 var $126=$ed;
 var $127=$126;
 var $128=_dequeue($125,$127);
 var $129=$ed;
 var $130=(($129+16)|0);
 var $131=SAFE_HEAP_LOAD($130, "i32", 0, 0);
 var $132=($131|0)!=0;
 if($132){label=27;break;}else{label=28;break;}
 case 27: 
 var $134=$ed;
 var $135=(($134+24)|0);
 var $136=SAFE_HEAP_LOAD($135, "%struct.apltoken*", 0, 0);
 var $137=$ed;
 var $138=(($137+20)|0);
 var $139=SAFE_HEAP_LOAD($138, "i32", 0, 0);
 var $140=_expungf($136,$139);
 label=28;break;
 case 28: 
 var $142=$ed;
 var $143=(($142+28)|0);
 var $144=SAFE_HEAP_LOAD($143, "i8*", 0, 0);
 _aplfree($144);
 var $145=$ed;
 var $146=$145;
 _aplfree($146);
 label=29;break;
 case 29: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledfm($stmtno){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $wrk;
 var $str;
 var $i;
 $1=$stmtno;
 SAFE_HEAP_STORE(5624, 0, "i8", 0);
 var $2=$1;
 var $3=_scalar($2);
 var $4=_form(0,$3);
 $wrk=$4;
 var $5=_codechar(59);
 var $6=$wrk;
 var $7=(($6)|0);
 var $8=$7;
 var $9=SAFE_HEAP_LOAD($8, "i8*", 0, 0);
 var $10=_codechar(61);
 var $11=_sprintf(5624,11576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $5, "i8*", 0),SAFE_HEAP_STORE((tempVarArgs)+(8), $9, "i8*", 0),SAFE_HEAP_STORE((tempVarArgs)+(16), $10, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $12=$wrk;
 _endoper($12);
 var $13=_strlen(5624);
 $i=$13;
 var $14=10>($13|0);
 if($14){label=2;break;}else{label=6;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $17=$i;
 var $18=10>($17|0);
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$i;
 var $21=((($20)+(1))|0);
 $i=$21;
 var $22=((5624+$20)|0);
 SAFE_HEAP_STORE($22, 32, "i8", 0);
 label=3;break;
 case 5: 
 var $24=$i;
 var $25=((5624+$24)|0);
 SAFE_HEAP_STORE($25, 0, "i8", 0);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return 5624;
  default: assert(0, "bad label: " + label);
 }

}


function _apledfr($e){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ed;
 $1=$e;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=(($3)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.apled*", 0, 0);
 $ed=$5;
 var $6=0!=($5|0);
 if($6){label=3;break;}else{label=6;break;}
 case 3: 
 var $8=$1;
 var $9=$8;
 var $10=$ed;
 var $11=$10;
 var $12=_dequeue($9,$11);
 var $13=$ed;
 var $14=(($13+16)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$ed;
 var $19=(($18+24)|0);
 var $20=SAFE_HEAP_LOAD($19, "%struct.apltoken*", 0, 0);
 var $21=$ed;
 var $22=(($21+20)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=_expungf($20,$23);
 label=5;break;
 case 5: 
 var $26=$ed;
 var $27=(($26+28)|0);
 var $28=SAFE_HEAP_LOAD($27, "i8*", 0, 0);
 _aplfree($28);
 var $29=$ed;
 var $30=$29;
 _aplfree($30);
 label=2;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledfx($e){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 var $ed;
 var $cols;
 var $i;
 var $j;
 var $k;
 var $rows;
 var $line=sp;
 var $op;
 $1=$e;
 $cols=0;
 $rows=0;
 var $2=$1;
 var $3=(($2)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.apled*", 0, 0);
 $ed=$4;
 label=2;break;
 case 2: 
 var $6=$ed;
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=9;break;}
 case 3: 
 var $9=$ed;
 var $10=(($9+28)|0);
 var $11=SAFE_HEAP_LOAD($10, "i8*", 0, 0);
 var $12=($11|0)==0;
 if($12){label=4;break;}else{label=7;break;}
 case 4: 
 var $14=(($line)|0);
 SAFE_HEAP_STORE($14, 0, "i8", 0);
 var $15=$ed;
 var $16=(($line)|0);
 _apledps($15,$16);
 var $17=(($line)|0);
 var $18=_strlen($17);
 var $19=((($18)+(1))|0);
 $i=$19;
 var $20=$i;
 var $21=_aplmall($20);
 var $22=$ed;
 var $23=(($22+28)|0);
 SAFE_HEAP_STORE($23, $21, "i8*", 0);
 var $24=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 label=9;break;
 case 6: 
 var $28=$ed;
 var $29=(($28+28)|0);
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 var $31=(($line)|0);
 var $32=_strcpy($30,$31);
 label=7;break;
 case 7: 
 var $34=$cols;
 var $35=$ed;
 var $36=(($35+28)|0);
 var $37=SAFE_HEAP_LOAD($36, "i8*", 0, 0);
 var $38=_strlen($37);
 var $39=_imax($34,$38);
 $cols=$39;
 var $40=$rows;
 var $41=((($40)+(1))|0);
 $rows=$41;
 label=8;break;
 case 8: 
 var $43=$ed;
 var $44=(($43)|0);
 var $45=SAFE_HEAP_LOAD($44, "%struct.apled*", 0, 0);
 $ed=$45;
 label=2;break;
 case 9: 
 var $47=$rows;
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 label=20;break;
 case 11: 
 var $51=$rows;
 var $52=$cols;
 var $53=(Math_imul($51,$52)|0);
 var $54=_getcb(0,$53,9,2,0);
 $out=$54;
 var $55=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $56=($55|0)!=0;
 if($56){label=12;break;}else{label=13;break;}
 case 12: 
 label=20;break;
 case 13: 
 var $59=$rows;
 var $60=$out;
 var $61=(($60+16)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32*", 0, 0);
 SAFE_HEAP_STORE($62, $59, "i32", 0);
 var $63=$cols;
 var $64=$out;
 var $65=(($64+16)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32*", 0, 0);
 var $67=(($66+4)|0);
 SAFE_HEAP_STORE($67, $63, "i32", 0);
 var $68=$out;
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "i8*", 0, 0);
 $op=$71;
 var $72=$1;
 var $73=(($72)|0);
 var $74=SAFE_HEAP_LOAD($73, "%struct.apled*", 0, 0);
 $ed=$74;
 label=14;break;
 case 14: 
 var $76=$ed;
 var $77=($76|0)!=0;
 if($77){label=15;break;}else{label=19;break;}
 case 15: 
 var $79=$ed;
 var $80=(($79+28)|0);
 var $81=SAFE_HEAP_LOAD($80, "i8*", 0, 0);
 var $82=_strlen($81);
 $i=$82;
 var $83=$op;
 var $84=$ed;
 var $85=(($84+28)|0);
 var $86=SAFE_HEAP_LOAD($85, "i8*", 0, 0);
 var $87=$i;
 var $88=_chrcopy($83,$86,$87,1);
 $op=$88;
 var $89=$cols;
 var $90=$i;
 var $91=((($89)-($90))|0);
 $j=$91;
 var $92=0<($91|0);
 if($92){label=16;break;}else{label=17;break;}
 case 16: 
 var $94=$op;
 var $95=$j;
 var $96=_chrcopy($94,11488,$95,0);
 $op=$96;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $99=$ed;
 var $100=(($99)|0);
 var $101=SAFE_HEAP_LOAD($100, "%struct.apled*", 0, 0);
 $ed=$101;
 label=14;break;
 case 19: 
 var $103=$out;
 var $104=_execqfx($103);
 var $105=_endoper($104);
 label=20;break;
 case 20: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledit($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $e=sp;
 var $v;
 var $nametok;
 var $tokhdr=(sp)+(32);
 var $stmtlen;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 var $4=(($e+16)|0);
 SAFE_HEAP_STORE($4, 0, "%struct.apled*", 0);
 var $5=(($e+4)|0);
 SAFE_HEAP_STORE($5, 0, "%struct.apled*", 0);
 var $6=(($e)|0);
 SAFE_HEAP_STORE($6, 0, "%struct.apled*", 0);
 var $7=(($e+8)|0);
 SAFE_HEAP_STORE($7, 0, "%struct.aplfunc*", 0);
 var $8=(($e+12)|0);
 SAFE_HEAP_STORE($8, 0, "%struct.apltoken*", 0);
 var $9=(($e+24)|0);
 SAFE_HEAP_STORE($9, 1, "double", 0);
 var $10=$3;
 var $11=$2;
 var $12=$10;
 var $13=$11;
 var $14=((($12)-($13))|0);
 $stmtlen=$14;
 var $15=$2;
 var $16=$stmtlen;
 var $17=_execpars($15,$16);
 SAFE_HEAP_STORE($tokhdr, $17, "%struct.apltoken*", 0);
 var $18=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $19=($18|0)==0;
 if($19){label=2;break;}else{label=23;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $22=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $23=($22|0)!=0;
 if($23){label=4;break;}else{label=20;break;}
 case 4: 
 var $25=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($27|0)==39;
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 var $30=$tokhdr;
 var $31=_pop($30);
 var $32=$31;
 var $33=(($e+12)|0);
 SAFE_HEAP_STORE($33, $32, "%struct.apltoken*", 0);
 label=6;break;
 case 6: 
 var $35=_execqfxa(0);
 var $36=(($e+8)|0);
 SAFE_HEAP_STORE($36, $35, "%struct.aplfunc*", 0);
 var $37=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $38=($37|0)!=0;
 if($38){label=7;break;}else{label=8;break;}
 case 7: 
 label=20;break;
 case 8: 
 var $41=(($e+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "%struct.aplfunc*", 0, 0);
 var $43=(($42+16)|0);
 SAFE_HEAP_STORE($43, 1, "i32", 0);
 var $44=(($e+8)|0);
 var $45=SAFE_HEAP_LOAD($44, "%struct.aplfunc*", 0, 0);
 _execqfxj($45);
 var $46=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $47=($46|0)!=0;
 if($47){label=9;break;}else{label=10;break;}
 case 9: 
 label=20;break;
 case 10: 
 var $50=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $51=(($e+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "%struct.aplfunc*", 0, 0);
 var $53=(($52+32)|0);
 var $54=SAFE_HEAP_LOAD($53, "%struct.apltoken**", 0, 0);
 SAFE_HEAP_STORE($54, $50, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($tokhdr, 0, "%struct.apltoken*", 0);
 var $55=(($e+8)|0);
 var $56=SAFE_HEAP_LOAD($55, "%struct.aplfunc*", 0, 0);
 _execqfxk($56);
 var $57=(($e+8)|0);
 var $58=SAFE_HEAP_LOAD($57, "%struct.aplfunc*", 0, 0);
 var $59=_execqfxl($58);
 $nametok=$59;
 var $60=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $61=($60|0)==27;
 if($61){label=11;break;}else{label=12;break;}
 case 11: 
 label=20;break;
 case 12: 
 var $64=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $65=($64|0)!=0;
 if($65){label=15;break;}else{label=13;break;}
 case 13: 
 var $67=(($e+8)|0);
 var $68=SAFE_HEAP_LOAD($67, "%struct.aplfunc*", 0, 0);
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=$70&256;
 var $72=($71|0)!=0;
 if($72){label=14;break;}else{label=16;break;}
 case 14: 
 var $74=(($e+8)|0);
 var $75=SAFE_HEAP_LOAD($74, "%struct.aplfunc*", 0, 0);
 var $76=(($75+12)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=1==($77|0);
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 var $80=$2;
 var $81=$stmtlen;
 _aplediu($e,$80,$81);
 label=17;break;
 case 16: 
 _aplediv($e);
 label=17;break;
 case 17: 
 var $84=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $85=($84|0)==0;
 if($85){label=18;break;}else{label=19;break;}
 case 18: 
 _apledfx($e);
 label=19;break;
 case 19: 
 label=3;break;
 case 20: 
 var $89=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $90=($89|0)!=0;
 if($90){label=21;break;}else{label=22;break;}
 case 21: 
 var $92=$2;
 var $93=$stmtlen;
 _execmsg($92,$93,0,0);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 _apledfr($e);
 var $96=(($e+8)|0);
 var $97=SAFE_HEAP_LOAD($96, "%struct.aplfunc*", 0, 0);
 var $98=_expunge($97);
 $v=$98;
 _execpop($tokhdr);
 var $99=(($e+12)|0);
 var $100=SAFE_HEAP_LOAD($99, "%struct.apltoken*", 0, 0);
 _execfree($100);
 var $101=$1;
 _endoper($101);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}


function _aplediu($e,$cp,$stmtlen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $wrk;
 var $fun;
 var $curtok;
 var $tokhdr;
 var $p;
 var $tokcnt;
 $1=$e;
 $2=$cp;
 $3=$stmtlen;
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 var $4=$1;
 var $5=(($4+8)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.aplfunc*", 0, 0);
 var $7=(($6+20)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32*", 0, 0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $tokcnt=$9;
 var $10=$1;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "%struct.aplfunc*", 0, 0);
 var $13=(($12+32)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.apltoken**", 0, 0);
 var $15=SAFE_HEAP_LOAD($14, "%struct.apltoken*", 0, 0);
 $tokhdr=$15;
 var $16=$tokhdr;
 var $17=$tokcnt;
 var $18=((($17)-(1))|0);
 $tokcnt=$18;
 var $19=(($16+((($18)*(24))&-1))|0);
 var $20=_execqfxe($19,-4,114);
 $curtok=$20;
 var $21=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $22=($21|0)!=0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 label=16;break;
 case 3: 
 var $25=$curtok;
 var $26=(($25+12)|0);
 var $27=$26;
 var $28=SAFE_HEAP_LOAD($27, "i8*", 0, 0);
 var $29=_treenode($28);
 $p=$29;
 var $30=0==($29|0);
 if($30){label=5;break;}else{label=4;break;}
 case 4: 
 var $32=$p;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i8*", 0, 0);
 var $35=$34;
 $wrk=$35;
 var $36=0==($35|0);
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $38=$1;
 _aplediv($38);
 label=16;break;
 case 6: 
 var $40=$wrk;
 var $41=(($40+4)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=$42&256;
 var $44=($43|0)!=0;
 if($44){label=8;break;}else{label=7;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 115, "i32", 0);
 label=16;break;
 case 8: 
 var $47=$p;
 var $48=(($47+8)|0);
 var $49=SAFE_HEAP_LOAD($48, "i8*", 0, 0);
 var $50=$49;
 $fun=$50;
 var $51=$1;
 var $52=$fun;
 var $53=_aplediw($51,$52);
 var $54=$tokcnt;
 var $55=($54|0)==0;
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 var $57=$1;
 _apledcl($57);
 label=13;break;
 case 10: 
 var $59=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $60=($59|0)==0;
 if($60){label=11;break;}else{label=12;break;}
 case 11: 
 var $62=$1;
 var $63=$2;
 var $64=$3;
 var $65=$tokcnt;
 _aplediy($62,$63,$64,0,$65);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $68=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $69=($68|0)==0;
 if($69){label=14;break;}else{label=16;break;}
 case 14: 
 var $71=$1;
 var $72=(($71+12)|0);
 var $73=SAFE_HEAP_LOAD($72, "%struct.apltoken*", 0, 0);
 var $74=($73|0)==0;
 if($74){label=15;break;}else{label=16;break;}
 case 15: 
 var $76=$1;
 _aplediz($76);
 label=16;break;
 case 16: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplediv($e){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $wrk;
 var $curtok;
 var $tokhdr;
 var $p;
 var $olded;
 var $newed;
 $1=$e;
 $newed=0;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.aplfunc*", 0, 0);
 var $5=(($4+28)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 var $7=(($6+12)|0);
 var $8=$7;
 var $9=SAFE_HEAP_LOAD($8, "i8*", 0, 0);
 var $10=_treenode($9);
 $p=$10;
 var $11=0!=($10|0);
 if($11){label=2;break;}else{label=4;break;}
 case 2: 
 var $13=$p;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=$15;
 $wrk=$16;
 var $17=0!=($16|0);
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4592, 115, "i32", 0);
 label=7;break;
 case 4: 
 var $20=$1;
 var $21=$newed;
 var $22=$1;
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.aplfunc*", 0, 0);
 var $25=(($24+32)|0);
 var $26=SAFE_HEAP_LOAD($25, "%struct.apltoken**", 0, 0);
 var $27=SAFE_HEAP_LOAD($26, "%struct.apltoken*", 0, 0);
 var $28=$1;
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "%struct.aplfunc*", 0, 0);
 var $31=(($30+20)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=_apledix($20,$21,$27,$33,0,1);
 $newed=$34;
 var $35=$1;
 var $36=(($35+8)|0);
 var $37=SAFE_HEAP_LOAD($36, "%struct.aplfunc*", 0, 0);
 var $38=(($37+32)|0);
 var $39=SAFE_HEAP_LOAD($38, "%struct.apltoken**", 0, 0);
 SAFE_HEAP_STORE($39, 0, "%struct.apltoken*", 0);
 var $40=$1;
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "%struct.aplfunc*", 0, 0);
 var $43=(($42+36)|0);
 SAFE_HEAP_STORE($43, 0, "%struct.apltoken*", 0);
 var $44=$1;
 var $45=(($44+8)|0);
 var $46=SAFE_HEAP_LOAD($45, "%struct.aplfunc*", 0, 0);
 var $47=(($46+20)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32*", 0, 0);
 SAFE_HEAP_STORE($48, 0, "i32", 0);
 var $49=$1;
 var $50=(($49+8)|0);
 var $51=SAFE_HEAP_LOAD($50, "%struct.aplfunc*", 0, 0);
 var $52=(($51+12)|0);
 SAFE_HEAP_STORE($52, 0, "i32", 0);
 var $53=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $54=($53|0)==0;
 if($54){label=5;break;}else{label=7;break;}
 case 5: 
 var $56=$1;
 var $57=(($56+12)|0);
 var $58=SAFE_HEAP_LOAD($57, "%struct.apltoken*", 0, 0);
 var $59=($58|0)==0;
 if($59){label=6;break;}else{label=7;break;}
 case 6: 
 var $61=$1;
 _aplediz($61);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplediw($e,$fun){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $labels;
 var $tokhdr;
 var $olded;
 var $newed;
 var $edhdr;
 var $istmtno;
 var $stmtlen;
 var $tokcnt;
 $2=$e;
 $3=$fun;
 $newed=0;
 $edhdr=0;
 var $4=$3;
 var $5=(($4+44)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 $labels=$6;
 $istmtno=0;
 label=2;break;
 case 2: 
 var $8=$istmtno;
 var $9=$3;
 var $10=(($9+16)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=($8|0)<($11|0);
 if($12){label=3;break;}else{label=12;break;}
 case 3: 
 var $14=$3;
 var $15=(($14+32)|0);
 var $16=SAFE_HEAP_LOAD($15, "%struct.apltoken**", 0, 0);
 var $17=$istmtno;
 var $18=(($16+($17<<2))|0);
 var $19=SAFE_HEAP_LOAD($18, "%struct.apltoken*", 0, 0);
 $tokhdr=$19;
 var $20=$3;
 var $21=(($20+20)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 var $23=$istmtno;
 var $24=(($22+($23<<2))|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 $tokcnt=$25;
 var $26=$labels;
 var $27=($26|0)!=0;
 if($27){label=4;break;}else{label=6;break;}
 case 4: 
 var $29=$labels;
 var $30=(($29+8)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=$istmtno;
 var $33=($31|0)==($32|0);
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 var $35=$tokcnt;
 var $36=((($35)+(2))|0);
 $tokcnt=$36;
 var $37=$labels;
 var $38=(($37)|0);
 var $39=$38;
 var $40=SAFE_HEAP_LOAD($39, "%struct.apltoken*", 0, 0);
 $labels=$40;
 label=6;break;
 case 6: 
 var $42=$2;
 var $43=$newed;
 var $44=$tokhdr;
 var $45=$tokcnt;
 var $46=$istmtno;
 var $47=($46|0);
 var $48=_apledix($42,$43,$44,$45,$47,0);
 $newed=$48;
 var $49=$newed;
 var $50=($49|0)==0;
 if($50){label=7;break;}else{label=8;break;}
 case 7: 
 label=12;break;
 case 8: 
 var $53=$tokhdr;
 var $54=(($53+4)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=($55|0)==2;
 if($56){label=9;break;}else{label=10;break;}
 case 9: 
 var $58=$3;
 var $59=(($58+24)|0);
 var $60=SAFE_HEAP_LOAD($59, "%struct.aplcb*", 0, 0);
 var $61=(($60+16)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32*", 0, 0);
 var $63=(($62+4)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 $stmtlen=$64;
 var $65=$newed;
 var $66=$3;
 var $67=(($66+24)|0);
 var $68=SAFE_HEAP_LOAD($67, "%struct.aplcb*", 0, 0);
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "i8*", 0, 0);
 var $72=$istmtno;
 var $73=$stmtlen;
 var $74=(Math_imul($72,$73)|0);
 var $75=(($71+$74)|0);
 var $76=$stmtlen;
 _apledcm($65,$75,$76);
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $79=$istmtno;
 var $80=((($79)+(1))|0);
 $istmtno=$80;
 label=2;break;
 case 12: 
 var $82=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }

}


function _apledix($e,$olded,$tokhdr,$tokcnt,$stmtno,$flag){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $newed;
 $2=$e;
 $3=$olded;
 $4=$tokhdr;
 $5=$tokcnt;
 $6=$stmtno;
 $7=$flag;
 var $8=_aplmall(32);
 var $9=$8;
 $newed=$9;
 var $10=0==($9|0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 var $13=$6;
 var $14=$newed;
 var $15=(($14+8)|0);
 SAFE_HEAP_STORE($15, $13, "double", 0);
 var $16=$7;
 var $17=$newed;
 var $18=(($17+16)|0);
 SAFE_HEAP_STORE($18, $16, "i32", 0);
 var $19=$5;
 var $20=$newed;
 var $21=(($20+20)|0);
 SAFE_HEAP_STORE($21, $19, "i32", 0);
 var $22=$4;
 var $23=$newed;
 var $24=(($23+24)|0);
 SAFE_HEAP_STORE($24, $22, "%struct.apltoken*", 0);
 var $25=$newed;
 var $26=(($25+28)|0);
 SAFE_HEAP_STORE($26, 0, "i8*", 0);
 var $27=$2;
 var $28=$27;
 var $29=$3;
 var $30=$29;
 var $31=$newed;
 var $32=$31;
 _enqueue($28,$30,$32);
 var $33=$newed;
 $1=$33;
 label=4;break;
 case 4: 
 var $35=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _aplediy($e,$cp,$stmtlen,$cpn,$tokcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $tokhdr;
 var $newstmt;
 $1=$e;
 $2=$cp;
 $3=$stmtlen;
 $4=$cpn;
 $5=$tokcnt;
 var $6=$1;
 var $7=(($6+8)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.aplfunc*", 0, 0);
 var $9=(($8+32)|0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.apltoken**", 0, 0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.apltoken*", 0, 0);
 $tokhdr=$11;
 var $12=$tokhdr;
 var $13=$5;
 var $14=(($12+((($13)*(24))&-1))|0);
 var $15=((($14)-(24))|0);
 var $16=_execqfxe($15,59,0);
 var $17=0==($16|0);
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$2;
 var $20=$3;
 _execmsg($19,$20,0,10936);
 label=17;break;
 case 3: 
 var $22=$5;
 var $23=($22|0)<3;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=$2;
 var $26=$3;
 _execmsg($25,$26,0,13264);
 label=16;break;
 case 5: 
 var $28=$tokhdr;
 var $29=$5;
 var $30=(($28+((($29)*(24))&-1))|0);
 var $31=((($30)-(48))|0);
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 if(($33|0)==-4){ label=6;break;}else if(($33|0)==44){ label=7;break;}else if(($33|0)==-3){ label=8;break;}else{label=14;break;}
 case 6: 
 var $35=$1;
 var $36=$2;
 var $37=$3;
 var $38=$5;
 _apleddl($35,$36,$37,$38);
 label=15;break;
 case 7: 
 var $40=$1;
 var $41=$2;
 var $42=$3;
 var $43=$5;
 _apledqu($40,$41,$42,$43);
 label=15;break;
 case 8: 
 var $45=$5;
 var $46=($45|0)==4;
 if($46){label=9;break;}else{label=12;break;}
 case 9: 
 var $48=$tokhdr;
 var $49=(($48+4)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=($50|0)==61;
 if($51){label=10;break;}else{label=12;break;}
 case 10: 
 var $53=$tokhdr;
 var $54=(($53+24)|0);
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=($56|0)==44;
 if($57){label=11;break;}else{label=12;break;}
 case 11: 
 var $59=$1;
 var $60=$2;
 var $61=$3;
 var $62=$5;
 _apledqu($59,$60,$61,$62);
 label=13;break;
 case 12: 
 var $64=$1;
 var $65=$2;
 var $66=$3;
 var $67=$4;
 var $68=$5;
 _apledmd($64,$65,$66,$67,$68);
 label=13;break;
 case 13: 
 label=15;break;
 case 14: 
 var $71=$2;
 var $72=$3;
 _execmsg($71,$72,0,12136);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $76=$1;
 _apledcl($76);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplediz($e){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1056)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $cp;
 var $cpend;
 var $line=sp;
 var $prompt=(sp)+(1024);
 var $tp=(sp)+(1048);
 var $newno;
 var $out;
 $1=$e;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=(($3+12)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.apltoken*", 0, 0);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=10;break;}
 case 3: 
 var $8=$1;
 var $9=_aplednn($8);
 $newno=$9;
 var $10=(($prompt)|0);
 var $11=$newno;
 var $12=_apledfm($11);
 var $13=_strcpy($10,$12);
 var $14=(($prompt)|0);
 var $15=_getchrv($14);
 $out=$15;
 var $16=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=(($prompt)|0);
 var $20=(($prompt)|0);
 var $21=_strlen($20);
 _execmsg($19,$21,0,0);
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 label=9;break;
 case 5: 
 var $23=$out;
 var $24=(($23)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "i8*", 0, 0);
 SAFE_HEAP_STORE($tp, $26, "i8*", 0);
 $cp=$26;
 var $27=$cp;
 var $28=$out;
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=(($27+$30)|0);
 $cpend=$31;
 var $32=$cpend;
 var $33=_aplscan($tp,$32);
 if(($33|0)==39|($33|0)==59){ label=6;break;}else{label=7;break;}
 case 6: 
 var $35=(($line)|0);
 var $36=$cp;
 var $37=_strcpy($35,$36);
 label=8;break;
 case 7: 
 var $39=(($line)|0);
 var $40=(($prompt)|0);
 var $41=_strcpy($39,$40);
 var $42=(($line)|0);
 var $43=$cp;
 var $44=_strcat($42,$43);
 label=8;break;
 case 8: 
 var $46=$1;
 var $47=(($line)|0);
 _apledrc($46,$47);
 label=9;break;
 case 9: 
 var $49=$out;
 var $50=_endoper($49);
 label=2;break;
 case 10: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledmd($e,$cp,$stmtlen,$cpn,$tokcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $in;
 var $curtok;
 var $tokhdr;
 var $ed;
 var $wk;
 var $newno;
 var $off;
 var $line;
 $1=$e;
 $2=$cp;
 $3=$stmtlen;
 $4=$cpn;
 $5=$tokcnt;
 var $6=$1;
 var $7=(($6+8)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.aplfunc*", 0, 0);
 var $9=(($8+32)|0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.apltoken**", 0, 0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.apltoken*", 0, 0);
 $tokhdr=$11;
 var $12=$tokhdr;
 var $13=$5;
 var $14=(($12+((($13)*(24))&-1))|0);
 var $15=((($14)-(48))|0);
 var $16=$2;
 var $17=$3;
 var $18=_apledno($15,$16,$17);
 $newno=$18;
 var $19=$newno;
 var $20=-1==$19;
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 label=26;break;
 case 3: 
 $ed=0;
 var $23=$1;
 var $24=(($23)|0);
 var $25=SAFE_HEAP_LOAD($24, "%struct.apled*", 0, 0);
 $wk=$25;
 label=4;break;
 case 4: 
 var $27=$wk;
 var $28=($27|0)!=0;
 if($28){label=5;break;}else{var $36=0;label=6;break;}
 case 5: 
 var $30=$newno;
 var $31=$wk;
 var $32=(($31+8)|0);
 var $33=SAFE_HEAP_LOAD($32, "double", 0, 0);
 var $34=$30>=$33;
 var $36=$34;label=6;break;
 case 6: 
 var $36;
 if($36){label=7;break;}else{label=9;break;}
 case 7: 
 var $38=$wk;
 $ed=$38;
 label=8;break;
 case 8: 
 var $40=$wk;
 var $41=(($40)|0);
 var $42=SAFE_HEAP_LOAD($41, "%struct.apled*", 0, 0);
 $wk=$42;
 label=4;break;
 case 9: 
 var $44=$tokhdr;
 var $45=$5;
 var $46=(($44+((($45)*(24))&-1))|0);
 var $47=((($46)-(72))|0);
 var $48=_execqfxe($47,61,0);
 var $49=0!=($48|0);
 if($49){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=$ed;
 var $52=$1;
 var $53=(($52+16)|0);
 SAFE_HEAP_STORE($53, $51, "%struct.apled*", 0);
 var $54=$1;
 var $55=$newno;
 var $56=$2;
 var $57=$3;
 var $58=$4;
 var $59=$5;
 var $60=((($59)-(3))|0);
 _aplednw($54,$55,$56,$57,$58,$60);
 label=26;break;
 case 11: 
 var $62=$5;
 var $63=($62|0)>5;
 if($63){label=12;break;}else{label=13;break;}
 case 12: 
 var $65=$2;
 var $66=$3;
 _execmsg($65,$66,0,10512);
 label=26;break;
 case 13: 
 var $68=$ed;
 var $69=($68|0)==0;
 if($69){label=14;break;}else{label=15;break;}
 case 14: 
 var $71=$2;
 var $72=$3;
 _execmsg($71,$72,0,13224);
 label=26;break;
 case 15: 
 var $74=$5;
 var $75=($74|0)==4;
 if($75){label=16;break;}else{label=20;break;}
 case 16: 
 var $77=$tokhdr;
 var $78=$5;
 var $79=(($77+((($78)*(24))&-1))|0);
 var $80=((($79)-(72))|0);
 var $81=_execqfxe($80,44,0);
 var $82=0!=($81|0);
 if($82){label=17;break;}else{label=18;break;}
 case 17: 
 $off=1;
 label=19;break;
 case 18: 
 $off=-1;
 label=19;break;
 case 19: 
 label=23;break;
 case 20: 
 var $87=$tokhdr;
 var $88=$5;
 var $89=(($87+((($88)*(24))&-1))|0);
 var $90=((($89)-(96))|0);
 var $91=$2;
 var $92=$3;
 var $93=_apledno($90,$91,$92);
 $newno=$93;
 var $94=$newno;
 var $95=-1==$94;
 if($95){label=21;break;}else{label=22;break;}
 case 21: 
 label=26;break;
 case 22: 
 var $98=$newno;
 var $99=(($98)&-1);
 $off=$99;
 label=23;break;
 case 23: 
 var $101=$ed;
 var $102=_apledpr($101,0);
 $line=$102;
 var $103=$off;
 var $104=($103|0)>=0;
 if($104){label=24;break;}else{label=25;break;}
 case 24: 
 var $106=$1;
 var $107=$line;
 var $108=$off;
 _apledme($106,$107,$108);
 label=26;break;
 case 25: 
 var $110=$1;
 var $111=$line;
 _apledmf($110,$111,0,1);
 label=26;break;
 case 26: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledme($e,$line,$off){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $c;
 var $code_a;
 var $code_z;
 var $code_0;
 var $code_9;
 var $i;
 var $j;
 var $k;
 var $limit;
 var $m;
 var $n;
 var $p;
 var $stmtlen;
 var $edit=sp;
 $1=$e;
 $2=$line;
 $3=$off;
 var $4=$2;
 var $5=_strlen($4);
 $stmtlen=$5;
 var $6=$2;
 var $7=$stmtlen;
 _execmsg($6,$7,0,0);
 var $8=$3;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$stmtlen;
 var $18=$11;label=4;break;
 case 3: 
 var $13=$3;
 var $14=((($13)+(10))|0);
 var $15=$stmtlen;
 var $16=_imin($14,$15);
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 $3=$18;
 var $19=$stmtlen;
 $j=$19;
 var $20=(($edit+$19)|0);
 SAFE_HEAP_STORE($20, 0, "i8", 0);
 label=5;break;
 case 5: 
 var $22=$j;
 var $23=((($22)-(1))|0);
 $j=$23;
 var $24=($22|0)!=0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$j;
 var $27=(($edit+$26)|0);
 SAFE_HEAP_STORE($27, 32, "i8", 0);
 label=5;break;
 case 7: 
 var $29=(($edit)|0);
 var $30=$3;
 var $31=_edline($29,$30,1024,0);
 $k=$31;
 var $32=$k;
 var $33=($32|0)<0;
 if($33){label=8;break;}else{label=9;break;}
 case 8: 
 label=37;break;
 case 9: 
 var $36=_codechar(105);
 var $37=SAFE_HEAP_LOAD($36, "i8", 0, 0);
 var $38=(($37<<24)>>24);
 $code_a=$38;
 var $39=_codechar(130);
 var $40=SAFE_HEAP_LOAD($39, "i8", 0, 0);
 var $41=(($40<<24)>>24);
 $code_z=$41;
 var $42=_codechar(16);
 var $43=SAFE_HEAP_LOAD($42, "i8", 0, 0);
 var $44=(($43<<24)>>24);
 $code_0=$44;
 var $45=_codechar(25);
 var $46=SAFE_HEAP_LOAD($45, "i8", 0, 0);
 var $47=(($46<<24)>>24);
 $code_9=$47;
 $n=0;
 label=10;break;
 case 10: 
 var $49=$k;
 var $50=((($49)-(1))|0);
 $k=$50;
 var $51=($49|0)!=0;
 if($51){label=11;break;}else{label=36;break;}
 case 11: 
 var $53=$k;
 var $54=(($edit+$53)|0);
 var $55=SAFE_HEAP_LOAD($54, "i8", 0, 0);
 var $56=(($55<<24)>>24);
 $c=$56;
 var $57=$c;
 var $58=($57|0)==47;
 if($58){label=12;break;}else{label=15;break;}
 case 12: 
 var $60=$2;
 var $61=$k;
 var $62=(($60+$61)|0);
 var $63=$2;
 var $64=$k;
 var $65=(($63+$64)|0);
 var $66=(($65+1)|0);
 var $67=_strcpy($62,$66);
 var $68=$stmtlen;
 var $69=((($68)-(1))|0);
 $stmtlen=$69;
 var $70=$n;
 var $71=($70|0)!=0;
 if($71){label=13;break;}else{label=14;break;}
 case 13: 
 var $73=$n;
 var $74=((($73)-(1))|0);
 $n=$74;
 label=14;break;
 case 14: 
 label=35;break;
 case 15: 
 var $77=$c;
 var $78=$code_0;
 var $79=($77|0)>=($78|0);
 if($79){label=16;break;}else{label=18;break;}
 case 16: 
 var $81=$c;
 var $82=$code_9;
 var $83=($81|0)<=($82|0);
 if($83){label=17;break;}else{label=18;break;}
 case 17: 
 var $85=$c;
 var $86=$code_0;
 var $87=((($85)-($86))|0);
 $j=$87;
 label=23;break;
 case 18: 
 var $89=$c;
 var $90=$code_a;
 var $91=($89|0)>=($90|0);
 if($91){label=19;break;}else{label=21;break;}
 case 19: 
 var $93=$c;
 var $94=$code_z;
 var $95=($93|0)<=($94|0);
 if($95){label=20;break;}else{label=21;break;}
 case 20: 
 var $97=$c;
 var $98=$code_a;
 var $99=((($97)-($98))|0);
 var $100=((($99)+(1))|0);
 var $101=((($100)*(5))&-1);
 $j=$101;
 label=22;break;
 case 21: 
 $j=0;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $105=$j;
 var $106=($105|0)!=0;
 if($106){label=24;break;}else{label=34;break;}
 case 24: 
 var $108=$k;
 $n=$108;
 label=25;break;
 case 25: 
 var $110=$j;
 var $111=((($110)-(1))|0);
 $j=$111;
 var $112=($110|0)!=0;
 if($112){label=26;break;}else{var $117=0;label=27;break;}
 case 26: 
 var $114=$stmtlen;
 var $115=($114|0)<1023;
 var $117=$115;label=27;break;
 case 27: 
 var $117;
 if($117){label=28;break;}else{label=33;break;}
 case 28: 
 var $119=$stmtlen;
 var $120=((($119)+(1))|0);
 $stmtlen=$120;
 $m=$119;
 label=29;break;
 case 29: 
 var $122=$m;
 var $123=$n;
 var $124=($122|0)>($123|0);
 if($124){label=30;break;}else{label=32;break;}
 case 30: 
 var $126=$m;
 var $127=((($126)-(1))|0);
 var $128=$2;
 var $129=(($128+$127)|0);
 var $130=SAFE_HEAP_LOAD($129, "i8", 0, 0);
 var $131=$m;
 var $132=$2;
 var $133=(($132+$131)|0);
 SAFE_HEAP_STORE($133, $130, "i8", 0);
 label=31;break;
 case 31: 
 var $135=$m;
 var $136=((($135)-(1))|0);
 $m=$136;
 label=29;break;
 case 32: 
 var $138=$n;
 var $139=$2;
 var $140=(($139+$138)|0);
 SAFE_HEAP_STORE($140, 32, "i8", 0);
 label=25;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 label=10;break;
 case 36: 
 var $145=$1;
 var $146=$2;
 var $147=$n;
 _apledmf($145,$146,$147,0);
 label=37;break;
 case 37: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledmf($e,$line,$off,$insert){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $c;
 var $k;
 var $n;
 $1=$e;
 $2=$line;
 $3=$off;
 $4=$insert;
 var $5=$2;
 var $6=$3;
 var $7=$4;
 var $8=_edline($5,$6,1024,$7);
 $k=$8;
 var $9=$1;
 _apledcl($9);
 var $10=$1;
 var $11=$2;
 _apledrc($10,$11);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _aplednn($e){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $newno;
 var $nxtno;
 var $i;
 var $j;
 var $k;
 var $prenew=sp;
 var $prenxt=(sp)+(8);
 $1=$e;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.apled*", 0, 0);
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.apled*", 0, 0);
 var $10=$1;
 var $11=(($10+16)|0);
 SAFE_HEAP_STORE($11, $9, "%struct.apled*", 0);
 label=3;break;
 case 3: 
 var $13=$1;
 var $14=(($13+16)|0);
 var $15=SAFE_HEAP_LOAD($14, "%struct.apled*", 0, 0);
 var $16=($15|0)==0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $newno=0;
 var $18=$1;
 var $19=(($18+24)|0);
 SAFE_HEAP_STORE($19, 1, "double", 0);
 label=19;break;
 case 5: 
 var $21=$1;
 var $22=(($21+24)|0);
 var $23=SAFE_HEAP_LOAD($22, "double", 0, 0);
 var $24=$23==0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$1;
 var $27=(($26+16)|0);
 var $28=SAFE_HEAP_LOAD($27, "%struct.apled*", 0, 0);
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "double", 0, 0);
 $newno=$30;
 var $31=$1;
 var $32=(($31+24)|0);
 SAFE_HEAP_STORE($32, 1, "double", 0);
 label=18;break;
 case 7: 
 var $34=$1;
 var $35=(($34+16)|0);
 var $36=SAFE_HEAP_LOAD($35, "%struct.apled*", 0, 0);
 var $37=(($36)|0);
 var $38=SAFE_HEAP_LOAD($37, "%struct.apled*", 0, 0);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 var $41=$1;
 var $42=(($41+16)|0);
 var $43=SAFE_HEAP_LOAD($42, "%struct.apled*", 0, 0);
 var $44=(($43+8)|0);
 var $45=SAFE_HEAP_LOAD($44, "double", 0, 0);
 var $46=$1;
 var $47=(($46+24)|0);
 SAFE_HEAP_STORE($47, 1, "double", 0);
 var $48=($45)+(1);
 $newno=$48;
 label=17;break;
 case 9: 
 label=10;break;
 case 10: 
 var $51=$1;
 var $52=(($51+16)|0);
 var $53=SAFE_HEAP_LOAD($52, "%struct.apled*", 0, 0);
 var $54=(($53+8)|0);
 var $55=SAFE_HEAP_LOAD($54, "double", 0, 0);
 var $56=$1;
 var $57=(($56+24)|0);
 var $58=SAFE_HEAP_LOAD($57, "double", 0, 0);
 var $59=($55)+($58);
 $newno=$59;
 var $60=$newno;
 var $61=$1;
 var $62=(($61+16)|0);
 var $63=SAFE_HEAP_LOAD($62, "%struct.apled*", 0, 0);
 var $64=(($63)|0);
 var $65=SAFE_HEAP_LOAD($64, "%struct.apled*", 0, 0);
 var $66=(($65+8)|0);
 var $67=SAFE_HEAP_LOAD($66, "double", 0, 0);
 $nxtno=$67;
 var $68=$60<$67;
 if($68){label=11;break;}else{label=12;break;}
 case 11: 
 label=16;break;
 case 12: 
 var $71=$newno;
 var $72=(($prenew)|0);
 _precisn($71,$72);
 var $73=$nxtno;
 var $74=(($prenxt)|0);
 _precisn($73,$74);
 var $75=(($prenew+4)|0);
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 $i=$76;
 var $77=(($prenxt+4)|0);
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 $j=$78;
 var $79=$i;
 var $80=$j;
 var $81=($79|0)>($80|0);
 if($81){label=13;break;}else{label=14;break;}
 case 13: 
 var $83=$i;
 var $87=$83;label=15;break;
 case 14: 
 var $85=$j;
 var $87=$85;label=15;break;
 case 15: 
 var $87;
 var $88=((($87)+(1))|0);
 $i=$88;
 var $89=$i;
 var $90=($89|0);
 var $91=((-.0))-($90);
 var $92=_power(10,$91);
 var $93=$1;
 var $94=(($93+24)|0);
 SAFE_HEAP_STORE($94, $92, "double", 0);
 label=10;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $99=$newno;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $99;
  default: assert(0, "bad label: " + label);
 }

}


function _apledno($tok,$cp,$stmtlen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $in;
 var $ret;
 var $tempsave;
 $2=$tok;
 $3=$cp;
 $4=$stmtlen;
 var $5=$2;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($7|0)!=-3;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$3;
 var $11=$4;
 _execmsg($10,$11,0,9824);
 $1=-1;
 label=8;break;
 case 3: 
 var $13=$2;
 var $14=(($13+12)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "%struct.aplcb*", 0, 0);
 $in=$16;
 var $17=$in;
 var $18=(($17+4)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=$19&1;
 $tempsave=$20;
 var $21=$in;
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=((($23)-($20))|0);
 SAFE_HEAP_STORE($22, $24, "i32", 0);
 var $25=$in;
 var $26=_value($25);
 $ret=$26;
 var $27=$tempsave;
 var $28=$in;
 var $29=(($28+4)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=((($30)+($27))|0);
 SAFE_HEAP_STORE($29, $31, "i32", 0);
 var $32=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $33=($32|0)!=0;
 if($33){label=4;break;}else{label=5;break;}
 case 4: 
 var $35=$3;
 var $36=$4;
 _execmsg($35,$36,0,0);
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 $1=-1;
 label=8;break;
 case 5: 
 var $38=$ret;
 var $39=$38<0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $41=$3;
 var $42=$4;
 _execmsg($41,$42,0,13064);
 $1=-1;
 label=8;break;
 case 7: 
 var $44=$ret;
 $1=$44;
 label=8;break;
 case 8: 
 var $46=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $46;
  default: assert(0, "bad label: " + label);
 }

}


function _aplednw($e,$newno,$cp,$stmtlen,$cpn,$tokcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $newhdr;
 var $newtok;
 var $tokhdr;
 var $oldno;
 var $i;
 $1=$e;
 $2=$newno;
 $3=$cp;
 $4=$stmtlen;
 $5=$cpn;
 $6=$tokcnt;
 var $7=$1;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.aplfunc*", 0, 0);
 var $10=(($9+32)|0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.apltoken**", 0, 0);
 var $12=SAFE_HEAP_LOAD($11, "%struct.apltoken*", 0, 0);
 $tokhdr=$12;
 var $13=$6;
 var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=15;break;}
 case 2: 
 var $16=$6;
 var $17=((($16)*(24))&-1);
 var $18=_aplmall($17);
 var $19=$18;
 $newtok=$19;
 $newhdr=$19;
 var $20=$6;
 $i=$20;
 label=3;break;
 case 3: 
 var $22=$i;
 var $23=($22|0)>0;
 if($23){label=4;break;}else{label=6;break;}
 case 4: 
 var $25=$newtok;
 var $26=$tokhdr;
 var $27=(($26+24)|0);
 $tokhdr=$27;
 var $28=_execqfxc($25,$26);
 $newtok=$28;
 label=5;break;
 case 5: 
 var $30=$i;
 var $31=((($30)-(1))|0);
 $i=$31;
 label=3;break;
 case 6: 
 var $33=$1;
 var $34=(($33+16)|0);
 var $35=SAFE_HEAP_LOAD($34, "%struct.apled*", 0, 0);
 var $36=($35|0)!=0;
 if($36){label=7;break;}else{label=11;break;}
 case 7: 
 var $38=$1;
 var $39=(($38+16)|0);
 var $40=SAFE_HEAP_LOAD($39, "%struct.apled*", 0, 0);
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "double", 0, 0);
 var $43=$2;
 var $44=$42==$43;
 if($44){label=8;break;}else{label=11;break;}
 case 8: 
 var $46=$1;
 var $47=(($46+16)|0);
 var $48=SAFE_HEAP_LOAD($47, "%struct.apled*", 0, 0);
 var $49=(($48+16)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=($50|0)!=0;
 if($51){label=9;break;}else{label=10;break;}
 case 9: 
 var $53=$1;
 var $54=(($53+16)|0);
 var $55=SAFE_HEAP_LOAD($54, "%struct.apled*", 0, 0);
 var $56=(($55+24)|0);
 var $57=SAFE_HEAP_LOAD($56, "%struct.apltoken*", 0, 0);
 var $58=$1;
 var $59=(($58+16)|0);
 var $60=SAFE_HEAP_LOAD($59, "%struct.apled*", 0, 0);
 var $61=(($60+20)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=_expungf($57,$62);
 label=10;break;
 case 10: 
 var $65=$newhdr;
 var $66=$1;
 var $67=(($66+16)|0);
 var $68=SAFE_HEAP_LOAD($67, "%struct.apled*", 0, 0);
 var $69=(($68+24)|0);
 SAFE_HEAP_STORE($69, $65, "%struct.apltoken*", 0);
 var $70=$6;
 var $71=$1;
 var $72=(($71+16)|0);
 var $73=SAFE_HEAP_LOAD($72, "%struct.apled*", 0, 0);
 var $74=(($73+20)|0);
 SAFE_HEAP_STORE($74, $70, "i32", 0);
 var $75=$1;
 var $76=(($75+16)|0);
 var $77=SAFE_HEAP_LOAD($76, "%struct.apled*", 0, 0);
 var $78=(($77+16)|0);
 SAFE_HEAP_STORE($78, 1, "i32", 0);
 label=12;break;
 case 11: 
 var $80=$1;
 var $81=$1;
 var $82=(($81+16)|0);
 var $83=SAFE_HEAP_LOAD($82, "%struct.apled*", 0, 0);
 var $84=$newhdr;
 var $85=$6;
 var $86=$2;
 var $87=_apledix($80,$83,$84,$85,$86,1);
 var $88=$1;
 var $89=(($88+16)|0);
 SAFE_HEAP_STORE($89, $87, "%struct.apled*", 0);
 label=12;break;
 case 12: 
 var $91=$1;
 var $92=(($91+16)|0);
 var $93=SAFE_HEAP_LOAD($92, "%struct.apled*", 0, 0);
 var $94=(($93+24)|0);
 var $95=SAFE_HEAP_LOAD($94, "%struct.apltoken*", 0, 0);
 var $96=(($95+4)|0);
 var $97=SAFE_HEAP_LOAD($96, "i32", 0, 0);
 var $98=($97|0)==2;
 if($98){label=13;break;}else{label=14;break;}
 case 13: 
 var $100=$1;
 var $101=(($100+16)|0);
 var $102=SAFE_HEAP_LOAD($101, "%struct.apled*", 0, 0);
 var $103=$5;
 var $104=$4;
 var $105=$5;
 var $106=$3;
 var $107=$105;
 var $108=$106;
 var $109=((($107)-($108))|0);
 var $110=((($104)-($109))|0);
 _apledcm($102,$103,$110);
 label=14;break;
 case 14: 
 label=22;break;
 case 15: 
 var $113=$1;
 var $114=(($113+16)|0);
 var $115=SAFE_HEAP_LOAD($114, "%struct.apled*", 0, 0);
 var $116=($115|0)==0;
 if($116){label=16;break;}else{label=17;break;}
 case 16: 
 var $125=0;label=18;break;
 case 17: 
 var $119=$1;
 var $120=(($119+16)|0);
 var $121=SAFE_HEAP_LOAD($120, "%struct.apled*", 0, 0);
 var $122=(($121+8)|0);
 var $123=SAFE_HEAP_LOAD($122, "double", 0, 0);
 var $125=$123;label=18;break;
 case 18: 
 var $125;
 $oldno=$125;
 var $126=$oldno;
 var $127=$2;
 var $128=$126==$127;
 if($128){label=19;break;}else{label=20;break;}
 case 19: 
 var $130=$1;
 var $131=(($130+24)|0);
 SAFE_HEAP_STORE($131, 0, "double", 0);
 label=21;break;
 case 20: 
 var $133=$2;
 var $134=$oldno;
 var $135=($133)-($134);
 var $136=$1;
 var $137=(($136+24)|0);
 SAFE_HEAP_STORE($137, $135, "double", 0);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledpf($no,$line,$display){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $str;
 $1=$no;
 $2=$line;
 $3=$display;
 var $4=$1;
 var $5=$4==0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=$3;
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$2;
 var $11=_codechar(39);
 var $12=_sprintf($10,9320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $11, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 4: 
 var $14=$2;
 var $15=$1;
 var $16=_apledfm($15);
 var $17=_strcpy($14,$16);
 label=5;break;
 case 5: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledpq($code,$line){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 $1=$code;
 $2=$line;
 var $3=$1;
 switch(($3|0)){case -18:{ label=10;break;}case -19:{ label=11;break;}case -20:{ label=12;break;}case -21:{ label=13;break;}case -22:{ label=14;break;}case -23:{ label=15;break;}case -24:{ label=16;break;}case -25:{ label=17;break;}case -26:{ label=18;break;}case -27:{ label=19;break;}case -11:{ label=2;break;}case -28:{ label=20;break;}case -29:{ label=21;break;}case -30:{ label=22;break;}case -31:{ label=23;break;}case -12:{ label=3;break;}case -13:{ label=4;break;}case -14:{ label=5;break;}case -15:{ label=6;break;}case -32:{ label=7;break;}case -16:{ label=8;break;}case -17:{ label=9;break;}default:{label=24;break;}}break;
 case 2: 
 $i=105;
 $j=113;
 label=24;break;
 case 3: 
 $i=105;
 $j=126;
 label=24;break;
 case 4: 
 $i=107;
 $j=122;
 label=24;break;
 case 5: 
 $i=107;
 $j=124;
 label=24;break;
 case 6: 
 $i=108;
 $j=116;
 label=24;break;
 case 7: 
 $i=109;
 $j=105;
 label=24;break;
 case 8: 
 $i=109;
 $j=128;
 label=24;break;
 case 9: 
 $i=110;
 $j=128;
 label=24;break;
 case 10: 
 $i=112;
 $j=124;
 label=24;break;
 case 11: 
 $i=113;
 $j=119;
 label=24;break;
 case 12: 
 $i=116;
 $j=107;
 label=24;break;
 case 13: 
 $i=116;
 $j=128;
 label=24;break;
 case 14: 
 $i=118;
 $j=107;
 label=24;break;
 case 15: 
 $i=118;
 $j=116;
 label=24;break;
 case 16: 
 $i=120;
 $j=120;
 label=24;break;
 case 17: 
 $i=120;
 $j=127;
 label=24;break;
 case 18: 
 $i=122;
 $j=116;
 label=24;break;
 case 19: 
 $i=124;
 $j=107;
 label=24;break;
 case 20: 
 $i=124;
 $j=123;
 label=24;break;
 case 21: 
 $i=124;
 $j=124;
 label=24;break;
 case 22: 
 $i=125;
 $j=116;
 label=24;break;
 case 23: 
 $i=127;
 $j=105;
 label=24;break;
 case 24: 
 var $27=$2;
 var $28=_codechar(44);
 var $29=_strcat($27,$28);
 var $30=$2;
 var $31=$i;
 var $32=_codechar($31);
 var $33=_strcat($30,$32);
 var $34=$2;
 var $35=$j;
 var $36=_codechar($35);
 var $37=_strcat($34,$36);
 var $38=$2;
 var $39=_strcat($38,9240);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledpr($ed,$display){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $curtok;
 var $tokhdr;
 var $wrk;
 var $str;
 var $i;
 var $tokcnt;
 $1=$ed;
 $2=$display;
 var $3=$1;
 var $4=(($3+8)|0);
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 _apledpf($5,4600,$6);
 var $7=$1;
 _apledps($7,4600);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return 4600;
}


function _apledps($ed,$line){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $curtok;
 var $tokhdr;
 var $wrk;
 var $str;
 var $i;
 var $oplast;
 var $opnext;
 var $tokcnt;
 $1=$ed;
 $2=$line;
 var $3=$1;
 var $4=(($3+20)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 $tokcnt=$5;
 var $6=$1;
 var $7=(($6+24)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.apltoken*", 0, 0);
 $tokhdr=$8;
 var $9=$tokcnt;
 var $10=($9|0)>2;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$tokhdr;
 var $13=$tokcnt;
 var $14=(($12+((($13)*(24))&-1))|0);
 var $15=((($14)-(48))|0);
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=($17|0)==26;
 if($18){label=5;break;}else{label=3;break;}
 case 3: 
 var $20=$tokhdr;
 var $21=$tokcnt;
 var $22=(($20+((($21)*(24))&-1))|0);
 var $23=((($22)-(24))|0);
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)==2;
 if($26){label=5;break;}else{label=4;break;}
 case 4: 
 var $28=$2;
 var $29=_strcat($28,9056);
 label=5;break;
 case 5: 
 $opnext=0;
 label=6;break;
 case 6: 
 var $32=$tokcnt;
 var $33=((($32)-(1))|0);
 $tokcnt=$33;
 var $34=($32|0)!=0;
 if($34){label=7;break;}else{label=24;break;}
 case 7: 
 var $36=$tokhdr;
 var $37=$tokcnt;
 var $38=(($36+((($37)*(24))&-1))|0);
 $curtok=$38;
 var $39=$opnext;
 $oplast=$39;
 $opnext=0;
 var $40=$curtok;
 var $41=(($40+4)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 $i=$42;
 if(($42|0)==-3){ label=11;break;}else if(($42|0)==-4){ label=14;break;}else if(($42|0)==2){ label=17;break;}else if(($42|0)==7){ label=8;break;}else{label=18;break;}
 case 8: 
 var $44=$oplast;
 var $45=($44|0)!=0;
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $47=$2;
 var $48=_strcat($47,9056);
 label=10;break;
 case 10: 
 $opnext=1;
 var $50=$2;
 var $51=$2;
 var $52=_strlen($51);
 var $53=(($50+$52)|0);
 var $54=$curtok;
 var $55=(($54+12)|0);
 var $56=$55;
 var $57=SAFE_HEAP_LOAD($56, "%struct.aplcb*", 0, 0);
 var $58=(($57)|0);
 var $59=$58;
 var $60=SAFE_HEAP_LOAD($59, "i8*", 0, 0);
 _quoteit($53,$60);
 label=23;break;
 case 11: 
 var $62=$oplast;
 var $63=($62|0)!=0;
 if($63){label=12;break;}else{label=13;break;}
 case 12: 
 var $65=$2;
 var $66=_strcat($65,9056);
 label=13;break;
 case 13: 
 $opnext=1;
 var $68=$curtok;
 var $69=(($68+12)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "%struct.aplcb*", 0, 0);
 var $72=_form(0,$71);
 $wrk=$72;
 var $73=$2;
 var $74=$wrk;
 var $75=(($74)|0);
 var $76=$75;
 var $77=SAFE_HEAP_LOAD($76, "i8*", 0, 0);
 var $78=_strcat($73,$77);
 var $79=$wrk;
 _endoper($79);
 label=23;break;
 case 14: 
 var $81=$oplast;
 var $82=($81|0)!=0;
 if($82){label=15;break;}else{label=16;break;}
 case 15: 
 var $84=$2;
 var $85=_strcat($84,9056);
 label=16;break;
 case 16: 
 $opnext=1;
 var $87=$2;
 var $88=$curtok;
 var $89=(($88+12)|0);
 var $90=$89;
 var $91=SAFE_HEAP_LOAD($90, "i8*", 0, 0);
 var $92=_strcat($87,$91);
 label=23;break;
 case 17: 
 var $94=$2;
 var $95=$1;
 var $96=(($95+28)|0);
 var $97=SAFE_HEAP_LOAD($96, "i8*", 0, 0);
 var $98=$curtok;
 var $99=(($98+8)|0);
 var $100=SAFE_HEAP_LOAD($99, "i32", 0, 0);
 var $101=(($97+$100)|0);
 var $102=_strcat($94,$101);
 label=23;break;
 case 18: 
 var $104=$i;
 var $105=($104|0)<=-11;
 if($105){label=19;break;}else{label=21;break;}
 case 19: 
 var $107=$i;
 var $108=($107|0)>-99;
 if($108){label=20;break;}else{label=21;break;}
 case 20: 
 var $110=$i;
 var $111=$2;
 _apledpq($110,$111);
 label=22;break;
 case 21: 
 var $113=$2;
 var $114=$i;
 var $115=_codechar($114);
 var $116=_strcat($113,$115);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=6;break;
 case 24: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledqu($e,$cp,$stmtlen,$tokcnt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $in;
 var $curtok;
 var $tokhdr;
 var $ed;
 var $disno;
 var $tempsave;
 var $line;
 var $pf=sp;
 $1=$e;
 $2=$cp;
 $3=$stmtlen;
 $4=$tokcnt;
 var $5=$1;
 var $6=(($5+8)|0);
 var $7=SAFE_HEAP_LOAD($6, "%struct.aplfunc*", 0, 0);
 var $8=(($7+32)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.apltoken**", 0, 0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.apltoken*", 0, 0);
 $tokhdr=$10;
 var $11=$4;
 var $12=($11|0)>4;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=$tokhdr;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)!=61;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 var $19=$2;
 var $20=$3;
 _execmsg($19,$20,0,8760);
 label=24;break;
 case 4: 
 var $22=$4;
 var $23=($22|0)==3;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 $disno=0;
 label=9;break;
 case 6: 
 var $26=$tokhdr;
 var $27=$4;
 var $28=(($26+((($27)*(24))&-1))|0);
 var $29=((($28)-(48))|0);
 var $30=$2;
 var $31=$3;
 var $32=_apledno($29,$30,$31);
 $disno=$32;
 var $33=$disno;
 var $34=$33==-1;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 label=24;break;
 case 8: 
 label=9;break;
 case 9: 
 var $38=$1;
 var $39=(($38)|0);
 var $40=SAFE_HEAP_LOAD($39, "%struct.apled*", 0, 0);
 $ed=$40;
 label=10;break;
 case 10: 
 var $42=$ed;
 var $43=($42|0)!=0;
 if($43){label=11;break;}else{var $51=0;label=12;break;}
 case 11: 
 var $45=$disno;
 var $46=$ed;
 var $47=(($46+8)|0);
 var $48=SAFE_HEAP_LOAD($47, "double", 0, 0);
 var $49=$45>$48;
 var $51=$49;label=12;break;
 case 12: 
 var $51;
 if($51){label=13;break;}else{label=15;break;}
 case 13: 
 label=14;break;
 case 14: 
 var $54=$ed;
 var $55=(($54)|0);
 var $56=SAFE_HEAP_LOAD($55, "%struct.apled*", 0, 0);
 $ed=$56;
 label=10;break;
 case 15: 
 var $58=$ed;
 var $59=($58|0)==0;
 if($59){label=16;break;}else{label=17;break;}
 case 16: 
 var $61=$2;
 var $62=$3;
 _execmsg($61,$62,0,12848);
 label=24;break;
 case 17: 
 var $64=$ed;
 var $65=$1;
 var $66=(($65+16)|0);
 SAFE_HEAP_STORE($66, $64, "%struct.apled*", 0);
 label=18;break;
 case 18: 
 var $68=$1;
 var $69=(($68+16)|0);
 var $70=SAFE_HEAP_LOAD($69, "%struct.apled*", 0, 0);
 var $71=($70|0)!=0;
 if($71){label=19;break;}else{label=23;break;}
 case 19: 
 var $73=$1;
 var $74=(($73+16)|0);
 var $75=SAFE_HEAP_LOAD($74, "%struct.apled*", 0, 0);
 var $76=_apledpr($75,1);
 $line=$76;
 var $77=$line;
 var $78=$line;
 var $79=_strlen($78);
 _execmsg($77,$79,0,0);
 var $80=$4;
 var $81=($80|0)>3;
 if($81){label=20;break;}else{label=21;break;}
 case 20: 
 var $83=$1;
 var $84=(($83+24)|0);
 SAFE_HEAP_STORE($84, 0, "double", 0);
 label=24;break;
 case 21: 
 label=22;break;
 case 22: 
 var $87=$1;
 var $88=(($87+16)|0);
 var $89=SAFE_HEAP_LOAD($88, "%struct.apled*", 0, 0);
 var $90=(($89)|0);
 var $91=SAFE_HEAP_LOAD($90, "%struct.apled*", 0, 0);
 var $92=$1;
 var $93=(($92+16)|0);
 SAFE_HEAP_STORE($93, $91, "%struct.apled*", 0);
 label=18;break;
 case 23: 
 var $95=$1;
 var $96=(($95+24)|0);
 SAFE_HEAP_STORE($96, 1, "double", 0);
 var $97=$1;
 var $98=(($97+4)|0);
 var $99=SAFE_HEAP_LOAD($98, "%struct.apled*", 0, 0);
 var $100=$1;
 var $101=(($100+16)|0);
 SAFE_HEAP_STORE($101, $99, "%struct.apled*", 0);
 var $102=(($pf)|0);
 _apledpf(0,$102,1);
 var $103=(($pf)|0);
 var $104=(($pf)|0);
 var $105=_strlen($104);
 _execmsg($103,$105,0,0);
 label=24;break;
 case 24: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apledrc($e,$line){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tokhdr=sp;
 var $i;
 var $j;
 var $loop;
 var $stmtlen;
 var $tokcnt;
 var $cp=(sp)+(8);
 var $cpend;
 var $cpsave;
 $1=$e;
 $2=$line;
 $loop=1;
 label=2;break;
 case 2: 
 var $4=$loop;
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=16;break;}
 case 3: 
 var $7=$2;
 SAFE_HEAP_STORE($cp, $7, "i8*", 0);
 var $8=$2;
 var $9=_strlen($8);
 $stmtlen=$9;
 var $10=(($7+$9)|0);
 $cpend=$10;
 label=4;break;
 case 4: 
 var $12=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $13=$cpend;
 var $14=($12>>>0)<($13>>>0);
 if($14){label=5;break;}else{var $20=0;label=6;break;}
 case 5: 
 var $16=$cpend;
 var $17=_aplscan($cp,$16);
 var $18=61!=($17|0);
 var $20=$18;label=6;break;
 case 6: 
 var $20;
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 label=4;break;
 case 8: 
 var $23=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 $cpsave=$23;
 var $24=$cpend;
 var $25=_aplscan($cp,$24);
 $i=$25;
 var $26=0==($25|0);
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $28=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 $cpsave=$28;
 var $29=$cpend;
 var $30=_aplscan($cp,$29);
 $i=$30;
 label=10;break;
 case 10: 
 var $32=$i;
 var $33=($32|0)==2;
 if($33){label=11;break;}else{label=12;break;}
 case 11: 
 var $35=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $36=$2;
 var $37=$35;
 var $38=$36;
 var $39=((($37)-($38))|0);
 $j=$39;
 label=13;break;
 case 12: 
 var $41=$stmtlen;
 $j=$41;
 label=13;break;
 case 13: 
 var $43=$2;
 var $44=$j;
 var $45=_execpars($43,$44);
 SAFE_HEAP_STORE($tokhdr, $45, "%struct.apltoken*", 0);
 var $46=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 $loop=$46;
 var $47=($46|0)!=0;
 if($47){label=14;break;}else{label=15;break;}
 case 14: 
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 var $49=$2;
 var $50=_edline($49,0,1024,1);
 $j=$50;
 label=15;break;
 case 15: 
 label=2;break;
 case 16: 
 var $53=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $54=(($53+4)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=($55|0)==39;
 if($56){label=17;break;}else{label=18;break;}
 case 17: 
 var $58=$tokhdr;
 var $59=_pop($58);
 var $60=$59;
 var $61=$1;
 var $62=(($61+12)|0);
 SAFE_HEAP_STORE($62, $60, "%struct.apltoken*", 0);
 label=18;break;
 case 18: 
 var $64=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $65=($64|0)!=0;
 if($65){label=19;break;}else{label=23;break;}
 case 19: 
 var $67=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $68=$1;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "%struct.aplfunc*", 0, 0);
 var $71=(($70+32)|0);
 var $72=SAFE_HEAP_LOAD($71, "%struct.apltoken**", 0, 0);
 SAFE_HEAP_STORE($72, $67, "%struct.apltoken*", 0);
 var $73=$1;
 var $74=(($73+8)|0);
 var $75=SAFE_HEAP_LOAD($74, "%struct.aplfunc*", 0, 0);
 _execqfxk($75);
 var $76=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $77=($76|0)==0;
 if($77){label=20;break;}else{label=22;break;}
 case 20: 
 var $79=$1;
 var $80=(($79+8)|0);
 var $81=SAFE_HEAP_LOAD($80, "%struct.aplfunc*", 0, 0);
 var $82=(($81+20)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32*", 0, 0);
 var $84=SAFE_HEAP_LOAD($83, "i32", 0, 0);
 $tokcnt=$84;
 var $85=($84|0)!=0;
 if($85){label=21;break;}else{label=22;break;}
 case 21: 
 var $87=$1;
 var $88=$2;
 var $89=$stmtlen;
 var $90=$cpsave;
 var $91=$tokcnt;
 _aplediy($87,$88,$89,$90,$91);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplerase($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tok;
 var $tokhdr=sp;
 var $p;
 var $cb;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 var $4=$2;
 var $5=$3;
 var $6=$2;
 var $7=$5;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=_execpars($4,$9);
 SAFE_HEAP_STORE($tokhdr, $10, "%struct.apltoken*", 0);
 $tok=$10;
 label=2;break;
 case 2: 
 var $12=$tok;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{var $18=0;label=4;break;}
 case 3: 
 var $15=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $16=($15|0)==0;
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 if($18){label=5;break;}else{label=17;break;}
 case 5: 
 var $20=$tok;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=($22|0)!=-4;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=15;break;
 case 7: 
 var $26=$tok;
 var $27=(($26+12)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "i8*", 0, 0);
 var $30=_treenode($29);
 $p=$30;
 var $31=0!=($30|0);
 if($31){label=8;break;}else{label=13;break;}
 case 8: 
 var $33=$p;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i8*", 0, 0);
 var $36=$35;
 $cb=$36;
 var $37=0!=($36|0);
 if($37){label=9;break;}else{label=13;break;}
 case 9: 
 var $39=$cb;
 var $40=(($39+4)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$41&128;
 var $43=($42|0)!=0;
 if($43){label=13;break;}else{label=10;break;}
 case 10: 
 var $45=$cb;
 var $46=(($45+4)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=$47&512;
 var $49=($48|0)!=0;
 if($49){label=11;break;}else{label=12;break;}
 case 11: 
 var $51=$cb;
 var $52=_execqncs((12),$51);
 _endoper($52);
 label=12;break;
 case 12: 
 var $54=$p;
 var $55=(($54+8)|0);
 var $56=SAFE_HEAP_LOAD($55, "i8*", 0, 0);
 var $57=$56;
 _leafdel($57);
 var $58=$p;
 var $59=(($58+8)|0);
 SAFE_HEAP_STORE($59, 0, "i8*", 0);
 label=14;break;
 case 13: 
 var $61=$tok;
 var $62=(($61+12)|0);
 var $63=$62;
 var $64=SAFE_HEAP_LOAD($63, "i8*", 0, 0);
 var $65=$tok;
 var $66=(($65+12)|0);
 var $67=$66;
 var $68=SAFE_HEAP_LOAD($67, "i8*", 0, 0);
 var $69=_strlen($68);
 _execmsg($64,$69,0,8400);
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $73=$tok;
 var $74=(($73)|0);
 var $75=$74;
 var $76=SAFE_HEAP_LOAD($75, "%struct.apltoken*", 0, 0);
 $tok=$76;
 label=2;break;
 case 17: 
 _execpop($tokhdr);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplfill($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 var $tempsave;
 $1=$rite;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 var $5=$4&110;
 switch(($5|0)){case 64:case 2:{ label=2;break;}case 4:{ label=3;break;}case 8:{ label=4;break;}case 32:{ label=5;break;}default:{label=6;break;}}break;
 case 2: 
 $out=4560;
 label=6;break;
 case 3: 
 $out=4552;
 label=6;break;
 case 4: 
 $out=4576;
 label=6;break;
 case 5: 
 var $10=$1;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&1;
 $tempsave=$13;
 var $14=$1;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=((($16)-($13))|0);
 SAFE_HEAP_STORE($15, $17, "i32", 0);
 var $18=_scalar(0);
 var $19=$1;
 var $20=_first($19);
 var $21=_enclose($20,0);
 var $22=_reshape($18,$21);
 var $23=_first($22);
 var $24=_perm($23);
 var $25=$24;
 $out=$25;
 var $26=$tempsave;
 var $27=$1;
 var $28=(($27+4)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=((($29)+($26))|0);
 SAFE_HEAP_STORE($28, $30, "i32", 0);
 label=6;break;
 case 6: 
 var $32=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _aplfopn($cp,$cpend,$mode){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $fp;
 var $code;
 var $s=sp;
 $2=$cp;
 $3=$cpend;
 $4=$mode;
 var $5=$2;
 var $6=$3;
 var $7=($5|0)==($6|0);
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=9;break;
 case 3: 
 var $10=$2;
 SAFE_HEAP_STORE($s, $10, "i8*", 0);
 var $11=$3;
 var $12=_aplscan($s,$11);
 $code=$12;
 var $13=0!=($12|0);
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=$2;
 SAFE_HEAP_STORE($s, $15, "i8*", 0);
 label=8;break;
 case 5: 
 var $17=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $18=$3;
 var $19=($17|0)==($18|0);
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $24=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=10;break;}else{label=11;break;}
 case 10: 
 $1=0;
 label=14;break;
 case 11: 
 var $28=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $29=$4;
 var $30=_fopen($28,$29);
 $fp=$30;
 var $31=0!=($30|0);
 if($31){label=12;break;}else{label=13;break;}
 case 12: 
 var $33=$fp;
 var $34=$33;
 $1=$34;
 label=14;break;
 case 13: 
 var $36=_errinit();
 SAFE_HEAP_STORE(4592, 102, "i32", 0);
 $1=0;
 label=14;break;
 case 14: 
 var $38=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }

}


function _aplfree($addr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$addr;
 var $2=$1;
 _free($2);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _aplgetc(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $top;
 var $ch;
 label=2;break;
 case 2: 
 var $3=SAFE_HEAP_LOAD(4536, "%struct.aplfpq*", 0, 0);
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=6;break;}
 case 3: 
 var $6=SAFE_HEAP_LOAD(4536, "%struct.aplfpq*", 0, 0);
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct._IO_FILE*", 0, 0);
 var $9=_fgetc($8);
 $ch=$9;
 var $10=-1!=($9|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$ch;
 $1=$12;
 label=7;break;
 case 5: 
 var $14=_pop(4536);
 var $15=$14;
 $top=$15;
 var $16=$top;
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "%struct._IO_FILE*", 0, 0);
 var $19=_fclose($18);
 var $20=$top;
 var $21=$20;
 _aplfree($21);
 label=2;break;
 case 6: 
 var $23=_aplgetch();
 $1=$23;
 label=7;break;
 case 7: 
 var $25=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _aplgetch(){
 var label=0;


 var $1=_getch();
 return $1;
}


function _aplgroup($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $grphdr=sp;
 var $nametok;
 var $tok;
 var $tokhdr=(sp)+(8);
 var $cplen;
 var $cols=(sp)+(16);
 var $rows=(sp)+(24);
 var $p;
 var $nameptr;
 var $namecb;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 SAFE_HEAP_STORE($grphdr, 0, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($cols, 0, "i32", 0);
 SAFE_HEAP_STORE($rows, 0, "i32", 0);
 $namecb=0;
 var $4=$3;
 var $5=$2;
 var $6=$4;
 var $7=$5;
 var $8=((($6)-($7))|0);
 $cplen=$8;
 var $9=$2;
 var $10=$cplen;
 var $11=_execpars($9,$10);
 SAFE_HEAP_STORE($tokhdr, $11, "%struct.apltoken*", 0);
 $tok=$11;
 label=2;break;
 case 2: 
 var $13=$tok;
 var $14=($13|0)!=0;
 if($14){label=3;break;}else{var $19=0;label=4;break;}
 case 3: 
 var $16=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $17=($16|0)==0;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=$tok;
 $nametok=$21;
 var $22=$tok;
 var $23=(($22+4)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=($24|0)!=-4;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $29=$tok;
 var $30=(($29)|0);
 var $31=$30;
 var $32=SAFE_HEAP_LOAD($31, "%struct.apltoken*", 0, 0);
 $tok=$32;
 label=2;break;
 case 9: 
 var $34=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $35=($34|0)==0;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $39=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $40=($39|0)!=0;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 label=33;break;
 case 14: 
 var $43=$nametok;
 var $44=(($43+12)|0);
 var $45=$44;
 var $46=SAFE_HEAP_LOAD($45, "i8*", 0, 0);
 $nameptr=$46;
 var $47=$nameptr;
 var $48=_treenode($47);
 $p=$48;
 var $49=0!=($48|0);
 if($49){label=15;break;}else{label=18;break;}
 case 15: 
 var $51=$p;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "i8*", 0, 0);
 var $54=$53;
 $namecb=$54;
 var $55=0!=($54|0);
 if($55){label=16;break;}else{label=18;break;}
 case 16: 
 var $57=$namecb;
 var $58=(($57+4)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=$59&512;
 var $61=($60|0)!=0;
 if($61){label=18;break;}else{label=17;break;}
 case 17: 
 SAFE_HEAP_STORE(4592, 118, "i32", 0);
 label=18;break;
 case 18: 
 var $64=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 $tok=$64;
 label=19;break;
 case 19: 
 var $66=$tok;
 var $67=$nametok;
 var $68=($66|0)!=($67|0);
 if($68){label=20;break;}else{var $73=0;label=21;break;}
 case 20: 
 var $70=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $71=($70|0)==0;
 var $73=$71;label=21;break;
 case 21: 
 var $73;
 if($73){label=22;break;}else{label=30;break;}
 case 22: 
 var $75=$nameptr;
 var $76=$tok;
 var $77=(($76+12)|0);
 var $78=$77;
 var $79=SAFE_HEAP_LOAD($78, "i8*", 0, 0);
 var $80=_strcmp($75,$79);
 var $81=0==($80|0);
 if($81){label=23;break;}else{label=27;break;}
 case 23: 
 var $83=$namecb;
 var $84=($83|0)==0;
 if($84){label=24;break;}else{label=25;break;}
 case 24: 
 SAFE_HEAP_STORE(4592, 119, "i32", 0);
 label=26;break;
 case 25: 
 var $87=$namecb;
 _aplgrouq($grphdr,$rows,$cols,$87);
 label=26;break;
 case 26: 
 label=28;break;
 case 27: 
 var $90=$tok;
 var $91=(($90+12)|0);
 var $92=$91;
 var $93=SAFE_HEAP_LOAD($92, "i8*", 0, 0);
 var $94=$tok;
 var $95=(($94+12)|0);
 var $96=$95;
 var $97=SAFE_HEAP_LOAD($96, "i8*", 0, 0);
 var $98=_strlen($97);
 var $99=_aplgrour($grphdr,$rows,$cols,$93,$98);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $102=$tok;
 var $103=(($102)|0);
 var $104=$103;
 var $105=SAFE_HEAP_LOAD($104, "%struct.apltoken*", 0, 0);
 $tok=$105;
 label=19;break;
 case 30: 
 var $107=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $108=($107|0)==0;
 if($108){label=31;break;}else{label=32;break;}
 case 31: 
 var $110=SAFE_HEAP_LOAD($rows, "i32", 0, 0);
 var $111=SAFE_HEAP_LOAD($cols, "i32", 0, 0);
 var $112=$nameptr;
 _aplgrous($grphdr,$110,$111,$112);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 _execpop($tokhdr);
 _execpop($grphdr);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplgrouq($pgrphdr,$prows,$pcols,$namecb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $cplen;
 var $i;
 var $j;
 var $cp;
 $1=$pgrphdr;
 $2=$prows;
 $3=$pcols;
 $4=$namecb;
 var $5=$4;
 var $6=(($5+16)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32*", 0, 0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $i=$8;
 var $9=$4;
 var $10=(($9+16)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32*", 0, 0);
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 $cplen=$13;
 var $14=$4;
 var $15=(($14)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "i8*", 0, 0);
 $cp=$17;
 label=2;break;
 case 2: 
 var $19=$i;
 var $20=((($19)-(1))|0);
 $i=$20;
 var $21=($19|0)!=0;
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 var $23=$1;
 var $24=$2;
 var $25=$3;
 var $26=$cp;
 var $27=$cplen;
 _aplgrour($23,$24,$25,$26,$27);
 var $28=$cplen;
 var $29=$cp;
 var $30=(($29+$28)|0);
 $cp=$30;
 label=2;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplgrour($pgrphdr,$prows,$pcols,$namebuf,$namelen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $cur;
 var $new;
 var $old;
 var $cp;
 var $i;
 $1=$pgrphdr;
 $2=$prows;
 $3=$pcols;
 $4=$namebuf;
 $5=$namelen;
 var $6=$4;
 var $7=$5;
 var $8=_newtok(-4,0,0,$6,$7);
 $new=$8;
 var $9=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 label=15;break;
 case 3: 
 $old=0;
 var $13=$1;
 var $14=SAFE_HEAP_LOAD($13, "%struct.apltoken*", 0, 0);
 $cur=$14;
 label=4;break;
 case 4: 
 var $16=$cur;
 var $17=($16|0)!=0;
 if($17){label=5;break;}else{label=11;break;}
 case 5: 
 var $19=$cur;
 var $20=(($19+12)|0);
 var $21=$20;
 var $22=SAFE_HEAP_LOAD($21, "i8*", 0, 0);
 var $23=$new;
 var $24=(($23+12)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "i8*", 0, 0);
 var $27=_strcmp($22,$26);
 var $28=_isign($27);
 $i=$28;
 var $29=$i;
 var $30=($29|0)==0;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 var $32=$new;
 _execfree($32);
 label=15;break;
 case 7: 
 var $34=$i;
 var $35=($34|0)>0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 label=11;break;
 case 9: 
 var $38=$cur;
 $old=$38;
 label=10;break;
 case 10: 
 var $40=$cur;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "%struct.apltoken*", 0, 0);
 $cur=$43;
 label=4;break;
 case 11: 
 var $45=$old;
 var $46=($45|0)==0;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 var $48=$1;
 var $49=SAFE_HEAP_LOAD($48, "%struct.apltoken*", 0, 0);
 var $50=$new;
 var $51=(($50)|0);
 var $52=$51;
 SAFE_HEAP_STORE($52, $49, "%struct.apltoken*", 0);
 var $53=$new;
 var $54=$1;
 SAFE_HEAP_STORE($54, $53, "%struct.apltoken*", 0);
 label=14;break;
 case 13: 
 var $56=$old;
 var $57=(($56)|0);
 var $58=$57;
 var $59=SAFE_HEAP_LOAD($58, "%struct.apltoken*", 0, 0);
 var $60=$new;
 var $61=(($60)|0);
 var $62=$61;
 SAFE_HEAP_STORE($62, $59, "%struct.apltoken*", 0);
 var $63=$new;
 var $64=$old;
 var $65=(($64)|0);
 var $66=$65;
 SAFE_HEAP_STORE($66, $63, "%struct.apltoken*", 0);
 label=14;break;
 case 14: 
 var $68=$2;
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 var $70=((($69)+(1))|0);
 SAFE_HEAP_STORE($68, $70, "i32", 0);
 var $71=$3;
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=$5;
 var $74=_imax($72,$73);
 var $75=$3;
 SAFE_HEAP_STORE($75, $74, "i32", 0);
 label=15;break;
 case 15: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplgrous($pgrphdr,$rows,$cols,$nameptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $out;
 var $tok;
 var $cp;
 $1=$pgrphdr;
 $2=$rows;
 $3=$cols;
 $4=$nameptr;
 var $5=$2;
 var $6=$3;
 var $7=(Math_imul($5,$6)|0);
 var $8=_getcb(0,$7,521,2,0);
 $out=$8;
 var $9=$out;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 label=8;break;
 case 3: 
 var $13=$2;
 var $14=$out;
 var $15=(($14+16)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32*", 0, 0);
 SAFE_HEAP_STORE($16, $13, "i32", 0);
 var $17=$3;
 var $18=$out;
 var $19=(($18+16)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32*", 0, 0);
 var $21=(($20+4)|0);
 SAFE_HEAP_STORE($21, $17, "i32", 0);
 var $22=$out;
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "i8*", 0, 0);
 $cp=$25;
 var $26=$1;
 var $27=SAFE_HEAP_LOAD($26, "%struct.apltoken*", 0, 0);
 $tok=$27;
 label=4;break;
 case 4: 
 var $29=$tok;
 var $30=($29|0)!=0;
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 var $32=$cp;
 var $33=$tok;
 var $34=(($33+12)|0);
 var $35=$34;
 var $36=SAFE_HEAP_LOAD($35, "i8*", 0, 0);
 var $37=$3;
 var $38=_aplstr($32,$36,$37);
 $cp=$38;
 label=6;break;
 case 6: 
 var $40=$tok;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "%struct.apltoken*", 0, 0);
 $tok=$43;
 label=4;break;
 case 7: 
 var $45=$4;
 var $46=$out;
 var $47=_assign($45,$46);
 $out=$47;
 label=8;break;
 case 8: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplgrp($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tok=sp;
 var $p;
 var $cb;
 var $cplen;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 var $4=$3;
 var $5=$2;
 var $6=$4;
 var $7=$5;
 var $8=((($6)-($7))|0);
 $cplen=$8;
 var $9=$2;
 var $10=$cplen;
 var $11=_execpars($9,$10);
 SAFE_HEAP_STORE($tok, $11, "%struct.apltoken*", 0);
 var $12=0==($11|0);
 if($12){label=4;break;}else{label=2;break;}
 case 2: 
 var $14=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)!=-4;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 var $19=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $20=(($19)|0);
 var $21=$20;
 var $22=SAFE_HEAP_LOAD($21, "%struct.apltoken*", 0, 0);
 var $23=($22|0)!=0;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=11;break;
 case 5: 
 var $26=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $27=(($26+12)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "i8*", 0, 0);
 var $30=_treenode($29);
 $p=$30;
 var $31=0==($30|0);
 if($31){label=8;break;}else{label=6;break;}
 case 6: 
 var $33=$p;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i8*", 0, 0);
 var $36=$35;
 $cb=$36;
 var $37=0==($36|0);
 if($37){label=8;break;}else{label=7;break;}
 case 7: 
 var $39=$cb;
 var $40=(($39+4)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$41&512;
 var $43=($42|0)!=0;
 if($43){label=9;break;}else{label=8;break;}
 case 8: 
 SAFE_HEAP_STORE(4592, 119, "i32", 0);
 label=10;break;
 case 9: 
 var $46=$cb;
 var $47=_quadout($46);
 $cb=$47;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 _execpop($tok);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplgrpsb($ch,$code,$node){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cb;
 var $qn;
 var $hit;
 $1=$ch;
 $2=$code;
 $3=$node;
 var $4=$3;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=18;break;
 case 3: 
 var $8=$1;
 var $9=$2;
 var $10=$3;
 var $11=(($10)|0);
 var $12=SAFE_HEAP_LOAD($11, "%struct.avlnode*", 0, 0);
 _aplgrpsb($8,$9,$12);
 var $13=$3;
 var $14=(($13+16)|0);
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=SAFE_HEAP_LOAD($15, "i8", 0, 0);
 var $17=(($16<<24)>>24);
 var $18=$1;
 var $19=SAFE_HEAP_LOAD($18, "i8", 0, 0);
 var $20=(($19<<24)>>24);
 var $21=($17|0)>=($20|0);
 if($21){label=4;break;}else{label=17;break;}
 case 4: 
 var $23=$3;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i8*", 0, 0);
 var $26=$25;
 $cb=$26;
 var $27=0!=($26|0);
 if($27){label=5;break;}else{label=17;break;}
 case 5: 
 var $29=$2;
 if(($29|0)==4){ label=12;break;}else if(($29|0)==1){ label=6;break;}else if(($29|0)==3){ label=7;break;}else if(($29|0)==2){ label=8;break;}else{label=13;break;}
 case 6: 
 var $31=$cb;
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=$33&512;
 $hit=$34;
 label=14;break;
 case 7: 
 var $36=$cb;
 var $37=(($36+4)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=$38&256;
 $hit=$39;
 label=14;break;
 case 8: 
 var $41=$3;
 var $42=(($41+16)|0);
 var $43=SAFE_HEAP_LOAD($42, "i8*", 0, 0);
 var $44=_strcmp($43,2552);
 var $45=0==($44|0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $56=0;label=11;break;
 case 10: 
 var $48=$cb;
 var $49=(($48+4)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=$50&896;
 var $52=($51|0)!=0;
 var $53=$52^1;
 var $54=($53&1);
 var $56=$54;label=11;break;
 case 11: 
 var $56;
 $hit=$56;
 label=14;break;
 case 12: 
 $hit=1;
 label=14;break;
 case 13: 
 $hit=0;
 label=14;break;
 case 14: 
 var $60=$hit;
 var $61=($60|0)!=0;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=$3;
 var $64=(($63+16)|0);
 var $65=SAFE_HEAP_LOAD($64, "i8*", 0, 0);
 var $66=_quadname($65);
 $qn=$66;
 var $67=$qn;
 var $68=$qn;
 var $69=_strlen($68);
 _execmsg($67,$69,0,0);
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $72=$1;
 var $73=$2;
 var $74=$3;
 var $75=(($74+4)|0);
 var $76=SAFE_HEAP_LOAD($75, "%struct.avlnode*", 0, 0);
 _aplgrpsb($72,$73,$76);
 label=18;break;
 case 18: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplgrps($rite,$cp,$cpend,$code){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $tok=sp;
 var $workhdr;
 var $ch;
 var $con=(sp)+(8);
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 $4=$code;
 var $5=$con;
 assert(2 % 1 === 0);SAFE_HEAP_STORE($5, SAFE_HEAP_LOAD(4528, "i8", 0, 0), "i8", 0);SAFE_HEAP_STORE(($5)+(1), SAFE_HEAP_LOAD(4529, "i8", 0, 0), "i8", 0);
 var $6=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 label=17;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 var $12=$2;
 var $13=$11;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=_execpars($10,$15);
 SAFE_HEAP_STORE($tok, $16, "%struct.apltoken*", 0);
 var $17=0!=($16|0);
 if($17){label=4;break;}else{label=9;break;}
 case 4: 
 var $19=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $20=(($19+12)|0);
 var $21=$20;
 var $22=SAFE_HEAP_LOAD($21, "i8*", 0, 0);
 $ch=$22;
 var $23=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)!=-4;
 if($26){label=7;break;}else{label=5;break;}
 case 5: 
 var $28=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $29=(($28)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "%struct.apltoken*", 0, 0);
 var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=6;break;}
 case 6: 
 var $34=$ch;
 var $35=_strlen($34);
 var $36=1!=($35|0);
 if($36){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=8;break;
 case 8: 
 label=10;break;
 case 9: 
 var $40=(($con)|0);
 $ch=$40;
 label=10;break;
 case 10: 
 var $42=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $43=($42|0)==0;
 if($43){label=11;break;}else{label=16;break;}
 case 11: 
 var $45=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $workhdr=$45;
 label=12;break;
 case 12: 
 var $47=$workhdr;
 var $48=($47|0)!=0;
 if($48){label=13;break;}else{label=15;break;}
 case 13: 
 var $50=$ch;
 var $51=$4;
 var $52=$workhdr;
 var $53=(($52+4)|0);
 var $54=SAFE_HEAP_LOAD($53, "%struct.avlnode*", 0, 0);
 _aplgrpsb($50,$51,$54);
 label=14;break;
 case 14: 
 var $56=$workhdr;
 var $57=(($56)|0);
 var $58=SAFE_HEAP_LOAD($57, "%struct.treelist*", 0, 0);
 $workhdr=$58;
 label=12;break;
 case 15: 
 label=16;break;
 case 16: 
 _execpop($tok);
 label=17;break;
 case 17: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplinit(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $qfc;
 SAFE_HEAP_STORE(5656, 15, "i32", 0);
 SAFE_HEAP_STORE(5664, 0, "i32", 0);
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 SAFE_HEAP_STORE(4584, 0, "i8*", 0);
 SAFE_HEAP_STORE(2784, 1e-13, "double", 0);
 SAFE_HEAP_STORE(2648, 1, "i32", 0);
 SAFE_HEAP_STORE(2576, 8, "double", 0);
 _quadinit();
 SAFE_HEAP_STORE(2376, 0, "%struct.treelist*", 0);
 var $1=_treeroot(0);
 SAFE_HEAP_STORE(4064, 0, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE(4056, 0, "i32", 0);
 SAFE_HEAP_STORE(4544, 0, "i32", 0);
 SAFE_HEAP_STORE(4112, 0, "i32", 0);
 var $2=_getcb(0,5,9,1,0);
 $qfc=$2;
 var $3=$qfc;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$qfc;
 var $7=(($6)|0);
 var $8=$7;
 var $9=SAFE_HEAP_LOAD($8, "i8*", 0, 0);
 var $10=_chrcopy($9,7608,5,1);
 var $11=$qfc;
 var $12=_assign(2552,$11);
 label=3;break;
 case 3: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _apllib($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $dirp;
 var $dp;
 var $path=sp;
 var $ch;
 var $lib=(sp)+(256);
 var $p;
 var $i;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 var $4=$3;
 var $5=$2;
 var $6=$4;
 var $7=$5;
 var $8=((($6)-($7))|0);
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($path)|0);
 var $12=$2;
 var $13=_strcpy($11,$12);
 label=4;break;
 case 3: 
 var $15=(($path)|0);
 var $16=_strcpy($15,7368);
 label=4;break;
 case 4: 
 var $18=(($path)|0);
 var $19=_opendir($18);
 $dirp=$19;
 label=5;break;
 case 5: 
 var $21=$dirp;
 var $22=_readdir($21);
 $dp=$22;
 var $23=($22|0)!=0;
 if($23){label=6;break;}else{label=9;break;}
 case 6: 
 var $25=$dp;
 var $26=(($25+11)|0);
 var $27=(($26)|0);
 var $28=$dp;
 var $29=(($28+11)|0);
 var $30=(($29)|0);
 var $31=_strlen($30);
 var $32=(($27+$31)|0);
 var $33=((($32)-(4))|0);
 var $34=_strcmp(12616,$33);
 var $35=0==($34|0);
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 var $37=$dp;
 var $38=(($37+11)|0);
 var $39=(($38)|0);
 var $40=$dp;
 var $41=(($40+11)|0);
 var $42=(($41)|0);
 var $43=_strlen($42);
 _execmsg($39,$43,0,0);
 label=8;break;
 case 8: 
 label=5;break;
 case 9: 
 var $46=$dirp;
 var $47=_closedir($46);
 var $48=___errno_location();
 SAFE_HEAP_STORE($48, 0, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplloae($wrk,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 var $newfile;
 var $s;
 var $fp;
 var $i;
 var $ret;
 $2=$wrk;
 $3=$cp;
 $4=$cpend;
 $ret=0;
 var $5=$3;
 var $6=$4;
 var $7=_aplparfn($5,$6);
 $newfile=$7;
 var $8=$newfile;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=5;break;}
 case 2: 
 var $11=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=$2;
 var $15=_strlen($14);
 $i=$15;
 var $16=$2;
 var $17=$i;
 var $18=$i;
 _execmsg($16,$17,$18,7160);
 var $19=$ret;
 $1=$19;
 label=24;break;
 case 4: 
 var $21=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 $newfile=$21;
 label=5;break;
 case 5: 
 var $23=$newfile;
 var $24=_stat($23,$buf);
 var $25=($24|0)!=0;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 $fp=-1;
 $i=100;
 label=8;break;
 case 7: 
 var $28=$newfile;
 var $29=_open($28,256);
 $fp=$29;
 $i=102;
 label=8;break;
 case 8: 
 var $31=___errno_location();
 SAFE_HEAP_STORE($31, 0, "i32", 0);
 var $32=$fp;
 var $33=($32|0)!=-1;
 if($33){label=9;break;}else{label=15;break;}
 case 9: 
 _aplclear();
 var $35=$fp;
 var $36=_aplloaf($35);
 $i=$36;
 var $37=$fp;
 var $38=_close($37);
 $fp=$38;
 var $39=$fp;
 var $40=($39|0)==-1;
 if($40){label=10;break;}else{label=12;break;}
 case 10: 
 var $42=$i;
 var $43=($42|0)==0;
 if($43){label=11;break;}else{label=12;break;}
 case 11: 
 $i=104;
 label=12;break;
 case 12: 
 var $46=$i;
 var $47=($46|0)!=0;
 if($47){label=13;break;}else{label=14;break;}
 case 13: 
 $fp=-1;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $51=$fp;
 var $52=($51|0)==-1;
 if($52){label=16;break;}else{label=19;break;}
 case 16: 
 var $54=$i;
 SAFE_HEAP_STORE(4592, $54, "i32", 0);
 var $55=$newfile;
 var $56=$newfile;
 var $57=_strlen($56);
 var $58=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $59=_aplmsg($58);
 _execmsg($55,$57,0,$59);
 var $60=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $61=$newfile;
 var $62=($60|0)!=($61|0);
 if($62){label=17;break;}else{label=18;break;}
 case 17: 
 var $64=$newfile;
 _aplfree($64);
 label=18;break;
 case 18: 
 label=23;break;
 case 19: 
 var $67=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $68=($67|0)!=0;
 if($68){label=20;break;}else{label=22;break;}
 case 20: 
 var $70=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $71=$newfile;
 var $72=($70|0)!=($71|0);
 if($72){label=21;break;}else{label=22;break;}
 case 21: 
 var $74=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 _aplfree($74);
 label=22;break;
 case 22: 
 var $76=$newfile;
 SAFE_HEAP_STORE(4584, $76, "i8*", 0);
 $ret=1;
 label=23;break;
 case 23: 
 var $78=$ret;
 $1=$78;
 label=24;break;
 case 24: 
 var $80=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $80;
  default: assert(0, "bad label: " + label);
 }

}


function _aplloaf($fp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $version=sp;
 $2=$fp;
 var $3=$2;
 var $4=_read($3,$version,4);
 $i=$4;
 var $5=$i;
 var $6=($5|0)!=4;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=105;
 label=6;break;
 case 3: 
 var $9=SAFE_HEAP_LOAD($version, "i32", 0, 0);
 if(($9|0)==1){ label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$2;
 var $12=_apllov1($11);
 $1=$12;
 label=6;break;
 case 5: 
 $1=106;
 label=6;break;
 case 6: 
 var $15=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }

}


function _apllov1($fp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $workhdr;
 var $node;
 var $flags=sp;
 var $i;
 var $j;
 var $ch=(sp)+(8);
 var $namebuf;
 var $leaf;
 $2=$fp;
 var $3=$2;
 var $4=_read($3,2784,8);
 $i=$4;
 var $5=$2;
 var $6=_read($5,2648,4);
 $i=$6;
 var $7=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $workhdr=$7;
 var $8=0==($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=_treeroot(0);
 $workhdr=$10;
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=_read($13,$ch,1);
 $i=$14;
 var $15=1==($14|0);
 if($15){label=5;break;}else{label=15;break;}
 case 5: 
 var $17=SAFE_HEAP_LOAD($ch, "i8", 0, 0);
 var $18=(($17<<24)>>24);
 var $19=SAFE_HEAP_LOAD(4520, "i8", 0, 0);
 var $20=(($19<<24)>>24);
 var $21=($18|0)==($20|0);
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 label=15;break;
 case 7: 
 var $24=$2;
 var $25=_strread($24);
 $namebuf=$25;
 var $26=$namebuf;
 var $27=($26|0)==0;
 if($27){label=8;break;}else{label=9;break;}
 case 8: 
 $1=105;
 label=18;break;
 case 9: 
 var $30=$2;
 var $31=_read($30,$flags,4);
 $i=$31;
 var $32=SAFE_HEAP_LOAD($flags, "i32", 0, 0);
 var $33=$32&256;
 var $34=($33|0)!=0;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 var $36=$2;
 var $37=SAFE_HEAP_LOAD($flags, "i32", 0, 0);
 var $38=_lovfsfn($36,$37);
 var $39=$38;
 $leaf=$39;
 label=12;break;
 case 11: 
 var $41=$2;
 var $42=SAFE_HEAP_LOAD($flags, "i32", 0, 0);
 var $43=_lovfscb($41,$42);
 var $44=$43;
 $leaf=$44;
 label=12;break;
 case 12: 
 var $46=$leaf;
 var $47=($46|0)==0;
 if($47){label=13;break;}else{label=14;break;}
 case 13: 
 $1=105;
 label=18;break;
 case 14: 
 var $50=$workhdr;
 var $51=(($50+4)|0);
 var $52=$namebuf;
 var $53=$leaf;
 var $54=_avladdsb($51,$52,$53);
 $node=$54;
 label=4;break;
 case 15: 
 var $56=$i;
 var $57=($56|0)!=1;
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 $1=105;
 label=18;break;
 case 17: 
 $1=0;
 label=18;break;
 case 18: 
 var $61=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }

}


function _aplmall($size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ret;
 $1=$size;
 var $2=$1;
 var $3=_malloc($2);
 $ret=$3;
 var $4=$ret;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 SAFE_HEAP_STORE(4592, 27, "i32", 0);
 label=3;break;
 case 3: 
 var $8=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $8;
  default: assert(0, "bad label: " + label);
 }

}


function _aplmatch($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $lefttype;
 var $ritetype;
 var $ld=sp;
 var $rd=(sp)+(8);
 var $i;
 var $leftdim;
 var $ritedim;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=$3;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $1=1;
 label=29;break;
 case 4: 
 var $11=$2;
 var $12=($11|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $14=$3;
 var $15=($14|0)==0;
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=29;break;
 case 7: 
 var $18=$2;
 var $19=(($18+12)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=$3;
 var $22=(($21+12)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=($20|0)!=($23|0);
 if($24){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=29;break;
 case 9: 
 var $27=$2;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=$3;
 var $31=(($30+8)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=($29|0)!=($32|0);
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 $1=0;
 label=29;break;
 case 11: 
 var $36=$2;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=($38|0)!=0;
 if($39){label=12;break;}else{label=19;break;}
 case 12: 
 var $41=$2;
 var $42=(($41+16)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32*", 0, 0);
 $leftdim=$43;
 var $44=$3;
 var $45=(($44+16)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32*", 0, 0);
 $ritedim=$46;
 var $47=$2;
 var $48=(($47+12)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 $i=$49;
 label=13;break;
 case 13: 
 var $51=$i;
 var $52=($51|0)!=0;
 if($52){label=14;break;}else{label=18;break;}
 case 14: 
 var $54=$leftdim;
 var $55=(($54+4)|0);
 $leftdim=$55;
 var $56=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $57=$ritedim;
 var $58=(($57+4)|0);
 $ritedim=$58;
 var $59=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $60=($56|0)!=($59|0);
 if($60){label=15;break;}else{label=16;break;}
 case 15: 
 $1=0;
 label=29;break;
 case 16: 
 label=17;break;
 case 17: 
 var $64=$i;
 var $65=((($64)-(1))|0);
 $i=$65;
 label=13;break;
 case 18: 
 label=19;break;
 case 19: 
 var $68=$2;
 var $69=(($68+4)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=$70&110;
 $lefttype=$71;
 var $72=$3;
 var $73=(($72+4)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 var $75=$74&110;
 $ritetype=$75;
 var $76=$lefttype;
 var $77=$ritetype;
 var $78=($76|0)!=($77|0);
 if($78){label=20;break;}else{label=22;break;}
 case 20: 
 var $80=$lefttype;
 var $81=$ritetype;
 var $82=$80|$81;
 var $83=$82&70;
 var $84=($83|0)!=0;
 if($84){label=22;break;}else{label=21;break;}
 case 21: 
 $1=0;
 label=29;break;
 case 22: 
 var $87=$2;
 var $88=(($87)|0);
 var $89=$88;
 var $90=SAFE_HEAP_LOAD($89, "i8*", 0, 0);
 var $91=$ld;
 SAFE_HEAP_STORE($91, $90, "i8*", 0);
 var $92=$3;
 var $93=(($92)|0);
 var $94=$93;
 var $95=SAFE_HEAP_LOAD($94, "i8*", 0, 0);
 var $96=$rd;
 SAFE_HEAP_STORE($96, $95, "i8*", 0);
 var $97=$2;
 var $98=(($97+8)|0);
 var $99=SAFE_HEAP_LOAD($98, "i32", 0, 0);
 $i=$99;
 label=23;break;
 case 23: 
 var $101=$i;
 var $102=($101|0)!=0;
 if($102){label=24;break;}else{label=28;break;}
 case 24: 
 var $104=$lefttype;
 var $105=$ritetype;
 var $106=_aplmatci($ld,$rd,$104,$105);
 var $107=($106|0)!=0;
 if($107){label=26;break;}else{label=25;break;}
 case 25: 
 $1=0;
 label=29;break;
 case 26: 
 var $110=$2;
 var $111=(($110+20)|0);
 var $112=SAFE_HEAP_LOAD($111, "i32", 0, 0);
 var $113=$ld;
 var $114=SAFE_HEAP_LOAD($113, "i8*", 0, 0);
 var $115=(($114+$112)|0);
 SAFE_HEAP_STORE($113, $115, "i8*", 0);
 var $116=$3;
 var $117=(($116+20)|0);
 var $118=SAFE_HEAP_LOAD($117, "i32", 0, 0);
 var $119=$rd;
 var $120=SAFE_HEAP_LOAD($119, "i8*", 0, 0);
 var $121=(($120+$118)|0);
 SAFE_HEAP_STORE($119, $121, "i8*", 0);
 label=27;break;
 case 27: 
 var $123=$i;
 var $124=((($123)-(1))|0);
 $i=$124;
 label=23;break;
 case 28: 
 $1=1;
 label=29;break;
 case 29: 
 var $127=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $127;
  default: assert(0, "bad label: " + label);
 }

}


function _aplmatci($ld,$rd,$lefttype,$ritetype){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ld; $ld=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);SAFE_HEAP_STORE($ld, SAFE_HEAP_LOAD(tempParam, "i32", 0, 0), "i32", 0);
 var tempParam = $rd; $rd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);SAFE_HEAP_STORE($rd, SAFE_HEAP_LOAD(tempParam, "i32", 0, 0), "i32", 0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cb;
 var $dataptr=sp;
 var $cbtype;
 var $datatype;
 var $xl=(sp)+(8);
 var $xr=(sp)+(24);
 $2=$lefttype;
 $3=$ritetype;
 var $4=$2;
 var $5=($4|0)==32;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$3;
 var $8=($7|0)==32;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$2;
 var $11=$3;
 var $12=_aplmatck($ld,$rd,$10,$11);
 $1=$12;
 label=15;break;
 case 4: 
 var $14=$2;
 var $15=($14|0)==64;
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=$3;
 var $18=($17|0)==64;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=$2;
 var $21=(($xl)|0);
 var $22=_aplmatcj($ld,$20,$21);
 var $23=$3;
 var $24=(($xr)|0);
 var $25=_aplmatcj($rd,$23,$24);
 var $26=(($xl)|0);
 var $27=(($xr)|0);
 var $28=_xeq($26,$27);
 $1=$28;
 label=15;break;
 case 7: 
 var $30=$2;
 var $31=$3;
 var $32=$30|$31;
 if(($32|0)==2){ label=10;break;}else if(($32|0)==6){ label=11;break;}else if(($32|0)==8){ label=8;break;}else if(($32|0)==4){ label=9;break;}else{label=14;break;}
 case 8: 
 var $34=$ld;
 var $35=SAFE_HEAP_LOAD($34, "i8*", 0, 0);
 var $36=SAFE_HEAP_LOAD($35, "i8", 0, 0);
 var $37=(($36<<24)>>24);
 var $38=$rd;
 var $39=SAFE_HEAP_LOAD($38, "i8*", 0, 0);
 var $40=SAFE_HEAP_LOAD($39, "i8", 0, 0);
 var $41=(($40<<24)>>24);
 var $42=($37|0)==($41|0);
 var $43=($42&1);
 $1=$43;
 label=15;break;
 case 9: 
 var $45=$ld;
 var $46=SAFE_HEAP_LOAD($45, "i32*", 0, 0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=$rd;
 var $49=SAFE_HEAP_LOAD($48, "i32*", 0, 0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=($47|0)==($50|0);
 var $52=($51&1);
 $1=$52;
 label=15;break;
 case 10: 
 var $54=$ld;
 var $55=SAFE_HEAP_LOAD($54, "double*", 0, 0);
 var $56=SAFE_HEAP_LOAD($55, "double", 0, 0);
 var $57=$rd;
 var $58=SAFE_HEAP_LOAD($57, "double*", 0, 0);
 var $59=SAFE_HEAP_LOAD($58, "double", 0, 0);
 var $60=_eq($56,$59);
 $1=$60;
 label=15;break;
 case 11: 
 var $62=$2;
 var $63=($62|0)==2;
 if($63){label=12;break;}else{label=13;break;}
 case 12: 
 var $65=$ld;
 var $66=SAFE_HEAP_LOAD($65, "double*", 0, 0);
 var $67=SAFE_HEAP_LOAD($66, "double", 0, 0);
 var $68=$rd;
 var $69=SAFE_HEAP_LOAD($68, "i32*", 0, 0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=($70|0);
 var $72=_eq($67,$71);
 $1=$72;
 label=15;break;
 case 13: 
 var $74=$ld;
 var $75=SAFE_HEAP_LOAD($74, "i32*", 0, 0);
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $77=($76|0);
 var $78=$rd;
 var $79=SAFE_HEAP_LOAD($78, "double*", 0, 0);
 var $80=SAFE_HEAP_LOAD($79, "double", 0, 0);
 var $81=_eq($77,$80);
 $1=$81;
 label=15;break;
 case 14: 
 $1=0;
 label=15;break;
 case 15: 
 var $84=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $84;
  default: assert(0, "bad label: " + label);
 }

}


function _aplmatcj($ad,$type,$x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ad; $ad=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);SAFE_HEAP_STORE($ad, SAFE_HEAP_LOAD(tempParam, "i32", 0, 0), "i32", 0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$type;
 $3=$x;
 var $4=$2;
 if(($4|0)==4){ label=2;break;}else if(($4|0)==2){ label=3;break;}else{label=4;break;}
 case 2: 
 var $6=$ad;
 var $7=SAFE_HEAP_LOAD($6, "i32*", 0, 0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=($8|0);
 var $10=$3;
 SAFE_HEAP_STORE($10, $9, "double", 0);
 var $11=$3;
 var $12=(($11+8)|0);
 SAFE_HEAP_STORE($12, 0, "double", 0);
 label=5;break;
 case 3: 
 var $14=$ad;
 var $15=SAFE_HEAP_LOAD($14, "double*", 0, 0);
 var $16=SAFE_HEAP_LOAD($15, "double", 0, 0);
 var $17=$3;
 SAFE_HEAP_STORE($17, $16, "double", 0);
 var $18=$3;
 var $19=(($18+8)|0);
 SAFE_HEAP_STORE($19, 0, "double", 0);
 label=5;break;
 case 4: 
 var $21=$ad;
 var $22=SAFE_HEAP_LOAD($21, "double*", 0, 0);
 var $23=SAFE_HEAP_LOAD($22, "double", 0, 0);
 var $24=$3;
 SAFE_HEAP_STORE($24, $23, "double", 0);
 var $25=$ad;
 var $26=SAFE_HEAP_LOAD($25, "double*", 0, 0);
 var $27=(($26+8)|0);
 var $28=SAFE_HEAP_LOAD($27, "double", 0, 0);
 var $29=$3;
 var $30=(($29+8)|0);
 SAFE_HEAP_STORE($30, $28, "double", 0);
 label=5;break;
 case 5: 
 var $32=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _aplmatck($ld,$rd,$lefttype,$ritetype){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ld; $ld=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);SAFE_HEAP_STORE($ld, SAFE_HEAP_LOAD(tempParam, "i32", 0, 0), "i32", 0);
 var tempParam = $rd; $rd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);SAFE_HEAP_STORE($rd, SAFE_HEAP_LOAD(tempParam, "i32", 0, 0), "i32", 0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cb;
 var $dataptr=sp;
 var $cbtype;
 var $datatype;
 $2=$lefttype;
 $3=$ritetype;
 var $4=$2;
 var $5=$3;
 var $6=($4|0)==($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$ld;
 var $9=SAFE_HEAP_LOAD($8, "%struct.aplcb**", 0, 0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.aplcb*", 0, 0);
 var $11=$rd;
 var $12=SAFE_HEAP_LOAD($11, "%struct.aplcb**", 0, 0);
 var $13=SAFE_HEAP_LOAD($12, "%struct.aplcb*", 0, 0);
 var $14=_aplmatch($10,$13);
 $1=$14;
 label=12;break;
 case 3: 
 var $16=$2;
 var $17=($16|0)==32;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$ld;
 var $20=SAFE_HEAP_LOAD($19, "%struct.aplcb**", 0, 0);
 var $21=SAFE_HEAP_LOAD($20, "%struct.aplcb*", 0, 0);
 $cb=$21;
 var $22=$dataptr;
 var $23=$rd;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($22, SAFE_HEAP_LOAD($23, "i32", 0, 0), "i32", 0);
 var $24=$3;
 $datatype=$24;
 label=6;break;
 case 5: 
 var $26=$rd;
 var $27=SAFE_HEAP_LOAD($26, "%struct.aplcb**", 0, 0);
 var $28=SAFE_HEAP_LOAD($27, "%struct.aplcb*", 0, 0);
 $cb=$28;
 var $29=$dataptr;
 var $30=$ld;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($29, SAFE_HEAP_LOAD($30, "i32", 0, 0), "i32", 0);
 var $31=$2;
 $datatype=$31;
 label=6;break;
 case 6: 
 var $33=$cb;
 var $34=(($33+12)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=($35|0)!=0;
 if($36){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=12;break;
 case 8: 
 var $39=$cb;
 var $40=(($39+4)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$41&110;
 $cbtype=$42;
 var $43=$cbtype;
 var $44=$datatype;
 var $45=($43|0)!=($44|0);
 if($45){label=9;break;}else{label=11;break;}
 case 9: 
 var $47=$cbtype;
 var $48=$datatype;
 var $49=((($47)+($48))|0);
 var $50=($49|0)!=6;
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 $1=0;
 label=12;break;
 case 11: 
 var $53=$cb;
 var $54=(($53)|0);
 var $55=$datatype;
 var $56=$cbtype;
 var $57=_aplmatci($dataptr,$54,$55,$56);
 $1=$57;
 label=12;break;
 case 12: 
 var $59=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $59;
  default: assert(0, "bad label: " + label);
 }

}


function _aplmsg($no){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$no;
 var $3=$2;
 switch(($3|0)){case 9:{ label=10;break;}case 99:{ label=100;break;}case 100:{ label=101;break;}case 101:{ label=102;break;}case 102:{ label=103;break;}case 103:{ label=104;break;}case 104:{ label=105;break;}case 105:{ label=106;break;}case 106:{ label=107;break;}case 107:{ label=108;break;}case 108:{ label=109;break;}case 10:{ label=11;break;}case 109:{ label=110;break;}case 110:{ label=111;break;}case 111:{ label=112;break;}case 112:{ label=113;break;}case 113:{ label=114;break;}case 114:{ label=115;break;}case 115:{ label=116;break;}case 116:{ label=117;break;}case 117:{ label=118;break;}case 118:{ label=119;break;}case 11:{ label=12;break;}case 119:{ label=120;break;}case 120:{ label=121;break;}case 121:{ label=122;break;}case 122:{ label=123;break;}case 123:{ label=124;break;}case 124:{ label=125;break;}case 125:{ label=126;break;}case 126:{ label=127;break;}case 127:{ label=128;break;}case 128:{ label=129;break;}case 12:{ label=13;break;}case 129:{ label=130;break;}case 130:{ label=131;break;}case 131:{ label=132;break;}case 132:{ label=133;break;}case 133:{ label=134;break;}case 134:{ label=135;break;}case 135:{ label=136;break;}case 136:{ label=137;break;}case 995:{ label=138;break;}case 996:{ label=139;break;}case 13:{ label=14;break;}case 997:{ label=140;break;}case 998:{ label=141;break;}case 14:{ label=15;break;}case 15:{ label=16;break;}case 16:{ label=17;break;}case 17:{ label=18;break;}case 18:{ label=19;break;}case 1:{ label=2;break;}case 19:{ label=20;break;}case 20:{ label=21;break;}case 21:{ label=22;break;}case 22:{ label=23;break;}case 23:{ label=24;break;}case 24:{ label=25;break;}case 25:{ label=26;break;}case 26:{ label=27;break;}case 27:{ label=28;break;}case 28:{ label=29;break;}case 2:{ label=3;break;}case 29:{ label=30;break;}case 30:{ label=31;break;}case 31:{ label=32;break;}case 32:{ label=33;break;}case 33:{ label=34;break;}case 34:{ label=35;break;}case 35:{ label=36;break;}case 36:{ label=37;break;}case 37:{ label=38;break;}case 38:{ label=39;break;}case 3:{ label=4;break;}case 39:{ label=40;break;}case 40:{ label=41;break;}case 41:{ label=42;break;}case 42:{ label=43;break;}case 43:{ label=44;break;}case 44:{ label=45;break;}case 45:{ label=46;break;}case 46:{ label=47;break;}case 47:{ label=48;break;}case 48:{ label=49;break;}case 4:{ label=5;break;}case 49:{ label=50;break;}case 50:{ label=51;break;}case 51:{ label=52;break;}case 52:{ label=53;break;}case 53:{ label=54;break;}case 54:{ label=55;break;}case 55:{ label=56;break;}case 56:{ label=57;break;}case 57:{ label=58;break;}case 58:{ label=59;break;}case 5:{ label=6;break;}case 59:{ label=60;break;}case 60:{ label=61;break;}case 61:{ label=62;break;}case 62:{ label=63;break;}case 63:{ label=64;break;}case 64:{ label=65;break;}case 65:{ label=66;break;}case 66:{ label=67;break;}case 67:{ label=68;break;}case 68:{ label=69;break;}case 6:{ label=7;break;}case 69:{ label=70;break;}case 70:{ label=71;break;}case 71:{ label=72;break;}case 72:{ label=73;break;}case 73:{ label=74;break;}case 74:{ label=75;break;}case 75:{ label=76;break;}case 76:{ label=77;break;}case 77:{ label=78;break;}case 78:{ label=79;break;}case 7:{ label=8;break;}case 79:{ label=80;break;}case 80:{ label=81;break;}case 81:{ label=82;break;}case 82:{ label=83;break;}case 83:{ label=84;break;}case 84:{ label=85;break;}case 85:{ label=86;break;}case 86:{ label=87;break;}case 87:{ label=88;break;}case 88:{ label=89;break;}case 8:{ label=9;break;}case 89:{ label=90;break;}case 90:{ label=91;break;}case 91:{ label=92;break;}case 92:{ label=93;break;}case 93:{ label=94;break;}case 94:{ label=95;break;}case 95:{ label=96;break;}case 96:{ label=97;break;}case 97:{ label=98;break;}case 98:{ label=99;break;}default:{label=142;break;}}break;
 case 2: 
 $1=15456;
 label=143;break;
 case 3: 
 $1=15288;
 label=143;break;
 case 4: 
 $1=12440;
 label=143;break;
 case 5: 
 $1=11592;
 label=143;break;
 case 6: 
 $1=10984;
 label=143;break;
 case 7: 
 $1=10288;
 label=143;break;
 case 8: 
 $1=9544;
 label=143;break;
 case 9: 
 $1=8800;
 label=143;break;
 case 10: 
 $1=8096;
 label=143;break;
 case 11: 
 $1=7384;
 label=143;break;
 case 12: 
 $1=15960;
 label=143;break;
 case 13: 
 $1=15264;
 label=143;break;
 case 14: 
 $1=14472;
 label=143;break;
 case 15: 
 $1=13896;
 label=143;break;
 case 16: 
 $1=13288;
 label=143;break;
 case 17: 
 $1=13160;
 label=143;break;
 case 18: 
 $1=12976;
 label=143;break;
 case 19: 
 $1=12880;
 label=143;break;
 case 20: 
 $1=12744;
 label=143;break;
 case 21: 
 $1=12624;
 label=143;break;
 case 22: 
 $1=12536;
 label=143;break;
 case 23: 
 $1=12464;
 label=143;break;
 case 24: 
 $1=12328;
 label=143;break;
 case 25: 
 $1=12248;
 label=143;break;
 case 26: 
 $1=12168;
 label=143;break;
 case 27: 
 $1=12072;
 label=143;break;
 case 28: 
 $1=12032;
 label=143;break;
 case 29: 
 $1=11968;
 label=143;break;
 case 30: 
 $1=11920;
 label=143;break;
 case 31: 
 $1=11832;
 label=143;break;
 case 32: 
 $1=11736;
 label=143;break;
 case 33: 
 $1=11656;
 label=143;break;
 case 34: 
 $1=11504;
 label=143;break;
 case 35: 
 $1=11456;
 label=143;break;
 case 36: 
 $1=11400;
 label=143;break;
 case 37: 
 $1=11352;
 label=143;break;
 case 38: 
 $1=11304;
 label=143;break;
 case 39: 
 $1=11264;
 label=143;break;
 case 40: 
 $1=11224;
 label=143;break;
 case 41: 
 $1=11160;
 label=143;break;
 case 42: 
 $1=11104;
 label=143;break;
 case 43: 
 $1=11032;
 label=143;break;
 case 44: 
 $1=10896;
 label=143;break;
 case 45: 
 $1=10840;
 label=143;break;
 case 46: 
 $1=10776;
 label=143;break;
 case 47: 
 $1=10752;
 label=143;break;
 case 48: 
 $1=10696;
 label=143;break;
 case 49: 
 $1=10640;
 label=143;break;
 case 50: 
 $1=10560;
 label=143;break;
 case 51: 
 $1=10456;
 label=143;break;
 case 52: 
 $1=10408;
 label=143;break;
 case 53: 
 $1=10360;
 label=143;break;
 case 54: 
 $1=10232;
 label=143;break;
 case 55: 
 $1=10176;
 label=143;break;
 case 56: 
 $1=10144;
 label=143;break;
 case 57: 
 $1=10048;
 label=143;break;
 case 58: 
 $1=9992;
 label=143;break;
 case 59: 
 $1=9960;
 label=143;break;
 case 60: 
 $1=9880;
 label=143;break;
 case 61: 
 $1=9744;
 label=143;break;
 case 62: 
 $1=9672;
 label=143;break;
 case 63: 
 $1=9608;
 label=143;break;
 case 64: 
 $1=9472;
 label=143;break;
 case 65: 
 $1=9424;
 label=143;break;
 case 66: 
 $1=9344;
 label=143;break;
 case 67: 
 $1=9256;
 label=143;break;
 case 68: 
 $1=9176;
 label=143;break;
 case 69: 
 $1=9136;
 label=143;break;
 case 70: 
 $1=9080;
 label=143;break;
 case 71: 
 $1=9008;
 label=143;break;
 case 72: 
 $1=8928;
 label=143;break;
 case 73: 
 $1=8864;
 label=143;break;
 case 74: 
 $1=8728;
 label=143;break;
 case 75: 
 $1=8664;
 label=143;break;
 case 76: 
 $1=8592;
 label=143;break;
 case 77: 
 $1=8536;
 label=143;break;
 case 78: 
 $1=8472;
 label=143;break;
 case 79: 
 $1=8424;
 label=143;break;
 case 80: 
 $1=8320;
 label=143;break;
 case 81: 
 $1=8256;
 label=143;break;
 case 82: 
 $1=8192;
 label=143;break;
 case 83: 
 $1=8120;
 label=143;break;
 case 84: 
 $1=8032;
 label=143;break;
 case 85: 
 $1=7992;
 label=143;break;
 case 86: 
 $1=7912;
 label=143;break;
 case 87: 
 $1=7832;
 label=143;break;
 case 88: 
 $1=7744;
 label=143;break;
 case 89: 
 $1=7688;
 label=143;break;
 case 90: 
 $1=7632;
 label=143;break;
 case 91: 
 $1=7544;
 label=143;break;
 case 92: 
 $1=7504;
 label=143;break;
 case 93: 
 $1=7440;
 label=143;break;
 case 94: 
 $1=7328;
 label=143;break;
 case 95: 
 $1=7264;
 label=143;break;
 case 96: 
 $1=7192;
 label=143;break;
 case 97: 
 $1=7096;
 label=143;break;
 case 98: 
 $1=7016;
 label=143;break;
 case 99: 
 $1=6952;
 label=143;break;
 case 100: 
 $1=6920;
 label=143;break;
 case 101: 
 $1=6872;
 label=143;break;
 case 102: 
 $1=16048;
 label=143;break;
 case 103: 
 $1=16008;
 label=143;break;
 case 104: 
 $1=15920;
 label=143;break;
 case 105: 
 $1=15880;
 label=143;break;
 case 106: 
 $1=15840;
 label=143;break;
 case 107: 
 $1=15792;
 label=143;break;
 case 108: 
 $1=15712;
 label=143;break;
 case 109: 
 $1=15680;
 label=143;break;
 case 110: 
 $1=15616;
 label=143;break;
 case 111: 
 $1=15536;
 label=143;break;
 case 112: 
 $1=15400;
 label=143;break;
 case 113: 
 $1=15336;
 label=143;break;
 case 114: 
 $1=15184;
 label=143;break;
 case 115: 
 $1=15128;
 label=143;break;
 case 116: 
 $1=15064;
 label=143;break;
 case 117: 
 $1=15000;
 label=143;break;
 case 118: 
 $1=14912;
 label=143;break;
 case 119: 
 $1=14816;
 label=143;break;
 case 120: 
 $1=14776;
 label=143;break;
 case 121: 
 $1=14680;
 label=143;break;
 case 122: 
 $1=14592;
 label=143;break;
 case 123: 
 $1=14544;
 label=143;break;
 case 124: 
 $1=14440;
 label=143;break;
 case 125: 
 $1=14392;
 label=143;break;
 case 126: 
 $1=14336;
 label=143;break;
 case 127: 
 $1=14288;
 label=143;break;
 case 128: 
 $1=14248;
 label=143;break;
 case 129: 
 $1=14216;
 label=143;break;
 case 130: 
 $1=14168;
 label=143;break;
 case 131: 
 $1=14088;
 label=143;break;
 case 132: 
 $1=14032;
 label=143;break;
 case 133: 
 $1=13944;
 label=143;break;
 case 134: 
 $1=13864;
 label=143;break;
 case 135: 
 $1=13776;
 label=143;break;
 case 136: 
 $1=13696;
 label=143;break;
 case 137: 
 $1=13632;
 label=143;break;
 case 138: 
 $1=13560;
 label=143;break;
 case 139: 
 $1=13488;
 label=143;break;
 case 140: 
 $1=13424;
 label=143;break;
 case 141: 
 $1=13384;
 label=143;break;
 case 142: 
 $1=13360;
 label=143;break;
 case 143: 
 var $146=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $146;
  default: assert(0, "bad label: " + label);
 }

}


function _aplname($sp,$spend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $t;
 var $code;
 SAFE_HEAP_STORE($2, $sp, "i8*", 0);
 $3=$spend;
 var $4=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 $t=$4;
 var $5=$3;
 var $6=_aplscan($2,$5);
 $code=$6;
 var $7=$code;
 var $8=($7|0)>=79;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$code;
 var $11=($10|0)<=130;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=$t;
 $1=$13;
 label=5;break;
 case 4: 
 var $15=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $16=$3;
 var $17=_aplnamsb($15,$16);
 $1=$17;
 label=5;break;
 case 5: 
 var $19=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }

}


function _aplnamsb($sp,$spend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2;
 var $t;
 var $code;
 SAFE_HEAP_STORE($1, $sp, "i8*", 0);
 $2=$spend;
 label=2;break;
 case 2: 
 var $4=SAFE_HEAP_LOAD($1, "i8*", 0, 0);
 $t=$4;
 var $5=$t;
 var $6=$2;
 var $7=($5|0)==($6|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 label=8;break;
 case 4: 
 var $10=$2;
 var $11=_aplscan($1,$10);
 var $12=_aplparsg($11);
 $code=$12;
 var $13=$code;
 var $14=($13|0)==-2;
 if($14){label=7;break;}else{label=5;break;}
 case 5: 
 var $16=$code;
 var $17=($16|0)==-3;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 label=8;break;
 case 7: 
 label=2;break;
 case 8: 
 var $21=$t;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }

}


function _aplnest($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $op;
 var $out;
 var $wrk;
 var $dtatype;
 var $i;
 var $ip;
 $2=$rite;
 var $3=$2;
 var $4=(($3+8)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$2;
 var $7=(($6+12)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=_getcb(0,$5,33,$8,0);
 $out=$9;
 var $10=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=16;break;
 case 3: 
 var $14=$out;
 var $15=(($14+12)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)>1;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$out;
 var $20=(($19+16)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32*", 0, 0);
 var $22=$21;
 var $23=$2;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 var $26=$25;
 var $27=$out;
 var $28=(($27+12)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=_intcopy($22,$26,$29,1);
 label=5;break;
 case 5: 
 var $32=$out;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 $i=$34;
 var $35=($34|0)!=0;
 if($35){label=6;break;}else{label=15;break;}
 case 6: 
 var $37=$2;
 var $38=(($37+4)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=$39&110;
 $dtatype=$40;
 var $41=$2;
 var $42=(($41)|0);
 var $43=$42;
 var $44=SAFE_HEAP_LOAD($43, "i8*", 0, 0);
 $ip=$44;
 var $45=$out;
 var $46=(($45)|0);
 var $47=$46;
 var $48=SAFE_HEAP_LOAD($47, "%struct.aplcb**", 0, 0);
 $op=$48;
 label=7;break;
 case 7: 
 var $50=$i;
 var $51=((($50)-(1))|0);
 $i=$51;
 var $52=($50|0)!=0;
 if($52){label=8;break;}else{label=14;break;}
 case 8: 
 var $54=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $55=($54|0)!=0;
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 $wrk=0;
 label=11;break;
 case 10: 
 var $58=$dtatype;
 var $59=_getcb(0,1,$58,0,0);
 $wrk=$59;
 label=11;break;
 case 11: 
 var $61=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $62=($61|0)==0;
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 var $64=$wrk;
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "i32*", 0, 0);
 var $68=$67;
 var $69=$ip;
 var $70=$dtatype;
 var $71=_dtacopy($68,$69,1,1,$70);
 var $72=$2;
 var $73=(($72+20)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 var $75=$ip;
 var $76=(($75+$74)|0);
 $ip=$76;
 label=13;break;
 case 13: 
 var $78=$wrk;
 var $79=$op;
 var $80=(($79+4)|0);
 $op=$80;
 SAFE_HEAP_STORE($79, $78, "%struct.aplcb*", 0);
 label=7;break;
 case 14: 
 label=15;break;
 case 15: 
 var $83=$2;
 var $84=$out;
 var $85=_errstop(0,0,$83,$84);
 $1=$85;
 label=16;break;
 case 16: 
 var $87=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $87;
  default: assert(0, "bad label: " + label);
 }

}


function _aplnewl(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=_printf(13144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, 0, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 SAFE_HEAP_STORE(5664, 0, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _aplparfn($cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $r;
 var $s=sp;
 var $t=(sp)+(8);
 var $u;
 var $code;
 var $i;
 $2=$cp;
 $3=$cpend;
 var $4=$2;
 var $5=$3;
 var $6=($4|0)==($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=20;break;
 case 3: 
 var $9=$2;
 SAFE_HEAP_STORE($s, $9, "i8*", 0);
 var $10=$3;
 var $11=_aplscan($s,$10);
 $code=$11;
 var $12=0!=($11|0);
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=$2;
 SAFE_HEAP_STORE($s, $14, "i8*", 0);
 label=8;break;
 case 5: 
 var $16=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $17=$3;
 var $18=($16|0)==($17|0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=20;break;
 case 7: 
 label=8;break;
 case 8: 
 var $22=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 SAFE_HEAP_STORE($t, $22, "i8*", 0);
 $u=$22;
 label=9;break;
 case 9: 
 var $24=$u;
 var $25=$3;
 var $26=($24>>>0)<($25>>>0);
 if($26){label=10;break;}else{label=12;break;}
 case 10: 
 var $28=$3;
 var $29=_aplscan($t,$28);
 $code=$29;
 label=11;break;
 case 11: 
 var $31=SAFE_HEAP_LOAD($t, "i8*", 0, 0);
 $u=$31;
 label=9;break;
 case 12: 
 var $33=$code;
 var $34=0==($33|0);
 if($34){label=13;break;}else{label=14;break;}
 case 13: 
 var $36=$u;
 SAFE_HEAP_STORE($t, $36, "i8*", 0);
 label=14;break;
 case 14: 
 var $38=SAFE_HEAP_LOAD($t, "i8*", 0, 0);
 var $39=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $40=$38;
 var $41=$39;
 var $42=((($40)-($41))|0);
 $i=$42;
 var $43=((($42)+(5))|0);
 var $44=_aplmall($43);
 $u=$44;
 $r=$44;
 var $45=0==($44|0);
 if($45){label=15;break;}else{label=16;break;}
 case 15: 
 $1=0;
 label=20;break;
 case 16: 
 label=17;break;
 case 17: 
 var $49=$i;
 var $50=((($49)-(1))|0);
 $i=$50;
 var $51=($49|0)!=0;
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $53=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $54=(($53+1)|0);
 SAFE_HEAP_STORE($s, $54, "i8*", 0);
 var $55=SAFE_HEAP_LOAD($53, "i8", 0, 0);
 var $56=$u;
 var $57=(($56+1)|0);
 $u=$57;
 SAFE_HEAP_STORE($56, $55, "i8", 0);
 label=17;break;
 case 19: 
 var $59=$u;
 var $60=(($59+1)|0);
 $u=$60;
 SAFE_HEAP_STORE($59, 46, "i8", 0);
 var $61=$u;
 var $62=(($61+1)|0);
 $u=$62;
 SAFE_HEAP_STORE($61, 97, "i8", 0);
 var $63=$u;
 var $64=(($63+1)|0);
 $u=$64;
 SAFE_HEAP_STORE($63, 112, "i8", 0);
 var $65=$u;
 var $66=(($65+1)|0);
 $u=$66;
 SAFE_HEAP_STORE($65, 108, "i8", 0);
 var $67=$u;
 SAFE_HEAP_STORE($67, 0, "i8", 0);
 var $68=$r;
 $1=$68;
 label=20;break;
 case 20: 
 var $70=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }

}


function _aplparse($sp,$splen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $hdr=sp;
 var $cur;
 var $s=(sp)+(8);
 var $t;
 var $u;
 var $bracket_count=(sp)+(16);
 var $i;
 var $next_code;
 var $paren_count=(sp)+(24);
 $2=$sp;
 $3=$splen;
 SAFE_HEAP_STORE($hdr, 0, "%struct.apltoken*", 0);
 $cur=0;
 SAFE_HEAP_STORE($bracket_count, 0, "i32", 0);
 SAFE_HEAP_STORE($paren_count, 0, "i32", 0);
 var $4=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=21;break;
 case 3: 
 var $8=$2;
 SAFE_HEAP_STORE($s, $8, "i8*", 0);
 var $9=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $10=$3;
 var $11=(($9+$10)|0);
 $u=$11;
 label=4;break;
 case 4: 
 var $13=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $14=$u;
 var $15=($13>>>0)<($14>>>0);
 if($15){label=5;break;}else{label=14;break;}
 case 5: 
 var $17=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 $t=$17;
 var $18=$u;
 var $19=_aplscan($s,$18);
 $next_code=$19;
 var $20=$next_code;
 var $21=($20|0)==2;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=$u;
 SAFE_HEAP_STORE($s, $23, "i8*", 0);
 label=7;break;
 case 7: 
 var $25=$next_code;
 var $26=($25|0)!=0;
 if($26){label=8;break;}else{label=13;break;}
 case 8: 
 var $28=$hdr;
 var $29=$t;
 var $30=$2;
 var $31=$29;
 var $32=$30;
 var $33=((($31)-($32))|0);
 var $34=_newtok(0,0,$33,0,0);
 var $35=$34;
 var $36=_lifo($28,$35);
 var $37=$36;
 $cur=$37;
 var $38=$cur;
 var $39=($38|0)==0;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=SAFE_HEAP_LOAD($hdr, "%struct.apltoken*", 0, 0);
 $1=$41;
 label=21;break;
 case 10: 
 var $43=$next_code;
 var $44=_aplparsg($43);
 var $45=$cur;
 var $46=(($45+4)|0);
 SAFE_HEAP_STORE($46, $44, "i32", 0);
 var $47=$cur;
 var $48=$t;
 var $49=$u;
 _aplparsf($47,$s,$48,$49,$bracket_count,$paren_count);
 var $50=$cur;
 var $51=(($50+4)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=($52|0)==-5;
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 var $55=SAFE_HEAP_LOAD($hdr, "%struct.apltoken*", 0, 0);
 $1=$55;
 label=21;break;
 case 12: 
 label=13;break;
 case 13: 
 label=4;break;
 case 14: 
 var $59=$hdr;
 var $60=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $61=$2;
 var $62=$60;
 var $63=$61;
 var $64=((($62)-($63))|0);
 var $65=_newtok(-2,0,$64,0,0);
 var $66=$65;
 var $67=_lifo($59,$66);
 var $68=$67;
 $cur=$68;
 var $69=$cur;
 var $70=($69|0)==0;
 if($70){label=15;break;}else{label=16;break;}
 case 15: 
 var $72=SAFE_HEAP_LOAD($hdr, "%struct.apltoken*", 0, 0);
 $1=$72;
 label=21;break;
 case 16: 
 var $74=SAFE_HEAP_LOAD($bracket_count, "i32", 0, 0);
 var $75=($74|0)!=0;
 if($75){label=17;break;}else{label=18;break;}
 case 17: 
 var $77=$cur;
 var $78=(($77+4)|0);
 SAFE_HEAP_STORE($78, -5, "i32", 0);
 var $79=$cur;
 var $80=(($79+12)|0);
 var $81=$80;
 SAFE_HEAP_STORE($81, 13112, "i8*", 0);
 label=18;break;
 case 18: 
 var $83=SAFE_HEAP_LOAD($paren_count, "i32", 0, 0);
 var $84=($83|0)!=0;
 if($84){label=19;break;}else{label=20;break;}
 case 19: 
 var $86=$cur;
 var $87=(($86+4)|0);
 SAFE_HEAP_STORE($87, -5, "i32", 0);
 var $88=$cur;
 var $89=(($88+12)|0);
 var $90=$89;
 SAFE_HEAP_STORE($90, 14888, "i8*", 0);
 label=20;break;
 case 20: 
 var $92=SAFE_HEAP_LOAD($hdr, "%struct.apltoken*", 0, 0);
 $1=$92;
 label=21;break;
 case 21: 
 var $94=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }

}


function _aplparsf($cur,$ss,$t,$u,$bracket_count_ptr,$paren_count_ptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 $1=$cur;
 $2=$ss;
 $3=$t;
 $4=$u;
 $5=$bracket_count_ptr;
 $6=$paren_count_ptr;
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 switch(($9|0)){case 9:{ label=12;break;}case -1:{ label=15;break;}case -2:{ label=2;break;}case 2:{ label=3;break;}case -3:case 14:case 13:{ label=4;break;}case 59:{ label=5;break;}case 8:{ label=6;break;}case 44:{ label=7;break;}case 7:{ label=8;break;}case 61:{ label=9;break;}default:{label=16;break;}}break;
 case 2: 
 var $11=$1;
 var $12=$3;
 var $13=$2;
 var $14=$4;
 _aplpnam($11,$12,$13,$14);
 var $15=$1;
 var $16=(($15+4)|0);
 SAFE_HEAP_STORE($16, -4, "i32", 0);
 label=16;break;
 case 3: 
 var $18=$1;
 var $19=$3;
 var $20=$2;
 var $21=$4;
 _aplpnam($18,$19,$20,$21);
 var $22=$1;
 var $23=(($22+4)|0);
 SAFE_HEAP_STORE($23, 2, "i32", 0);
 label=16;break;
 case 4: 
 var $25=$1;
 var $26=$2;
 var $27=$4;
 _aplpnum($25,$26,$27);
 label=16;break;
 case 5: 
 var $29=$5;
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=((($30)+(1))|0);
 SAFE_HEAP_STORE($29, $31, "i32", 0);
 label=16;break;
 case 6: 
 var $33=$6;
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=((($34)+(1))|0);
 SAFE_HEAP_STORE($33, $35, "i32", 0);
 label=16;break;
 case 7: 
 var $37=$1;
 var $38=$2;
 var $39=$4;
 _aplquad($37,$38,$39);
 label=16;break;
 case 8: 
 var $41=$1;
 var $42=$2;
 var $43=$4;
 _aplquote($41,$42,$43);
 label=16;break;
 case 9: 
 var $45=$5;
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=((($46)-(1))|0);
 SAFE_HEAP_STORE($45, $47, "i32", 0);
 var $48=0>($47|0);
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $50=$1;
 var $51=(($50+4)|0);
 SAFE_HEAP_STORE($51, -5, "i32", 0);
 var $52=$1;
 var $53=(($52+12)|0);
 var $54=$53;
 SAFE_HEAP_STORE($54, 13032, "i8*", 0);
 label=11;break;
 case 11: 
 label=16;break;
 case 12: 
 var $57=$6;
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=((($58)-(1))|0);
 SAFE_HEAP_STORE($57, $59, "i32", 0);
 var $60=0>($59|0);
 if($60){label=13;break;}else{label=14;break;}
 case 13: 
 var $62=$1;
 var $63=(($62+4)|0);
 SAFE_HEAP_STORE($63, -5, "i32", 0);
 var $64=$1;
 var $65=(($64+12)|0);
 var $66=$65;
 SAFE_HEAP_STORE($66, 14864, "i8*", 0);
 label=14;break;
 case 14: 
 label=16;break;
 case 15: 
 var $69=$1;
 var $70=(($69+4)|0);
 SAFE_HEAP_STORE($70, -5, "i32", 0);
 var $71=$1;
 var $72=(($71+12)|0);
 var $73=$72;
 SAFE_HEAP_STORE($73, 12416, "i8*", 0);
 label=16;break;
 case 16: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplparsg($next_code){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ret;
 $1=$next_code;
 var $2=$1;
 $ret=$2;
 var $3=$ret;
 var $4=($3|0)==40;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=$ret;
 var $7=($6|0)>=79;
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 var $9=$ret;
 var $10=($9|0)<=130;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 $ret=-2;
 label=9;break;
 case 5: 
 var $13=$ret;
 var $14=($13|0)>=16;
 if($14){label=6;break;}else{label=8;break;}
 case 6: 
 var $16=$ret;
 var $17=($16|0)<=25;
 if($17){label=7;break;}else{label=8;break;}
 case 7: 
 $ret=-3;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $21=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }

}


function _aplpnam($cur,$s,$sp,$spend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $u;
 var $v;
 var $i;
 var $j;
 $1=$cur;
 $2=$s;
 $3=$sp;
 $4=$spend;
 var $5=$3;
 var $6=(($5)|0);
 var $7=SAFE_HEAP_LOAD($6, "i8*", 0, 0);
 var $8=$4;
 var $9=_aplnamsb($7,$8);
 var $10=$3;
 var $11=(($10)|0);
 SAFE_HEAP_STORE($11, $9, "i8*", 0);
 $u=$9;
 var $12=$u;
 var $13=$2;
 var $14=$12;
 var $15=$13;
 var $16=((($14)-($15))|0);
 $j=$16;
 var $17=$j;
 var $18=((($17)+(1))|0);
 var $19=_aplmall($18);
 $v=$19;
 var $20=$v;
 var $21=($20|0)==0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 var $23=$1;
 var $24=(($23+4)|0);
 SAFE_HEAP_STORE($24, -5, "i32", 0);
 var $25=$1;
 var $26=(($25+12)|0);
 var $27=$26;
 SAFE_HEAP_STORE($27, 12960, "i8*", 0);
 label=7;break;
 case 3: 
 var $29=$v;
 var $30=$1;
 var $31=(($30+12)|0);
 var $32=$31;
 SAFE_HEAP_STORE($32, $29, "i8*", 0);
 label=4;break;
 case 4: 
 var $34=$j;
 var $35=((($34)-(1))|0);
 $j=$35;
 var $36=($34|0)!=0;
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $38=$2;
 var $39=(($38+1)|0);
 $2=$39;
 var $40=SAFE_HEAP_LOAD($38, "i8", 0, 0);
 var $41=$v;
 var $42=(($41+1)|0);
 $v=$42;
 SAFE_HEAP_STORE($41, $40, "i8", 0);
 label=4;break;
 case 6: 
 var $44=$v;
 SAFE_HEAP_STORE($44, 0, "i8", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplpnum($cur,$sp,$spend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $concb;
 var $s=sp;
 var $i;
 var $j;
 $1=$cur;
 $2=$sp;
 $3=$spend;
 var $4=$2;
 var $5=(($4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i8*", 0, 0);
 var $7=((($6)-(1))|0);
 SAFE_HEAP_STORE($s, $7, "i8*", 0);
 var $8=$3;
 var $9=_vector($s,$8,1);
 $concb=$9;
 var $10=$concb;
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 label=8;break;
 case 3: 
 var $14=$concb;
 var $15=(($14+8)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=0==($16|0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$concb;
 var $20=_endoper($19);
 label=8;break;
 case 5: 
 var $22=$concb;
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=1==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$concb;
 var $28=(($27+16)|0);
 SAFE_HEAP_STORE($28, 0, "i32*", 0);
 var $29=$concb;
 var $30=(($29+12)|0);
 SAFE_HEAP_STORE($30, 0, "i32", 0);
 label=7;break;
 case 7: 
 var $32=$1;
 var $33=(($32+4)|0);
 SAFE_HEAP_STORE($33, -3, "i32", 0);
 var $34=$concb;
 var $35=$1;
 var $36=(($35+12)|0);
 var $37=$36;
 SAFE_HEAP_STORE($37, $34, "%struct.aplcb*", 0);
 var $38=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $39=$2;
 var $40=(($39)|0);
 SAFE_HEAP_STORE($40, $38, "i8*", 0);
 label=8;break;
 case 8: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplprint($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ch;
 $1=$s;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=(($3+1)|0);
 $1=$4;
 var $5=SAFE_HEAP_LOAD($3, "i8", 0, 0);
 $ch=$5;
 var $6=(($5<<24)>>24);
 var $7=0!=($6|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$ch;
 _aplputch($9);
 label=2;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplputch($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $ch=(($0)&255);
 $2=$ch;
 var $3=SAFE_HEAP_LOAD(4544, "i32", 0, 0);
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=11;break;}
 case 2: 
 var $6=$2;
 var $7=(($6<<24)>>24);
 var $8=($7|0)<32;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4504, 0, "i32", 0);
 label=4;break;
 case 4: 
 var $11=SAFE_HEAP_LOAD(4504, "i32", 0, 0);
 var $12=($11|0)!=0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE(4504, 0, "i32", 0);
 var $14=$2;
 var $15=(($14<<24)>>24);
 var $16=((($15)+(128))|0);
 var $17=_putchar($16);
 label=10;break;
 case 6: 
 var $19=$2;
 var $20=(($19<<24)>>24);
 var $21=SAFE_HEAP_LOAD(4512, "i32", 0, 0);
 var $22=($20|0)==($21|0);
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4504, 1, "i32", 0);
 label=9;break;
 case 8: 
 var $25=$2;
 var $26=(($25<<24)>>24);
 var $27=_putchar($26);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=12;break;
 case 11: 
 var $31=$2;
 var $32=(($31<<24)>>24);
 var $33=_putchar($32);
 label=12;break;
 case 12: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplquad($cur,$sp,$spend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 $1=$cur;
 $2=$sp;
 $3=$spend;
 var $4=$2;
 var $5=$3;
 var $6=_aplquae($4,$5);
 $i=$6;
 var $7=0==($6|0);
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $10=$i;
 var $11=$1;
 var $12=(($11+4)|0);
 SAFE_HEAP_STORE($12, $10, "i32", 0);
 label=4;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplquae($sp,$spend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s=sp;
 var $t;
 var $u=(sp)+(8);
 var $code;
 var $first;
 var $i;
 var $j;
 $2=$sp;
 $3=$spend;
 var $4=$2;
 var $5=(($4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i8*", 0, 0);
 SAFE_HEAP_STORE($s, $6, "i8*", 0);
 var $7=(($6+2)|0);
 $t=$7;
 var $8=$t;
 var $9=$3;
 var $10=($8>>>0)>($9>>>0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=81;break;
 case 3: 
 $i=0;
 var $13=$t;
 var $14=_aplwksq(4488,$s,$13);
 var $15=($14|0)!=0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 $i=-11;
 label=75;break;
 case 5: 
 var $18=$t;
 var $19=_aplwksq(4472,$s,$18);
 var $20=($19|0)!=0;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 $i=-12;
 label=74;break;
 case 7: 
 var $23=$t;
 var $24=_aplwksq(4456,$s,$23);
 var $25=($24|0)!=0;
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 $i=-13;
 label=73;break;
 case 9: 
 var $28=$t;
 var $29=_aplwksq(4440,$s,$28);
 var $30=($29|0)!=0;
 if($30){label=10;break;}else{label=11;break;}
 case 10: 
 $i=-14;
 label=72;break;
 case 11: 
 var $33=$t;
 var $34=_aplwksq(4424,$s,$33);
 var $35=($34|0)!=0;
 if($35){label=12;break;}else{label=13;break;}
 case 12: 
 $i=-15;
 label=71;break;
 case 13: 
 var $38=$t;
 var $39=_aplwksq(4408,$s,$38);
 var $40=($39|0)!=0;
 if($40){label=14;break;}else{label=15;break;}
 case 14: 
 $i=-32;
 label=70;break;
 case 15: 
 var $43=$t;
 var $44=_aplwksq(4392,$s,$43);
 var $45=($44|0)!=0;
 if($45){label=16;break;}else{label=17;break;}
 case 16: 
 $i=-16;
 label=69;break;
 case 17: 
 var $48=$t;
 var $49=_aplwksq(4376,$s,$48);
 var $50=($49|0)!=0;
 if($50){label=18;break;}else{label=19;break;}
 case 18: 
 $i=-33;
 label=68;break;
 case 19: 
 var $53=$t;
 var $54=_aplwksq(4360,$s,$53);
 var $55=($54|0)!=0;
 if($55){label=20;break;}else{label=21;break;}
 case 20: 
 $i=-17;
 label=67;break;
 case 21: 
 var $58=$t;
 var $59=_aplwksq(4344,$s,$58);
 var $60=($59|0)!=0;
 if($60){label=22;break;}else{label=23;break;}
 case 22: 
 $i=-18;
 label=66;break;
 case 23: 
 var $63=$t;
 var $64=_aplwksq(4328,$s,$63);
 var $65=($64|0)!=0;
 if($65){label=24;break;}else{label=25;break;}
 case 24: 
 $i=-19;
 label=65;break;
 case 25: 
 var $68=$t;
 var $69=_aplwksq(4312,$s,$68);
 var $70=($69|0)!=0;
 if($70){label=26;break;}else{label=27;break;}
 case 26: 
 $i=-20;
 label=64;break;
 case 27: 
 var $73=$t;
 var $74=_aplwksq(4296,$s,$73);
 var $75=($74|0)!=0;
 if($75){label=28;break;}else{label=29;break;}
 case 28: 
 $i=-21;
 label=63;break;
 case 29: 
 var $78=$t;
 var $79=_aplwksq(4280,$s,$78);
 var $80=($79|0)!=0;
 if($80){label=30;break;}else{label=31;break;}
 case 30: 
 $i=-22;
 label=62;break;
 case 31: 
 var $83=$t;
 var $84=_aplwksq(4264,$s,$83);
 var $85=($84|0)!=0;
 if($85){label=32;break;}else{label=33;break;}
 case 32: 
 $i=-23;
 label=61;break;
 case 33: 
 var $88=$t;
 var $89=_aplwksq(4248,$s,$88);
 var $90=($89|0)!=0;
 if($90){label=34;break;}else{label=35;break;}
 case 34: 
 $i=-24;
 label=60;break;
 case 35: 
 var $93=$t;
 var $94=_aplwksq(4232,$s,$93);
 var $95=($94|0)!=0;
 if($95){label=36;break;}else{label=37;break;}
 case 36: 
 $i=-25;
 label=59;break;
 case 37: 
 var $98=$t;
 var $99=_aplwksq(4216,$s,$98);
 var $100=($99|0)!=0;
 if($100){label=38;break;}else{label=39;break;}
 case 38: 
 $i=-26;
 label=58;break;
 case 39: 
 var $103=$t;
 var $104=_aplwksq(4200,$s,$103);
 var $105=($104|0)!=0;
 if($105){label=40;break;}else{label=41;break;}
 case 40: 
 $i=-27;
 label=57;break;
 case 41: 
 var $108=$t;
 var $109=_aplwksq(4184,$s,$108);
 var $110=($109|0)!=0;
 if($110){label=42;break;}else{label=43;break;}
 case 42: 
 $i=-28;
 label=56;break;
 case 43: 
 var $113=$t;
 var $114=_aplwksq(4168,$s,$113);
 var $115=($114|0)!=0;
 if($115){label=44;break;}else{label=45;break;}
 case 44: 
 $i=-29;
 label=55;break;
 case 45: 
 var $118=$t;
 var $119=_aplwksq(4152,$s,$118);
 var $120=($119|0)!=0;
 if($120){label=46;break;}else{label=47;break;}
 case 46: 
 $i=-34;
 label=54;break;
 case 47: 
 var $123=$t;
 var $124=_aplwksq(4136,$s,$123);
 var $125=($124|0)!=0;
 if($125){label=48;break;}else{label=49;break;}
 case 48: 
 $i=-30;
 label=53;break;
 case 49: 
 var $128=$t;
 var $129=_aplwksq(4120,$s,$128);
 var $130=($129|0)!=0;
 if($130){label=50;break;}else{label=51;break;}
 case 50: 
 $i=-31;
 label=52;break;
 case 51: 
 $1=0;
 label=81;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 var $157=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 SAFE_HEAP_STORE($u, $157, "i8*", 0);
 var $158=$3;
 var $159=_aplscan($u,$158);
 $j=$159;
 var $160=$j;
 var $161=($160|0)>=79;
 if($161){label=76;break;}else{label=77;break;}
 case 76: 
 var $163=$j;
 var $164=($163|0)<=130;
 if($164){label=79;break;}else{label=77;break;}
 case 77: 
 var $166=$j;
 var $167=($166|0)>=16;
 if($167){label=78;break;}else{label=80;break;}
 case 78: 
 var $169=$j;
 var $170=($169|0)<=25;
 if($170){label=79;break;}else{label=80;break;}
 case 79: 
 $1=0;
 label=81;break;
 case 80: 
 var $173=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $174=$2;
 var $175=(($174)|0);
 SAFE_HEAP_STORE($175, $173, "i8*", 0);
 var $176=$i;
 $1=$176;
 label=81;break;
 case 81: 
 var $178=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $178;
  default: assert(0, "bad label: " + label);
 }

}


function _aplquote($cur,$sp,$spend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $q;
 var $s;
 var $t;
 var $u;
 var $v;
 var $datacnt;
 var $i;
 var $j;
 var $rank;
 $1=$cur;
 $2=$sp;
 $3=$spend;
 var $4=((((SAFE_HEAP_LOAD(6260, "i8", 1, 0))|(SAFE_HEAP_LOAD(6261, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6262, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6263, "i8", 1, 0)<<24))|0));
 $q=$4;
 var $5=$2;
 var $6=(($5)|0);
 var $7=SAFE_HEAP_LOAD($6, "i8*", 0, 0);
 $t=$7;
 $s=$7;
 $i=1;
 $datacnt=0;
 label=2;break;
 case 2: 
 var $9=$i;
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=12;break;}
 case 3: 
 var $12=$t;
 var $13=$3;
 var $14=($12|0)==($13|0);
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$1;
 var $17=(($16+4)|0);
 SAFE_HEAP_STORE($17, -5, "i32", 0);
 var $18=$1;
 var $19=(($18+12)|0);
 var $20=$19;
 SAFE_HEAP_STORE($20, 12816, "i8*", 0);
 label=17;break;
 case 5: 
 var $22=$t;
 var $23=(($22+1)|0);
 $t=$23;
 var $24=SAFE_HEAP_LOAD($22, "i8", 0, 0);
 var $25=(($24<<24)>>24);
 var $26=$q;
 var $27=SAFE_HEAP_LOAD($26, "i8", 0, 0);
 var $28=(($27<<24)>>24);
 var $29=($25|0)==($28|0);
 if($29){label=6;break;}else{label=10;break;}
 case 6: 
 var $31=$t;
 var $32=$3;
 var $33=($31|0)==($32|0);
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 $i=0;
 label=9;break;
 case 8: 
 var $36=$t;
 var $37=SAFE_HEAP_LOAD($36, "i8", 0, 0);
 var $38=(($37<<24)>>24);
 var $39=$q;
 var $40=SAFE_HEAP_LOAD($39, "i8", 0, 0);
 var $41=(($40<<24)>>24);
 var $42=($38|0)==($41|0);
 var $43=($42&1);
 $i=$43;
 var $44=$i;
 var $45=$t;
 var $46=(($45+$44)|0);
 $t=$46;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $50=$i;
 var $51=$datacnt;
 var $52=((($51)+($50))|0);
 $datacnt=$52;
 label=2;break;
 case 12: 
 var $54=$t;
 var $55=$2;
 var $56=(($55)|0);
 SAFE_HEAP_STORE($56, $54, "i8*", 0);
 var $57=$datacnt;
 var $58=($57|0)==1;
 var $59=($58?0:1);
 $rank=$59;
 var $60=$datacnt;
 var $61=$rank;
 var $62=_getcb(0,$60,9,$61,0);
 var $63=$1;
 var $64=(($63+12)|0);
 var $65=$64;
 SAFE_HEAP_STORE($65, $62, "%struct.aplcb*", 0);
 var $66=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $67=($66|0)!=0;
 if($67){label=13;break;}else{label=14;break;}
 case 13: 
 var $69=$1;
 var $70=(($69+4)|0);
 SAFE_HEAP_STORE($70, -5, "i32", 0);
 var $71=$1;
 var $72=(($71+12)|0);
 var $73=$72;
 SAFE_HEAP_STORE($73, 14760, "i8*", 0);
 label=17;break;
 case 14: 
 var $75=$1;
 var $76=(($75+12)|0);
 var $77=$76;
 var $78=SAFE_HEAP_LOAD($77, "%struct.aplcb*", 0, 0);
 var $79=(($78)|0);
 var $80=$79;
 var $81=SAFE_HEAP_LOAD($80, "i8*", 0, 0);
 $v=$81;
 label=15;break;
 case 15: 
 var $83=$datacnt;
 var $84=((($83)-(1))|0);
 $datacnt=$84;
 var $85=($83|0)!=0;
 if($85){label=16;break;}else{label=17;break;}
 case 16: 
 var $87=$s;
 var $88=SAFE_HEAP_LOAD($87, "i8", 0, 0);
 var $89=(($88<<24)>>24);
 var $90=$q;
 var $91=SAFE_HEAP_LOAD($90, "i8", 0, 0);
 var $92=(($91<<24)>>24);
 var $93=($89|0)==($92|0);
 var $94=($93&1);
 var $95=$s;
 var $96=(($95+$94)|0);
 $s=$96;
 var $97=$s;
 var $98=(($97+1)|0);
 $s=$98;
 var $99=SAFE_HEAP_LOAD($97, "i8", 0, 0);
 var $100=$v;
 var $101=(($100+1)|0);
 $v=$101;
 SAFE_HEAP_STORE($100, $99, "i8", 0);
 label=15;break;
 case 17: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplread($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $fp;
 var $ch;
 var $line=sp;
 var $cols;
 var $linelen;
 var $op;
 var $rows;
 var $hdr=(sp)+(1024);
 var $cur;
 var $nxt;
 var $out;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 $cols=0;
 $linelen=0;
 $rows=0;
 $cur=0;
 var $4=$2;
 var $5=$3;
 var $6=_aplfopn($4,$5,12736);
 var $7=$6;
 $fp=$7;
 var $8=0==($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 label=25;break;
 case 3: 
 label=4;break;
 case 4: 
 var $12=$fp;
 var $13=_fgetc($12);
 var $14=(($13)&255);
 $ch=$14;
 var $15=$ch;
 var $16=(($15<<24)>>24);
 var $17=($16|0)!=-1;
 if($17){label=5;break;}else{label=7;break;}
 case 5: 
 var $19=$ch;
 var $20=(($19<<24)>>24);
 var $21=($20|0)!=10;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=$ch;
 var $24=$linelen;
 var $25=((($24)+(1))|0);
 $linelen=$25;
 var $26=(($line+$24)|0);
 SAFE_HEAP_STORE($26, $23, "i8", 0);
 label=18;break;
 case 7: 
 var $28=$ch;
 var $29=(($28<<24)>>24);
 var $30=-1==($29|0);
 if($30){label=8;break;}else{label=10;break;}
 case 8: 
 var $32=$linelen;
 var $33=($32|0)==0;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 label=19;break;
 case 10: 
 var $36=$linelen;
 var $37=((($36)+(8))|0);
 var $38=_aplmall($37);
 var $39=$38;
 $nxt=$39;
 var $40=$nxt;
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=12;break;}
 case 11: 
 label=19;break;
 case 12: 
 var $44=$nxt;
 var $45=$44;
 var $46=(($45+8)|0);
 var $47=(($line)|0);
 var $48=$linelen;
 var $49=_chrcopy($46,$47,$48,1);
 var $50=$rows;
 var $51=((($50)+(1))|0);
 $rows=$51;
 var $52=$linelen;
 var $53=$cols;
 var $54=($52|0)>($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$linelen;
 var $60=$56;label=15;break;
 case 14: 
 var $58=$cols;
 var $60=$58;label=15;break;
 case 15: 
 var $60;
 $cols=$60;
 var $61=$linelen;
 var $62=$nxt;
 var $63=(($62+4)|0);
 SAFE_HEAP_STORE($63, $61, "i32", 0);
 var $64=$hdr;
 var $65=$cur;
 var $66=$65;
 var $67=$nxt;
 var $68=$67;
 var $69=_fifo($64,$66,$68);
 var $70=$69;
 $cur=$70;
 var $71=$ch;
 var $72=(($71<<24)>>24);
 var $73=-1==($72|0);
 if($73){label=16;break;}else{label=17;break;}
 case 16: 
 label=19;break;
 case 17: 
 $linelen=0;
 label=18;break;
 case 18: 
 label=4;break;
 case 19: 
 var $78=$fp;
 var $79=_fclose($78);
 var $80=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $81=($80|0)==0;
 if($81){label=20;break;}else{label=21;break;}
 case 20: 
 var $83=SAFE_HEAP_LOAD($hdr, "%struct.lines*", 0, 0);
 var $84=$83;
 var $85=$cols;
 var $86=$rows;
 _aplreae($84,$85,$86);
 label=21;break;
 case 21: 
 var $88=SAFE_HEAP_LOAD($hdr, "%struct.lines*", 0, 0);
 $cur=$88;
 label=22;break;
 case 22: 
 var $90=$cur;
 var $91=($90|0)!=0;
 if($91){label=23;break;}else{label=25;break;}
 case 23: 
 var $93=$cur;
 var $94=(($93)|0);
 var $95=SAFE_HEAP_LOAD($94, "%struct.lines*", 0, 0);
 $nxt=$95;
 var $96=$cur;
 var $97=$96;
 _aplfree($97);
 label=24;break;
 case 24: 
 var $99=$nxt;
 $cur=$99;
 label=22;break;
 case 25: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplreae($hdr,$cols,$rows){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $op;
 var $cur;
 var $nxt;
 var $out;
 var $i;
 $1=$hdr;
 $2=$cols;
 $3=$rows;
 var $4=$3;
 var $5=$2;
 var $6=(Math_imul($4,$5)|0);
 var $7=_getcb(0,$6,9,2,0);
 $out=$7;
 var $8=$out;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=9;break;}
 case 2: 
 var $11=$3;
 var $12=$out;
 var $13=(($12+16)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32*", 0, 0);
 SAFE_HEAP_STORE($14, $11, "i32", 0);
 var $15=$2;
 var $16=$out;
 var $17=(($16+16)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32*", 0, 0);
 var $19=(($18+4)|0);
 SAFE_HEAP_STORE($19, $15, "i32", 0);
 var $20=$out;
 var $21=(($20)|0);
 var $22=$21;
 var $23=SAFE_HEAP_LOAD($22, "i8*", 0, 0);
 $op=$23;
 var $24=$1;
 $cur=$24;
 label=3;break;
 case 3: 
 var $26=$cur;
 var $27=($26|0)!=0;
 if($27){label=4;break;}else{label=8;break;}
 case 4: 
 var $29=$op;
 var $30=$cur;
 var $31=(($30+8)|0);
 var $32=$cur;
 var $33=(($32+4)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=_chrcopy($29,$31,$34,1);
 $op=$35;
 var $36=$2;
 var $37=$cur;
 var $38=(($37+4)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=((($36)-($39))|0);
 $i=$40;
 var $41=0<($40|0);
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=$op;
 var $44=$i;
 var $45=_chrcopy($43,12728,$44,0);
 $op=$45;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $48=$cur;
 var $49=(($48)|0);
 var $50=SAFE_HEAP_LOAD($49, "%struct.lines.0*", 0, 0);
 $cur=$50;
 label=3;break;
 case 8: 
 var $52=$out;
 var $53=_assign(14744,$52);
 $out=$53;
 label=9;break;
 case 9: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplrun($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $top;
 var $fp;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 var $4=$2;
 var $5=$3;
 var $6=_aplfopn($4,$5,12720);
 var $7=$6;
 $fp=$7;
 var $8=0==($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 label=6;break;
 case 3: 
 var $11=_aplmall(8);
 var $12=$11;
 $top=$12;
 var $13=0!=($12|0);
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=$top;
 var $16=$15;
 var $17=_lifo(4536,$16);
 var $18=$17;
 $top=$18;
 var $19=$fp;
 var $20=$top;
 var $21=(($20+4)|0);
 SAFE_HEAP_STORE($21, $19, "%struct._IO_FILE*", 0);
 label=6;break;
 case 5: 
 var $23=$fp;
 var $24=_fclose($23);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplsave($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $buf=sp;
 var $newfile;
 var $s;
 var $fp;
 var $i;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 $fp=-1;
 $i=0;
 var $4=$2;
 var $5=$3;
 var $6=_aplparfn($4,$5);
 $newfile=$6;
 var $7=$newfile;
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=6;break;}
 case 2: 
 var $10=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $11=($10|0)==0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 $i=108;
 label=5;break;
 case 4: 
 var $14=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 $newfile=$14;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $17=$newfile;
 var $18=($17|0)!=0;
 if($18){label=7;break;}else{label=15;break;}
 case 7: 
 var $20=$newfile;
 var $21=_stat($20,$buf);
 var $22=($21|0)!=0;
 if($22){label=8;break;}else{label=9;break;}
 case 8: 
 var $24=$newfile;
 var $25=_creat($24,384);
 $fp=$25;
 $i=101;
 label=14;break;
 case 9: 
 var $27=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $28=($27|0)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 var $30=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $31=$newfile;
 var $32=_strcmp($30,$31);
 var $33=0!=($32|0);
 if($33){label=11;break;}else{label=12;break;}
 case 11: 
 $i=107;
 label=13;break;
 case 12: 
 var $36=$newfile;
 var $37=_open($36,1);
 $fp=$37;
 $i=102;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $41=___errno_location();
 SAFE_HEAP_STORE($41, 0, "i32", 0);
 var $42=$fp;
 var $43=($42|0)!=-1;
 if($43){label=16;break;}else{label=22;break;}
 case 16: 
 var $45=$fp;
 var $46=_aplsavf($45);
 $i=$46;
 var $47=$fp;
 var $48=_close($47);
 $fp=$48;
 var $49=$fp;
 var $50=($49|0)==-1;
 if($50){label=17;break;}else{label=19;break;}
 case 17: 
 var $52=$i;
 var $53=($52|0)==0;
 if($53){label=18;break;}else{label=19;break;}
 case 18: 
 $i=104;
 label=19;break;
 case 19: 
 var $56=$i;
 var $57=($56|0)!=0;
 if($57){label=20;break;}else{label=21;break;}
 case 20: 
 $fp=-1;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $61=$fp;
 var $62=($61|0)==-1;
 if($62){label=23;break;}else{label=26;break;}
 case 23: 
 var $64=$i;
 SAFE_HEAP_STORE(4592, $64, "i32", 0);
 var $65=$newfile;
 var $66=$newfile;
 var $67=_strlen($66);
 _execmsg($65,$67,0,0);
 var $68=$newfile;
 var $69=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $70=($68|0)!=($69|0);
 if($70){label=24;break;}else{label=25;break;}
 case 24: 
 var $72=$newfile;
 _aplfree($72);
 label=25;break;
 case 25: 
 label=30;break;
 case 26: 
 var $75=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $76=($75|0)!=0;
 if($76){label=27;break;}else{label=29;break;}
 case 27: 
 var $78=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $79=$newfile;
 var $80=($78|0)!=($79|0);
 if($80){label=28;break;}else{label=29;break;}
 case 28: 
 var $82=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 _aplfree($82);
 label=29;break;
 case 29: 
 var $84=$newfile;
 SAFE_HEAP_STORE(4584, $84, "i8*", 0);
 var $85=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $86=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $87=_strlen($86);
 _execmsg($85,$87,0,12704);
 label=30;break;
 case 30: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplsavf($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $workhdr;
 var $i;
 var $j;
 $2=$fp;
 var $3=$2;
 var $4=_write($3,4096,4);
 $i=$4;
 var $5=$i;
 var $6=($5|0)!=4;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=103;
 label=10;break;
 case 3: 
 var $9=$2;
 var $10=_write($9,2784,8);
 $i=$10;
 var $11=$2;
 var $12=_write($11,2648,4);
 $i=$12;
 var $13=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $workhdr=$13;
 label=4;break;
 case 4: 
 var $15=$workhdr;
 var $16=(($15)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.treelist*", 0, 0);
 var $18=($17|0)!=0;
 if($18){label=5;break;}else{label=7;break;}
 case 5: 
 label=6;break;
 case 6: 
 var $21=$workhdr;
 var $22=(($21)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.treelist*", 0, 0);
 $workhdr=$23;
 label=4;break;
 case 7: 
 var $25=$2;
 var $26=$workhdr;
 var $27=(($26+4)|0);
 var $28=SAFE_HEAP_LOAD($27, "%struct.avlnode*", 0, 0);
 _savfsub($25,$28);
 var $29=$2;
 var $30=_write($29,4104,1);
 $i=$30;
 var $31=$i;
 var $32=($31|0)!=1;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 $1=103;
 label=10;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $36=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }

}


function _aplscan($sp,$spend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $s;
 var $work=sp;
 var $i;
 var $j;
 $1=$sp;
 $2=$spend;
 var $3=$1;
 var $4=(($3)|0);
 var $5=SAFE_HEAP_LOAD($4, "i8*", 0, 0);
 $s=$5;
 label=2;break;
 case 2: 
 var $7=$s;
 var $8=$2;
 var $9=($7>>>0)<($8>>>0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$s;
 var $12=SAFE_HEAP_LOAD($11, "i8", 0, 0);
 var $13=(($12<<24)>>24);
 var $14=((((SAFE_HEAP_LOAD(6232, "i8", 1, 0))|(SAFE_HEAP_LOAD(6233, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6234, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6235, "i8", 1, 0)<<24))|0));
 var $15=SAFE_HEAP_LOAD($14, "i8", 0, 0);
 var $16=(($15<<24)>>24);
 var $17=($13|0)==($16|0);
 if($17){var $29=1;label=6;break;}else{label=4;break;}
 case 4: 
 var $19=$s;
 var $20=SAFE_HEAP_LOAD($19, "i8", 0, 0);
 var $21=(($20<<24)>>24);
 var $22=($21|0)==10;
 if($22){var $29=1;label=6;break;}else{label=5;break;}
 case 5: 
 var $24=$s;
 var $25=SAFE_HEAP_LOAD($24, "i8", 0, 0);
 var $26=(($25<<24)>>24);
 var $27=($26|0)==9;
 var $29=$27;label=6;break;
 case 6: 
 var $29;
 if($29){label=7;break;}else{label=9;break;}
 case 7: 
 label=8;break;
 case 8: 
 var $32=$s;
 var $33=(($32+1)|0);
 $s=$33;
 label=2;break;
 case 9: 
 var $35=$s;
 var $36=$1;
 var $37=(($36)|0);
 var $38=SAFE_HEAP_LOAD($37, "i8*", 0, 0);
 var $39=($35|0)!=($38|0);
 if($39){label=10;break;}else{label=11;break;}
 case 10: 
 $j=0;
 label=20;break;
 case 11: 
 $i=0;
 $j=-1;
 label=12;break;
 case 12: 
 var $43=$i;
 var $44=($43|0)<2;
 if($44){label=13;break;}else{var $50=0;label=14;break;}
 case 13: 
 var $46=$s;
 var $47=$2;
 var $48=($46>>>0)<($47>>>0);
 var $50=$48;label=14;break;
 case 14: 
 var $50;
 if($50){label=15;break;}else{label=19;break;}
 case 15: 
 var $52=$s;
 var $53=(($52+1)|0);
 $s=$53;
 var $54=SAFE_HEAP_LOAD($52, "i8", 0, 0);
 var $55=$i;
 var $56=(($work+$55)|0);
 SAFE_HEAP_STORE($56, $54, "i8", 0);
 var $57=$i;
 var $58=((($57)+(1))|0);
 var $59=(($work+$58)|0);
 SAFE_HEAP_STORE($59, 0, "i8", 0);
 var $60=(($work)|0);
 var $61=_charcode($60);
 $j=$61;
 var $62=$j;
 var $63=($62|0)!=-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 label=19;break;
 case 17: 
 label=18;break;
 case 18: 
 var $67=$i;
 var $68=((($67)+(1))|0);
 $i=$68;
 label=12;break;
 case 19: 
 label=20;break;
 case 20: 
 var $71=$s;
 var $72=$1;
 var $73=(($72)|0);
 SAFE_HEAP_STORE($73, $71, "i8*", 0);
 var $74=$j;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $74;
  default: assert(0, "bad label: " + label);
 }

}


function _aplsi($rite,$cp,$cpend,$nlsw){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $hdr;
 var $ch;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 $4=$nlsw;
 var $5=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $hdr=$5;
 label=2;break;
 case 2: 
 var $7=$hdr;
 var $8=(($7)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.treelist*", 0, 0);
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=10;break;}
 case 3: 
 var $12=$hdr;
 var $13=(($12+56)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$14&1;
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=SAFE_HEAP_LOAD(4088, "i8*", 0, 0);
 var $22=$18;label=6;break;
 case 5: 
 var $20=SAFE_HEAP_LOAD(4080, "i8*", 0, 0);
 var $22=$20;label=6;break;
 case 6: 
 var $22;
 $ch=$22;
 var $23=$hdr;
 var $24=(($23+12)|0);
 var $25=SAFE_HEAP_LOAD($24, "i8*", 0, 0);
 var $26=$hdr;
 var $27=(($26+16)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=$ch;
 var $30=_printf(12392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $25, "i8*", 0),SAFE_HEAP_STORE((tempVarArgs)+(8), $28, "i32", 0),SAFE_HEAP_STORE((tempVarArgs)+(16), $29, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $31=$4;
 var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$hdr;
 var $35=(($34+4)|0);
 var $36=SAFE_HEAP_LOAD($35, "%struct.avlnode*", 0, 0);
 _aplgrpsb(14672,4,$36);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $39=$hdr;
 var $40=(($39)|0);
 var $41=SAFE_HEAP_LOAD($40, "%struct.treelist*", 0, 0);
 $hdr=$41;
 label=2;break;
 case 10: 
 _aplnewl();
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplsrand($rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $seed;
 var $fin;
 var $fwrk=sp;
 $1=$rite;
 $seed=1;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&70;
 if(($10|0)==4){ label=3;break;}else if(($10|0)==2){ label=4;break;}else if(($10|0)==64){ label=5;break;}else{label=6;break;}
 case 3: 
 var $12=$1;
 var $13=(($12)|0);
 var $14=$13;
 var $15=SAFE_HEAP_LOAD($14, "i32*", 0, 0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 $seed=$16;
 label=7;break;
 case 4: 
 var $18=$1;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "double*", 0, 0);
 var $22=SAFE_HEAP_LOAD($21, "double", 0, 0);
 var $23=($22>=0 ? Math_floor($22) : Math_ceil($22));
 $seed=$23;
 label=7;break;
 case 5: 
 var $25=$1;
 var $26=(($25)|0);
 var $27=$26;
 var $28=SAFE_HEAP_LOAD($27, "double*", 0, 0);
 var $29=(($fwrk)|0);
 _dabsx($28,$29);
 var $30=(($fwrk+8)|0);
 var $31=SAFE_HEAP_LOAD($30, "double", 0, 0);
 var $32=($31>=0 ? Math_floor($31) : Math_ceil($31));
 $seed=$32;
 label=7;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $36=$seed;
 _srand($36);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplstr($to,$from,$cols){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $len;
 var $pad;
 $1=$to;
 $2=$from;
 $3=$cols;
 var $4=$2;
 var $5=_strlen($4);
 $len=$5;
 var $6=$1;
 var $7=$2;
 var $8=$len;
 var $9=_chrcopy($6,$7,$8,1);
 $1=$9;
 var $10=$3;
 var $11=$len;
 var $12=((($10)-($11))|0);
 $pad=$12;
 var $13=$pad;
 var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 var $16=$1;
 var $17=$pad;
 var $18=_chrcopy($16,4072,$17,0);
 $1=$18;
 label=3;break;
 case 3: 
 var $20=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }

}


function _apltext($line,$maxline){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cursor;
 $1=$line;
 $2=$maxline;
 var $3=$1;
 var $4=_strlen($3);
 $cursor=$4;
 var $5=$1;
 var $6=$cursor;
 var $7=$2;
 var $8=$cursor;
 var $9=_gettcom($5,$6,$7,$8,1);
 $cursor=$9;
 var $10=$cursor;
 var $11=($10|0)>=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$cursor;
 var $16=$13;label=4;break;
 case 3: 
 var $16=0;label=4;break;
 case 4: 
 var $16;
 SAFE_HEAP_STORE(5664, $16, "i32", 0);
 var $17=$cursor;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function _apltype($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 var $v;
 $1=$rite;
 $out=0;
 var $2=$1;
 var $3=_aplcopy($2);
 $out=$3;
 var $4=$out;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$out;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9|1;
 SAFE_HEAP_STORE($8, $10, "i32", 0);
 var $11=$out;
 var $12=(($11)|0);
 var $13=$12;
 var $14=SAFE_HEAP_LOAD($13, "i8*", 0, 0);
 var $15=$out;
 var $16=(($15+8)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$out;
 var $19=(($18+4)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=$20&110;
 var $22=_apltypf($14,$17,$21);
 $v=$22;
 label=3;break;
 case 3: 
 var $24=$1;
 var $25=$out;
 var $26=_errstop(0,0,$24,$25);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _apltypf($to,$datacnt,$datatyp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $tocb;
 var $top;
 var $d;
 var $incr;
 var $dblzero=sp;
 var $intzero=(sp)+(8);
 var $chrzero=(sp)+(16);
 $2=$to;
 $3=$datacnt;
 $4=$datatyp;
 $incr=0;
 SAFE_HEAP_STORE($dblzero, 0, "double", 0);
 SAFE_HEAP_STORE($intzero, 0, "i32", 0);
 SAFE_HEAP_STORE($chrzero, 32, "i8", 0);
 var $5=$3;
 var $6=0==($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 $1=$8;
 label=15;break;
 case 3: 
 var $10=$4;
 switch(($10|0)){case 64:{ label=4;break;}case 2:{ label=5;break;}case 4:{ label=6;break;}case 8:{ label=7;break;}case 32:{ label=8;break;}default:{label=14;break;}}break;
 case 4: 
 var $12=$2;
 var $13=$dblzero;
 var $14=$3;
 var $15=($14<<1);
 var $16=_dblcopy($12,$13,$15,0);
 $d=$16;
 label=14;break;
 case 5: 
 var $18=$2;
 var $19=$dblzero;
 var $20=$3;
 var $21=_dblcopy($18,$19,$20,0);
 $d=$21;
 label=14;break;
 case 6: 
 var $23=$2;
 var $24=$intzero;
 var $25=$3;
 var $26=_intcopy($23,$24,$25,0);
 $d=$26;
 label=14;break;
 case 7: 
 var $28=$2;
 var $29=$3;
 var $30=_chrcopy($28,$chrzero,$29,0);
 $d=$30;
 label=14;break;
 case 8: 
 var $32=$2;
 var $33=$32;
 $tocb=$33;
 label=9;break;
 case 9: 
 var $35=$3;
 var $36=((($35)-(1))|0);
 $3=$36;
 var $37=($35|0)!=0;
 if($37){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=$tocb;
 var $40=(($39+4)|0);
 $tocb=$40;
 var $41=SAFE_HEAP_LOAD($39, "%struct.aplcb*", 0, 0);
 $top=$41;
 var $42=$top;
 var $43=(($42+8)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=($44|0)!=0;
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 var $47=$top;
 var $48=(($47)|0);
 var $49=$48;
 var $50=SAFE_HEAP_LOAD($49, "i8*", 0, 0);
 var $51=$top;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=$top;
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=$56&110;
 var $58=_apltypf($50,$53,$57);
 label=12;break;
 case 12: 
 label=9;break;
 case 13: 
 var $61=$tocb;
 var $62=$61;
 $d=$62;
 label=14;break;
 case 14: 
 var $64=$d;
 $1=$64;
 label=15;break;
 case 15: 
 var $66=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $66;
  default: assert(0, "bad label: " + label);
 }

}


function _aplwksp($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $code;
 var $i;
 var $ip;
 var $ret;
 $1=$rite;
 SAFE_HEAP_STORE($2, $cp, "i8*", 0);
 $3=$cpend;
 $ret=1;
 $i=0;
 label=2;break;
 case 2: 
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=8;break;}
 case 3: 
 var $8=$i;
 var $9=((3592+($8<<2))|0);
 var $10=SAFE_HEAP_LOAD($9, "i32*", 0, 0);
 $ip=$10;
 var $11=0==($10|0);
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=$ip;
 var $14=$3;
 var $15=_aplwksq($13,$2,$14);
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 var $20=$i;
 var $21=((($20)+(1))|0);
 $i=$21;
 label=2;break;
 case 8: 
 var $23=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=30;break;}
 case 9: 
 var $26=$i;
 var $27=((($26)+(1))|0);
 $i=$27;
 switch(($27|0)){case 1:case 10:case 11:{ label=10;break;}case 2:{ label=11;break;}case 3:{ label=12;break;}case 4:{ label=13;break;}case 5:{ label=14;break;}case 6:{ label=15;break;}case 7:{ label=16;break;}case 8:{ label=17;break;}case 9:{ label=18;break;}case 12:{ label=19;break;}case 13:{ label=20;break;}case 14:{ label=21;break;}case 15:{ label=22;break;}case 16:{ label=23;break;}case 17:{ label=24;break;}case 18:{ label=25;break;}case 19:{ label=26;break;}case 20:{ label=27;break;}default:{label=28;break;}}break;
 case 10: 
 $ret=0;
 var $29=$1;
 var $30=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $31=$3;
 var $32=$i;
 var $33=_aplwksr($29,$30,$31,$32);
 $1=$33;
 label=29;break;
 case 11: 
 var $35=$1;
 var $36=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $37=$3;
 _aplcpy($35,$36,$37,0);
 label=29;break;
 case 12: 
 var $39=$1;
 var $40=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $41=$3;
 _apldrop($39,$40,$41);
 label=29;break;
 case 13: 
 var $43=$1;
 var $44=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $45=$3;
 _aplerase($43,$44,$45);
 label=29;break;
 case 14: 
 var $47=$1;
 var $48=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $49=$3;
 _aplgrps($47,$48,$49,3);
 label=29;break;
 case 15: 
 var $51=$1;
 var $52=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $53=$3;
 _aplgroup($51,$52,$53);
 label=29;break;
 case 16: 
 var $55=$1;
 var $56=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $57=$3;
 _aplgrp($55,$56,$57);
 label=29;break;
 case 17: 
 var $59=$1;
 var $60=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $61=$3;
 _aplgrps($59,$60,$61,1);
 label=29;break;
 case 18: 
 var $63=$1;
 var $64=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $65=$3;
 _apllib($63,$64,$65);
 label=29;break;
 case 19: 
 var $67=$1;
 var $68=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $69=$3;
 _aplcpy($67,$68,$69,1);
 label=29;break;
 case 20: 
 var $71=$1;
 var $72=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $73=$3;
 _aplread($71,$72,$73);
 label=29;break;
 case 21: 
 var $75=$1;
 var $76=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $77=$3;
 _aplrun($75,$76,$77);
 label=29;break;
 case 22: 
 var $79=$1;
 var $80=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $81=$3;
 _aplsave($79,$80,$81);
 label=29;break;
 case 23: 
 var $83=$1;
 var $84=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $85=$3;
 _aplsi($83,$84,$85,0);
 label=29;break;
 case 24: 
 var $87=$1;
 var $88=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $89=$3;
 _aplsi($87,$88,$89,1);
 label=29;break;
 case 25: 
 var $91=$1;
 var $92=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $93=$3;
 _aplgrps($91,$92,$93,2);
 label=29;break;
 case 26: 
 var $95=$1;
 var $96=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $97=$3;
 _aplwrite($95,$96,$97);
 label=29;break;
 case 27: 
 var $99=$1;
 var $100=SAFE_HEAP_LOAD($2, "i8*", 0, 0);
 var $101=$3;
 _aplwsid($99,$100,$101);
 label=29;break;
 case 28: 
 SAFE_HEAP_STORE(4592, 99, "i32", 0);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $105=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $106=($105|0)!=0;
 if($106){label=31;break;}else{label=32;break;}
 case 31: 
 var $108=$1;
 var $109=(($108)|0);
 var $110=$109;
 var $111=SAFE_HEAP_LOAD($110, "i8*", 0, 0);
 var $112=$1;
 var $113=(($112+8)|0);
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 var $115=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $116=_aplmsg($115);
 _execmsg($111,$114,0,$116);
 label=32;break;
 case 32: 
 var $118=$1;
 var $119=($118|0)!=0;
 if($119){label=33;break;}else{label=34;break;}
 case 33: 
 var $121=$1;
 _endoper($121);
 label=34;break;
 case 34: 
 var $123=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $123;
  default: assert(0, "bad label: " + label);
 }

}


function _aplwksq($codearry,$cpp,$cpend){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $cp=sp;
 $2=$codearry;
 $3=$cpp;
 $4=$cpend;
 var $5=$3;
 var $6=SAFE_HEAP_LOAD($5, "i8*", 0, 0);
 SAFE_HEAP_STORE($cp, $6, "i8*", 0);
 label=2;break;
 case 2: 
 var $8=$2;
 var $9=(($8+4)|0);
 $2=$9;
 var $10=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $i=$10;
 var $11=999!=($10|0);
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=$i;
 var $14=$4;
 var $15=_aplscan($cp,$14);
 var $16=($13|0)!=($15|0);
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=10;break;
 case 5: 
 label=2;break;
 case 6: 
 var $20=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $21=$4;
 var $22=($20>>>0)<($21>>>0);
 if($22){label=7;break;}else{label=9;break;}
 case 7: 
 var $24=$4;
 var $25=_aplscan($cp,$24);
 var $26=0!=($25|0);
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=10;break;
 case 9: 
 var $29=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $30=$3;
 SAFE_HEAP_STORE($30, $29, "i8*", 0);
 $1=1;
 label=10;break;
 case 10: 
 var $32=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _aplwksr($rite,$cp,$cpend,$code){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 $4=$code;
 var $5=$1;
 SAFE_HEAP_STORE(4064, $5, "%struct.aplcb*", 0);
 var $6=$2;
 SAFE_HEAP_STORE(4048, $6, "i8*", 0);
 var $7=$3;
 SAFE_HEAP_STORE(4040, $7, "i8*", 0);
 var $8=$4;
 SAFE_HEAP_STORE(4056, $8, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return 0;
}


function _aplwrite($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $fp;
 var $p;
 var $wrk;
 var $cols;
 var $rows;
 var $ep;
 var $ip;
 var $wp;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 var $4=_treenode(12528);
 $p=$4;
 var $5=0==($4|0);
 if($5){label=5;break;}else{label=2;break;}
 case 2: 
 var $7=$p;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i8*", 0, 0);
 var $10=$9;
 $wrk=$10;
 var $11=0==($10|0);
 if($11){label=5;break;}else{label=3;break;}
 case 3: 
 var $13=$wrk;
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=$15&8;
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$wrk;
 var $20=(($19+12)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)!=2;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE(4592, 122, "i32", 0);
 label=22;break;
 case 6: 
 var $25=$2;
 var $26=$3;
 var $27=_aplfopn($25,$26,14584);
 var $28=$27;
 $fp=$28;
 var $29=0==($28|0);
 if($29){label=7;break;}else{label=8;break;}
 case 7: 
 label=22;break;
 case 8: 
 var $32=$wrk;
 var $33=(($32+16)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32*", 0, 0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 $rows=$35;
 var $36=$wrk;
 var $37=(($36+16)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32*", 0, 0);
 var $39=(($38+4)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 $cols=$40;
 var $41=$wrk;
 var $42=(($41)|0);
 var $43=$42;
 var $44=SAFE_HEAP_LOAD($43, "i8*", 0, 0);
 $ip=$44;
 label=9;break;
 case 9: 
 var $46=$rows;
 var $47=((($46)-(1))|0);
 $rows=$47;
 var $48=($46|0)!=0;
 if($48){label=10;break;}else{label=21;break;}
 case 10: 
 var $50=$ip;
 var $51=$cols;
 var $52=(($50+$51)|0);
 var $53=((($52)-(1))|0);
 $ep=$53;
 label=11;break;
 case 11: 
 var $55=$ep;
 var $56=$ip;
 var $57=($55>>>0)>($56>>>0);
 if($57){label=12;break;}else{var $64=0;label=13;break;}
 case 12: 
 var $59=$ep;
 var $60=SAFE_HEAP_LOAD($59, "i8", 0, 0);
 var $61=(($60<<24)>>24);
 var $62=($61|0)==32;
 var $64=$62;label=13;break;
 case 13: 
 var $64;
 if($64){label=14;break;}else{label=16;break;}
 case 14: 
 label=15;break;
 case 15: 
 var $67=$ep;
 var $68=((($67)-(1))|0);
 $ep=$68;
 label=11;break;
 case 16: 
 var $70=$ip;
 $wp=$70;
 label=17;break;
 case 17: 
 var $72=$wp;
 var $73=$ep;
 var $74=($72>>>0)<=($73>>>0);
 if($74){label=18;break;}else{label=20;break;}
 case 18: 
 var $76=$wp;
 var $77=SAFE_HEAP_LOAD($76, "i8", 0, 0);
 var $78=(($77<<24)>>24);
 var $79=$fp;
 var $80=_fputc($78,$79);
 label=19;break;
 case 19: 
 var $82=$wp;
 var $83=(($82+1)|0);
 $wp=$83;
 label=17;break;
 case 20: 
 var $85=$fp;
 var $86=_fputc(10,$85);
 var $87=$cols;
 var $88=$ip;
 var $89=(($88+$87)|0);
 $ip=$89;
 label=9;break;
 case 21: 
 var $91=$fp;
 var $92=_fclose($91);
 label=22;break;
 case 22: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _aplwsid($rite,$cp,$cpend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $newfile;
 $1=$rite;
 $2=$cp;
 $3=$cpend;
 var $4=$2;
 var $5=$3;
 var $6=_aplparfn($4,$5);
 $newfile=$6;
 var $7=0!=($6|0);
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $13=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $14=_strlen($13);
 _execmsg($12,$14,0,12512);
 var $15=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 _aplfree($15);
 label=4;break;
 case 4: 
 var $17=$newfile;
 SAFE_HEAP_STORE(4584, $17, "i8*", 0);
 label=9;break;
 case 5: 
 var $19=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$2;
 var $23=$3;
 var $24=$2;
 var $25=$23;
 var $26=$24;
 var $27=((($25)-($26))|0);
 _execmsg($22,$27,0,14528);
 label=8;break;
 case 7: 
 var $29=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $30=SAFE_HEAP_LOAD(4584, "i8*", 0, 0);
 var $31=_strlen($30);
 _execmsg($29,$31,0,0);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _asinh($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$rite;
 var $3=$2;
 var $4=$3<0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=((-.0))-($6);
 $2=$7;
 var $8=$2;
 var $9=$2;
 var $10=$2;
 var $11=($9)*($10);
 var $12=($11)+(1);
 var $13=Math_sqrt($12);
 var $14=($8)+($13);
 var $15=Math_log($14);
 var $16=((-.0))-($15);
 $1=$16;
 label=4;break;
 case 3: 
 var $18=$2;
 var $19=$2;
 var $20=$2;
 var $21=($19)*($20);
 var $22=($21)+(1);
 var $23=Math_sqrt($22);
 var $24=($18)+($23);
 var $25=Math_log($24);
 $1=$25;
 label=4;break;
 case 4: 
 var $27=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function _asinhx($rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $wa=sp;
 var $wb=(sp)+(16);
 $1=$rrr;
 $2=$ret;
 var $3=$1;
 var $4=$1;
 var $5=(($wa)|0);
 _timesx($3,$4,$5);
 var $6=(($wa)|0);
 var $7=(($wb)|0);
 _plusx(3488,$6,$7);
 var $8=(($wb)|0);
 var $9=(($wa)|0);
 _powerx($8,3504,$9);
 var $10=$1;
 var $11=(($wa)|0);
 var $12=(($wb)|0);
 _plusx($10,$11,$12);
 var $13=(($wb)|0);
 var $14=$2;
 _logx($13,$14);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _asinx($rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ixr=sp;
 var $wa=(sp)+(16);
 $1=$rrr;
 $2=$ret;
 var $3=$1;
 var $4=(($3+8)|0);
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=((-.0))-($5);
 var $7=(($ixr)|0);
 SAFE_HEAP_STORE($7, $6, "double", 0);
 var $8=$1;
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 var $10=(($ixr)|0);
 var $11=(($10+8)|0);
 SAFE_HEAP_STORE($11, $9, "double", 0);
 var $12=(($ixr)|0);
 var $13=(($wa)|0);
 _asinhx($12,$13);
 var $14=(($wa)|0);
 var $15=$2;
 _timesx(3472,$14,$15);
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 var $18=((-.0))-($17);
 var $19=$2;
 SAFE_HEAP_STORE($19, $18, "double", 0);
 var $20=$2;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "double", 0, 0);
 var $23=((-.0))-($22);
 var $24=$2;
 var $25=(($24+8)|0);
 SAFE_HEAP_STORE($25, $23, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _assign($nameptr,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $wrk;
 var $symp;
 var $p;
 $2=$nameptr;
 $3=$rite;
 var $4=$3;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&257;
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$3;
 var $11=_aplcopy($10);
 $3=$11;
 label=3;break;
 case 3: 
 var $13=$2;
 var $14=_treenode($13);
 $p=$14;
 var $15=$p;
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=11;break;}
 case 4: 
 var $18=$p;
 var $19=(($18+8)|0);
 var $20=SAFE_HEAP_LOAD($19, "i8*", 0, 0);
 var $21=$20;
 $wrk=$21;
 var $22=0!=($21|0);
 if($22){label=5;break;}else{label=10;break;}
 case 5: 
 var $24=$wrk;
 var $25=(($24+4)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=$26&128;
 var $28=($27|0)!=0;
 if($28){label=8;break;}else{label=6;break;}
 case 6: 
 var $30=$wrk;
 var $31=(($30+4)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=$32&256;
 var $34=($33|0)!=0;
 if($34){label=7;break;}else{label=9;break;}
 case 7: 
 var $36=$3;
 var $37=(($36+4)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=0==($38|0);
 var $40=($39&1);
 var $41=$40&256;
 var $42=($41|0)!=0;
 if($42){label=8;break;}else{label=9;break;}
 case 8: 
 var $44=$3;
 var $45=_errstop(91,0,$44,0);
 $1=$45;
 label=27;break;
 case 9: 
 var $47=$p;
 var $48=(($47+8)|0);
 var $49=SAFE_HEAP_LOAD($48, "i8*", 0, 0);
 var $50=$49;
 _leafdel($50);
 label=10;break;
 case 10: 
 var $52=$3;
 var $53=_perm($52);
 var $54=$53;
 var $55=$p;
 var $56=(($55+8)|0);
 SAFE_HEAP_STORE($56, $54, "i8*", 0);
 label=18;break;
 case 11: 
 var $58=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $symp=$58;
 label=12;break;
 case 12: 
 var $60=$symp;
 var $61=(($60)|0);
 var $62=SAFE_HEAP_LOAD($61, "%struct.treelist*", 0, 0);
 var $63=($62|0)!=0;
 if($63){label=13;break;}else{label=15;break;}
 case 13: 
 label=14;break;
 case 14: 
 var $66=$symp;
 var $67=(($66)|0);
 var $68=SAFE_HEAP_LOAD($67, "%struct.treelist*", 0, 0);
 $symp=$68;
 label=12;break;
 case 15: 
 var $70=$symp;
 var $71=(($70+4)|0);
 var $72=$2;
 var $73=$3;
 var $74=_perm($73);
 var $75=$74;
 var $76=_avladd($71,$72,$75);
 $p=$76;
 var $77=$p;
 var $78=($77|0)==0;
 if($78){label=16;break;}else{label=17;break;}
 case 16: 
 var $80=$3;
 var $81=_errstop(55,0,$80,0);
 $1=$81;
 label=27;break;
 case 17: 
 label=18;break;
 case 18: 
 var $84=$2;
 var $85=_strcmp($84,2544);
 var $86=0==($85|0);
 if($86){label=19;break;}else{label=20;break;}
 case 19: 
 var $88=$3;
 var $89=_ivalue($88);
 SAFE_HEAP_STORE(2648, $89, "i32", 0);
 label=26;break;
 case 20: 
 var $91=$2;
 var $92=_strcmp($91,2560);
 var $93=0==($92|0);
 if($93){label=21;break;}else{label=22;break;}
 case 21: 
 var $95=$3;
 var $96=_value($95);
 SAFE_HEAP_STORE(2784, $96, "double", 0);
 label=25;break;
 case 22: 
 var $98=$2;
 var $99=_strcmp($98,2448);
 var $100=0==($99|0);
 if($100){label=23;break;}else{label=24;break;}
 case 23: 
 var $102=$3;
 var $103=_value($102);
 SAFE_HEAP_STORE(2576, $103, "double", 0);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $107=$3;
 $1=$107;
 label=27;break;
 case 27: 
 var $109=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $109;
  default: assert(0, "bad label: " + label);
 }

}


function _atanh($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $diff;
 var $ret;
 $2=$rite;
 var $3=$2;
 var $4=$3==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=9;break;
 case 3: 
 var $7=$2;
 var $8=1<$7;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$2;
 var $11=($10)-(1);
 var $16=$11;label=6;break;
 case 5: 
 var $13=$2;
 var $14=(1)-($13);
 var $16=$14;label=6;break;
 case 6: 
 var $16;
 $diff=$16;
 var $17=$diff;
 var $18=$17<(1e-13);
 if($18){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 84, "i32", 0);
 $1=0;
 label=9;break;
 case 8: 
 var $21=$2;
 var $22=($21)+(1);
 var $23=$2;
 var $24=(1)-($23);
 var $25=($22)/($24);
 var $26=Math_log($25);
 var $27=($26)/(2);
 $ret=$27;
 var $28=$ret;
 $1=$28;
 label=9;break;
 case 9: 
 var $30=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function _atanhx($rite,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $wa=sp;
 var $wb=(sp)+(16);
 var $wc=(sp)+(32);
 $1=$rite;
 $2=$ret;
 var $3=$1;
 var $4=(($wa)|0);
 var $5=_plusx(3456,$3,$4);
 var $6=$1;
 var $7=(($wb)|0);
 var $8=_minusx(3456,$6,$7);
 var $9=(($wa)|0);
 var $10=(($wb)|0);
 var $11=(($wc)|0);
 var $12=_dividex($9,$10,$11);
 var $13=(($wc)|0);
 var $14=(($wa)|0);
 _logx($13,$14);
 var $15=(($wa)|0);
 var $16=$2;
 var $17=_dividex($15,3440,$16);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _atanx($rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ixr=sp;
 var $wa=(sp)+(16);
 var $wb=(sp)+(32);
 var $wc=(sp)+(48);
 $1=$rrr;
 $2=$ret;
 var $3=$1;
 var $4=(($3+8)|0);
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=((-.0))-($5);
 var $7=(($ixr)|0);
 SAFE_HEAP_STORE($7, $6, "double", 0);
 var $8=$1;
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 var $10=(($ixr)|0);
 var $11=(($10+8)|0);
 SAFE_HEAP_STORE($11, $9, "double", 0);
 var $12=(($ixr)|0);
 var $13=(($wa)|0);
 _minusx(3408,$12,$13);
 var $14=(($ixr)|0);
 var $15=(($wb)|0);
 _plusx(3408,$14,$15);
 var $16=(($wa)|0);
 var $17=(($wb)|0);
 var $18=(($wc)|0);
 _dividex($16,$17,$18);
 var $19=(($wc)|0);
 var $20=(($wa)|0);
 _logx($19,$20);
 var $21=(($wa)|0);
 var $22=(($wb)|0);
 _timesx(3424,$21,$22);
 var $23=(($wb)|0);
 var $24=$2;
 _dividex($23,3392,$24);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _avladd($parmhdr,$parmname,$leaf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $newname;
 $2=$parmhdr;
 $3=$parmname;
 $4=$leaf;
 var $5=$3;
 var $6=_strlen($5);
 var $7=((($6)+(1))|0);
 var $8=_aplmall($7);
 $newname=$8;
 var $9=$newname;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $13=$newname;
 var $14=$3;
 var $15=_strcpy($13,$14);
 var $16=$2;
 var $17=$newname;
 var $18=$4;
 var $19=_avladdsb($16,$17,$18);
 $p=$19;
 var $20=$p;
 var $21=($20|0)==0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=$newname;
 _aplfree($23);
 label=5;break;
 case 5: 
 var $25=$p;
 $1=$25;
 label=6;break;
 case 6: 
 var $27=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function _avladdsb($parmhdr,$newname,$leaf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 $2=$parmhdr;
 $3=$newname;
 $4=$leaf;
 var $5=_aplmall(20);
 var $6=$5;
 $p=$6;
 var $7=$p;
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $11=$3;
 var $12=$p;
 var $13=(($12+16)|0);
 SAFE_HEAP_STORE($13, $11, "i8*", 0);
 var $14=$4;
 var $15=$p;
 var $16=(($15+8)|0);
 SAFE_HEAP_STORE($16, $14, "i8*", 0);
 var $17=$2;
 var $18=$p;
 var $19=_avltree($17,$18);
 var $20=0!=($19|0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$p;
 var $23=$22;
 _aplfree($23);
 $1=0;
 label=6;break;
 case 5: 
 var $25=$p;
 $1=$25;
 label=6;break;
 case 6: 
 var $27=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function _avlsrch($parmhdr,$parmname){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 $2=$parmhdr;
 $3=$parmname;
 var $4=$2;
 $p=$4;
 label=2;break;
 case 2: 
 var $6=$p;
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=8;break;}
 case 3: 
 var $9=$3;
 var $10=$p;
 var $11=(($10+16)|0);
 var $12=SAFE_HEAP_LOAD($11, "i8*", 0, 0);
 var $13=_strcmp($9,$12);
 var $14=_isign($13);
 if(($14|0)==-1){ label=4;break;}else if(($14|0)==0){ label=5;break;}else if(($14|0)==1){ label=6;break;}else{label=7;break;}
 case 4: 
 var $16=$p;
 var $17=(($16)|0);
 var $18=SAFE_HEAP_LOAD($17, "%struct.avlnode*", 0, 0);
 $p=$18;
 label=7;break;
 case 5: 
 var $20=$p;
 $1=$20;
 label=9;break;
 case 6: 
 var $22=$p;
 var $23=(($22+4)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.avlnode*", 0, 0);
 $p=$24;
 label=7;break;
 case 7: 
 label=2;break;
 case 8: 
 var $27=$p;
 $1=$27;
 label=9;break;
 case 9: 
 var $29=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }

}


function _avltree($parmhdr,$newnode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $a;
 var $b;
 var $c;
 var $cl;
 var $cr;
 var $f;
 var $p;
 var $q;
 var $d;
 $2=$parmhdr;
 $3=$newnode;
 var $4=$3;
 var $5=(($4+4)|0);
 SAFE_HEAP_STORE($5, 0, "%struct.avlnode*", 0);
 var $6=$3;
 var $7=(($6)|0);
 SAFE_HEAP_STORE($7, 0, "%struct.avlnode*", 0);
 var $8=$3;
 var $9=(($8+12)|0);
 SAFE_HEAP_STORE($9, 0, "i32", 0);
 var $10=$2;
 var $11=SAFE_HEAP_LOAD($10, "%struct.avlnode*", 0, 0);
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$3;
 var $15=$2;
 SAFE_HEAP_STORE($15, $14, "%struct.avlnode*", 0);
 $1=0;
 label=60;break;
 case 3: 
 $q=0;
 $f=0;
 var $17=$2;
 var $18=SAFE_HEAP_LOAD($17, "%struct.avlnode*", 0, 0);
 $p=$18;
 $a=$18;
 label=4;break;
 case 4: 
 var $20=$p;
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=12;break;}
 case 5: 
 var $23=$p;
 var $24=(($23+12)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)!=0;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=$p;
 $a=$28;
 var $29=$q;
 $f=$29;
 label=7;break;
 case 7: 
 var $31=$p;
 $q=$31;
 var $32=$3;
 var $33=(($32+16)|0);
 var $34=SAFE_HEAP_LOAD($33, "i8*", 0, 0);
 var $35=$p;
 var $36=(($35+16)|0);
 var $37=SAFE_HEAP_LOAD($36, "i8*", 0, 0);
 var $38=_strcmp($34,$37);
 var $39=_isign($38);
 if(($39|0)==1){ label=10;break;}else if(($39|0)==-1){ label=8;break;}else if(($39|0)==0){ label=9;break;}else{label=11;break;}
 case 8: 
 var $41=$q;
 var $42=(($41)|0);
 var $43=SAFE_HEAP_LOAD($42, "%struct.avlnode*", 0, 0);
 $p=$43;
 label=11;break;
 case 9: 
 var $45=$p;
 $1=$45;
 label=60;break;
 case 10: 
 var $47=$q;
 var $48=(($47+4)|0);
 var $49=SAFE_HEAP_LOAD($48, "%struct.avlnode*", 0, 0);
 $p=$49;
 label=11;break;
 case 11: 
 label=4;break;
 case 12: 
 var $52=$3;
 var $53=(($52+16)|0);
 var $54=SAFE_HEAP_LOAD($53, "i8*", 0, 0);
 var $55=$q;
 var $56=(($55+16)|0);
 var $57=SAFE_HEAP_LOAD($56, "i8*", 0, 0);
 var $58=_strcmp($54,$57);
 var $59=($58|0)<0;
 if($59){label=13;break;}else{label=14;break;}
 case 13: 
 var $61=$3;
 var $62=$q;
 var $63=(($62)|0);
 SAFE_HEAP_STORE($63, $61, "%struct.avlnode*", 0);
 label=15;break;
 case 14: 
 var $65=$3;
 var $66=$q;
 var $67=(($66+4)|0);
 SAFE_HEAP_STORE($67, $65, "%struct.avlnode*", 0);
 label=15;break;
 case 15: 
 var $69=$a;
 var $70=(($69+16)|0);
 var $71=SAFE_HEAP_LOAD($70, "i8*", 0, 0);
 var $72=$3;
 var $73=(($72+16)|0);
 var $74=SAFE_HEAP_LOAD($73, "i8*", 0, 0);
 var $75=_strcmp($71,$74);
 var $76=_isign($75);
 $d=$76;
 var $77=$d;
 var $78=($77|0)<0;
 if($78){label=16;break;}else{label=17;break;}
 case 16: 
 var $80=$a;
 var $81=(($80+4)|0);
 var $82=SAFE_HEAP_LOAD($81, "%struct.avlnode*", 0, 0);
 $p=$82;
 label=18;break;
 case 17: 
 var $84=$a;
 var $85=(($84)|0);
 var $86=SAFE_HEAP_LOAD($85, "%struct.avlnode*", 0, 0);
 $p=$86;
 label=18;break;
 case 18: 
 var $88=$p;
 $b=$88;
 label=19;break;
 case 19: 
 var $90=$p;
 var $91=$3;
 var $92=($90|0)!=($91|0);
 if($92){label=20;break;}else{label=24;break;}
 case 20: 
 var $94=$p;
 var $95=(($94+16)|0);
 var $96=SAFE_HEAP_LOAD($95, "i8*", 0, 0);
 var $97=$3;
 var $98=(($97+16)|0);
 var $99=SAFE_HEAP_LOAD($98, "i8*", 0, 0);
 var $100=_strcmp($96,$99);
 var $101=_isign($100);
 var $102=$p;
 var $103=(($102+12)|0);
 SAFE_HEAP_STORE($103, $101, "i32", 0);
 var $104=$p;
 var $105=(($104+12)|0);
 var $106=SAFE_HEAP_LOAD($105, "i32", 0, 0);
 var $107=($106|0)<0;
 if($107){label=21;break;}else{label=22;break;}
 case 21: 
 var $109=$p;
 var $110=(($109+4)|0);
 var $111=SAFE_HEAP_LOAD($110, "%struct.avlnode*", 0, 0);
 $p=$111;
 label=23;break;
 case 22: 
 var $113=$p;
 var $114=(($113)|0);
 var $115=SAFE_HEAP_LOAD($114, "%struct.avlnode*", 0, 0);
 $p=$115;
 label=23;break;
 case 23: 
 label=19;break;
 case 24: 
 var $118=$a;
 var $119=(($118+12)|0);
 var $120=SAFE_HEAP_LOAD($119, "i32", 0, 0);
 var $121=0==($120|0);
 if($121){label=25;break;}else{label=26;break;}
 case 25: 
 var $123=$d;
 var $124=$a;
 var $125=(($124+12)|0);
 SAFE_HEAP_STORE($125, $123, "i32", 0);
 $1=0;
 label=60;break;
 case 26: 
 var $127=$a;
 var $128=(($127+12)|0);
 var $129=SAFE_HEAP_LOAD($128, "i32", 0, 0);
 var $130=$d;
 var $131=((($129)+($130))|0);
 var $132=0==($131|0);
 if($132){label=27;break;}else{label=28;break;}
 case 27: 
 var $134=$a;
 var $135=(($134+12)|0);
 SAFE_HEAP_STORE($135, 0, "i32", 0);
 $1=0;
 label=60;break;
 case 28: 
 var $137=$d;
 var $138=($137|0)==1;
 if($138){label=29;break;}else{label=40;break;}
 case 29: 
 var $140=$b;
 var $141=(($140+12)|0);
 var $142=SAFE_HEAP_LOAD($141, "i32", 0, 0);
 var $143=($142|0)==1;
 if($143){label=30;break;}else{label=31;break;}
 case 30: 
 var $145=$b;
 var $146=(($145+4)|0);
 var $147=SAFE_HEAP_LOAD($146, "%struct.avlnode*", 0, 0);
 var $148=$a;
 var $149=(($148)|0);
 SAFE_HEAP_STORE($149, $147, "%struct.avlnode*", 0);
 var $150=$a;
 var $151=$b;
 var $152=(($151+4)|0);
 SAFE_HEAP_STORE($152, $150, "%struct.avlnode*", 0);
 var $153=$b;
 var $154=(($153+12)|0);
 SAFE_HEAP_STORE($154, 0, "i32", 0);
 var $155=$a;
 var $156=(($155+12)|0);
 SAFE_HEAP_STORE($156, 0, "i32", 0);
 label=39;break;
 case 31: 
 var $158=$b;
 var $159=(($158+4)|0);
 var $160=SAFE_HEAP_LOAD($159, "%struct.avlnode*", 0, 0);
 $c=$160;
 var $161=$c;
 var $162=($161|0)==0;
 if($162){label=32;break;}else{label=33;break;}
 case 32: 
 $cr=0;
 $cl=0;
 label=34;break;
 case 33: 
 var $165=$c;
 var $166=(($165)|0);
 var $167=SAFE_HEAP_LOAD($166, "%struct.avlnode*", 0, 0);
 $cl=$167;
 var $168=$c;
 var $169=(($168+4)|0);
 var $170=SAFE_HEAP_LOAD($169, "%struct.avlnode*", 0, 0);
 $cr=$170;
 label=34;break;
 case 34: 
 var $172=$cl;
 var $173=$b;
 var $174=(($173+4)|0);
 SAFE_HEAP_STORE($174, $172, "%struct.avlnode*", 0);
 var $175=$cr;
 var $176=$a;
 var $177=(($176)|0);
 SAFE_HEAP_STORE($177, $175, "%struct.avlnode*", 0);
 var $178=$b;
 var $179=$c;
 var $180=(($179)|0);
 SAFE_HEAP_STORE($180, $178, "%struct.avlnode*", 0);
 var $181=$a;
 var $182=$c;
 var $183=(($182+4)|0);
 SAFE_HEAP_STORE($183, $181, "%struct.avlnode*", 0);
 var $184=$c;
 var $185=(($184+12)|0);
 var $186=SAFE_HEAP_LOAD($185, "i32", 0, 0);
 if(($186|0)==1){ label=35;break;}else if(($186|0)==-1){ label=36;break;}else{label=37;break;}
 case 35: 
 var $188=$a;
 var $189=(($188+12)|0);
 SAFE_HEAP_STORE($189, -1, "i32", 0);
 var $190=$b;
 var $191=(($190+12)|0);
 SAFE_HEAP_STORE($191, 0, "i32", 0);
 label=38;break;
 case 36: 
 var $193=$b;
 var $194=(($193+12)|0);
 SAFE_HEAP_STORE($194, 1, "i32", 0);
 var $195=$a;
 var $196=(($195+12)|0);
 SAFE_HEAP_STORE($196, 0, "i32", 0);
 label=38;break;
 case 37: 
 var $198=$a;
 var $199=(($198+12)|0);
 SAFE_HEAP_STORE($199, 0, "i32", 0);
 var $200=$b;
 var $201=(($200+12)|0);
 SAFE_HEAP_STORE($201, 0, "i32", 0);
 label=38;break;
 case 38: 
 var $203=$c;
 var $204=(($203+12)|0);
 SAFE_HEAP_STORE($204, 0, "i32", 0);
 var $205=$c;
 $b=$205;
 label=39;break;
 case 39: 
 label=51;break;
 case 40: 
 var $208=$b;
 var $209=(($208+12)|0);
 var $210=SAFE_HEAP_LOAD($209, "i32", 0, 0);
 var $211=($210|0)==-1;
 if($211){label=41;break;}else{label=42;break;}
 case 41: 
 var $213=$b;
 var $214=(($213)|0);
 var $215=SAFE_HEAP_LOAD($214, "%struct.avlnode*", 0, 0);
 var $216=$a;
 var $217=(($216+4)|0);
 SAFE_HEAP_STORE($217, $215, "%struct.avlnode*", 0);
 var $218=$a;
 var $219=$b;
 var $220=(($219)|0);
 SAFE_HEAP_STORE($220, $218, "%struct.avlnode*", 0);
 var $221=$b;
 var $222=(($221+12)|0);
 SAFE_HEAP_STORE($222, 0, "i32", 0);
 var $223=$a;
 var $224=(($223+12)|0);
 SAFE_HEAP_STORE($224, 0, "i32", 0);
 label=50;break;
 case 42: 
 var $226=$b;
 var $227=(($226)|0);
 var $228=SAFE_HEAP_LOAD($227, "%struct.avlnode*", 0, 0);
 $c=$228;
 var $229=$c;
 var $230=($229|0)==0;
 if($230){label=43;break;}else{label=44;break;}
 case 43: 
 $cr=0;
 $cl=0;
 label=45;break;
 case 44: 
 var $233=$c;
 var $234=(($233)|0);
 var $235=SAFE_HEAP_LOAD($234, "%struct.avlnode*", 0, 0);
 $cl=$235;
 var $236=$c;
 var $237=(($236+4)|0);
 var $238=SAFE_HEAP_LOAD($237, "%struct.avlnode*", 0, 0);
 $cr=$238;
 label=45;break;
 case 45: 
 var $240=$cr;
 var $241=$b;
 var $242=(($241)|0);
 SAFE_HEAP_STORE($242, $240, "%struct.avlnode*", 0);
 var $243=$cl;
 var $244=$a;
 var $245=(($244+4)|0);
 SAFE_HEAP_STORE($245, $243, "%struct.avlnode*", 0);
 var $246=$b;
 var $247=$c;
 var $248=(($247+4)|0);
 SAFE_HEAP_STORE($248, $246, "%struct.avlnode*", 0);
 var $249=$a;
 var $250=$c;
 var $251=(($250)|0);
 SAFE_HEAP_STORE($251, $249, "%struct.avlnode*", 0);
 var $252=$c;
 var $253=(($252+12)|0);
 var $254=SAFE_HEAP_LOAD($253, "i32", 0, 0);
 if(($254|0)==-1){ label=46;break;}else if(($254|0)==1){ label=47;break;}else{label=48;break;}
 case 46: 
 var $256=$a;
 var $257=(($256+12)|0);
 SAFE_HEAP_STORE($257, 1, "i32", 0);
 var $258=$b;
 var $259=(($258+12)|0);
 SAFE_HEAP_STORE($259, 0, "i32", 0);
 label=49;break;
 case 47: 
 var $261=$b;
 var $262=(($261+12)|0);
 SAFE_HEAP_STORE($262, -1, "i32", 0);
 var $263=$a;
 var $264=(($263+12)|0);
 SAFE_HEAP_STORE($264, 0, "i32", 0);
 label=49;break;
 case 48: 
 var $266=$a;
 var $267=(($266+12)|0);
 SAFE_HEAP_STORE($267, 0, "i32", 0);
 var $268=$b;
 var $269=(($268+12)|0);
 SAFE_HEAP_STORE($269, 0, "i32", 0);
 label=49;break;
 case 49: 
 var $271=$c;
 var $272=(($271+12)|0);
 SAFE_HEAP_STORE($272, 0, "i32", 0);
 var $273=$c;
 $b=$273;
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $276=$f;
 var $277=($276|0)==0;
 if($277){label=52;break;}else{label=53;break;}
 case 52: 
 var $279=$b;
 var $280=$2;
 SAFE_HEAP_STORE($280, $279, "%struct.avlnode*", 0);
 label=59;break;
 case 53: 
 var $282=$a;
 var $283=$f;
 var $284=(($283)|0);
 var $285=SAFE_HEAP_LOAD($284, "%struct.avlnode*", 0, 0);
 var $286=($282|0)==($285|0);
 if($286){label=54;break;}else{label=55;break;}
 case 54: 
 var $288=$b;
 var $289=$f;
 var $290=(($289)|0);
 SAFE_HEAP_STORE($290, $288, "%struct.avlnode*", 0);
 label=58;break;
 case 55: 
 var $292=$a;
 var $293=$f;
 var $294=(($293+4)|0);
 var $295=SAFE_HEAP_LOAD($294, "%struct.avlnode*", 0, 0);
 var $296=($292|0)==($295|0);
 if($296){label=56;break;}else{label=57;break;}
 case 56: 
 var $298=$b;
 var $299=$f;
 var $300=(($299+4)|0);
 SAFE_HEAP_STORE($300, $298, "%struct.avlnode*", 0);
 label=57;break;
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 $1=0;
 label=60;break;
 case 60: 
 var $305=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $305;
  default: assert(0, "bad label: " + label);
 }

}


function _axesok($axes,$rank,$maxv){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ip;
 var $k;
 $2=$axes;
 $3=$rank;
 $4=$maxv;
 var $5=$2;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&4;
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$2;
 var $12=_integer($11);
 $2=$12;
 label=3;break;
 case 3: 
 var $14=$2;
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=14;break;
 case 5: 
 var $18=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $19=($18|0)==0;
 var $20=($19&1);
 var $21=$4;
 var $22=((($21)-($20))|0);
 $4=$22;
 var $23=$2;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=$3;
 var $27=($25|0)!=($26|0);
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 123, "i32", 0);
 var $29=$2;
 _endoper($29);
 $1=0;
 label=14;break;
 case 7: 
 var $31=$2;
 var $32=(($31)|0);
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "i32*", 0, 0);
 $ip=$34;
 label=8;break;
 case 8: 
 var $36=$3;
 var $37=((($36)-(1))|0);
 $3=$37;
 var $38=($36|0)!=0;
 if($38){label=9;break;}else{label=13;break;}
 case 9: 
 var $40=$ip;
 var $41=(($40+4)|0);
 $ip=$41;
 var $42=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 $k=$42;
 var $43=$k;
 var $44=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $45=($43|0)<($44|0);
 if($45){label=11;break;}else{label=10;break;}
 case 10: 
 var $47=$k;
 var $48=$4;
 var $49=($47|0)>($48|0);
 if($49){label=11;break;}else{label=12;break;}
 case 11: 
 SAFE_HEAP_STORE(4592, 123, "i32", 0);
 var $51=$2;
 _endoper($51);
 $1=0;
 label=14;break;
 case 12: 
 label=8;break;
 case 13: 
 var $54=$2;
 $1=$54;
 label=14;break;
 case 14: 
 var $56=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }

}


function _axisdft($cp,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $axis;
 $1=$cp;
 $2=$rite;
 var $3=$1;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=256&$5;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 $axis=$9;
 label=4;break;
 case 3: 
 var $11=$2;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=_imax(1,$13);
 var $15=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $16=($15|0)==0;
 var $17=($16&1);
 var $18=((($14)-($17))|0);
 $axis=$18;
 label=4;break;
 case 4: 
 var $20=$axis;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }

}


function _axispre($rite,$axis,$paxicnt,$pbotcnt,$ptopcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $axicnt;
 var $botcnt;
 var $topcnt;
 var $dimptr;
 var $i;
 $2=$rite;
 $3=$axis;
 $4=$paxicnt;
 $5=$pbotcnt;
 $6=$ptopcnt;
 var $7=$2;
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=16;break;
 case 3: 
 var $11=$2;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)>0;
 if($14){label=4;break;}else{label=7;break;}
 case 4: 
 var $16=$3;
 var $17=($16|0)<1;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=$3;
 var $20=$2;
 var $21=(($20+12)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=($19|0)>($22|0);
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 $1=0;
 label=16;break;
 case 7: 
 $topcnt=1;
 $botcnt=1;
 $axicnt=1;
 var $26=$2;
 var $27=(($26+16)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32*", 0, 0);
 $dimptr=$28;
 $i=1;
 label=8;break;
 case 8: 
 var $30=$i;
 var $31=$2;
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=($30|0)<=($33|0);
 if($34){label=9;break;}else{label=15;break;}
 case 9: 
 var $36=$i;
 var $37=$3;
 var $38=((($36)-($37))|0);
 var $39=_isign($38);
 if(($39|0)==-1){ label=10;break;}else if(($39|0)==0){ label=11;break;}else if(($39|0)==1){ label=12;break;}else{label=13;break;}
 case 10: 
 var $41=$dimptr;
 var $42=(($41+4)|0);
 $dimptr=$42;
 var $43=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $44=$topcnt;
 var $45=(Math_imul($44,$43)|0);
 $topcnt=$45;
 label=13;break;
 case 11: 
 var $47=$dimptr;
 var $48=(($47+4)|0);
 $dimptr=$48;
 var $49=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 $axicnt=$49;
 label=13;break;
 case 12: 
 var $51=$dimptr;
 var $52=(($51+4)|0);
 $dimptr=$52;
 var $53=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $54=$botcnt;
 var $55=(Math_imul($54,$53)|0);
 $botcnt=$55;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $58=$i;
 var $59=((($58)+(1))|0);
 $i=$59;
 label=8;break;
 case 15: 
 var $61=$axicnt;
 var $62=$4;
 SAFE_HEAP_STORE($62, $61, "i32", 0);
 var $63=$botcnt;
 var $64=$5;
 SAFE_HEAP_STORE($64, $63, "i32", 0);
 var $65=$topcnt;
 var $66=$6;
 SAFE_HEAP_STORE($66, $65, "i32", 0);
 $1=1;
 label=16;break;
 case 16: 
 var $68=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $68;
  default: assert(0, "bad label: " + label);
 }

}


function _axistest($stack){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$stack;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{var $10=0;label=3;break;}
 case 2: 
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($7|0)==-8;
 var $10=$8;label=3;break;
 case 3: 
 var $10;
 var $11=($10&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _binom($a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 var $2=(sp)+(8);
 var $r=(sp)+(16);
 SAFE_HEAP_STORE($1, $a, "double", 0);
 SAFE_HEAP_STORE($2, $b, "double", 0);
 _binomp($1,$2,$r);
 var $3=SAFE_HEAP_LOAD($r, "double", 0, 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $3;
}


function _binomp($m,$n,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $a;
 var $b;
 var $c;
 var $den;
 var $k;
 var $num;
 var $p=sp;
 var $q=(sp)+(8);
 var $r=(sp)+(16);
 var $s;
 $1=$m;
 $2=$n;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 $a=$5;
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 $b=$7;
 label=2;break;
 case 2: 
 var $9=$a;
 var $10=Math_floor($9);
 var $11=$a;
 var $12=$10==$11;
 if($12){label=3;break;}else{label=27;break;}
 case 3: 
 var $14=$b;
 var $15=Math_floor($14);
 var $16=$b;
 var $17=$15==$16;
 if($17){label=4;break;}else{label=27;break;}
 case 4: 
 var $19=$a;
 var $20=$b;
 var $21=$19==$20;
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=$a;
 var $24=$23==0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$3;
 SAFE_HEAP_STORE($26, 1, "double", 0);
 label=33;break;
 case 7: 
 var $28=$b;
 var $29=$28<0;
 if($29){label=8;break;}else{label=10;break;}
 case 8: 
 var $31=$a;
 var $32=$b;
 var $33=$31<$32;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=$b;
 var $36=($35)+(1);
 var $37=((-.0))-($36);
 SAFE_HEAP_STORE($p, $37, "double", 0);
 var $38=$a;
 var $39=($38)+(1);
 var $40=((-.0))-($39);
 SAFE_HEAP_STORE($q, $40, "double", 0);
 _binomp($p,$q,$r);
 var $41=$b;
 var $42=$a;
 var $43=($41)-($42);
 var $44=_mod($43,2);
 var $45=$44==0;
 var $46=($45?1:-1);
 $s=$46;
 var $47=$s;
 var $48=SAFE_HEAP_LOAD($r, "double", 0, 0);
 var $49=($47)*($48);
 var $50=$3;
 SAFE_HEAP_STORE($50, $49, "double", 0);
 label=33;break;
 case 10: 
 var $52=$b;
 var $53=$52>=0;
 if($53){label=11;break;}else{label=16;break;}
 case 11: 
 var $55=$a;
 var $56=$b;
 var $57=$55>$56;
 if($57){label=13;break;}else{label=12;break;}
 case 12: 
 var $59=$a;
 var $60=$59<0;
 if($60){label=13;break;}else{label=14;break;}
 case 13: 
 var $62=$3;
 SAFE_HEAP_STORE($62, 0, "double", 0);
 label=33;break;
 case 14: 
 label=15;break;
 case 15: 
 label=20;break;
 case 16: 
 var $66=$a;
 var $67=$66<0;
 if($67){label=17;break;}else{label=19;break;}
 case 17: 
 var $69=$a;
 var $70=$b;
 var $71=$69>$70;
 if($71){label=18;break;}else{label=19;break;}
 case 18: 
 var $73=$3;
 SAFE_HEAP_STORE($73, 0, "double", 0);
 label=33;break;
 case 19: 
 label=20;break;
 case 20: 
 var $76=$b;
 var $77=$a;
 var $78=($76)-($77);
 $k=$78;
 var $79=$b;
 $num=$79;
 label=21;break;
 case 21: 
 var $81=$b;
 var $82=($81)-(1);
 $b=$82;
 var $83=$k;
 var $84=$82>$83;
 if($84){label=22;break;}else{label=23;break;}
 case 22: 
 var $86=$b;
 var $87=$num;
 var $88=($87)*($86);
 $num=$88;
 label=21;break;
 case 23: 
 var $90=$a;
 $den=$90;
 label=24;break;
 case 24: 
 var $92=$a;
 var $93=($92)-(1);
 $a=$93;
 var $94=$93>1;
 if($94){label=25;break;}else{label=26;break;}
 case 25: 
 var $96=$a;
 var $97=$den;
 var $98=($97)*($96);
 $den=$98;
 label=24;break;
 case 26: 
 var $100=$num;
 var $101=$den;
 var $102=($100)/($101);
 var $103=$3;
 SAFE_HEAP_STORE($103, $102, "double", 0);
 label=32;break;
 case 27: 
 var $105=$b;
 var $106=$105<0;
 if($106){label=28;break;}else{label=31;break;}
 case 28: 
 var $108=$b;
 var $109=Math_floor($108);
 var $110=$b;
 var $111=$109==$110;
 if($111){label=29;break;}else{label=31;break;}
 case 29: 
 var $113=$a;
 var $114=Math_floor($113);
 var $115=$a;
 var $116=$114!=$115;
 if($116){label=30;break;}else{label=31;break;}
 case 30: 
 SAFE_HEAP_STORE(4592, 40, "i32", 0);
 var $118=$3;
 SAFE_HEAP_STORE($118, 0, "double", 0);
 label=33;break;
 case 31: 
 var $120=$b;
 var $121=_factorl($120);
 var $122=$a;
 var $123=_factorl($122);
 var $124=$b;
 var $125=$a;
 var $126=($124)-($125);
 var $127=_factorl($126);
 var $128=($123)*($127);
 var $129=($121)/($128);
 var $130=$3;
 SAFE_HEAP_STORE($130, $129, "double", 0);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _binomx($m,$n,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $wrka=sp;
 var $wrkb=(sp)+(16);
 var $wrkc=(sp)+(32);
 $1=$m;
 $2=$n;
 $3=$ret;
 var $4=$2;
 var $5=$1;
 var $6=(($wrka)|0);
 _minusx($4,$5,$6);
 var $7=(($wrka)|0);
 var $8=(($wrkb)|0);
 _gammax($7,$8,1);
 var $9=$1;
 var $10=(($wrka)|0);
 _gammax($9,$10,1);
 var $11=(($wrka)|0);
 var $12=(($wrkb)|0);
 var $13=(($wrkc)|0);
 _timesx($11,$12,$13);
 var $14=$2;
 var $15=(($wrka)|0);
 _gammax($14,$15,1);
 var $16=(($wrka)|0);
 var $17=(($wrkc)|0);
 var $18=$3;
 _dividex($16,$17,$18);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _cat($left,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $4;
 var $big=(sp)+(16);
 var $lit=(sp)+(24);
 var $out;
 var $lp=(sp)+(32);
 var $op=(sp)+(40);
 var $rp=(sp)+(48);
 var $axicnt=(sp)+(56);
 var $bigcnt;
 var $botcnt=(sp)+(64);
 var $datacnt;
 var $datatyp;
 var $dimptr;
 var $i;
 var $j;
 var $k;
 var $leftcnt;
 var $leftincr;
 var $litaxc;
 var $litcnt;
 var $rank;
 var $ritecnt;
 var $riteincr;
 var $topcnt=(sp)+(72);
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 $4=$axis;
 $out=0;
 var $5=_matchok($2,$3,110);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=22;break;
 case 3: 
 var $9=$4;
 var $10=($9|0)<0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $13=(($12+12)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $16=(($15+12)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=_imax($14,$17);
 $4=$18;
 label=6;break;
 case 5: 
 var $20=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $21=($20|0)==0;
 var $22=($21&1);
 var $23=$4;
 var $24=((($23)+($22))|0);
 $4=$24;
 label=6;break;
 case 6: 
 var $26=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $27=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $28=$4;
 var $29=_conform($26,$27,$28,$big,$lit);
 var $30=1!=($29|0);
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 var $32=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $33=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $34=_errstop(2,$32,$33,0);
 $1=$34;
 label=22;break;
 case 8: 
 var $36=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $37=$4;
 var $38=_axispre($36,$37,$axicnt,$botcnt,$topcnt);
 var $39=1!=($38|0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $42=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $43=_errstop(0,$41,$42,0);
 $1=$43;
 label=22;break;
 case 10: 
 var $45=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $46=(($45+12)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=_imax(1,$47);
 $rank=$48;
 var $49=SAFE_HEAP_LOAD($lit, "%struct.aplcb*", 0, 0);
 var $50=(($49+12)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32", 0, 0);
 var $52=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $53=(($52+12)|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 var $55=($51|0)!=($54|0);
 if($55){label=12;break;}else{label=11;break;}
 case 11: 
 var $57=SAFE_HEAP_LOAD($lit, "%struct.aplcb*", 0, 0);
 var $58=(($57+12)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=($59|0)==0;
 if($60){label=12;break;}else{label=13;break;}
 case 12: 
 $litaxc=1;
 label=14;break;
 case 13: 
 var $63=SAFE_HEAP_LOAD($lit, "%struct.aplcb*", 0, 0);
 var $64=(($63+16)|0);
 var $65=SAFE_HEAP_LOAD($64, "i32*", 0, 0);
 var $66=$4;
 var $67=(($65+($66<<2))|0);
 var $68=((($67)-(4))|0);
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 $litaxc=$69;
 label=14;break;
 case 14: 
 var $71=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $72=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $73=(Math_imul($71,$72)|0);
 $bigcnt=$73;
 var $74=$litaxc;
 var $75=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $76=(Math_imul($74,$75)|0);
 $litcnt=$76;
 var $77=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $78=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $79=($77|0)==($78|0);
 if($79){label=15;break;}else{label=16;break;}
 case 15: 
 var $81=$bigcnt;
 $leftcnt=$81;
 var $82=$litcnt;
 $ritecnt=$82;
 label=17;break;
 case 16: 
 var $84=$litcnt;
 $leftcnt=$84;
 var $85=$bigcnt;
 $ritecnt=$85;
 label=17;break;
 case 17: 
 var $87=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $88=$leftcnt;
 var $89=$ritecnt;
 var $90=((($88)+($89))|0);
 var $91=(Math_imul($87,$90)|0);
 $datacnt=$91;
 var $92=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $93=(($92+4)|0);
 var $94=SAFE_HEAP_LOAD($93, "i32", 0, 0);
 var $95=$94&110;
 $datatyp=$95;
 var $96=$datacnt;
 var $97=$datatyp;
 var $98=((($97)+(1))|0);
 var $99=$rank;
 var $100=_getcb(0,$96,$98,$99,0);
 $out=$100;
 var $101=$rank;
 var $102=($101|0)>1;
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 var $104=$out;
 var $105=(($104+16)|0);
 var $106=SAFE_HEAP_LOAD($105, "i32*", 0, 0);
 var $107=$106;
 var $108=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $109=(($108+16)|0);
 var $110=SAFE_HEAP_LOAD($109, "i32*", 0, 0);
 var $111=$110;
 var $112=$rank;
 var $113=_intcopy($107,$111,$112,1);
 var $114=$113;
 $dimptr=$114;
 var $115=$litaxc;
 var $116=$out;
 var $117=(($116+16)|0);
 var $118=SAFE_HEAP_LOAD($117, "i32*", 0, 0);
 var $119=$4;
 var $120=(($118+($119<<2))|0);
 var $121=((($120)-(4))|0);
 var $122=SAFE_HEAP_LOAD($121, "i32", 0, 0);
 var $123=((($122)+($115))|0);
 SAFE_HEAP_STORE($121, $123, "i32", 0);
 label=19;break;
 case 19: 
 var $125=$datacnt;
 var $126=($125|0)!=0;
 if($126){label=20;break;}else{label=21;break;}
 case 20: 
 var $128=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $129=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $130=$out;
 var $131=$4;
 var $132=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $133=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $134=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $135=$leftcnt;
 var $136=$ritecnt;
 var $137=_catlamcm($128,$129,$130,$131,$132,$133,$134,$135,$136);
 $1=$137;
 label=22;break;
 case 21: 
 var $139=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $140=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $141=$out;
 var $142=_errstop(0,$139,$140,$141);
 $1=$142;
 label=22;break;
 case 22: 
 var $144=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $144;
  default: assert(0, "bad label: " + label);
 }

}


function _catlamcm($left,$rite,$out,$axis,$axicnt,$botcnt,$topcnt,$leftcnt,$ritecnt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $lp=sp;
 var $op=(sp)+(8);
 var $rp=(sp)+(16);
 var $datatyp;
 var $i;
 var $lincr;
 var $rincr;
 $1=$left;
 $2=$rite;
 $3=$out;
 $4=$axis;
 $5=$axicnt;
 $6=$botcnt;
 $7=$topcnt;
 $8=$leftcnt;
 $9=$ritecnt;
 var $10=$1;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&110;
 $datatyp=$13;
 var $14=$1;
 var $15=(($14+8)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)>1;
 var $18=($17&1);
 $lincr=$18;
 var $19=$2;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)>1;
 var $23=($22&1);
 $rincr=$23;
 var $24=$1;
 var $25=(($24)|0);
 var $26=$25;
 var $27=SAFE_HEAP_LOAD($26, "i32*", 0, 0);
 var $28=$lp;
 SAFE_HEAP_STORE($28, $27, "i32*", 0);
 var $29=$2;
 var $30=(($29)|0);
 var $31=$30;
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=$rp;
 SAFE_HEAP_STORE($33, $32, "i32*", 0);
 var $34=$3;
 var $35=(($34)|0);
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "i32*", 0, 0);
 var $38=$op;
 SAFE_HEAP_STORE($38, $37, "i32*", 0);
 var $39=$7;
 $i=$39;
 label=2;break;
 case 2: 
 var $41=$i;
 var $42=($41|0)>0;
 if($42){label=3;break;}else{label=5;break;}
 case 3: 
 var $44=$op;
 var $45=SAFE_HEAP_LOAD($44, "i32*", 0, 0);
 var $46=$45;
 var $47=$lp;
 var $48=SAFE_HEAP_LOAD($47, "i32*", 0, 0);
 var $49=$48;
 var $50=$8;
 var $51=$lincr;
 var $52=$datatyp;
 var $53=_dtacopy($46,$49,$50,$51,$52);
 var $54=$53;
 var $55=$op;
 SAFE_HEAP_STORE($55, $54, "i32*", 0);
 var $56=$8;
 var $57=$lincr;
 var $58=(Math_imul($56,$57)|0);
 var $59=$1;
 var $60=(($59+20)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=(Math_imul($58,$61)|0);
 var $63=$lp;
 var $64=SAFE_HEAP_LOAD($63, "i8*", 0, 0);
 var $65=(($64+$62)|0);
 SAFE_HEAP_STORE($63, $65, "i8*", 0);
 var $66=$op;
 var $67=SAFE_HEAP_LOAD($66, "i32*", 0, 0);
 var $68=$67;
 var $69=$rp;
 var $70=SAFE_HEAP_LOAD($69, "i32*", 0, 0);
 var $71=$70;
 var $72=$9;
 var $73=$rincr;
 var $74=$datatyp;
 var $75=_dtacopy($68,$71,$72,$73,$74);
 var $76=$75;
 var $77=$op;
 SAFE_HEAP_STORE($77, $76, "i32*", 0);
 var $78=$9;
 var $79=$rincr;
 var $80=(Math_imul($78,$79)|0);
 var $81=$2;
 var $82=(($81+20)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=(Math_imul($80,$83)|0);
 var $85=$rp;
 var $86=SAFE_HEAP_LOAD($85, "i8*", 0, 0);
 var $87=(($86+$84)|0);
 SAFE_HEAP_STORE($85, $87, "i8*", 0);
 label=4;break;
 case 4: 
 var $89=$i;
 var $90=((($89)-(1))|0);
 $i=$90;
 label=2;break;
 case 5: 
 var $92=$1;
 var $93=$2;
 var $94=$3;
 var $95=_errstop(0,$92,$93,$94);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $95;
  default: assert(0, "bad label: " + label);
 }

}


function _ceil($num){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $rem;
 var $sign;
 $2=$num;
 var $3=$2;
 var $4=$3>=0;
 var $5=($4?1:-1);
 $sign=$5;
 var $6=$2;
 var $7=($6)*($5);
 $2=$7;
 var $8=_mod($7,1);
 $rem=$8;
 var $9=$rem;
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$9<$10;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$sign;
 var $14=$2;
 var $15=$rem;
 var $16=($14)-($15);
 var $17=($13)*($16);
 $1=$17;
 label=4;break;
 case 3: 
 var $19=$sign;
 var $20=$2;
 var $21=($19)*($20);
 var $22=Math_floor($21);
 var $23=($22)+(1);
 $1=$23;
 label=4;break;
 case 4: 
 var $25=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _ceilp($num,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $nw;
 var $rw;
 $1=$num;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $nw=$4;
 var $5=$nw;
 var $6=Math_floor($5);
 $rw=$6;
 var $7=$rw;
 var $8=$nw;
 var $9=$7!=$8;
 if($9){label=2;break;}else{label=5;break;}
 case 2: 
 var $11=$nw;
 var $12=$rw;
 var $13=($11)-($12);
 var $14=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $15=$13<$14;
 if($15){label=4;break;}else{label=3;break;}
 case 3: 
 var $17=$rw;
 var $18=($17)+(1);
 $rw=$18;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $21=$rw;
 var $22=$2;
 SAFE_HEAP_STORE($22, $21, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _ceilx($num,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $d=sp;
 var $e=(sp)+(16);
 $1=$num;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=((-.0))-($4);
 var $6=(($d)|0);
 SAFE_HEAP_STORE($6, $5, "double", 0);
 var $7=$1;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 var $10=((-.0))-($9);
 var $11=(($d)|0);
 var $12=(($11+8)|0);
 SAFE_HEAP_STORE($12, $10, "double", 0);
 var $13=(($d)|0);
 var $14=(($e)|0);
 _floorx($13,$14);
 var $15=(($e)|0);
 var $16=SAFE_HEAP_LOAD($15, "double", 0, 0);
 var $17=((-.0))-($16);
 var $18=$2;
 SAFE_HEAP_STORE($18, $17, "double", 0);
 var $19=(($e)|0);
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "double", 0, 0);
 var $22=((-.0))-($21);
 var $23=$2;
 var $24=(($23+8)|0);
 SAFE_HEAP_STORE($24, $22, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _ceq($0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $3;
 var $4;
 var $left=(($0)&255);
 $3=$left;
 var $rite=(($1)&255);
 $4=$rite;
 var $5=$3;
 var $6=(($5<<24)>>24);
 var $7=$4;
 var $8=(($7<<24)>>24);
 var $9=($6|0)==($8|0);
 var $10=($9&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $10;
}


function _ceqp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i8", 0, 0);
 var $6=(($5<<24)>>24);
 var $7=$2;
 var $8=SAFE_HEAP_LOAD($7, "i8", 0, 0);
 var $9=(($8<<24)>>24);
 var $10=($6|0)==($9|0);
 var $11=($10&1);
 var $12=$3;
 SAFE_HEAP_STORE($12, $11, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _ceqpd($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i8", 0, 0);
 var $6=(($5<<24)>>24);
 var $7=$2;
 var $8=SAFE_HEAP_LOAD($7, "i8", 0, 0);
 var $9=(($8<<24)>>24);
 var $10=($6|0)==($9|0);
 var $11=($10?1:0);
 var $12=$3;
 SAFE_HEAP_STORE($12, $11, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _charcode($kp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 var $k;
 var $m;
 var $n;
 $2=$kp;
 $i=0;
 var $3=SAFE_HEAP_LOAD(5672, "i32", 0, 0);
 var $4=((($3)-(1))|0);
 $j=$4;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=$j;
 var $8=($6|0)<=($7|0);
 if($8){label=3;break;}else{label=8;break;}
 case 3: 
 var $10=$i;
 var $11=$j;
 var $12=((($10)+($11))|0);
 var $13=(((($12|0))/(2))&-1);
 $m=$13;
 var $14=$m;
 var $15=((5680+($14<<2))|0);
 var $16=((((SAFE_HEAP_LOAD($15, "i8", 1, 0))|(SAFE_HEAP_LOAD(($15)+(1), "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(($15)+(2), "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(($15)+(3), "i8", 1, 0)<<24))|0));
 $n=$16;
 var $17=$2;
 var $18=$n;
 var $19=((6232+($18<<2))|0);
 var $20=((((SAFE_HEAP_LOAD($19, "i8", 1, 0))|(SAFE_HEAP_LOAD(($19)+(1), "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(($19)+(2), "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(($19)+(3), "i8", 1, 0)<<24))|0));
 var $21=_strcmp($17,$20);
 var $22=_isign($21);
 if(($22|0)==-1){ label=4;break;}else if(($22|0)==0){ label=5;break;}else if(($22|0)==1){ label=6;break;}else{label=7;break;}
 case 4: 
 var $24=$m;
 var $25=((($24)-(1))|0);
 $j=$25;
 label=7;break;
 case 5: 
 var $27=$n;
 $1=$27;
 label=9;break;
 case 6: 
 var $29=$m;
 var $30=((($29)+(1))|0);
 $i=$30;
 label=7;break;
 case 7: 
 label=2;break;
 case 8: 
 $1=-1;
 label=9;break;
 case 9: 
 var $34=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $34;
  default: assert(0, "bad label: " + label);
 }

}


function _chrcopy($to,$from,$cnt,$incr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$to;
 $2=$from;
 $3=$cnt;
 $4=$incr;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=((($6)-(1))|0);
 $3=$7;
 var $8=($6|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$2;
 var $11=SAFE_HEAP_LOAD($10, "i8", 0, 0);
 var $12=$1;
 var $13=(($12+1)|0);
 $1=$13;
 SAFE_HEAP_STORE($12, $11, "i8", 0);
 var $14=$4;
 var $15=$2;
 var $16=(($15+$14)|0);
 $2=$16;
 label=2;break;
 case 4: 
 var $18=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }

}


function _chrvect($sp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cp;
 var $datacnt;
 var $rank;
 var $out;
 $2=$sp;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=9;break;
 case 3: 
 var $7=$2;
 var $8=_strlen($7);
 $datacnt=$8;
 var $9=$datacnt;
 var $10=($9|0)==1;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 $rank=0;
 label=6;break;
 case 5: 
 $rank=1;
 label=6;break;
 case 6: 
 var $14=$datacnt;
 var $15=$rank;
 var $16=_getcb(0,$14,9,$15,0);
 $out=$16;
 var $17=$out;
 var $18=(($17+8)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=($19|0)!=0;
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 var $22=$out;
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "i8*", 0, 0);
 var $26=$2;
 var $27=$out;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=_chrcopy($25,$26,$29,1);
 $cp=$30;
 label=8;break;
 case 8: 
 var $32=$out;
 var $33=_errstop(0,0,0,$32);
 $1=$33;
 label=9;break;
 case 9: 
 var $35=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _circulap($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $wrk;
 var $ii;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$2;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 $wrk=$5;
 var $6=$1;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=(($7)&-1);
 $ii=$8;
 switch(($8|0)){case -7:{ label=2;break;}case 0:{ label=20;break;}case 1:{ label=21;break;}case 2:{ label=22;break;}case 3:{ label=23;break;}case 4:{ label=24;break;}case 5:{ label=25;break;}case 6:{ label=26;break;}case 7:{ label=27;break;}case -6:{ label=3;break;}case -5:{ label=4;break;}case -4:{ label=5;break;}case -3:{ label=6;break;}case -2:case -1:{ label=7;break;}default:{label=28;break;}}break;
 case 2: 
 var $10=$wrk;
 var $11=_atanh($10);
 var $12=$3;
 SAFE_HEAP_STORE($12, $11, "double", 0);
 label=29;break;
 case 3: 
 var $14=$wrk;
 var $15=_acosh($14);
 var $16=$3;
 SAFE_HEAP_STORE($16, $15, "double", 0);
 label=29;break;
 case 4: 
 var $18=$wrk;
 var $19=_asinh($18);
 var $20=$3;
 SAFE_HEAP_STORE($20, $19, "double", 0);
 label=29;break;
 case 5: 
 var $22=$wrk;
 var $23=$wrk;
 var $24=($22)*($23);
 var $25=($24)-(1);
 var $26=Math_sqrt($25);
 var $27=$3;
 SAFE_HEAP_STORE($27, $26, "double", 0);
 label=29;break;
 case 6: 
 var $29=$wrk;
 var $30=Math_atan($29);
 var $31=$3;
 SAFE_HEAP_STORE($31, $30, "double", 0);
 label=29;break;
 case 7: 
 var $33=$wrk;
 var $34=$33>1;
 if($34){label=8;break;}else{label=11;break;}
 case 8: 
 var $36=$wrk;
 var $37=($36)-(1);
 var $38=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $39=$37<$38;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 $wrk=1;
 label=10;break;
 case 10: 
 label=16;break;
 case 11: 
 var $43=$2;
 var $44=SAFE_HEAP_LOAD($43, "double", 0, 0);
 var $45=$44<-1;
 if($45){label=12;break;}else{label=15;break;}
 case 12: 
 var $47=$wrk;
 var $48=($47)+(1);
 var $49=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $50=$48<$49;
 if($50){label=13;break;}else{label=14;break;}
 case 13: 
 $wrk=-1;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $55=$ii;
 var $56=($55|0)==-2;
 if($56){label=17;break;}else{label=18;break;}
 case 17: 
 var $58=$wrk;
 var $59=Math_acos($58);
 var $64=$59;label=19;break;
 case 18: 
 var $61=$wrk;
 var $62=Math_asin($61);
 var $64=$62;label=19;break;
 case 19: 
 var $64;
 var $65=$3;
 SAFE_HEAP_STORE($65, $64, "double", 0);
 label=29;break;
 case 20: 
 var $67=$wrk;
 var $68=$wrk;
 var $69=($67)*($68);
 var $70=(1)-($69);
 var $71=Math_sqrt($70);
 var $72=$3;
 SAFE_HEAP_STORE($72, $71, "double", 0);
 label=29;break;
 case 21: 
 var $74=$wrk;
 var $75=Math_sin($74);
 var $76=$3;
 SAFE_HEAP_STORE($76, $75, "double", 0);
 label=29;break;
 case 22: 
 var $78=$wrk;
 var $79=Math_cos($78);
 var $80=$3;
 SAFE_HEAP_STORE($80, $79, "double", 0);
 label=29;break;
 case 23: 
 var $82=$wrk;
 var $83=Math_tan($82);
 var $84=$3;
 SAFE_HEAP_STORE($84, $83, "double", 0);
 label=29;break;
 case 24: 
 var $86=$wrk;
 var $87=$wrk;
 var $88=($86)*($87);
 var $89=($88)+(1);
 var $90=Math_sqrt($89);
 var $91=$3;
 SAFE_HEAP_STORE($91, $90, "double", 0);
 label=29;break;
 case 25: 
 var $93=$wrk;
 var $94=_sinh($93);
 var $95=$3;
 SAFE_HEAP_STORE($95, $94, "double", 0);
 label=29;break;
 case 26: 
 var $97=$wrk;
 var $98=_cosh($97);
 var $99=$3;
 SAFE_HEAP_STORE($99, $98, "double", 0);
 label=29;break;
 case 27: 
 var $101=$2;
 var $102=SAFE_HEAP_LOAD($101, "double", 0, 0);
 var $103=_tanh($102);
 var $104=$3;
 SAFE_HEAP_STORE($104, $103, "double", 0);
 label=29;break;
 case 28: 
 SAFE_HEAP_STORE(4592, 85, "i32", 0);
 var $106=$3;
 SAFE_HEAP_STORE($106, 0, "double", 0);
 label=29;break;
 case 29: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _circular($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=(($4)&-1);
 switch(($5|0)){case 1:{ label=10;break;}case 2:{ label=11;break;}case 3:{ label=12;break;}case 4:{ label=13;break;}case 5:{ label=14;break;}case 6:{ label=15;break;}case 7:{ label=16;break;}case -7:{ label=2;break;}case -6:{ label=3;break;}case -5:{ label=4;break;}case -4:{ label=5;break;}case -3:{ label=6;break;}case -2:{ label=7;break;}case -1:{ label=8;break;}case 0:{ label=9;break;}default:{label=17;break;}}break;
 case 2: 
 var $7=$3;
 var $8=_atanh($7);
 $1=$8;
 label=18;break;
 case 3: 
 var $10=$3;
 var $11=_acosh($10);
 $1=$11;
 label=18;break;
 case 4: 
 var $13=$3;
 var $14=_asinh($13);
 $1=$14;
 label=18;break;
 case 5: 
 var $16=$3;
 var $17=$3;
 var $18=($16)*($17);
 var $19=($18)-(1);
 var $20=Math_sqrt($19);
 $1=$20;
 label=18;break;
 case 6: 
 var $22=$3;
 var $23=Math_atan($22);
 $1=$23;
 label=18;break;
 case 7: 
 var $25=$3;
 var $26=Math_acos($25);
 $1=$26;
 label=18;break;
 case 8: 
 var $28=$3;
 var $29=Math_asin($28);
 $1=$29;
 label=18;break;
 case 9: 
 var $31=$3;
 var $32=$3;
 var $33=($31)*($32);
 var $34=(1)-($33);
 var $35=Math_sqrt($34);
 $1=$35;
 label=18;break;
 case 10: 
 var $37=$3;
 var $38=Math_sin($37);
 $1=$38;
 label=18;break;
 case 11: 
 var $40=$3;
 var $41=Math_cos($40);
 $1=$41;
 label=18;break;
 case 12: 
 var $43=$3;
 var $44=Math_tan($43);
 $1=$44;
 label=18;break;
 case 13: 
 var $46=$3;
 var $47=$3;
 var $48=($46)*($47);
 var $49=($48)+(1);
 var $50=Math_sqrt($49);
 $1=$50;
 label=18;break;
 case 14: 
 var $52=$3;
 var $53=_sinh($52);
 $1=$53;
 label=18;break;
 case 15: 
 var $55=$3;
 var $56=_cosh($55);
 $1=$56;
 label=18;break;
 case 16: 
 var $58=$3;
 var $59=_tanh($58);
 $1=$59;
 label=18;break;
 case 17: 
 SAFE_HEAP_STORE(4592, 85, "i32", 0);
 $1=0;
 label=18;break;
 case 18: 
 var $62=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }

}


function _circulas($left,$rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ileft;
 var $ixr=sp;
 var $wa=(sp)+(16);
 var $wb=(sp)+(32);
 var $x;
 var $y;
 $1=$left;
 $2=$rrr;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=(($5)&-1);
 $ileft=$6;
 switch(($6|0)){case -12:{ label=2;break;}case -11:{ label=3;break;}case -10:{ label=4;break;}case -9:{ label=5;break;}case -8:{ label=6;break;}case -4:{ label=7;break;}default:{label=13;break;}}break;
 case 2: 
 var $8=$2;
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "double", 0, 0);
 var $11=((-.0))-($10);
 var $12=(($ixr)|0);
 SAFE_HEAP_STORE($12, $11, "double", 0);
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "double", 0, 0);
 var $15=(($ixr)|0);
 var $16=(($15+8)|0);
 SAFE_HEAP_STORE($16, $14, "double", 0);
 var $17=(($ixr)|0);
 var $18=$3;
 _expx($17,$18);
 label=14;break;
 case 3: 
 var $20=$2;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "double", 0, 0);
 var $23=((-.0))-($22);
 var $24=(($ixr)|0);
 SAFE_HEAP_STORE($24, $23, "double", 0);
 var $25=$2;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=(($ixr)|0);
 var $28=(($27+8)|0);
 SAFE_HEAP_STORE($28, $26, "double", 0);
 var $29=(($ixr)|0);
 var $30=SAFE_HEAP_LOAD($29, "double", 0, 0);
 var $31=$3;
 SAFE_HEAP_STORE($31, $30, "double", 0);
 var $32=(($ixr)|0);
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "double", 0, 0);
 var $35=$3;
 var $36=(($35+8)|0);
 SAFE_HEAP_STORE($36, $34, "double", 0);
 label=14;break;
 case 4: 
 var $38=$2;
 var $39=$3;
 _conjugx($38,$39);
 label=14;break;
 case 5: 
 var $41=$2;
 var $42=SAFE_HEAP_LOAD($41, "double", 0, 0);
 var $43=$3;
 SAFE_HEAP_STORE($43, $42, "double", 0);
 var $44=$2;
 var $45=(($44+8)|0);
 var $46=SAFE_HEAP_LOAD($45, "double", 0, 0);
 var $47=$3;
 var $48=(($47+8)|0);
 SAFE_HEAP_STORE($48, $46, "double", 0);
 label=14;break;
 case 6: 
 var $50=$2;
 var $51=$3;
 _circulat(3264,$50,$51);
 var $52=$3;
 var $53=SAFE_HEAP_LOAD($52, "double", 0, 0);
 var $54=((-.0))-($53);
 var $55=$3;
 SAFE_HEAP_STORE($55, $54, "double", 0);
 var $56=$3;
 var $57=(($56+8)|0);
 var $58=SAFE_HEAP_LOAD($57, "double", 0, 0);
 var $59=((-.0))-($58);
 var $60=$3;
 var $61=(($60+8)|0);
 SAFE_HEAP_STORE($61, $59, "double", 0);
 label=14;break;
 case 7: 
 var $63=$2;
 var $64=$2;
 var $65=(($wa)|0);
 _timesx($63,$64,$65);
 var $66=(($wa)|0);
 var $67=(($wb)|0);
 _plusx(3232,$66,$67);
 var $68=(($wb)|0);
 var $69=$3;
 _powerx($68,3248,$69);
 var $70=$2;
 var $71=SAFE_HEAP_LOAD($70, "double", 0, 0);
 $x=$71;
 var $72=$2;
 var $73=(($72+8)|0);
 var $74=SAFE_HEAP_LOAD($73, "double", 0, 0);
 $y=$74;
 var $75=$x;
 var $76=$75>=0;
 if($76){label=12;break;}else{label=8;break;}
 case 8: 
 var $78=$x;
 var $79=-1<$78;
 if($79){label=9;break;}else{label=11;break;}
 case 9: 
 var $81=$x;
 var $82=$81<0;
 if($82){label=10;break;}else{label=11;break;}
 case 10: 
 var $84=$y;
 var $85=$84==1;
 if($85){label=12;break;}else{label=11;break;}
 case 11: 
 var $87=$3;
 var $88=SAFE_HEAP_LOAD($87, "double", 0, 0);
 var $89=((-.0))-($88);
 var $90=$3;
 SAFE_HEAP_STORE($90, $89, "double", 0);
 var $91=$3;
 var $92=(($91+8)|0);
 var $93=SAFE_HEAP_LOAD($92, "double", 0, 0);
 var $94=((-.0))-($93);
 var $95=$3;
 var $96=(($95+8)|0);
 SAFE_HEAP_STORE($96, $94, "double", 0);
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 SAFE_HEAP_STORE(4592, 85, "i32", 0);
 label=14;break;
 case 14: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _circulat($left,$rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ileft;
 var $wa=sp;
 var $wb=(sp)+(16);
 var $x;
 var $y;
 $1=$left;
 $2=$rrr;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=(($5)&-1);
 $ileft=$6;
 switch(($6|0)){case 8:{ label=10;break;}case 4:{ label=18;break;}case 12:{ label=2;break;}case 0:{ label=24;break;}case 11:{ label=7;break;}case 10:{ label=8;break;}case 9:{ label=9;break;}default:{label=25;break;}}break;
 case 2: 
 var $8=$2;
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 $x=$9;
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "double", 0, 0);
 $y=$12;
 var $13=$3;
 var $14=(($13+8)|0);
 SAFE_HEAP_STORE($14, 0, "double", 0);
 var $15=$x;
 var $16=$15==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=$y;
 var $19=$18==0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=$3;
 SAFE_HEAP_STORE($21, 0, "double", 0);
 label=6;break;
 case 5: 
 var $23=$y;
 var $24=$x;
 var $25=($23)/($24);
 var $26=Math_atan($25);
 var $27=$3;
 SAFE_HEAP_STORE($27, $26, "double", 0);
 label=6;break;
 case 6: 
 label=26;break;
 case 7: 
 var $30=$2;
 var $31=(($30+8)|0);
 var $32=SAFE_HEAP_LOAD($31, "double", 0, 0);
 var $33=$3;
 SAFE_HEAP_STORE($33, $32, "double", 0);
 var $34=$3;
 var $35=(($34+8)|0);
 SAFE_HEAP_STORE($35, 0, "double", 0);
 label=26;break;
 case 8: 
 var $37=$2;
 var $38=$3;
 _dabsx($37,$38);
 label=26;break;
 case 9: 
 var $40=$2;
 var $41=SAFE_HEAP_LOAD($40, "double", 0, 0);
 var $42=$3;
 SAFE_HEAP_STORE($42, $41, "double", 0);
 var $43=$3;
 var $44=(($43+8)|0);
 SAFE_HEAP_STORE($44, 0, "double", 0);
 label=26;break;
 case 10: 
 var $46=$2;
 var $47=$2;
 var $48=(($wa)|0);
 _timesx($46,$47,$48);
 var $49=(($wa)|0);
 var $50=(($wb)|0);
 _minusx(3208,$49,$50);
 var $51=(($wb)|0);
 var $52=$3;
 _powerx($51,3224,$52);
 var $53=$2;
 var $54=SAFE_HEAP_LOAD($53, "double", 0, 0);
 $x=$54;
 var $55=$2;
 var $56=(($55+8)|0);
 var $57=SAFE_HEAP_LOAD($56, "double", 0, 0);
 $y=$57;
 var $58=$x;
 var $59=$58>0;
 if($59){label=11;break;}else{label=12;break;}
 case 11: 
 var $61=$y;
 var $62=$61>0;
 if($62){label=17;break;}else{label=12;break;}
 case 12: 
 var $64=$x;
 var $65=$64==0;
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 var $67=$y;
 var $68=$67>1;
 if($68){label=17;break;}else{label=14;break;}
 case 14: 
 var $70=$x;
 var $71=$70<0;
 if($71){label=15;break;}else{label=16;break;}
 case 15: 
 var $73=$y;
 var $74=$73>=0;
 if($74){label=17;break;}else{label=16;break;}
 case 16: 
 var $76=$3;
 var $77=SAFE_HEAP_LOAD($76, "double", 0, 0);
 var $78=((-.0))-($77);
 var $79=$3;
 SAFE_HEAP_STORE($79, $78, "double", 0);
 var $80=$3;
 var $81=(($80+8)|0);
 var $82=SAFE_HEAP_LOAD($81, "double", 0, 0);
 var $83=((-.0))-($82);
 var $84=$3;
 var $85=(($84+8)|0);
 SAFE_HEAP_STORE($85, $83, "double", 0);
 label=17;break;
 case 17: 
 label=26;break;
 case 18: 
 var $88=$2;
 var $89=$2;
 var $90=(($wa)|0);
 _timesx($88,$89,$90);
 var $91=(($wa)|0);
 var $92=SAFE_HEAP_LOAD($91, "double", 0, 0);
 var $93=($92)+(1);
 var $94=(($wb)|0);
 SAFE_HEAP_STORE($94, $93, "double", 0);
 var $95=(($wa)|0);
 var $96=(($95+8)|0);
 var $97=SAFE_HEAP_LOAD($96, "double", 0, 0);
 var $98=(($wb)|0);
 var $99=(($98+8)|0);
 SAFE_HEAP_STORE($99, $97, "double", 0);
 var $100=(($wb)|0);
 var $101=$3;
 _powerx($100,3224,$101);
 var $102=$2;
 var $103=SAFE_HEAP_LOAD($102, "double", 0, 0);
 $x=$103;
 var $104=$2;
 var $105=(($104+8)|0);
 var $106=SAFE_HEAP_LOAD($105, "double", 0, 0);
 $y=$106;
 var $107=$x;
 var $108=$107>=0;
 if($108){label=23;break;}else{label=19;break;}
 case 19: 
 var $110=$x;
 var $111=-1<$110;
 if($111){label=20;break;}else{label=22;break;}
 case 20: 
 var $113=$x;
 var $114=$113<0;
 if($114){label=21;break;}else{label=22;break;}
 case 21: 
 var $116=$y;
 var $117=$116==1;
 if($117){label=23;break;}else{label=22;break;}
 case 22: 
 var $119=$3;
 var $120=SAFE_HEAP_LOAD($119, "double", 0, 0);
 var $121=((-.0))-($120);
 var $122=$3;
 SAFE_HEAP_STORE($122, $121, "double", 0);
 var $123=$3;
 var $124=(($123+8)|0);
 var $125=SAFE_HEAP_LOAD($124, "double", 0, 0);
 var $126=((-.0))-($125);
 var $127=$3;
 var $128=(($127+8)|0);
 SAFE_HEAP_STORE($128, $126, "double", 0);
 label=23;break;
 case 23: 
 label=26;break;
 case 24: 
 var $131=$2;
 var $132=$2;
 var $133=(($wa)|0);
 _timesx($131,$132,$133);
 var $134=(($wa)|0);
 var $135=SAFE_HEAP_LOAD($134, "double", 0, 0);
 var $136=(1)-($135);
 var $137=(($wb)|0);
 SAFE_HEAP_STORE($137, $136, "double", 0);
 var $138=(($wa)|0);
 var $139=(($138+8)|0);
 var $140=SAFE_HEAP_LOAD($139, "double", 0, 0);
 var $141=(($wb)|0);
 var $142=(($141+8)|0);
 SAFE_HEAP_STORE($142, $140, "double", 0);
 var $143=(($wb)|0);
 var $144=$3;
 _powerx($143,3224,$144);
 label=26;break;
 case 25: 
 SAFE_HEAP_STORE(4592, 85, "i32", 0);
 label=26;break;
 case 26: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _circulav($left,$rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ileft;
 var $b;
 var $ixr=sp;
 var $key;
 var $wa=(sp)+(16);
 var $wb=(sp)+(32);
 var $wc=(sp)+(48);
 var $wd=(sp)+(72);
 var $x;
 var $y;
 $1=$left;
 $2=$rrr;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=(($5)&-1);
 $ileft=$6;
 if(($6|0)==5){ label=2;break;}else if(($6|0)==6){ label=3;break;}else if(($6|0)==7){ label=4;break;}else{label=5;break;}
 case 2: 
 var $8=$2;
 var $9=(($wa)|0);
 _expx($8,$9);
 var $10=(($wa)|0);
 var $11=(($wb)|0);
 _dividex(3192,$10,$11);
 var $12=(($wa)|0);
 var $13=(($wb)|0);
 var $14=(($wc)|0);
 _minusx($12,$13,$14);
 var $15=(($wc)|0);
 var $16=$3;
 _dividex($15,3176,$16);
 label=6;break;
 case 3: 
 var $18=$2;
 var $19=(($wa)|0);
 _expx($18,$19);
 var $20=(($wa)|0);
 var $21=(($wb)|0);
 _dividex(3192,$20,$21);
 var $22=(($wa)|0);
 var $23=(($wb)|0);
 var $24=(($wc)|0);
 _plusx($22,$23,$24);
 var $25=(($wc)|0);
 var $26=$3;
 _dividex($25,3176,$26);
 label=6;break;
 case 4: 
 var $28=$2;
 var $29=(($wa)|0);
 _expx($28,$29);
 var $30=(($wa)|0);
 var $31=(($wb)|0);
 _dividex(3192,$30,$31);
 var $32=(($wa)|0);
 var $33=(($wb)|0);
 var $34=(($wc)|0);
 _minusx($32,$33,$34);
 var $35=(($wa)|0);
 var $36=(($wb)|0);
 var $37=(($wd)|0);
 _plusx($35,$36,$37);
 var $38=(($wc)|0);
 var $39=(($wd)|0);
 var $40=$3;
 _dividex($38,$39,$40);
 label=6;break;
 case 5: 
 SAFE_HEAP_STORE(4592, 85, "i32", 0);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _circulaw($left,$rrr,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ileft;
 var $wa=sp;
 var $wb=(sp)+(16);
 var $wc=(sp)+(32);
 var $wd=(sp)+(48);
 var $x=(sp)+(64);
 var $y;
 $1=$left;
 $2=$rrr;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=(($5)&-1);
 $ileft=$6;
 if(($6|0)==1){ label=2;break;}else if(($6|0)==2){ label=3;break;}else if(($6|0)==3){ label=4;break;}else{label=5;break;}
 case 2: 
 var $8=$2;
 var $9=(($wb)|0);
 _timesx(3160,$8,$9);
 var $10=(($wb)|0);
 var $11=(($wa)|0);
 _expx($10,$11);
 var $12=(($wa)|0);
 var $13=(($wb)|0);
 _dividex(3144,$12,$13);
 var $14=(($wa)|0);
 var $15=(($wb)|0);
 var $16=(($wc)|0);
 _minusx($14,$15,$16);
 var $17=(($wc)|0);
 var $18=$3;
 _dividex($17,3112,$18);
 label=6;break;
 case 3: 
 var $20=$2;
 var $21=(($wb)|0);
 _timesx(3160,$20,$21);
 var $22=(($wb)|0);
 var $23=(($wa)|0);
 _expx($22,$23);
 var $24=(($wa)|0);
 var $25=(($wb)|0);
 _dividex(3144,$24,$25);
 var $26=(($wa)|0);
 var $27=(($wb)|0);
 var $28=(($wc)|0);
 _plusx($26,$27,$28);
 var $29=(($wc)|0);
 var $30=$3;
 _dividex($29,3128,$30);
 label=6;break;
 case 4: 
 SAFE_HEAP_STORE($x, 1, "double", 0);
 var $32=$2;
 var $33=(($wa)|0);
 _circulaw($x,$32,$33);
 SAFE_HEAP_STORE($x, 2, "double", 0);
 var $34=$2;
 var $35=(($wb)|0);
 _circulaw($x,$34,$35);
 var $36=(($wa)|0);
 var $37=(($wb)|0);
 var $38=$3;
 _dividex($36,$37,$38);
 label=6;break;
 case 5: 
 SAFE_HEAP_STORE(4592, 85, "i32", 0);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _circulax($left,$rrr,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ileft;
 $1=$left;
 $2=$rrr;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=(($5)&-1);
 $ileft=$6;
 label=2;break;
 case 2: 
 var $8=$2;
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "double", 0, 0);
 var $11=$10==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 label=16;break;
 case 4: 
 var $14=$ileft;
 var $15=($14|0)<-7;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 label=16;break;
 case 6: 
 var $18=$ileft;
 var $19=($18|0)>7;
 if($19){label=7;break;}else{label=8;break;}
 case 7: 
 label=16;break;
 case 8: 
 var $22=$ileft;
 var $23=($22|0)==-6;
 if($23){label=9;break;}else{label=11;break;}
 case 9: 
 var $25=$2;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=$26<1;
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 label=16;break;
 case 11: 
 var $30=$ileft;
 var $31=($30|0)==-4;
 if($31){label=12;break;}else{label=15;break;}
 case 12: 
 var $33=$2;
 var $34=SAFE_HEAP_LOAD($33, "double", 0, 0);
 var $35=$34>=0;
 if($35){label=13;break;}else{label=15;break;}
 case 13: 
 var $37=$2;
 var $38=SAFE_HEAP_LOAD($37, "double", 0, 0);
 var $39=$38<1;
 if($39){label=14;break;}else{label=15;break;}
 case 14: 
 label=16;break;
 case 15: 
 var $42=$3;
 var $43=(($42+8)|0);
 SAFE_HEAP_STORE($43, 0, "double", 0);
 var $44=$1;
 var $45=$2;
 var $46=$3;
 _circulap($44,$45,$46);
 label=34;break;
 case 16: 
 var $48=$ileft;
 var $49=($48|0)<-7;
 if($49){label=18;break;}else{label=17;break;}
 case 17: 
 var $51=$ileft;
 var $52=($51|0)==-4;
 if($52){label=18;break;}else{label=19;break;}
 case 18: 
 var $54=$1;
 var $55=$2;
 var $56=$3;
 _circulas($54,$55,$56);
 label=34;break;
 case 19: 
 var $58=$ileft;
 var $59=($58|0)>7;
 if($59){label=22;break;}else{label=20;break;}
 case 20: 
 var $61=$ileft;
 var $62=($61|0)==0;
 if($62){label=22;break;}else{label=21;break;}
 case 21: 
 var $64=$ileft;
 var $65=($64|0)==4;
 if($65){label=22;break;}else{label=23;break;}
 case 22: 
 var $67=$1;
 var $68=$2;
 var $69=$3;
 _circulat($67,$68,$69);
 label=33;break;
 case 23: 
 var $71=$ileft;
 var $72=($71|0)<-3;
 if($72){label=24;break;}else{label=25;break;}
 case 24: 
 var $74=$1;
 var $75=$2;
 var $76=$3;
 _circulay($74,$75,$76);
 label=32;break;
 case 25: 
 var $78=$ileft;
 var $79=($78|0)<1;
 if($79){label=26;break;}else{label=27;break;}
 case 26: 
 var $81=$1;
 var $82=$2;
 var $83=$3;
 _circulaz($81,$82,$83);
 label=31;break;
 case 27: 
 var $85=$ileft;
 var $86=($85|0)<5;
 if($86){label=28;break;}else{label=29;break;}
 case 28: 
 var $88=$1;
 var $89=$2;
 var $90=$3;
 _circulaw($88,$89,$90);
 label=30;break;
 case 29: 
 var $92=$1;
 var $93=$2;
 var $94=$3;
 _circulav($92,$93,$94);
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _circulay($left,$rrr,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rrr;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=(($5)&-1);
 if(($6|0)==-7){ label=2;break;}else if(($6|0)==-6){ label=3;break;}else if(($6|0)==-5){ label=4;break;}else{label=5;break;}
 case 2: 
 var $8=$2;
 var $9=$3;
 _atanhx($8,$9);
 label=6;break;
 case 3: 
 var $11=$2;
 var $12=$3;
 _acoshx($11,$12);
 label=6;break;
 case 4: 
 var $14=$2;
 var $15=$3;
 _asinhx($14,$15);
 label=6;break;
 case 5: 
 SAFE_HEAP_STORE(4592, 85, "i32", 0);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _circulaz($left,$rrr,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rrr;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=(($5)&-1);
 if(($6|0)==-3){ label=2;break;}else if(($6|0)==-2){ label=3;break;}else if(($6|0)==-1){ label=4;break;}else{label=5;break;}
 case 2: 
 var $8=$2;
 var $9=$3;
 _atanx($8,$9);
 label=6;break;
 case 3: 
 var $11=$2;
 var $12=$3;
 _acosx($11,$12);
 label=6;break;
 case 4: 
 var $14=$2;
 var $15=$3;
 _asinx($14,$15);
 label=6;break;
 case 5: 
 SAFE_HEAP_STORE(4592, 85, "i32", 0);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _cne($0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $3;
 var $4;
 var $left=(($0)&255);
 $3=$left;
 var $rite=(($1)&255);
 $4=$rite;
 var $5=$3;
 var $6=(($5<<24)>>24);
 var $7=$4;
 var $8=(($7<<24)>>24);
 var $9=($6|0)!=($8|0);
 var $10=($9&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $10;
}


function _cnep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i8", 0, 0);
 var $6=(($5<<24)>>24);
 var $7=$2;
 var $8=SAFE_HEAP_LOAD($7, "i8", 0, 0);
 var $9=(($8<<24)>>24);
 var $10=($6|0)!=($9|0);
 var $11=($10&1);
 var $12=$3;
 SAFE_HEAP_STORE($12, $11, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _cnepd($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i8", 0, 0);
 var $6=(($5<<24)>>24);
 var $7=$2;
 var $8=SAFE_HEAP_LOAD($7, "i8", 0, 0);
 var $9=(($8<<24)>>24);
 var $10=($6|0)==($9|0);
 var $11=($10?0:1);
 var $12=$3;
 SAFE_HEAP_STORE($12, $11, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _codechar($code){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$code;
 var $3=$2;
 var $4=($3|0)<0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$2;
 var $7=SAFE_HEAP_LOAD(5672, "i32", 0, 0);
 var $8=($6|0)>=($7|0);
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $1=12232;
 label=5;break;
 case 4: 
 var $11=$2;
 var $12=((6232+($11<<2))|0);
 var $13=((((SAFE_HEAP_LOAD($12, "i8", 1, 0))|(SAFE_HEAP_LOAD(($12)+(1), "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(($12)+(2), "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(($12)+(3), "i8", 1, 0)<<24))|0));
 $1=$13;
 label=5;break;
 case 5: 
 var $15=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }

}


function _comexpa($left,$rite,$paxis,$paxicnt,$pbotcnt,$ptopcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $2=$left;
 $3=$rite;
 $4=$paxis;
 $5=$paxicnt;
 $6=$pbotcnt;
 $7=$ptopcnt;
 var $8=_errinit();
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=_errstop(0,$11,0,0);
 $1=$12;
 label=9;break;
 case 3: 
 var $14=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $15=($14|0)==0;
 var $16=($15&1);
 var $17=$4;
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=((($18)+($16))|0);
 SAFE_HEAP_STORE($17, $19, "i32", 0);
 var $20=$3;
 var $21=$4;
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$5;
 var $24=$6;
 var $25=$7;
 var $26=_axispre($20,$22,$23,$24,$25);
 var $27=1!=($26|0);
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=9;break;
 case 5: 
 var $30=$2;
 var $31=_vectin($30);
 $2=$31;
 var $32=$5;
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=($33|0)>1;
 if($34){label=6;break;}else{label=8;break;}
 case 6: 
 var $36=$2;
 var $37=(($36+8)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=($38|0)==1;
 if($39){label=7;break;}else{label=8;break;}
 case 7: 
 var $41=$5;
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=_iscalar($42);
 var $44=$2;
 var $45=_temp($44);
 var $46=_reshape($43,$45);
 var $47=_perm($46);
 $2=$47;
 label=8;break;
 case 8: 
 var $49=$2;
 $1=$49;
 label=9;break;
 case 9: 
 var $51=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function _comexpb($rite,$axis,$axicnt,$botcnt,$topcnt,$pdatatyp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 var $dimptr;
 $1=$rite;
 $2=$axis;
 $3=$axicnt;
 $4=$botcnt;
 $5=$topcnt;
 $6=$pdatatyp;
 var $7=$4;
 var $8=$3;
 var $9=(Math_imul($7,$8)|0);
 var $10=$5;
 var $11=(Math_imul($9,$10)|0);
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$14&110;
 var $16=$6;
 SAFE_HEAP_STORE($16, $15, "i32", 0);
 var $17=((($15)+(1))|0);
 var $18=$1;
 var $19=(($18+12)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=_imax(1,$20);
 var $22=_getcb(0,$11,$17,$21,0);
 $out=$22;
 var $23=$out;
 var $24=(($23+12)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)>1;
 if($26){label=2;break;}else{label=3;break;}
 case 2: 
 var $28=$out;
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$30;
 var $32=$1;
 var $33=(($32+16)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32*", 0, 0);
 var $35=$34;
 var $36=$out;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=_intcopy($31,$35,$38,1);
 var $40=$39;
 $dimptr=$40;
 label=3;break;
 case 3: 
 var $42=$3;
 var $43=$out;
 var $44=(($43+16)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32*", 0, 0);
 var $46=$2;
 var $47=(($45+($46<<2))|0);
 var $48=((($47)-(4))|0);
 SAFE_HEAP_STORE($48, $42, "i32", 0);
 var $49=$out;
 var $50=_errstop(0,0,0,$49);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }

}


function _complex($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $ip;
 var $fin;
 var $fout;
 var $out;
 $2=$rite;
 $out=0;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=_errstop(0,0,$6,0);
 $1=$7;
 label=19;break;
 case 3: 
 var $9=$2;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$11&110;
 if(($12|0)==64){ label=4;break;}else if(($12|0)==4){ label=5;break;}else if(($12|0)==2){ label=6;break;}else{label=7;break;}
 case 4: 
 var $14=$2;
 var $15=_aplcopy($14);
 $out=$15;
 var $16=$2;
 var $17=$out;
 var $18=_errstop(0,0,$16,$17);
 $1=$18;
 label=19;break;
 case 5: 
 var $20=$2;
 var $21=_real($20);
 $2=$21;
 label=6;break;
 case 6: 
 label=10;break;
 case 7: 
 var $24=$2;
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=($26|0)!=0;
 if($27){label=8;break;}else{label=9;break;}
 case 8: 
 var $29=$2;
 var $30=_errstop(18,0,$29,0);
 $1=$30;
 label=19;break;
 case 9: 
 label=10;break;
 case 10: 
 var $33=$2;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$2;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=_getcb(0,$35,65,$38,0);
 $out=$39;
 var $40=$2;
 var $41=(($40+12)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=($42|0)>1;
 if($43){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=$out;
 var $46=(($45+16)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32*", 0, 0);
 var $48=$47;
 var $49=$2;
 var $50=(($49+16)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32*", 0, 0);
 var $52=$51;
 var $53=$2;
 var $54=(($53+12)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=_intcopy($48,$52,$55,1);
 var $57=$56;
 $ip=$57;
 label=12;break;
 case 12: 
 var $59=$out;
 var $60=(($59+8)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=($61|0)!=0;
 if($62){label=13;break;}else{label=18;break;}
 case 13: 
 var $64=$2;
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "double*", 0, 0);
 $fin=$67;
 var $68=$out;
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "double*", 0, 0);
 $fout=$71;
 var $72=$out;
 var $73=(($72+8)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 $i=$74;
 label=14;break;
 case 14: 
 var $76=$i;
 var $77=($76|0)>0;
 if($77){label=15;break;}else{label=17;break;}
 case 15: 
 var $79=$fin;
 var $80=(($79+8)|0);
 $fin=$80;
 var $81=SAFE_HEAP_LOAD($79, "double", 0, 0);
 var $82=$fout;
 var $83=(($82+8)|0);
 $fout=$83;
 SAFE_HEAP_STORE($82, $81, "double", 0);
 var $84=$fout;
 var $85=(($84+8)|0);
 $fout=$85;
 SAFE_HEAP_STORE($84, 0, "double", 0);
 label=16;break;
 case 16: 
 var $87=$i;
 var $88=((($87)-(1))|0);
 $i=$88;
 label=14;break;
 case 17: 
 label=18;break;
 case 18: 
 var $91=$2;
 var $92=$out;
 var $93=_errstop(0,0,$91,$92);
 $1=$93;
 label=19;break;
 case 19: 
 var $95=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $95;
  default: assert(0, "bad label: " + label);
 }

}


function _compress($left,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $axicnt=(sp)+(8);
 var $axires;
 var $botcnt=(sp)+(16);
 var $datatyp=(sp)+(24);
 var $fill;
 var $iw;
 var $jw;
 var $topcnt=(sp)+(32);
 var $out;
 $2=$left;
 $3=$rite;
 SAFE_HEAP_STORE($4, $axis, "i32", 0);
 $fill=0;
 $out=0;
 var $5=$2;
 var $6=$3;
 var $7=_comexpa($5,$6,$4,$axicnt,$botcnt,$topcnt);
 $2=$7;
 var $8=0==($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$2;
 var $11=$3;
 var $12=_errstop(0,$10,$11,0);
 $1=$12;
 label=22;break;
 case 3: 
 $axires=0;
 $iw=0;
 label=4;break;
 case 4: 
 var $15=$iw;
 var $16=$2;
 var $17=(($16+8)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=($15|0)<($18|0);
 if($19){label=5;break;}else{label=12;break;}
 case 5: 
 var $21=$2;
 var $22=(($21)|0);
 var $23=$22;
 var $24=SAFE_HEAP_LOAD($23, "i32*", 0, 0);
 var $25=$iw;
 var $26=(($24+($25<<2))|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 $jw=$27;
 var $28=0<($27|0);
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 var $30=$jw;
 var $35=$30;label=8;break;
 case 7: 
 var $32=$jw;
 var $33=(((-$32))|0);
 var $35=$33;label=8;break;
 case 8: 
 var $35;
 var $36=$axires;
 var $37=((($36)+($35))|0);
 $axires=$37;
 var $38=$jw;
 var $39=($38|0)<0;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 $fill=1;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $43=$iw;
 var $44=((($43)+(1))|0);
 $iw=$44;
 label=4;break;
 case 12: 
 var $46=$2;
 var $47=(($46+8)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $50=($48|0)!=($49|0);
 if($50){label=13;break;}else{label=17;break;}
 case 13: 
 var $52=$3;
 var $53=(($52+12)|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 var $55=($54|0)!=0;
 if($55){label=14;break;}else{label=16;break;}
 case 14: 
 var $57=$fill;
 var $58=($57|0)!=0;
 if($58){label=16;break;}else{label=15;break;}
 case 15: 
 var $60=$2;
 var $61=_temp($60);
 var $62=$3;
 var $63=_errstop(31,$61,$62,0);
 $1=$63;
 label=22;break;
 case 16: 
 label=17;break;
 case 17: 
 var $66=$3;
 var $67=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $68=$axires;
 var $69=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $70=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $71=_comexpb($66,$67,$68,$69,$70,$datatyp);
 $out=$71;
 var $72=0==($71|0);
 if($72){label=18;break;}else{label=19;break;}
 case 18: 
 var $74=$2;
 var $75=_temp($74);
 var $76=$3;
 var $77=$out;
 var $78=_errstop(0,$75,$76,$77);
 $1=$78;
 label=22;break;
 case 19: 
 var $80=$out;
 var $81=(($80+8)|0);
 var $82=SAFE_HEAP_LOAD($81, "i32", 0, 0);
 var $83=($82|0)!=0;
 if($83){label=20;break;}else{label=21;break;}
 case 20: 
 var $85=$2;
 var $86=$3;
 var $87=$out;
 var $88=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $89=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $90=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $91=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $92=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 var $93=$fill;
 _comprest($85,$86,$87,$88,$89,$90,$91,$92,$93);
 label=21;break;
 case 21: 
 var $95=$2;
 var $96=_temp($95);
 var $97=$3;
 var $98=$out;
 var $99=_errstop(0,$96,$97,$98);
 $1=$99;
 label=22;break;
 case 22: 
 var $101=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $101;
  default: assert(0, "bad label: " + label);
 }

}


function _comprest($left,$rite,$out,$axis,$axicnt,$botcnt,$topcnt,$datatyp,$fill){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $axi;
 var $dimptr;
 var $hit;
 var $incr;
 var $jw;
 var $mw;
 var $sincr;
 var $top;
 var $fillptr;
 var $icp;
 var $ocp;
 var $tcp;
 var $fillcb=sp;
 var $fillsave;
 var $fillwk=(sp)+(8);
 $1=$left;
 $2=$rite;
 $3=$out;
 $4=$axis;
 $5=$axicnt;
 $6=$botcnt;
 $7=$topcnt;
 $8=$datatyp;
 $9=$fill;
 $hit=0;
 SAFE_HEAP_STORE($fillcb, 0, "%struct.aplcb*", 0);
 $fillsave=0;
 SAFE_HEAP_STORE($fillwk, 0, "%struct.aplcb*", 0);
 var $10=$9;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=13;break;}
 case 2: 
 var $13=$8;
 var $14=($13|0)==32;
 if($14){label=3;break;}else{label=11;break;}
 case 3: 
 var $16=$2;
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=($18|0)>1;
 if($19){label=4;break;}else{label=7;break;}
 case 4: 
 $hit=1;
 var $21=$6;
 var $22=_getcb(0,$21,32,1,0);
 SAFE_HEAP_STORE($fillcb, $22, "%struct.aplcb*", 0);
 var $23=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 label=41;break;
 case 6: 
 var $27=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "%struct.aplcb**", 0, 0);
 $fillsave=$30;
 var $31=$fillwk;
 $fillptr=$31;
 label=10;break;
 case 7: 
 var $33=$2;
 var $34=_aplfill($33);
 var $35=$34;
 SAFE_HEAP_STORE($fillcb, $35, "%struct.aplcb*", 0);
 var $36=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $37=($36|0)==0;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 label=41;break;
 case 9: 
 var $40=$fillcb;
 $fillptr=$40;
 label=10;break;
 case 10: 
 label=12;break;
 case 11: 
 var $43=$2;
 var $44=_aplfill($43);
 $fillptr=$44;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $47=$2;
 var $48=(($47+8)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 var $50=1==($49|0);
 if($50){label=14;break;}else{label=15;break;}
 case 14: 
 var $59=0;label=16;break;
 case 15: 
 var $53=$6;
 var $54=$2;
 var $55=(($54+20)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=(Math_imul($53,$56)|0);
 var $59=$57;label=16;break;
 case 16: 
 var $59;
 $incr=$59;
 var $60=$5;
 var $61=$6;
 var $62=(Math_imul($60,$61)|0);
 var $63=1==($62|0);
 if($63){label=17;break;}else{label=18;break;}
 case 17: 
 var $68=0;label=19;break;
 case 18: 
 var $66=$incr;
 var $68=$66;label=19;break;
 case 19: 
 var $68;
 $sincr=$68;
 var $69=$3;
 var $70=(($69)|0);
 var $71=$70;
 var $72=SAFE_HEAP_LOAD($71, "i8*", 0, 0);
 $ocp=$72;
 $top=0;
 label=20;break;
 case 20: 
 var $74=$top;
 var $75=$7;
 var $76=($74|0)<($75|0);
 if($76){label=21;break;}else{label=37;break;}
 case 21: 
 var $78=$2;
 var $79=(($78)|0);
 var $80=$79;
 var $81=SAFE_HEAP_LOAD($80, "i8*", 0, 0);
 var $82=$top;
 var $83=$5;
 var $84=(Math_imul($82,$83)|0);
 var $85=$incr;
 var $86=(Math_imul($84,$85)|0);
 var $87=(($81+$86)|0);
 $icp=$87;
 var $88=$1;
 var $89=(($88)|0);
 var $90=$89;
 var $91=SAFE_HEAP_LOAD($90, "i32*", 0, 0);
 $dimptr=$91;
 var $92=$hit;
 var $93=($92|0)!=0;
 if($93){label=22;break;}else{label=23;break;}
 case 22: 
 var $95=$icp;
 var $96=$95;
 var $97=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $98=(($97)|0);
 var $99=$98;
 SAFE_HEAP_STORE($99, $96, "%struct.aplcb**", 0);
 var $100=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $101=_aplfill($100);
 var $102=$101;
 SAFE_HEAP_STORE($fillwk, $102, "%struct.aplcb*", 0);
 label=23;break;
 case 23: 
 $jw=0;
 $axi=0;
 label=24;break;
 case 24: 
 var $105=$jw;
 var $106=$1;
 var $107=(($106+8)|0);
 var $108=SAFE_HEAP_LOAD($107, "i32", 0, 0);
 var $109=($105|0)<($108|0);
 if($109){label=25;break;}else{label=33;break;}
 case 25: 
 var $111=$dimptr;
 var $112=(($111+4)|0);
 $dimptr=$112;
 var $113=SAFE_HEAP_LOAD($111, "i32", 0, 0);
 $mw=$113;
 var $114=$mw;
 var $115=($114|0)<0;
 if($115){label=26;break;}else{label=27;break;}
 case 26: 
 var $117=$ocp;
 var $118=$fillptr;
 var $119=$6;
 var $120=((($119)*(-1))&-1);
 var $121=$mw;
 var $122=(Math_imul($120,$121)|0);
 var $123=$8;
 var $124=_dtacopy($117,$118,$122,0,$123);
 $ocp=$124;
 label=31;break;
 case 27: 
 var $126=$icp;
 var $127=$axi;
 var $128=$sincr;
 var $129=(Math_imul($127,$128)|0);
 var $130=(($126+$129)|0);
 $tcp=$130;
 label=28;break;
 case 28: 
 var $132=$mw;
 var $133=((($132)-(1))|0);
 $mw=$133;
 var $134=($132|0)!=0;
 if($134){label=29;break;}else{label=30;break;}
 case 29: 
 var $136=$ocp;
 var $137=$tcp;
 var $138=$6;
 var $139=$8;
 var $140=_dtacopy($136,$137,$138,1,$139);
 $ocp=$140;
 label=28;break;
 case 30: 
 var $142=$axi;
 var $143=((($142)+(1))|0);
 $axi=$143;
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $146=$jw;
 var $147=((($146)+(1))|0);
 $jw=$147;
 label=24;break;
 case 33: 
 var $149=$hit;
 var $150=($149|0)!=0;
 if($150){label=34;break;}else{label=35;break;}
 case 34: 
 var $152=SAFE_HEAP_LOAD($fillwk, "%struct.aplcb*", 0, 0);
 var $153=_temp($152);
 var $154=_endoper($153);
 SAFE_HEAP_STORE($fillwk, 0, "%struct.aplcb*", 0);
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $157=$top;
 var $158=((($157)+(1))|0);
 $top=$158;
 label=20;break;
 case 37: 
 var $160=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $161=($160|0)!=0;
 if($161){label=38;break;}else{label=41;break;}
 case 38: 
 var $163=$fillsave;
 var $164=($163|0)!=0;
 if($164){label=39;break;}else{label=40;break;}
 case 39: 
 var $166=$fillsave;
 var $167=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $168=(($167)|0);
 var $169=$168;
 SAFE_HEAP_STORE($169, $166, "%struct.aplcb**", 0);
 label=40;break;
 case 40: 
 var $171=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $172=_temp($171);
 var $173=_endoper($172);
 label=41;break;
 case 41: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _compute($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $root;
 var $out;
 var $i;
 $2=$rite;
 $out=0;
 var $3=_errinit();
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=5;break;}
 case 2: 
 var $6=_treeroot(0);
 $root=$6;
 var $7=$root;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=6;break;
 case 4: 
 var $11=$2;
 var $12=_executf($11);
 $out=$12;
 $2=0;
 var $13=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $14=(($13+48)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 $i=$15;
 var $16=_pop(2376);
 var $17=$16;
 $root=$17;
 var $18=$i;
 var $19=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $20=(($19+48)|0);
 SAFE_HEAP_STORE($20, $18, "i32", 0);
 var $21=$root;
 var $22=$21;
 _aplfree($22);
 label=5;break;
 case 5: 
 var $24=$2;
 var $25=$out;
 var $26=_errstop(0,0,$24,$25);
 $1=$26;
 label=6;break;
 case 6: 
 var $28=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }

}


function _conform($left,$rite,$axis,$big,$lit){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $dimbig;
 var $dimleft;
 var $dimlit;
 var $dimrite;
 var $i;
 var $j;
 $2=$left;
 $3=$rite;
 $4=$axis;
 $5=$big;
 $6=$lit;
 var $7=$2;
 var $8=$6;
 SAFE_HEAP_STORE($8, $7, "%struct.aplcb*", 0);
 var $9=$3;
 var $10=$5;
 SAFE_HEAP_STORE($10, $9, "%struct.aplcb*", 0);
 var $11=$2;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)==0;
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=33;break;
 case 3: 
 var $17=$3;
 var $18=(($17+12)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=($19|0)==0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$3;
 var $23=$6;
 SAFE_HEAP_STORE($23, $22, "%struct.aplcb*", 0);
 var $24=$2;
 var $25=$5;
 SAFE_HEAP_STORE($25, $24, "%struct.aplcb*", 0);
 $1=1;
 label=33;break;
 case 5: 
 var $27=$2;
 var $28=(($27+12)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=($29|0)==1;
 if($30){label=6;break;}else{label=8;break;}
 case 6: 
 var $32=$2;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=($34|0)==1;
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 $1=1;
 label=33;break;
 case 8: 
 var $38=$3;
 var $39=(($38+12)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=($40|0)==1;
 if($41){label=9;break;}else{label=11;break;}
 case 9: 
 var $43=$3;
 var $44=(($43+8)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=($45|0)==1;
 if($46){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=$3;
 var $49=$6;
 SAFE_HEAP_STORE($49, $48, "%struct.aplcb*", 0);
 var $50=$2;
 var $51=$5;
 SAFE_HEAP_STORE($51, $50, "%struct.aplcb*", 0);
 $1=1;
 label=33;break;
 case 11: 
 var $53=$2;
 var $54=(($53+16)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32*", 0, 0);
 $dimleft=$55;
 var $56=$3;
 var $57=(($56+16)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32*", 0, 0);
 $dimrite=$58;
 var $59=$2;
 var $60=(($59+12)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=$3;
 var $63=(($62+12)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=($61|0)==($64|0);
 if($65){label=12;break;}else{label=20;break;}
 case 12: 
 $i=1;
 label=13;break;
 case 13: 
 var $68=$i;
 var $69=$2;
 var $70=(($69+12)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=($68|0)<=($71|0);
 if($72){label=14;break;}else{label=19;break;}
 case 14: 
 var $74=$dimleft;
 var $75=(($74+4)|0);
 $dimleft=$75;
 var $76=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $77=$dimrite;
 var $78=(($77+4)|0);
 $dimrite=$78;
 var $79=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 var $80=($76|0)!=($79|0);
 if($80){label=15;break;}else{label=17;break;}
 case 15: 
 var $82=$i;
 var $83=$4;
 var $84=($82|0)!=($83|0);
 if($84){label=16;break;}else{label=17;break;}
 case 16: 
 $1=0;
 label=33;break;
 case 17: 
 label=18;break;
 case 18: 
 var $88=$i;
 var $89=((($88)+(1))|0);
 $i=$89;
 label=13;break;
 case 19: 
 $1=1;
 label=33;break;
 case 20: 
 var $92=$2;
 var $93=(($92+12)|0);
 var $94=SAFE_HEAP_LOAD($93, "i32", 0, 0);
 var $95=$3;
 var $96=(($95+12)|0);
 var $97=SAFE_HEAP_LOAD($96, "i32", 0, 0);
 var $98=((($94)-($97))|0);
 var $99=_iabs($98);
 var $100=((($99)-(1))|0);
 var $101=($100|0)!=0;
 if($101){label=21;break;}else{label=22;break;}
 case 21: 
 $1=0;
 label=33;break;
 case 22: 
 var $104=$2;
 var $105=(($104+12)|0);
 var $106=SAFE_HEAP_LOAD($105, "i32", 0, 0);
 var $107=$3;
 var $108=(($107+12)|0);
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 var $110=($106|0)>($109|0);
 if($110){label=23;break;}else{label=24;break;}
 case 23: 
 var $112=$3;
 var $113=$6;
 SAFE_HEAP_STORE($113, $112, "%struct.aplcb*", 0);
 var $114=$2;
 var $115=$5;
 SAFE_HEAP_STORE($115, $114, "%struct.aplcb*", 0);
 label=24;break;
 case 24: 
 var $117=$6;
 var $118=SAFE_HEAP_LOAD($117, "%struct.aplcb*", 0, 0);
 var $119=(($118+16)|0);
 var $120=SAFE_HEAP_LOAD($119, "i32*", 0, 0);
 $dimlit=$120;
 var $121=$5;
 var $122=SAFE_HEAP_LOAD($121, "%struct.aplcb*", 0, 0);
 var $123=(($122+16)|0);
 var $124=SAFE_HEAP_LOAD($123, "i32*", 0, 0);
 $dimbig=$124;
 var $125=$2;
 var $126=(($125+12)|0);
 var $127=SAFE_HEAP_LOAD($126, "i32", 0, 0);
 var $128=$3;
 var $129=(($128+12)|0);
 var $130=SAFE_HEAP_LOAD($129, "i32", 0, 0);
 var $131=_imax($127,$130);
 $j=$131;
 $i=1;
 label=25;break;
 case 25: 
 var $133=$i;
 var $134=$j;
 var $135=($133|0)<=($134|0);
 if($135){label=26;break;}else{label=32;break;}
 case 26: 
 var $137=$i;
 var $138=$4;
 var $139=($137|0)!=($138|0);
 if($139){label=27;break;}else{label=30;break;}
 case 27: 
 var $141=$dimbig;
 var $142=SAFE_HEAP_LOAD($141, "i32", 0, 0);
 var $143=$dimlit;
 var $144=(($143+4)|0);
 $dimlit=$144;
 var $145=SAFE_HEAP_LOAD($143, "i32", 0, 0);
 var $146=($142|0)!=($145|0);
 if($146){label=28;break;}else{label=29;break;}
 case 28: 
 $1=0;
 label=33;break;
 case 29: 
 label=30;break;
 case 30: 
 var $150=$dimbig;
 var $151=(($150+4)|0);
 $dimbig=$151;
 label=31;break;
 case 31: 
 var $153=$i;
 var $154=((($153)+(1))|0);
 $i=$154;
 label=25;break;
 case 32: 
 $1=1;
 label=33;break;
 case 33: 
 var $157=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $157;
  default: assert(0, "bad label: " + label);
 }

}


function _conjug($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$x;
 var $2=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $2;
}


function _conjugp($x,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$x;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=$2;
 SAFE_HEAP_STORE($5, $4, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _conjugx($x,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$x;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=$2;
 SAFE_HEAP_STORE($5, $4, "double", 0);
 var $6=$1;
 var $7=(($6+8)|0);
 var $8=SAFE_HEAP_LOAD($7, "double", 0, 0);
 var $9=((-.0))-($8);
 var $10=$2;
 var $11=(($10+8)|0);
 SAFE_HEAP_STORE($11, $9, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _convert($rite,$otype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $out;
 var $itype;
 $2=$rite;
 $3=$otype;
 $out=0;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&110;
 $itype=$7;
 var $8=$itype;
 var $9=$3;
 var $10=($8|0)==($9|0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$2;
 $1=$12;
 label=8;break;
 case 3: 
 var $14=$3;
 if(($14|0)==2){ label=4;break;}else if(($14|0)==4){ label=5;break;}else if(($14|0)==64){ label=6;break;}else{label=7;break;}
 case 4: 
 var $16=$2;
 var $17=_real($16);
 $1=$17;
 label=8;break;
 case 5: 
 var $19=$2;
 var $20=_integer($19);
 $1=$20;
 label=8;break;
 case 6: 
 var $22=$2;
 var $23=_complex($22);
 $1=$23;
 label=8;break;
 case 7: 
 var $25=$2;
 var $26=_errstop(999,0,$25,0);
 $1=$26;
 label=8;break;
 case 8: 
 var $28=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }

}


function _cplxin($a,$b,$c,$d,$e){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $len1;
 var $len2;
 var $td=sp;
 var $type;
 var $angle;
 var $magnitud;
 var $sign;
 $1=$a;
 $2=$b;
 $3=$c;
 $4=$d;
 $5=$e;
 $len2=0;
 var $6=$2;
 var $7=(($6+8)|0);
 SAFE_HEAP_STORE($7, 0, "double", 0);
 var $8=$2;
 SAFE_HEAP_STORE($8, 0, "double", 0);
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$5;
 var $14=_dublin($9,$10,$11,$12,$13);
 $len1=$14;
 label=2;break;
 case 2: 
 var $16=$len1;
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 label=33;break;
 case 4: 
 var $20=$1;
 var $21=$len1;
 var $22=(($20+$21)|0);
 var $23=SAFE_HEAP_LOAD($22, "i8", 0, 0);
 var $24=(($23<<24)>>24);
 var $25=((((SAFE_HEAP_LOAD(6688, "i8", 1, 0))|(SAFE_HEAP_LOAD(6689, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6690, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6691, "i8", 1, 0)<<24))|0));
 var $26=SAFE_HEAP_LOAD($25, "i8", 0, 0);
 var $27=(($26<<24)>>24);
 var $28=($24|0)==($27|0);
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 $type=106;
 label=13;break;
 case 6: 
 var $31=$1;
 var $32=$len1;
 var $33=(($31+$32)|0);
 var $34=SAFE_HEAP_LOAD($33, "i8", 0, 0);
 var $35=(($34<<24)>>24);
 var $36=((((SAFE_HEAP_LOAD(6664, "i8", 1, 0))|(SAFE_HEAP_LOAD(6665, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6666, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6667, "i8", 1, 0)<<24))|0));
 var $37=SAFE_HEAP_LOAD($36, "i8", 0, 0);
 var $38=(($37<<24)>>24);
 var $39=($35|0)==($38|0);
 if($39){label=7;break;}else{label=8;break;}
 case 7: 
 $type=100;
 label=12;break;
 case 8: 
 var $42=$1;
 var $43=$len1;
 var $44=(($42+$43)|0);
 var $45=SAFE_HEAP_LOAD($44, "i8", 0, 0);
 var $46=(($45<<24)>>24);
 var $47=((((SAFE_HEAP_LOAD(6720, "i8", 1, 0))|(SAFE_HEAP_LOAD(6721, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6722, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6723, "i8", 1, 0)<<24))|0));
 var $48=SAFE_HEAP_LOAD($47, "i8", 0, 0);
 var $49=(($48<<24)>>24);
 var $50=($46|0)==($49|0);
 if($50){label=9;break;}else{label=10;break;}
 case 9: 
 $type=114;
 label=11;break;
 case 10: 
 label=33;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $56=$len1;
 var $57=((($56)+(1))|0);
 $len1=$57;
 var $58=$1;
 var $59=$len1;
 var $60=(($58+$59)|0);
 var $61=SAFE_HEAP_LOAD($60, "i8", 0, 0);
 var $62=(($61<<24)>>24);
 if(($62|0)==32|($62|0)==10|($62|0)==9){ label=14;break;}else{label=15;break;}
 case 14: 
 label=30;break;
 case 15: 
 var $65=$4;
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=($66|0)==0;
 if($67){label=16;break;}else{label=17;break;}
 case 16: 
 var $69=$4;
 SAFE_HEAP_STORE($69, 1, "i32", 0);
 var $70=$3;
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=($71|0);
 var $73=$2;
 SAFE_HEAP_STORE($73, $72, "double", 0);
 label=17;break;
 case 17: 
 var $75=$1;
 var $76=$len1;
 var $77=(($75+$76)|0);
 var $78=$2;
 var $79=(($78+8)|0);
 var $80=$3;
 var $81=$5;
 var $82=_dublin($77,$79,$80,$td,$81);
 $len2=$82;
 var $83=$len2;
 var $84=($83|0)==0;
 if($84){label=18;break;}else{label=19;break;}
 case 18: 
 label=30;break;
 case 19: 
 var $87=SAFE_HEAP_LOAD($td, "i32", 0, 0);
 var $88=($87|0)==0;
 if($88){label=20;break;}else{label=21;break;}
 case 20: 
 var $90=$3;
 var $91=SAFE_HEAP_LOAD($90, "i32", 0, 0);
 var $92=($91|0);
 var $93=$2;
 var $94=(($93+8)|0);
 SAFE_HEAP_STORE($94, $92, "double", 0);
 label=21;break;
 case 21: 
 var $96=$type;
 var $97=(($96<<24)>>24);
 var $98=($97|0)!=106;
 if($98){label=22;break;}else{label=29;break;}
 case 22: 
 var $100=$2;
 var $101=SAFE_HEAP_LOAD($100, "double", 0, 0);
 $magnitud=$101;
 var $102=$2;
 var $103=(($102+8)|0);
 var $104=SAFE_HEAP_LOAD($103, "double", 0, 0);
 $angle=$104;
 var $105=$type;
 var $106=(($105<<24)>>24);
 var $107=($106|0)==100;
 if($107){label=23;break;}else{label=28;break;}
 case 23: 
 var $109=$angle;
 var $110=$109<0;
 var $111=($110?-1:1);
 $sign=$111;
 var $112=$sign;
 var $113=$112==-1;
 if($113){label=24;break;}else{label=25;break;}
 case 24: 
 var $115=$angle;
 var $116=((-.0))-($115);
 $angle=$116;
 label=25;break;
 case 25: 
 var $118=$angle;
 var $119=_fmod($118,360);
 $angle=$119;
 var $120=$sign;
 var $121=$120==-1;
 if($121){label=26;break;}else{label=27;break;}
 case 26: 
 var $123=$angle;
 var $124=(360)-($123);
 $angle=$124;
 label=27;break;
 case 27: 
 var $126=$angle;
 var $127=($126)/(180);
 var $128=_pitimes(1);
 var $129=($127)*($128);
 $angle=$129;
 label=28;break;
 case 28: 
 var $131=$magnitud;
 var $132=$angle;
 var $133=Math_cos($132);
 var $134=($131)*($133);
 var $135=$2;
 SAFE_HEAP_STORE($135, $134, "double", 0);
 var $136=$magnitud;
 var $137=$angle;
 var $138=Math_sin($137);
 var $139=($136)*($138);
 var $140=$2;
 var $141=(($140+8)|0);
 SAFE_HEAP_STORE($141, $139, "double", 0);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $144=$len2;
 var $145=($144|0)==0;
 if($145){label=31;break;}else{label=32;break;}
 case 31: 
 var $147=$len1;
 var $148=((($147)-(1))|0);
 $len1=$148;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $151=$len1;
 var $152=$len2;
 var $153=((($151)+($152))|0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $153;
  default: assert(0, "bad label: " + label);
 }

}


function _creduce($oper,$identity,$rite,$axis){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$oper;
 $2=$identity;
 $3=$rite;
 $4=$axis;
 var $5=$1;
 var $6=$2;
 var $7=$6;
 var $8=$3;
 var $9=$4;
 var $10=_creduces(1,$5,$7,$8,$9);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $10;
}


function _creduces($id,$oper,$identity,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $axicnt=(sp)+(8);
 var $botcnt=(sp)+(16);
 var $topcnt=(sp)+(24);
 var $i;
 var $j;
 var $k;
 var $m;
 var $n;
 var $op;
 var $p;
 var $q;
 var $type;
 var $wrk;
 var $icp;
 var $kp;
 var $out;
 $2=$id;
 $3=$oper;
 $4=$identity;
 $5=$rite;
 SAFE_HEAP_STORE($6, $axis, "i32", 0);
 var $7=_errinit();
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$5;
 var $11=_errstop(0,0,$10,0);
 $1=$11;
 label=37;break;
 case 3: 
 var $13=$2;
 var $14=$4;
 var $15=$5;
 var $16=_reducecm($13,$14,$15,$6,$axicnt,$botcnt,$topcnt,8);
 $out=$16;
 var $17=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=37;break;
 case 5: 
 var $21=$out;
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=$23&78;
 $type=$24;
 var $25=$type;
 var $26=($25|0)==8;
 if($26){label=6;break;}else{label=9;break;}
 case 6: 
 var $28=$out;
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=($30|0)==1;
 if($31){label=7;break;}else{label=9;break;}
 case 7: 
 var $33=$5;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=($35|0)==1;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$5;
 var $39=(($38)|0);
 var $40=$39;
 var $41=SAFE_HEAP_LOAD($40, "i8*", 0, 0);
 var $42=SAFE_HEAP_LOAD($41, "i8", 0, 0);
 var $43=$out;
 var $44=(($43)|0);
 var $45=$44;
 var $46=SAFE_HEAP_LOAD($45, "i8*", 0, 0);
 SAFE_HEAP_STORE($46, $42, "i8", 0);
 var $47=$5;
 var $48=$out;
 var $49=_errstop(0,0,$47,$48);
 $1=$49;
 label=37;break;
 case 9: 
 var $51=$2;
 var $52=($51|0)!=0;
 if($52){label=10;break;}else{label=11;break;}
 case 10: 
 var $57=1;label=12;break;
 case 11: 
 var $55=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $57=$55;label=12;break;
 case 12: 
 var $57;
 $n=$57;
 var $58=$out;
 var $59=(($58+8)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=($60|0)!=0;
 if($61){label=13;break;}else{label=36;break;}
 case 13: 
 var $63=$out;
 var $64=(($63)|0);
 var $65=$64;
 var $66=SAFE_HEAP_LOAD($65, "i32*", 0, 0);
 $op=$66;
 var $67=$5;
 var $68=(($67+8)|0);
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 var $70=0==($69|0);
 if($70){label=14;break;}else{label=15;break;}
 case 14: 
 var $72=$op;
 var $73=$72;
 var $74=$4;
 var $75=$out;
 var $76=(($75+8)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=_intcopy($73,$74,$77,0);
 var $79=$78;
 $op=$79;
 label=35;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $82=$i;
 var $83=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $84=($82|0)<($83|0);
 if($84){label=17;break;}else{label=34;break;}
 case 17: 
 var $86=$5;
 var $87=(($86)|0);
 var $88=$87;
 var $89=SAFE_HEAP_LOAD($88, "i8*", 0, 0);
 var $90=$i;
 var $91=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $92=(Math_imul($90,$91)|0);
 var $93=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $94=(Math_imul($92,$93)|0);
 $p=$94;
 var $95=(($89+$94)|0);
 $icp=$95;
 $j=0;
 label=18;break;
 case 18: 
 var $97=$j;
 var $98=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $99=($97|0)<($98|0);
 if($99){label=19;break;}else{label=32;break;}
 case 19: 
 var $101=$n;
 $m=$101;
 label=20;break;
 case 20: 
 var $103=$m;
 var $104=($103|0)>0;
 if($104){label=21;break;}else{label=30;break;}
 case 21: 
 var $106=$icp;
 var $107=$j;
 var $108=(($106+$107)|0);
 var $109=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $110=$m;
 var $111=((($109)-($110))|0);
 var $112=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $113=(Math_imul($111,$112)|0);
 var $114=(($108+$113)|0);
 $kp=$114;
 var $115=SAFE_HEAP_LOAD($114, "i8", 0, 0);
 var $116=(($115<<24)>>24);
 $wrk=$116;
 $k=1;
 label=22;break;
 case 22: 
 var $118=$k;
 var $119=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $120=$m;
 var $121=((($119)-($120))|0);
 var $122=((($121)+(1))|0);
 var $123=($118|0)<($122|0);
 if($123){label=23;break;}else{label=25;break;}
 case 23: 
 var $125=$3;
 var $126=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $127=$kp;
 var $128=(((-$126))|0);
 var $129=(($127+$128)|0);
 $kp=$129;
 var $130=SAFE_HEAP_LOAD($129, "i8", 0, 0);
 var $131=$wrk;
 var $132=(($131)&255);
 var $133=FUNCTION_TABLE[$125]($130,$132);
 $wrk=$133;
 label=24;break;
 case 24: 
 var $135=$k;
 var $136=((($135)+(1))|0);
 $k=$136;
 label=22;break;
 case 25: 
 var $138=$2;
 var $139=($138|0)!=0;
 if($139){label=26;break;}else{label=27;break;}
 case 26: 
 var $141=$wrk;
 var $142=$op;
 var $143=(($142+4)|0);
 $op=$143;
 SAFE_HEAP_STORE($142, $141, "i32", 0);
 label=28;break;
 case 27: 
 var $145=$p;
 var $146=$j;
 var $147=((($145)+($146))|0);
 var $148=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $149=$m;
 var $150=((($148)-($149))|0);
 var $151=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $152=(Math_imul($150,$151)|0);
 var $153=((($147)+($152))|0);
 $q=$153;
 var $154=$wrk;
 var $155=$op;
 var $156=$q;
 var $157=(($155+($156<<2))|0);
 SAFE_HEAP_STORE($157, $154, "i32", 0);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $160=$m;
 var $161=((($160)-(1))|0);
 $m=$161;
 label=20;break;
 case 30: 
 label=31;break;
 case 31: 
 var $164=$j;
 var $165=((($164)+(1))|0);
 $j=$165;
 label=18;break;
 case 32: 
 label=33;break;
 case 33: 
 var $168=$i;
 var $169=((($168)+(1))|0);
 $i=$169;
 label=16;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $173=$5;
 var $174=$out;
 var $175=_errstop(0,0,$173,$174);
 $1=$175;
 label=37;break;
 case 37: 
 var $177=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $177;
  default: assert(0, "bad label: " + label);
 }

}


function _cscan($oper,$identity,$rite,$axis){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$oper;
 $2=$identity;
 $3=$rite;
 $4=$axis;
 var $5=$1;
 var $6=$2;
 var $7=$6;
 var $8=$3;
 var $9=$4;
 var $10=_creduces(1,$5,$7,$8,$9);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $10;
}


function _dabs($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$x;
 var $2=$1;
 var $3=$2>=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$1;
 var $10=$5;label=4;break;
 case 3: 
 var $7=$1;
 var $8=((-.0))-($7);
 var $10=$8;label=4;break;
 case 4: 
 var $10;
 $1=$10;
 var $11=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _dabsp($x,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$x;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=$4>=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=SAFE_HEAP_LOAD($7, "double", 0, 0);
 var $14=$8;label=4;break;
 case 3: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=((-.0))-($11);
 var $14=$12;label=4;break;
 case 4: 
 var $14;
 var $15=$2;
 SAFE_HEAP_STORE($15, $14, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dabsx($x,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $a;
 var $b;
 $1=$x;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $a=$4;
 var $5=$1;
 var $6=(($5+8)|0);
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 $b=$7;
 var $8=$a;
 var $9=$a;
 var $10=($8)*($9);
 var $11=$b;
 var $12=$b;
 var $13=($11)*($12);
 var $14=($10)+($13);
 var $15=_power($14,0.5);
 var $16=$2;
 SAFE_HEAP_STORE($16, $15, "double", 0);
 var $17=$2;
 var $18=(($17+8)|0);
 SAFE_HEAP_STORE($18, 0, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _dbland($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$4<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=((-.0))-($7);
 $2=$8;
 label=3;break;
 case 3: 
 var $10=$3;
 var $11=$10<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$3;
 var $14=((-.0))-($13);
 $3=$14;
 label=5;break;
 case 5: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=$16<$17;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=$3;
 var $21=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $22=$20<$21;
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=9;break;
 case 8: 
 $1=1;
 label=9;break;
 case 9: 
 var $26=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _dblandp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$5<0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 var $10=((-.0))-($9);
 var $11=$1;
 SAFE_HEAP_STORE($11, $10, "double", 0);
 label=3;break;
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "double", 0, 0);
 var $15=$14<0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$2;
 var $18=SAFE_HEAP_LOAD($17, "double", 0, 0);
 var $19=((-.0))-($18);
 var $20=$2;
 SAFE_HEAP_STORE($20, $19, "double", 0);
 label=5;break;
 case 5: 
 var $22=$1;
 var $23=SAFE_HEAP_LOAD($22, "double", 0, 0);
 var $24=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $25=$23<$24;
 if($25){label=7;break;}else{label=6;break;}
 case 6: 
 var $27=$2;
 var $28=SAFE_HEAP_LOAD($27, "double", 0, 0);
 var $29=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $30=$28<$29;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 var $32=$3;
 SAFE_HEAP_STORE($32, 0, "double", 0);
 label=9;break;
 case 8: 
 var $34=$3;
 SAFE_HEAP_STORE($34, 1, "double", 0);
 label=9;break;
 case 9: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblcopy($to,$from,$cnt,$incr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$to;
 $2=$from;
 $3=$cnt;
 $4=$incr;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=((($6)-(1))|0);
 $3=$7;
 var $8=($6|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$2;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=$1;
 var $13=(($12+8)|0);
 $1=$13;
 SAFE_HEAP_STORE($12, $11, "double", 0);
 var $14=$4;
 var $15=$2;
 var $16=(($15+($14<<3))|0);
 $2=$16;
 label=2;break;
 case 4: 
 var $18=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }

}


function _dbleq($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=$4>$5;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=$3;
 var $10=($8)-($9);
 var $16=$10;label=4;break;
 case 3: 
 var $12=$3;
 var $13=$2;
 var $14=($12)-($13);
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 $diff=$16;
 var $17=$diff;
 var $18=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $19=$17<=$18;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 $1=1;
 label=7;break;
 case 6: 
 $1=0;
 label=7;break;
 case 7: 
 var $23=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }

}


function _dbleqp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=$5>$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=$2;
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 var $14=($11)-($13);
 var $22=$14;label=4;break;
 case 3: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 var $18=$1;
 var $19=SAFE_HEAP_LOAD($18, "double", 0, 0);
 var $20=($17)-($19);
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 $diff=$22;
 var $23=$diff;
 var $24=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $25=$23<=$24;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=$3;
 SAFE_HEAP_STORE($27, 1, "double", 0);
 label=7;break;
 case 6: 
 var $29=$3;
 SAFE_HEAP_STORE($29, 0, "double", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblge($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=($5)-($6);
 var $8=$4>=$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $12=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _dblgep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $9=($7)-($8);
 var $10=$5>=$9;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$3;
 SAFE_HEAP_STORE($12, 1, "double", 0);
 label=4;break;
 case 3: 
 var $14=$3;
 SAFE_HEAP_STORE($14, 0, "double", 0);
 label=4;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblgt($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=($5)+($6);
 var $8=$4>$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $12=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _dblgtp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $9=($7)+($8);
 var $10=$5>$9;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$3;
 SAFE_HEAP_STORE($12, 1, "double", 0);
 label=4;break;
 case 3: 
 var $14=$3;
 SAFE_HEAP_STORE($14, 0, "double", 0);
 label=4;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblle($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=($5)+($6);
 var $8=$4<=$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $12=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _dbllep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $9=($7)+($8);
 var $10=$5<=$9;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$3;
 SAFE_HEAP_STORE($12, 1, "double", 0);
 label=4;break;
 case 3: 
 var $14=$3;
 SAFE_HEAP_STORE($14, 0, "double", 0);
 label=4;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dbllt($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=($5)-($6);
 var $8=$4<$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $12=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _dblltp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $9=($7)-($8);
 var $10=$5<$9;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$3;
 SAFE_HEAP_STORE($12, 1, "double", 0);
 label=4;break;
 case 3: 
 var $14=$3;
 SAFE_HEAP_STORE($14, 0, "double", 0);
 label=4;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblmax($a,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$a;
 $2=$b;
 var $3=$1;
 var $4=$2;
 var $5=$3>$4;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $11=$7;label=4;break;
 case 3: 
 var $9=$2;
 var $11=$9;label=4;break;
 case 4: 
 var $11;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _dblmaxp($a,$b,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$a;
 $2=$b;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=$5>$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $16=$11;label=4;break;
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "double", 0, 0);
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 var $17=$3;
 SAFE_HEAP_STORE($17, $16, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblmin($a,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$a;
 $2=$b;
 var $3=$1;
 var $4=$2;
 var $5=$3<$4;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $11=$7;label=4;break;
 case 3: 
 var $9=$2;
 var $11=$9;label=4;break;
 case 4: 
 var $11;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _dblminp($a,$b,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$a;
 $2=$b;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=$5<$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $16=$11;label=4;break;
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "double", 0, 0);
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 var $17=$3;
 SAFE_HEAP_STORE($17, $16, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblnand($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$4<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=((-.0))-($7);
 $2=$8;
 label=3;break;
 case 3: 
 var $10=$3;
 var $11=$10<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$3;
 var $14=((-.0))-($13);
 $3=$14;
 label=5;break;
 case 5: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=$16<$17;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=$3;
 var $21=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $22=$20<$21;
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 $1=1;
 label=9;break;
 case 8: 
 $1=0;
 label=9;break;
 case 9: 
 var $26=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _dblnandp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$5<0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 var $10=((-.0))-($9);
 var $11=$1;
 SAFE_HEAP_STORE($11, $10, "double", 0);
 label=3;break;
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "double", 0, 0);
 var $15=$14<0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$2;
 var $18=SAFE_HEAP_LOAD($17, "double", 0, 0);
 var $19=((-.0))-($18);
 var $20=$2;
 SAFE_HEAP_STORE($20, $19, "double", 0);
 label=5;break;
 case 5: 
 var $22=$1;
 var $23=SAFE_HEAP_LOAD($22, "double", 0, 0);
 var $24=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $25=$23<$24;
 if($25){label=7;break;}else{label=6;break;}
 case 6: 
 var $27=$2;
 var $28=SAFE_HEAP_LOAD($27, "double", 0, 0);
 var $29=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $30=$28<$29;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 var $32=$3;
 SAFE_HEAP_STORE($32, 1, "double", 0);
 label=9;break;
 case 8: 
 var $34=$3;
 SAFE_HEAP_STORE($34, 0, "double", 0);
 label=9;break;
 case 9: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblne($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=$4>$5;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=$3;
 var $10=($8)-($9);
 var $16=$10;label=4;break;
 case 3: 
 var $12=$3;
 var $13=$2;
 var $14=($12)-($13);
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 $diff=$16;
 var $17=$diff;
 var $18=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $19=$17<=$18;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=7;break;
 case 6: 
 $1=1;
 label=7;break;
 case 7: 
 var $23=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }

}


function _dblnep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=$5>$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=$2;
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 var $14=($11)-($13);
 var $22=$14;label=4;break;
 case 3: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 var $18=$1;
 var $19=SAFE_HEAP_LOAD($18, "double", 0, 0);
 var $20=($17)-($19);
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 $diff=$22;
 var $23=$diff;
 var $24=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $25=$23<=$24;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=$3;
 SAFE_HEAP_STORE($27, 0, "double", 0);
 label=7;break;
 case 6: 
 var $29=$3;
 SAFE_HEAP_STORE($29, 1, "double", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblnor($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $6=((-.0))-($5);
 var $7=$4<$6;
 if($7){label=5;break;}else{label=2;break;}
 case 2: 
 var $9=$2;
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$9>$10;
 if($11){label=5;break;}else{label=3;break;}
 case 3: 
 var $13=$3;
 var $14=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $15=((-.0))-($14);
 var $16=$13<$15;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=$3;
 var $19=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $20=$18>$19;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=7;break;
 case 6: 
 $1=1;
 label=7;break;
 case 7: 
 var $24=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _dblnorp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=((-.0))-($6);
 var $8=$5<$7;
 if($8){label=5;break;}else{label=2;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $13=$11>$12;
 if($13){label=5;break;}else{label=3;break;}
 case 3: 
 var $15=$2;
 var $16=SAFE_HEAP_LOAD($15, "double", 0, 0);
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=((-.0))-($17);
 var $19=$16<$18;
 if($19){label=5;break;}else{label=4;break;}
 case 4: 
 var $21=$2;
 var $22=SAFE_HEAP_LOAD($21, "double", 0, 0);
 var $23=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $24=$22>$23;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=$3;
 SAFE_HEAP_STORE($26, 0, "double", 0);
 label=7;break;
 case 6: 
 var $28=$3;
 SAFE_HEAP_STORE($28, 1, "double", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblnot($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$rite;
 var $3=$2;
 var $4=$3<0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=((-.0))-($6);
 $2=$7;
 label=3;break;
 case 3: 
 var $9=$2;
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$9<$10;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $15=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }

}


function _dblnotp($prite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $rite;
 $1=$prite;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $rite=$4;
 var $5=$rite;
 var $6=$5<0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$rite;
 var $9=((-.0))-($8);
 $rite=$9;
 label=3;break;
 case 3: 
 var $11=$rite;
 var $12=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $13=$11<$12;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=$2;
 SAFE_HEAP_STORE($15, 1, "double", 0);
 label=6;break;
 case 5: 
 var $17=$2;
 SAFE_HEAP_STORE($17, 0, "double", 0);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dblor($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $6=((-.0))-($5);
 var $7=$4<$6;
 if($7){label=5;break;}else{label=2;break;}
 case 2: 
 var $9=$2;
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$9>$10;
 if($11){label=5;break;}else{label=3;break;}
 case 3: 
 var $13=$3;
 var $14=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $15=((-.0))-($14);
 var $16=$13<$15;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=$3;
 var $19=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $20=$18>$19;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 $1=1;
 label=7;break;
 case 6: 
 $1=0;
 label=7;break;
 case 7: 
 var $24=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _dblorp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=((-.0))-($6);
 var $8=$5<$7;
 if($8){label=5;break;}else{label=2;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $13=$11>$12;
 if($13){label=5;break;}else{label=3;break;}
 case 3: 
 var $15=$2;
 var $16=SAFE_HEAP_LOAD($15, "double", 0, 0);
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=((-.0))-($17);
 var $19=$16<$18;
 if($19){label=5;break;}else{label=4;break;}
 case 4: 
 var $21=$2;
 var $22=SAFE_HEAP_LOAD($21, "double", 0, 0);
 var $23=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $24=$22>$23;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=$3;
 SAFE_HEAP_STORE($26, 1, "double", 0);
 label=7;break;
 case 6: 
 var $28=$3;
 SAFE_HEAP_STORE($28, 0, "double", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _deal($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $out;
 var $wrk;
 var $count;
 var $i;
 var $ip;
 var $j;
 var $jp;
 var $k;
 var $range;
 var $unique;
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 $out=0;
 var $4=_matchok($2,$3,4);
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=37;break;
 case 3: 
 var $8=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=($10|0)==1;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=($15|0)==1;
 if($16){label=6;break;}else{label=5;break;}
 case 5: 
 var $18=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $19=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $20=_errstop(41,$18,$19,0);
 $1=$20;
 label=37;break;
 case 6: 
 var $22=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 $count=$26;
 var $27=0>($26|0);
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $29=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $30=(($29)|0);
 var $31=$30;
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 $range=$33;
 var $34=0>($33|0);
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $37=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $38=_errstop(42,$36,$37,0);
 $1=$38;
 label=37;break;
 case 9: 
 var $40=$count;
 var $41=$range;
 var $42=($40|0)>($41|0);
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $44=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $45=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $46=_errstop(43,$44,$45,0);
 $1=$46;
 label=37;break;
 case 11: 
 var $48=$count;
 var $49=_getcb(0,$48,5,1,0);
 $out=$49;
 var $50=$range;
 var $51=($50|0)>500;
 if($51){label=13;break;}else{label=12;break;}
 case 12: 
 var $53=$count;
 var $54=$range;
 var $55=(((($54|0))/(16))&-1);
 var $56=($53|0)<=($55|0);
 if($56){label=13;break;}else{label=27;break;}
 case 13: 
 $k=0;
 label=14;break;
 case 14: 
 var $59=$k;
 var $60=$count;
 var $61=($59|0)<($60|0);
 if($61){label=15;break;}else{label=26;break;}
 case 15: 
 label=16;break;
 case 16: 
 var $64=$range;
 var $65=_iroll($64);
 $j=$65;
 $unique=1;
 $i=0;
 label=17;break;
 case 17: 
 var $67=$i;
 var $68=$k;
 var $69=($67|0)<($68|0);
 if($69){label=18;break;}else{var $74=0;label=19;break;}
 case 18: 
 var $71=$unique;
 var $72=($71|0)!=0;
 var $74=$72;label=19;break;
 case 19: 
 var $74;
 if($74){label=20;break;}else{label=22;break;}
 case 20: 
 var $76=$j;
 var $77=$out;
 var $78=(($77)|0);
 var $79=$78;
 var $80=SAFE_HEAP_LOAD($79, "i32*", 0, 0);
 var $81=$i;
 var $82=(($80+($81<<2))|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=($76|0)!=($83|0);
 var $85=($84&1);
 $unique=$85;
 label=21;break;
 case 21: 
 var $87=$i;
 var $88=((($87)+(1))|0);
 $i=$88;
 label=17;break;
 case 22: 
 label=23;break;
 case 23: 
 var $91=$unique;
 var $92=($91|0)!=0;
 var $93=$92^1;
 if($93){label=16;break;}else{label=24;break;}
 case 24: 
 var $95=$j;
 var $96=$out;
 var $97=(($96)|0);
 var $98=$97;
 var $99=SAFE_HEAP_LOAD($98, "i32*", 0, 0);
 var $100=$k;
 var $101=(($99+($100<<2))|0);
 SAFE_HEAP_STORE($101, $95, "i32", 0);
 label=25;break;
 case 25: 
 var $103=$k;
 var $104=((($103)+(1))|0);
 $k=$104;
 label=14;break;
 case 26: 
 label=36;break;
 case 27: 
 var $107=$range;
 var $108=_indxsub($107);
 $wrk=$108;
 $i=0;
 label=28;break;
 case 28: 
 var $110=$i;
 var $111=$count;
 var $112=($110|0)<($111|0);
 if($112){label=29;break;}else{label=31;break;}
 case 29: 
 var $114=$range;
 var $115=_iroll($114);
 $j=$115;
 var $116=$wrk;
 var $117=(($116)|0);
 var $118=$117;
 var $119=SAFE_HEAP_LOAD($118, "i32*", 0, 0);
 var $120=$i;
 var $121=(($119+($120<<2))|0);
 $ip=$121;
 var $122=SAFE_HEAP_LOAD($121, "i32", 0, 0);
 $k=$122;
 var $123=$wrk;
 var $124=(($123)|0);
 var $125=$124;
 var $126=SAFE_HEAP_LOAD($125, "i32*", 0, 0);
 var $127=$j;
 var $128=(($126+($127<<2))|0);
 var $129=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $130=(((-$129))|0);
 var $131=(($128+($130<<2))|0);
 $jp=$131;
 var $132=SAFE_HEAP_LOAD($131, "i32", 0, 0);
 var $133=$ip;
 SAFE_HEAP_STORE($133, $132, "i32", 0);
 var $134=$k;
 var $135=$jp;
 SAFE_HEAP_STORE($135, $134, "i32", 0);
 label=30;break;
 case 30: 
 var $137=$i;
 var $138=((($137)+(1))|0);
 $i=$138;
 label=28;break;
 case 31: 
 var $140=$wrk;
 var $141=(($140)|0);
 var $142=$141;
 var $143=SAFE_HEAP_LOAD($142, "i32*", 0, 0);
 $ip=$143;
 var $144=$out;
 var $145=(($144)|0);
 var $146=$145;
 var $147=SAFE_HEAP_LOAD($146, "i32*", 0, 0);
 $jp=$147;
 $i=0;
 label=32;break;
 case 32: 
 var $149=$i;
 var $150=$count;
 var $151=($149|0)<($150|0);
 if($151){label=33;break;}else{label=35;break;}
 case 33: 
 var $153=$ip;
 var $154=(($153+4)|0);
 $ip=$154;
 var $155=SAFE_HEAP_LOAD($153, "i32", 0, 0);
 var $156=$jp;
 var $157=(($156+4)|0);
 $jp=$157;
 SAFE_HEAP_STORE($156, $155, "i32", 0);
 label=34;break;
 case 34: 
 var $159=$i;
 var $160=((($159)+(1))|0);
 $i=$160;
 label=32;break;
 case 35: 
 var $162=$wrk;
 _endoper($162);
 label=36;break;
 case 36: 
 var $164=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $165=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $166=$out;
 var $167=_errstop(0,$164,$165,$166);
 $1=$167;
 label=37;break;
 case 37: 
 var $169=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $169;
  default: assert(0, "bad label: " + label);
 }

}


function _decode($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $plus;
 var $times;
 var $axicnt;
 var $bump;
 var $datatyp=(sp)+(16);
 var $i;
 var $j;
 var $k;
 var $m;
 var $n;
 var $p;
 var $r;
 var $laxicnt=(sp)+(24);
 var $laxis=(sp)+(32);
 var $lbotcnt=(sp)+(40);
 var $lincr=(sp)+(48);
 var $ltopcnt=(sp)+(56);
 var $raxicnt=(sp)+(64);
 var $rbotcnt=(sp)+(72);
 var $rincr=(sp)+(80);
 var $rtopcnt=(sp)+(88);
 var $dataout=(sp)+(96);
 var $ldata=(sp)+(104);
 var $rdata=(sp)+(112);
 var $ip;
 var $jp;
 var $kp;
 var $mp;
 var $np;
 var $radix=(sp)+(120);
 var $wrka=(sp)+(136);
 var $wrkb=(sp)+(152);
 var $wrkc=(sp)+(168);
 var $out;
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 var $4=_matchok($2,$3,66);
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=44;break;
 case 3: 
 var $8=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $9=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $10=$dataout;
 var $11=$ldata;
 var $12=$rdata;
 var $13=_innrcom(0,$8,$9,$laxis,$laxicnt,$lbotcnt,$ltopcnt,$lincr,$raxicnt,$rbotcnt,$rtopcnt,$rincr,$datatyp,$10,$11,$12);
 $out=$13;
 var $14=$out;
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=44;break;
 case 5: 
 var $18=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 if(($18|0)==2){ label=6;break;}else if(($18|0)==64){ label=7;break;}else{label=8;break;}
 case 6: 
 $plus=334;
 $times=172;
 $bump=1;
 label=8;break;
 case 7: 
 $plus=162;
 $times=160;
 $bump=2;
 label=8;break;
 case 8: 
 var $22=SAFE_HEAP_LOAD($raxicnt, "i32", 0, 0);
 $axicnt=$22;
 $i=0;
 label=9;break;
 case 9: 
 var $24=$i;
 var $25=SAFE_HEAP_LOAD($ltopcnt, "i32", 0, 0);
 var $26=($24|0)<($25|0);
 if($26){label=10;break;}else{label=43;break;}
 case 10: 
 var $28=SAFE_HEAP_LOAD($ldata, "double*", 0, 0);
 var $29=$i;
 var $30=$bump;
 var $31=(Math_imul($29,$30)|0);
 var $32=SAFE_HEAP_LOAD($lincr, "i32", 0, 0);
 var $33=($32|0)!=0;
 if($33){label=11;break;}else{label=12;break;}
 case 11: 
 var $35=$axicnt;
 var $38=$35;label=13;break;
 case 12: 
 var $38=1;label=13;break;
 case 13: 
 var $38;
 var $39=(Math_imul($31,$38)|0);
 var $40=(($28+($39<<3))|0);
 $ip=$40;
 $j=0;
 label=14;break;
 case 14: 
 var $42=$j;
 var $43=SAFE_HEAP_LOAD($lbotcnt, "i32", 0, 0);
 var $44=($42|0)<($43|0);
 if($44){label=15;break;}else{label=41;break;}
 case 15: 
 var $46=$ip;
 var $47=$j;
 var $48=$bump;
 var $49=(Math_imul($47,$48)|0);
 var $50=(($46+($49<<3))|0);
 $jp=$50;
 $k=0;
 label=16;break;
 case 16: 
 var $52=$k;
 var $53=SAFE_HEAP_LOAD($rtopcnt, "i32", 0, 0);
 var $54=($52|0)<($53|0);
 if($54){label=17;break;}else{label=39;break;}
 case 17: 
 var $56=SAFE_HEAP_LOAD($rdata, "double*", 0, 0);
 var $57=$k;
 var $58=$axicnt;
 var $59=(Math_imul($57,$58)|0);
 var $60=SAFE_HEAP_LOAD($rincr, "i32", 0, 0);
 var $61=(Math_imul($59,$60)|0);
 var $62=$bump;
 var $63=(Math_imul($61,$62)|0);
 var $64=(($56+($63<<3))|0);
 $kp=$64;
 $m=0;
 label=18;break;
 case 18: 
 var $66=$m;
 var $67=SAFE_HEAP_LOAD($rbotcnt, "i32", 0, 0);
 var $68=($66|0)<($67|0);
 if($68){label=19;break;}else{label=37;break;}
 case 19: 
 var $70=$kp;
 var $71=$m;
 var $72=$axicnt;
 var $73=SAFE_HEAP_LOAD($rincr, "i32", 0, 0);
 var $74=(Math_imul($72,$73)|0);
 var $75=((($71)+($74))|0);
 var $76=$bump;
 var $77=(Math_imul($75,$76)|0);
 var $78=(($70+($77<<3))|0);
 $mp=$78;
 var $79=$jp;
 var $80=$axicnt;
 var $81=SAFE_HEAP_LOAD($lincr, "i32", 0, 0);
 var $82=(Math_imul($80,$81)|0);
 var $83=$bump;
 var $84=(Math_imul($82,$83)|0);
 var $85=(($79+($84<<3))|0);
 $np=$85;
 var $86=SAFE_HEAP_LOAD(3096, "double", 0, 0);
 var $87=(($radix)|0);
 SAFE_HEAP_STORE($87, $86, "double", 0);
 var $88=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 var $89=($88|0)==64;
 if($89){label=20;break;}else{label=21;break;}
 case 20: 
 var $91=SAFE_HEAP_LOAD(3104, "double", 0, 0);
 var $92=(($radix+8)|0);
 SAFE_HEAP_STORE($92, $91, "double", 0);
 label=21;break;
 case 21: 
 var $94=SAFE_HEAP_LOAD(3080, "double", 0, 0);
 var $95=(($wrka)|0);
 SAFE_HEAP_STORE($95, $94, "double", 0);
 var $96=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 var $97=($96|0)==64;
 if($97){label=22;break;}else{label=23;break;}
 case 22: 
 var $99=SAFE_HEAP_LOAD(3088, "double", 0, 0);
 var $100=(($wrka+8)|0);
 SAFE_HEAP_STORE($100, $99, "double", 0);
 label=23;break;
 case 23: 
 $n=0;
 label=24;break;
 case 24: 
 var $103=$n;
 var $104=$axicnt;
 var $105=($103|0)<($104|0);
 if($105){label=25;break;}else{label=33;break;}
 case 25: 
 var $107=(($radix)|0);
 var $108=SAFE_HEAP_LOAD($107, "double", 0, 0);
 var $109=(($wrkb)|0);
 SAFE_HEAP_STORE($109, $108, "double", 0);
 var $110=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 var $111=($110|0)==64;
 if($111){label=26;break;}else{label=27;break;}
 case 26: 
 var $113=(($radix+8)|0);
 var $114=SAFE_HEAP_LOAD($113, "double", 0, 0);
 var $115=(($wrkb+8)|0);
 SAFE_HEAP_STORE($115, $114, "double", 0);
 label=27;break;
 case 27: 
 var $117=SAFE_HEAP_LOAD($rincr, "i32", 0, 0);
 var $118=$bump;
 var $119=(Math_imul($117,$118)|0);
 var $120=$mp;
 var $121=(((-$119))|0);
 var $122=(($120+($121<<3))|0);
 $mp=$122;
 var $123=$times;
 var $124=(($wrkb)|0);
 var $125=$mp;
 var $126=(($wrkc)|0);
 FUNCTION_TABLE[$123]($124,$125,$126);
 var $127=(($wrka)|0);
 var $128=SAFE_HEAP_LOAD($127, "double", 0, 0);
 var $129=(($wrkb)|0);
 SAFE_HEAP_STORE($129, $128, "double", 0);
 var $130=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 var $131=($130|0)==64;
 if($131){label=28;break;}else{label=29;break;}
 case 28: 
 var $133=(($wrka+8)|0);
 var $134=SAFE_HEAP_LOAD($133, "double", 0, 0);
 var $135=(($wrkb+8)|0);
 SAFE_HEAP_STORE($135, $134, "double", 0);
 label=29;break;
 case 29: 
 var $137=$plus;
 var $138=(($wrkb)|0);
 var $139=(($wrkc)|0);
 var $140=(($wrka)|0);
 FUNCTION_TABLE[$137]($138,$139,$140);
 var $141=SAFE_HEAP_LOAD($lincr, "i32", 0, 0);
 var $142=$bump;
 var $143=(Math_imul($141,$142)|0);
 var $144=$np;
 var $145=(((-$143))|0);
 var $146=(($144+($145<<3))|0);
 $np=$146;
 var $147=(($radix)|0);
 var $148=SAFE_HEAP_LOAD($147, "double", 0, 0);
 var $149=(($wrkc)|0);
 SAFE_HEAP_STORE($149, $148, "double", 0);
 var $150=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 var $151=($150|0)==64;
 if($151){label=30;break;}else{label=31;break;}
 case 30: 
 var $153=(($radix+8)|0);
 var $154=SAFE_HEAP_LOAD($153, "double", 0, 0);
 var $155=(($wrkc+8)|0);
 SAFE_HEAP_STORE($155, $154, "double", 0);
 label=31;break;
 case 31: 
 var $157=$times;
 var $158=(($wrkc)|0);
 var $159=$np;
 var $160=(($radix)|0);
 FUNCTION_TABLE[$157]($158,$159,$160);
 label=32;break;
 case 32: 
 var $162=$n;
 var $163=((($162)+(1))|0);
 $n=$163;
 label=24;break;
 case 33: 
 var $165=(($wrka)|0);
 var $166=SAFE_HEAP_LOAD($165, "double", 0, 0);
 var $167=SAFE_HEAP_LOAD($dataout, "double*", 0, 0);
 var $168=(($167)|0);
 SAFE_HEAP_STORE($168, $166, "double", 0);
 var $169=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 var $170=($169|0)==64;
 if($170){label=34;break;}else{label=35;break;}
 case 34: 
 var $172=(($wrka+8)|0);
 var $173=SAFE_HEAP_LOAD($172, "double", 0, 0);
 var $174=SAFE_HEAP_LOAD($dataout, "double*", 0, 0);
 var $175=(($174+8)|0);
 SAFE_HEAP_STORE($175, $173, "double", 0);
 label=35;break;
 case 35: 
 var $177=$bump;
 var $178=SAFE_HEAP_LOAD($dataout, "double*", 0, 0);
 var $179=(($178+($177<<3))|0);
 SAFE_HEAP_STORE($dataout, $179, "double*", 0);
 label=36;break;
 case 36: 
 var $181=$m;
 var $182=((($181)+(1))|0);
 $m=$182;
 label=18;break;
 case 37: 
 label=38;break;
 case 38: 
 var $185=$k;
 var $186=((($185)+(1))|0);
 $k=$186;
 label=16;break;
 case 39: 
 label=40;break;
 case 40: 
 var $189=$j;
 var $190=((($189)+(1))|0);
 $j=$190;
 label=14;break;
 case 41: 
 label=42;break;
 case 42: 
 var $193=$i;
 var $194=((($193)+(1))|0);
 $i=$194;
 label=9;break;
 case 43: 
 var $196=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $197=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $198=$out;
 var $199=_errstop(0,$196,$197,$198);
 $1=$199;
 label=44;break;
 case 44: 
 var $201=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $201;
  default: assert(0, "bad label: " + label);
 }

}


function _depth($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 $1=$rite;
 $out=0;
 label=2;break;
 case 2: 
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 label=7;break;
 case 4: 
 var $7=_getcb(0,1,5,1,0);
 $out=$7;
 var $8=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $9=($8|0)!=0;
 if($9){label=5;break;}else{label=6;break;}
 case 5: 
 label=7;break;
 case 6: 
 var $12=$1;
 var $13=_depthsub($12);
 var $14=$out;
 var $15=(($14)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "i32*", 0, 0);
 SAFE_HEAP_STORE($17, $13, "i32", 0);
 $1=0;
 label=7;break;
 case 7: 
 var $19=$1;
 var $20=$out;
 var $21=_errstop(0,0,$19,$20);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }

}


function _depthsub($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ritp;
 var $rcb;
 var $i;
 var $idepth;
 var $typ;
 $1=$rite;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 var $5=$4&110;
 $typ=$5;
 var $6=$typ;
 var $7=($6|0)!=32;
 if($7){label=2;break;}else{label=6;break;}
 case 2: 
 var $9=$1;
 var $10=(($9+12)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 $idepth=1;
 label=5;break;
 case 4: 
 $idepth=0;
 label=5;break;
 case 5: 
 label=14;break;
 case 6: 
 var $17=$1;
 var $18=(($17+8)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=($19|0)!=0;
 if($20){label=7;break;}else{label=12;break;}
 case 7: 
 $idepth=0;
 var $22=$1;
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "%struct.aplcb**", 0, 0);
 $ritp=$25;
 var $26=$1;
 var $27=(($26+8)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 $i=$28;
 label=8;break;
 case 8: 
 var $30=$i;
 var $31=($30|0)!=0;
 if($31){label=9;break;}else{label=11;break;}
 case 9: 
 var $33=$idepth;
 var $34=$ritp;
 var $35=(($34+4)|0);
 $ritp=$35;
 var $36=SAFE_HEAP_LOAD($34, "%struct.aplcb*", 0, 0);
 var $37=_depthsub($36);
 var $38=_imax($33,$37);
 $idepth=$38;
 label=10;break;
 case 10: 
 var $40=$i;
 var $41=((($40)-(1))|0);
 $i=$41;
 label=8;break;
 case 11: 
 var $43=$idepth;
 var $44=((($43)+(1))|0);
 $idepth=$44;
 label=13;break;
 case 12: 
 var $46=$1;
 var $47=_first($46);
 var $48=_enclose($47,0);
 var $49=_depth($48);
 var $50=_ivalue($49);
 $idepth=$50;
 $1=0;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $53=$1;
 _endoper($53);
 var $54=$idepth;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }

}


function _dequeue($hdr,$del){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $pre;
 var $suc;
 $1=$hdr;
 $2=$del;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.el*", 0, 0);
 $pre=$5;
 var $6=$2;
 var $7=(($6)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.el*", 0, 0);
 $suc=$8;
 var $9=$pre;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$suc;
 var $13=$1;
 var $14=(($13)|0);
 SAFE_HEAP_STORE($14, $12, "%struct.el*", 0);
 label=4;break;
 case 3: 
 var $16=$suc;
 var $17=$pre;
 var $18=(($17)|0);
 SAFE_HEAP_STORE($18, $16, "%struct.el*", 0);
 label=4;break;
 case 4: 
 var $20=$suc;
 var $21=($20|0)==0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$pre;
 var $24=$1;
 var $25=(($24+4)|0);
 SAFE_HEAP_STORE($25, $23, "%struct.el*", 0);
 label=7;break;
 case 6: 
 var $27=$pre;
 var $28=$suc;
 var $29=(($28+4)|0);
 SAFE_HEAP_STORE($29, $27, "%struct.el*", 0);
 label=7;break;
 case 7: 
 var $31=$pre;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }

}


function _derived($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $out;
 $1=$dp;
 $2=$left;
 $3=$rite;
 $out=0;
 var $4=$1;
 var $5=(($4+24)|0);
 var $6=$5;
 var $7=SAFE_HEAP_LOAD($6, "%struct.aplcb* (%struct.aplderiv*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $8=$1;
 var $9=$2;
 var $10=$3;
 var $11=FUNCTION_TABLE[$7]($8,$9,$10);
 $out=$11;
 var $12=$1;
 _dervfree($12);
 var $13=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $13;
}


function _dervfree($dp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$dp;
 var $2=$1;
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=$1;
 var $6=(($5)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&1;
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 label=15;break;
 case 4: 
 var $12=$1;
 var $13=(($12+28)|0);
 var $14=(($13+12)|0);
 var $15=SAFE_HEAP_LOAD($14, "%struct.aplcb*", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 var $18=$1;
 var $19=(($18+28)|0);
 var $20=(($19+12)|0);
 var $21=SAFE_HEAP_LOAD($20, "%struct.aplcb*", 0, 0);
 var $22=_temp($21);
 _endoper($22);
 label=6;break;
 case 6: 
 var $24=$1;
 var $25=(($24+52)|0);
 var $26=(($25+12)|0);
 var $27=SAFE_HEAP_LOAD($26, "%struct.aplcb*", 0, 0);
 var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 var $30=$1;
 var $31=(($30+52)|0);
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.aplcb*", 0, 0);
 var $34=_temp($33);
 _endoper($34);
 label=8;break;
 case 8: 
 var $36=$1;
 var $37=(($36+28)|0);
 var $38=(($37)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=($39|0)==-7;
 if($40){label=9;break;}else{label=12;break;}
 case 9: 
 var $42=$1;
 var $43=(($42+28)|0);
 var $44=(($43+4)|0);
 var $45=SAFE_HEAP_LOAD($44, "i8*", 0, 0);
 var $46=$45;
 var $47=(($46)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=$48&1;
 var $50=($49|0)!=0;
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 var $52=$1;
 var $53=(($52+28)|0);
 var $54=(($53+4)|0);
 var $55=SAFE_HEAP_LOAD($54, "i8*", 0, 0);
 var $56=$55;
 var $57=(($56)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=((($58)-(1))|0);
 SAFE_HEAP_STORE($57, $59, "i32", 0);
 label=11;break;
 case 11: 
 var $61=$1;
 var $62=(($61+28)|0);
 var $63=(($62+4)|0);
 var $64=SAFE_HEAP_LOAD($63, "i8*", 0, 0);
 var $65=$64;
 _dervfree($65);
 label=12;break;
 case 12: 
 var $67=$1;
 var $68=(($67+16)|0);
 var $69=SAFE_HEAP_LOAD($68, "%struct.aplcb*", 0, 0);
 var $70=($69|0)!=0;
 if($70){label=13;break;}else{label=14;break;}
 case 13: 
 var $72=$1;
 var $73=(($72+16)|0);
 var $74=SAFE_HEAP_LOAD($73, "%struct.aplcb*", 0, 0);
 var $75=_temp($74);
 _endoper($75);
 label=14;break;
 case 14: 
 var $77=$1;
 var $78=$77;
 _aplfree($78);
 label=15;break;
 case 15: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _digits($val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $wrk;
 var $dig;
 $1=$val;
 var $2=$1;
 var $3=$2<0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$1;
 var $6=((-.0))-($5);
 var $10=$6;label=4;break;
 case 3: 
 var $8=$1;
 var $10=$8;label=4;break;
 case 4: 
 var $10;
 $1=$10;
 var $11=$1;
 var $12=($11)+((0.5));
 var $13=Math_log($12);
 var $14=SAFE_HEAP_LOAD(3072, "double", 0, 0);
 var $15=($13)/($14);
 $wrk=$15;
 var $16=$wrk;
 var $17=$16>0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=$wrk;
 var $20=(($19)&-1);
 $dig=$20;
 var $21=$dig;
 var $22=((($21)+(1))|0);
 $dig=$22;
 label=7;break;
 case 6: 
 $dig=0;
 label=7;break;
 case 7: 
 var $25=$dig;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _disclose($rite,$axes){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cb;
 var $out;
 var $wrk;
 var $dtype;
 var $i;
 var $rank;
 var $tempsave;
 $2=$rite;
 $3=$axes;
 $dtype=0;
 $rank=0;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=$2;
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=23;break;
 case 3: 
 var $11=$2;
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$13&32;
 var $15=($14|0)!=0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=$3;
 var $18=$2;
 var $19=_aplcopy($18);
 var $20=_temp($19);
 var $21=_errstop(0,0,$17,$20);
 $1=$21;
 label=23;break;
 case 5: 
 var $23=$2;
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=$25&1;
 $tempsave=$26;
 var $27=($26|0)!=0;
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 var $29=$2;
 var $30=(($29+4)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=((($31)-(1))|0);
 SAFE_HEAP_STORE($30, $32, "i32", 0);
 label=7;break;
 case 7: 
 var $34=$2;
 var $35=(($34)|0);
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "%struct.aplcb**", 0, 0);
 $cb=$37;
 var $38=$2;
 var $39=(($38+8)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 $i=$40;
 label=8;break;
 case 8: 
 var $42=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $43=($42|0)==0;
 if($43){label=9;break;}else{var $48=0;label=10;break;}
 case 9: 
 var $45=$i;
 var $46=($45|0)!=0;
 var $48=$46;label=10;break;
 case 10: 
 var $48;
 if($48){label=11;break;}else{label=20;break;}
 case 11: 
 var $50=$dtype;
 var $51=$cb;
 var $52=(($51+4)|0);
 $cb=$52;
 var $53=SAFE_HEAP_LOAD($51, "%struct.aplcb*", 0, 0);
 $wrk=$53;
 var $54=(($53+4)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=$55&110;
 var $57=_typeget($50,$56);
 $dtype=$57;
 var $58=$wrk;
 var $59=(($58+12)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=($60|0)!=0;
 if($61){label=12;break;}else{label=18;break;}
 case 12: 
 var $63=$rank;
 var $64=($63|0)==0;
 if($64){label=13;break;}else{label=14;break;}
 case 13: 
 var $66=$wrk;
 var $67=(($66+12)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 $rank=$68;
 label=17;break;
 case 14: 
 var $70=$rank;
 var $71=$wrk;
 var $72=(($71+12)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $74=($70|0)!=($73|0);
 if($74){label=15;break;}else{label=16;break;}
 case 15: 
 SAFE_HEAP_STORE(4592, 122, "i32", 0);
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $80=$i;
 var $81=((($80)-(1))|0);
 $i=$81;
 label=8;break;
 case 20: 
 var $83=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $84=($83|0)==0;
 if($84){label=21;break;}else{label=22;break;}
 case 21: 
 var $86=$2;
 var $87=$3;
 var $88=$dtype;
 var $89=$rank;
 var $90=_disclosf($86,$87,$88,$89);
 $out=$90;
 label=22;break;
 case 22: 
 var $92=$tempsave;
 var $93=$2;
 var $94=(($93+4)|0);
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $96=((($95)+($92))|0);
 SAFE_HEAP_STORE($94, $96, "i32", 0);
 var $97=$2;
 var $98=$out;
 var $99=_errstop(0,0,$97,$98);
 $1=$99;
 label=23;break;
 case 23: 
 var $101=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $101;
  default: assert(0, "bad label: " + label);
 }

}


function _disclosf($rite,$axes,$dtype,$rank){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ax;
 var $cb;
 var $rx;
 var $wrk;
 var $i;
 var $ip;
 var $j;
 var $jp;
 var $k;
 var $kp;
 var $m;
 var $n;
 $1=$rite;
 $2=$axes;
 $3=$dtype;
 $4=$rank;
 $ax=0;
 $rx=0;
 label=2;break;
 case 2: 
 var $6=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 label=29;break;
 case 4: 
 var $10=$2;
 var $11=($10|0)!=0;
 if($11){label=5;break;}else{label=9;break;}
 case 5: 
 var $13=$2;
 var $14=$4;
 var $15=$4;
 var $16=$1;
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=((($15)+($18))|0);
 var $20=_axesok($13,$14,$19);
 $2=$20;
 var $21=0==($20|0);
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 label=29;break;
 case 7: 
 label=8;break;
 case 8: 
 label=10;break;
 case 9: 
 var $26=$1;
 var $27=(($26+12)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=_iscalar($28);
 var $30=$4;
 var $31=_indxsub($30);
 var $32=_idyadic((344),$29,$31);
 $2=$32;
 label=10;break;
 case 10: 
 var $34=$4;
 var $35=$1;
 var $36=(($35+12)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=((($34)+($37))|0);
 var $39=_getcb(0,$38,5,1,0);
 $ax=$39;
 var $40=$1;
 var $41=(($40+12)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=_getcb(0,$42,5,1,0);
 $rx=$43;
 var $44=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $45=($44|0)!=0;
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 label=29;break;
 case 12: 
 var $48=$ax;
 var $49=(($48)|0);
 var $50=$49;
 var $51=SAFE_HEAP_LOAD($50, "i32*", 0, 0);
 $ip=$51;
 var $52=$ax;
 var $53=(($52+8)|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 $i=$54;
 label=13;break;
 case 13: 
 var $56=$i;
 var $57=((($56)-(1))|0);
 $i=$57;
 var $58=($56|0)!=0;
 if($58){label=14;break;}else{label=15;break;}
 case 14: 
 var $60=$ip;
 var $61=$i;
 var $62=(($60+($61<<2))|0);
 SAFE_HEAP_STORE($62, -1, "i32", 0);
 label=13;break;
 case 15: 
 var $64=$2;
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "i32*", 0, 0);
 $jp=$67;
 $i=0;
 label=16;break;
 case 16: 
 var $69=$i;
 var $70=$2;
 var $71=(($70+8)|0);
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=($69|0)<($72|0);
 if($73){label=17;break;}else{label=28;break;}
 case 17: 
 var $75=$ax;
 var $76=(($75)|0);
 var $77=$76;
 var $78=SAFE_HEAP_LOAD($77, "i32*", 0, 0);
 var $79=$jp;
 var $80=(($79+4)|0);
 $jp=$80;
 var $81=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 var $82=(($78+($81<<2))|0);
 var $83=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $84=(((-$83))|0);
 var $85=(($82+($84<<2))|0);
 $ip=$85;
 var $86=$1;
 var $87=(($86)|0);
 var $88=$87;
 var $89=SAFE_HEAP_LOAD($88, "%struct.aplcb**", 0, 0);
 $cb=$89;
 var $90=$1;
 var $91=(($90+8)|0);
 var $92=SAFE_HEAP_LOAD($91, "i32", 0, 0);
 $j=$92;
 label=18;break;
 case 18: 
 var $94=$j;
 var $95=($94|0)!=0;
 if($95){label=19;break;}else{label=26;break;}
 case 19: 
 var $97=$cb;
 var $98=(($97+4)|0);
 $cb=$98;
 var $99=SAFE_HEAP_LOAD($97, "%struct.aplcb*", 0, 0);
 $wrk=$99;
 var $100=$wrk;
 var $101=(($100+12)|0);
 var $102=SAFE_HEAP_LOAD($101, "i32", 0, 0);
 var $103=($102|0)!=0;
 if($103){label=20;break;}else{label=24;break;}
 case 20: 
 var $105=$wrk;
 var $106=(($105+16)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32*", 0, 0);
 var $108=$i;
 var $109=(($107+($108<<2))|0);
 var $110=SAFE_HEAP_LOAD($109, "i32", 0, 0);
 $k=$110;
 var $111=$ip;
 var $112=SAFE_HEAP_LOAD($111, "i32", 0, 0);
 $m=$112;
 var $113=$k;
 var $114=$m;
 var $115=($113|0)>($114|0);
 if($115){label=21;break;}else{label=22;break;}
 case 21: 
 var $117=$k;
 var $121=$117;label=23;break;
 case 22: 
 var $119=$m;
 var $121=$119;label=23;break;
 case 23: 
 var $121;
 var $122=$ip;
 SAFE_HEAP_STORE($122, $121, "i32", 0);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $125=$j;
 var $126=((($125)-(1))|0);
 $j=$126;
 label=18;break;
 case 26: 
 label=27;break;
 case 27: 
 var $129=$i;
 var $130=((($129)+(1))|0);
 $i=$130;
 label=16;break;
 case 28: 
 label=29;break;
 case 29: 
 var $133=$1;
 var $134=$2;
 var $135=$ax;
 var $136=$rx;
 var $137=$3;
 var $138=_disclosg($133,$134,$135,$136,$137);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $138;
  default: assert(0, "bad label: " + label);
 }

}


function _disclosg($rite,$axes,$ix,$rx,$dtype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $cnt;
 var $i;
 var $ip;
 var $j;
 var $jp;
 var $k;
 var $kp;
 var $out;
 $1=$rite;
 $2=$axes;
 $3=$ix;
 $4=$rx;
 $5=$dtype;
 $out=0;
 label=2;break;
 case 2: 
 var $7=_errinit();
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 label=19;break;
 case 4: 
 var $11=$3;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)!=0;
 if($14){label=5;break;}else{label=12;break;}
 case 5: 
 $cnt=1;
 var $16=$3;
 var $17=(($16)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "i32*", 0, 0);
 $ip=$19;
 var $20=$1;
 var $21=(($20+16)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 $jp=$22;
 var $23=$4;
 var $24=(($23)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "i32*", 0, 0);
 $kp=$26;
 $i=0;
 label=6;break;
 case 6: 
 var $28=$i;
 var $29=$3;
 var $30=(($29+8)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=($28|0)<($31|0);
 if($32){label=7;break;}else{label=11;break;}
 case 7: 
 var $34=$ip;
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=($35|0)==-1;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$jp;
 var $39=(($38+4)|0);
 $jp=$39;
 var $40=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $41=$ip;
 SAFE_HEAP_STORE($41, $40, "i32", 0);
 var $42=$i;
 var $43=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $44=((($42)+($43))|0);
 var $45=$kp;
 var $46=(($45+4)|0);
 $kp=$46;
 SAFE_HEAP_STORE($45, $44, "i32", 0);
 label=9;break;
 case 9: 
 var $48=$ip;
 var $49=(($48+4)|0);
 $ip=$49;
 var $50=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 var $51=$cnt;
 var $52=(Math_imul($51,$50)|0);
 $cnt=$52;
 label=10;break;
 case 10: 
 var $54=$i;
 var $55=((($54)+(1))|0);
 $i=$55;
 label=6;break;
 case 11: 
 label=13;break;
 case 12: 
 $cnt=0;
 label=13;break;
 case 13: 
 var $59=$cnt;
 var $60=$5;
 var $61=((($60)+(1))|0);
 var $62=$3;
 var $63=(($62+8)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 $i=$64;
 var $65=_getcb(0,$59,$61,$64,0);
 $out=$65;
 var $66=($65|0)!=0;
 if($66){label=14;break;}else{label=15;break;}
 case 14: 
 var $68=$out;
 var $69=(($68+16)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32*", 0, 0);
 var $71=$70;
 var $72=$3;
 var $73=(($72)|0);
 var $74=$73;
 var $75=SAFE_HEAP_LOAD($74, "i32*", 0, 0);
 var $76=$75;
 var $77=$i;
 var $78=_intcopy($71,$76,$77,1);
 var $79=$78;
 $ip=$79;
 label=15;break;
 case 15: 
 var $81=$out;
 var $82=(($81+16)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32*", 0, 0);
 $jp=$83;
 var $84=$3;
 var $85=(($84)|0);
 var $86=$85;
 var $87=SAFE_HEAP_LOAD($86, "i32*", 0, 0);
 $ip=$87;
 var $88=$3;
 var $89=(($88+8)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 $i=$90;
 label=16;break;
 case 16: 
 var $92=$i;
 var $93=((($92)-(1))|0);
 $i=$93;
 var $94=($92|0)!=0;
 if($94){label=17;break;}else{label=18;break;}
 case 17: 
 var $96=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $97=((($96)-(1))|0);
 var $98=$ip;
 var $99=$i;
 var $100=(($98+($99<<2))|0);
 SAFE_HEAP_STORE($100, $97, "i32", 0);
 label=16;break;
 case 18: 
 var $102=$1;
 var $103=(($102+12)|0);
 var $104=SAFE_HEAP_LOAD($103, "i32", 0, 0);
 var $105=$1;
 var $106=(($105+16)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32*", 0, 0);
 var $108=$1;
 var $109=(($108)|0);
 var $110=$109;
 var $111=SAFE_HEAP_LOAD($110, "%struct.aplcb**", 0, 0);
 var $112=$out;
 var $113=(($112+12)|0);
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 var $115=$out;
 var $116=(($115+4)|0);
 var $117=SAFE_HEAP_LOAD($116, "i32", 0, 0);
 var $118=$117&110;
 var $119=$out;
 var $120=(($119+8)|0);
 var $121=SAFE_HEAP_LOAD($120, "i32", 0, 0);
 var $122=$out;
 var $123=(($122)|0);
 var $124=$123;
 var $125=SAFE_HEAP_LOAD($124, "i8*", 0, 0);
 var $126=$2;
 var $127=(($126+8)|0);
 var $128=SAFE_HEAP_LOAD($127, "i32", 0, 0);
 var $129=$2;
 var $130=(($129)|0);
 var $131=$130;
 var $132=SAFE_HEAP_LOAD($131, "i32*", 0, 0);
 var $133=$4;
 var $134=(($133)|0);
 var $135=$134;
 var $136=SAFE_HEAP_LOAD($135, "i32*", 0, 0);
 var $137=$ip;
 var $138=$jp;
 _disclosh($104,$107,$111,$114,$118,$121,$125,$128,$132,$136,$137,$138);
 label=19;break;
 case 19: 
 var $140=$4;
 _endoper($140);
 var $141=$2;
 var $142=$3;
 var $143=$out;
 var $144=_errstop(0,$141,$142,$143);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $144;
  default: assert(0, "bad label: " + label);
 }

}


function _disclosh($riterank,$ritedim,$cb,$outrank,$otype,$r,$op,$axescnt,$mp,$rp,$ixp,$jxp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $ap;
 var $ob;
 var $wrk;
 var $dp;
 var $i;
 var $ip;
 var $itype;
 var $j=sp;
 var $k;
 var $np;
 var $p;
 var $v;
 var $ch;
 var $cp;
 $1=$riterank;
 $2=$ritedim;
 $3=$cb;
 $4=$outrank;
 $5=$otype;
 $6=$r;
 $7=$op;
 $8=$axescnt;
 $9=$mp;
 $10=$rp;
 $11=$ixp;
 $12=$jxp;
 SAFE_HEAP_STORE($j, 1, "i32", 0);
 var $13=$7;
 var $14=$13;
 $ap=$14;
 var $15=$7;
 $cp=$15;
 var $16=$7;
 var $17=$16;
 $dp=$17;
 var $18=$7;
 var $19=$18;
 $ip=$19;
 label=2;break;
 case 2: 
 var $21=$6;
 var $22=((($21)-(1))|0);
 $6=$22;
 var $23=($21|0)!=0;
 if($23){label=3;break;}else{var $28=0;label=4;break;}
 case 3: 
 var $25=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $26=($25|0)==0;
 var $28=$26;label=4;break;
 case 4: 
 var $28;
 if($28){label=5;break;}else{label=34;break;}
 case 5: 
 var $30=$11;
 var $31=$12;
 var $32=$4;
 var $33=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 _indices($30,$31,$j,$32,$33);
 var $34=$3;
 var $35=$1;
 var $36=$10;
 var $37=$11;
 var $38=$2;
 var $39=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $40=_indexno($35,$36,$37,$38,$39);
 var $41=(($34+($40<<2))|0);
 var $42=SAFE_HEAP_LOAD($41, "%struct.aplcb*", 0, 0);
 $wrk=$42;
 var $43=$wrk;
 var $44=(($43+4)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=$45&110;
 $itype=$46;
 var $47=$8;
 var $48=$9;
 var $49=$11;
 var $50=$wrk;
 var $51=(($50+16)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32*", 0, 0);
 var $53=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $54=_indexno($47,$48,$49,$52,$53);
 $p=$54;
 var $55=$p;
 var $56=($55|0)<0;
 if($56){label=7;break;}else{label=6;break;}
 case 6: 
 var $58=$p;
 var $59=$wrk;
 var $60=(($59+8)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=($58|0)>=($61|0);
 if($62){label=7;break;}else{label=19;break;}
 case 7: 
 var $64=$5;
 var $65=$itype;
 var $66=($64|0)==($65|0);
 if($66){label=8;break;}else{label=12;break;}
 case 8: 
 var $68=$5;
 var $69=($68|0)==32;
 if($69){label=9;break;}else{label=10;break;}
 case 9: 
 var $71=$7;
 var $72=$71;
 $ap=$72;
 var $73=$wrk;
 var $74=_apltype($73);
 var $75=$ap;
 var $76=(($75+4)|0);
 $ap=$76;
 SAFE_HEAP_STORE($75, $74, "%struct.aplcb*", 0);
 var $77=$ap;
 var $78=$77;
 $7=$78;
 label=11;break;
 case 10: 
 var $80=$7;
 var $81=$5;
 var $82=_apltypf($80,1,$81);
 $7=$82;
 label=11;break;
 case 11: 
 label=18;break;
 case 12: 
 var $85=$5;
 var $86=($85|0)==32;
 if($86){label=13;break;}else{label=16;break;}
 case 13: 
 var $88=$7;
 var $89=$88;
 $ap=$89;
 var $90=$itype;
 var $91=_getcb(0,1,$90,0,0);
 $ob=$91;
 var $92=$ap;
 var $93=(($92+4)|0);
 $ap=$93;
 SAFE_HEAP_STORE($92, $91, "%struct.aplcb*", 0);
 var $94=$ap;
 var $95=$94;
 $7=$95;
 var $96=$ob;
 var $97=($96|0)!=0;
 if($97){label=14;break;}else{label=15;break;}
 case 14: 
 var $99=$ob;
 var $100=(($99)|0);
 var $101=$100;
 var $102=SAFE_HEAP_LOAD($101, "i8*", 0, 0);
 var $103=$itype;
 var $104=_apltypf($102,1,$103);
 $v=$104;
 label=15;break;
 case 15: 
 label=17;break;
 case 16: 
 var $107=$7;
 var $108=$5;
 var $109=_apltypf($107,1,$108);
 $7=$109;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=33;break;
 case 19: 
 var $113=$wrk;
 var $114=(($113)|0);
 var $115=$114;
 var $116=SAFE_HEAP_LOAD($115, "i8*", 0, 0);
 var $117=$p;
 var $118=$wrk;
 var $119=(($118+20)|0);
 var $120=SAFE_HEAP_LOAD($119, "i32", 0, 0);
 var $121=(Math_imul($117,$120)|0);
 var $122=(($116+$121)|0);
 $ch=$122;
 var $123=$5;
 var $124=$itype;
 var $125=($123|0)==($124|0);
 if($125){label=20;break;}else{label=21;break;}
 case 20: 
 var $127=$7;
 var $128=$ch;
 var $129=$itype;
 var $130=_dtacopy($127,$128,1,1,$129);
 $7=$130;
 label=32;break;
 case 21: 
 var $132=$5;
 if(($132|0)==32){ label=22;break;}else if(($132|0)==64){ label=25;break;}else if(($132|0)==2){ label=29;break;}else{label=30;break;}
 case 22: 
 var $134=$7;
 var $135=$134;
 $ap=$135;
 var $136=$itype;
 var $137=_getcb(0,1,$136,0,0);
 $ob=$137;
 var $138=$ap;
 var $139=(($138+4)|0);
 $ap=$139;
 SAFE_HEAP_STORE($138, $137, "%struct.aplcb*", 0);
 var $140=$ap;
 var $141=$140;
 $7=$141;
 var $142=$ob;
 var $143=($142|0)!=0;
 if($143){label=23;break;}else{label=24;break;}
 case 23: 
 var $145=$ob;
 var $146=(($145)|0);
 var $147=$146;
 var $148=SAFE_HEAP_LOAD($147, "i8*", 0, 0);
 var $149=$ch;
 var $150=$itype;
 var $151=_dtacopy($148,$149,1,1,$150);
 $v=$151;
 label=24;break;
 case 24: 
 label=31;break;
 case 25: 
 var $154=$itype;
 var $155=($154|0)==4;
 if($155){label=26;break;}else{label=27;break;}
 case 26: 
 var $157=$7;
 var $158=$157;
 $dp=$158;
 var $159=$ch;
 var $160=$159;
 var $161=SAFE_HEAP_LOAD($160, "i32", 0, 0);
 var $162=($161|0);
 var $163=$dp;
 var $164=(($163+8)|0);
 $dp=$164;
 SAFE_HEAP_STORE($163, $162, "double", 0);
 var $165=$dp;
 var $166=$165;
 $7=$166;
 label=28;break;
 case 27: 
 var $168=$7;
 var $169=$168;
 $dp=$169;
 var $170=$ch;
 var $171=$170;
 var $172=SAFE_HEAP_LOAD($171, "double", 0, 0);
 var $173=$dp;
 var $174=(($173+8)|0);
 $dp=$174;
 SAFE_HEAP_STORE($173, $172, "double", 0);
 var $175=$dp;
 var $176=(($175+8)|0);
 $dp=$176;
 SAFE_HEAP_STORE($175, 0, "double", 0);
 var $177=$dp;
 var $178=$177;
 $7=$178;
 label=28;break;
 case 28: 
 label=31;break;
 case 29: 
 var $181=$7;
 var $182=$181;
 $dp=$182;
 var $183=$ch;
 var $184=$183;
 var $185=SAFE_HEAP_LOAD($184, "i32", 0, 0);
 var $186=($185|0);
 var $187=$dp;
 var $188=(($187+8)|0);
 $dp=$188;
 SAFE_HEAP_STORE($187, $186, "double", 0);
 var $189=$dp;
 var $190=$189;
 $7=$190;
 label=31;break;
 case 30: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=2;break;
 case 34: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _divide($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$3;
 var $5=$4==0;
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=$2;
 var $8=$7==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $1=1;
 label=6;break;
 case 4: 
 SAFE_HEAP_STORE(4592, 39, "i32", 0);
 $1=0;
 label=6;break;
 case 5: 
 var $12=$2;
 var $13=$3;
 var $14=($12)/($13);
 $1=$14;
 label=6;break;
 case 6: 
 var $16=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }

}


function _dividep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$2;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$5==0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=$1;
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 var $10=$9==0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=$3;
 SAFE_HEAP_STORE($12, 1, "double", 0);
 label=5;break;
 case 4: 
 SAFE_HEAP_STORE(4592, 39, "i32", 0);
 var $14=$3;
 SAFE_HEAP_STORE($14, 0, "double", 0);
 label=5;break;
 case 5: 
 label=7;break;
 case 6: 
 var $17=$1;
 var $18=SAFE_HEAP_LOAD($17, "double", 0, 0);
 var $19=$2;
 var $20=SAFE_HEAP_LOAD($19, "double", 0, 0);
 var $21=($18)/($20);
 var $22=$3;
 SAFE_HEAP_STORE($22, $21, "double", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dividex($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $al;
 var $ar;
 var $bl;
 var $br;
 var $den;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 $al=$5;
 var $6=$1;
 var $7=(($6+8)|0);
 var $8=SAFE_HEAP_LOAD($7, "double", 0, 0);
 $bl=$8;
 var $9=$2;
 var $10=SAFE_HEAP_LOAD($9, "double", 0, 0);
 $ar=$10;
 var $11=$2;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 $br=$13;
 var $14=$ar;
 var $15=$14==0;
 if($15){label=2;break;}else{label=4;break;}
 case 2: 
 var $17=$br;
 var $18=$17==0;
 if($18){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4592, 39, "i32", 0);
 label=5;break;
 case 4: 
 var $21=$ar;
 var $22=$ar;
 var $23=($21)*($22);
 var $24=$br;
 var $25=$br;
 var $26=($24)*($25);
 var $27=($23)+($26);
 $den=$27;
 var $28=$al;
 var $29=$ar;
 var $30=($28)*($29);
 var $31=$bl;
 var $32=$br;
 var $33=($31)*($32);
 var $34=($30)+($33);
 var $35=$den;
 var $36=($34)/($35);
 var $37=$3;
 SAFE_HEAP_STORE($37, $36, "double", 0);
 var $38=$bl;
 var $39=$ar;
 var $40=($38)*($39);
 var $41=$br;
 var $42=$al;
 var $43=($41)*($42);
 var $44=($40)-($43);
 var $45=$den;
 var $46=($44)/($45);
 var $47=$3;
 var $48=(($47+8)|0);
 SAFE_HEAP_STORE($48, $46, "double", 0);
 label=5;break;
 case 5: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _dottran($tok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $axistok=sp;
 var $funtok=(sp)+(8);
 var $op=(sp)+(16);
 var $dp;
 var $code;
 var $noexit;
 var $lfun;
 var $rfun=(sp)+(24);
 $2=$tok;
 $noexit=1;
 var $3=_execfun($rfun);
 $code=$3;
 var $4=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$noexit;
 $1=$7;
 label=21;break;
 case 3: 
 var $9=_newderiv(0,0,0);
 $dp=$9;
 var $10=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $11=($10|0)!=0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$noexit;
 $1=$13;
 label=21;break;
 case 5: 
 var $15=SAFE_HEAP_LOAD($rfun, "i8*", 0, 0);
 var $16=_pickdyad($15);
 var $17=$16;
 var $18=$dp;
 var $19=(($18+52)|0);
 var $20=(($19+8)|0);
 SAFE_HEAP_STORE($20, $17, "i8*", 0);
 var $21=SAFE_HEAP_LOAD($rfun, "i8*", 0, 0);
 var $22=$dp;
 var $23=(($22+52)|0);
 var $24=(($23+4)|0);
 SAFE_HEAP_STORE($24, $21, "i8*", 0);
 var $25=$code;
 var $26=$dp;
 var $27=(($26+52)|0);
 var $28=(($27)|0);
 SAFE_HEAP_STORE($28, $25, "i32", 0);
 var $29=_execnext($funtok,$axistok,$op,0);
 $noexit=$29;
 var $30=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $31=($30|0)==0;
 if($31){label=8;break;}else{label=6;break;}
 case 6: 
 var $33=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $34=($33|0)!=0;
 if($34){label=8;break;}else{label=7;break;}
 case 7: 
 var $36=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $37=($36|0)!=0;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 SAFE_HEAP_STORE(4592, 63, "i32", 0);
 label=9;break;
 case 9: 
 var $40=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $41=($40|0)!=0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $44=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $45=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $46=$dp;
 _slasherr($43,$44,$45,$46);
 var $47=$noexit;
 $1=$47;
 label=21;break;
 case 11: 
 var $49=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $50=(($49+12)|0);
 var $51=$50;
 var $52=SAFE_HEAP_LOAD($51, "i8*", 0, 0);
 $lfun=$52;
 var $53=$dp;
 var $54=(($53+28)|0);
 var $55=(($54+4)|0);
 SAFE_HEAP_STORE($55, $52, "i8*", 0);
 var $56=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $57=(($56+4)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=$dp;
 var $60=(($59+28)|0);
 var $61=(($60)|0);
 SAFE_HEAP_STORE($61, $58, "i32", 0);
 var $62=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 _execfree($62);
 var $63=$lfun;
 var $64=$63;
 var $65=(($64)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=($66|0)==42;
 if($67){label=12;break;}else{label=19;break;}
 case 12: 
 var $69=$dp;
 var $70=(($69+52)|0);
 var $71=(($70+8)|0);
 var $72=SAFE_HEAP_LOAD($71, "i8*", 0, 0);
 var $73=($72|0)==0;
 if($73){label=13;break;}else{label=17;break;}
 case 13: 
 var $75=$dp;
 var $76=(($75+24)|0);
 SAFE_HEAP_STORE($76, (350), "%struct.aplcb* (%struct.aplderiv.457*, %struct.aplcb*, %struct.aplcb*)*", 0);
 var $77=$dp;
 var $78=(($77+52)|0);
 var $79=(($78)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 var $81=-7==($80|0);
 if($81){label=14;break;}else{label=15;break;}
 case 14: 
 var $83=$dp;
 var $84=(($83+52)|0);
 var $85=(($84+16)|0);
 SAFE_HEAP_STORE($85, 11, "i32", 0);
 var $86=$dp;
 var $87=(($86+52)|0);
 var $88=(($87+4)|0);
 var $89=SAFE_HEAP_LOAD($88, "i8*", 0, 0);
 var $90=$89;
 var $91=(($90+24)|0);
 var $92=SAFE_HEAP_LOAD($91, "%struct.aplcb* (%struct.aplderiv.457*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $93=$dp;
 var $94=(($93+52)|0);
 var $95=(($94+20)|0);
 var $96=$95;
 SAFE_HEAP_STORE($96, $92, "%struct.aplcb* (%struct.aplderiv.457*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=16;break;
 case 15: 
 var $98=$dp;
 var $99=(($98+52)|0);
 var $100=(($99+4)|0);
 var $101=SAFE_HEAP_LOAD($100, "i8*", 0, 0);
 var $102=$dp;
 var $103=(($102+52)|0);
 var $104=(($103+8)|0);
 var $105=$dp;
 var $106=(($105+52)|0);
 var $107=(($106+20)|0);
 var $108=_execdyas($101,$104,$107);
 var $109=$dp;
 var $110=(($109+52)|0);
 var $111=(($110+16)|0);
 SAFE_HEAP_STORE($111, $108, "i32", 0);
 label=16;break;
 case 16: 
 label=18;break;
 case 17: 
 var $114=$dp;
 var $115=(($114+24)|0);
 SAFE_HEAP_STORE($115, (64), "%struct.aplcb* (%struct.aplderiv.457*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=18;break;
 case 18: 
 label=20;break;
 case 19: 
 var $118=$dp;
 var $119=(($118+24)|0);
 SAFE_HEAP_STORE($119, (180), "%struct.aplcb* (%struct.aplderiv.457*, %struct.aplcb*, %struct.aplcb*)*", 0);
 var $120=$lfun;
 var $121=_pickdyad($120);
 var $122=$121;
 var $123=$dp;
 var $124=(($123+28)|0);
 var $125=(($124+8)|0);
 SAFE_HEAP_STORE($125, $122, "i8*", 0);
 label=20;break;
 case 20: 
 var $127=$2;
 var $128=(($127+4)|0);
 SAFE_HEAP_STORE($128, -7, "i32", 0);
 var $129=$dp;
 var $130=$129;
 var $131=$2;
 var $132=(($131+12)|0);
 var $133=$132;
 SAFE_HEAP_STORE($133, $130, "i8*", 0);
 var $134=$noexit;
 $1=$134;
 label=21;break;
 case 21: 
 var $136=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $136;
  default: assert(0, "bad label: " + label);
 }

}


function _drop2($left,$rite,$axes){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $newleft;
 var $out;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $rank;
 $2=$left;
 $3=$rite;
 $4=$axes;
 $newleft=0;
 $out=0;
 var $5=$4;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=$3;
 var $10=_drop($8,$9);
 $1=$10;
 label=36;break;
 case 3: 
 label=4;break;
 case 4: 
 var $13=_errinit();
 var $14=($13|0)!=0;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 label=35;break;
 case 6: 
 var $17=$2;
 var $18=(($17+12)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=($19|0)>1;
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 15, "i32", 0);
 label=35;break;
 case 8: 
 var $23=$2;
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=4&$25;
 var $27=($26|0)!=0;
 if($27){label=12;break;}else{label=9;break;}
 case 9: 
 var $29=$2;
 var $30=_integer($29);
 $2=$30;
 var $31=0==($30|0);
 if($31){label=10;break;}else{label=11;break;}
 case 10: 
 label=35;break;
 case 11: 
 label=12;break;
 case 12: 
 var $35=$4;
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=4&$37;
 var $39=($38|0)!=0;
 if($39){label=16;break;}else{label=13;break;}
 case 13: 
 var $41=$4;
 var $42=_integer($41);
 $4=$42;
 var $43=0==($42|0);
 if($43){label=14;break;}else{label=15;break;}
 case 14: 
 label=35;break;
 case 15: 
 label=16;break;
 case 16: 
 var $47=$2;
 var $48=(($47+8)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 var $50=$4;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=($49|0)!=($52|0);
 if($53){label=18;break;}else{label=17;break;}
 case 17: 
 var $55=$2;
 var $56=(($55+8)|0);
 var $57=SAFE_HEAP_LOAD($56, "i32", 0, 0);
 var $58=$3;
 var $59=(($58+12)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=($57|0)>($60|0);
 if($61){label=18;break;}else{label=19;break;}
 case 18: 
 SAFE_HEAP_STORE(4592, 16, "i32", 0);
 label=35;break;
 case 19: 
 var $64=$3;
 var $65=(($64+12)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=_getcb(0,$66,5,1,0);
 $newleft=$67;
 var $68=$newleft;
 var $69=($68|0)==0;
 if($69){label=20;break;}else{label=21;break;}
 case 20: 
 label=35;break;
 case 21: 
 var $72=$newleft;
 var $73=(($72)|0);
 var $74=$73;
 var $75=SAFE_HEAP_LOAD($74, "i32*", 0, 0);
 var $76=$75;
 var $77=$newleft;
 var $78=(($77+8)|0);
 var $79=SAFE_HEAP_LOAD($78, "i32", 0, 0);
 var $80=_intcopy($76,3064,$79,0);
 var $81=$80;
 $ip=$81;
 $i=0;
 label=22;break;
 case 22: 
 var $83=$i;
 var $84=$4;
 var $85=(($84+8)|0);
 var $86=SAFE_HEAP_LOAD($85, "i32", 0, 0);
 var $87=($83|0)<($86|0);
 if($87){label=23;break;}else{label=32;break;}
 case 23: 
 var $89=$4;
 var $90=(($89)|0);
 var $91=$90;
 var $92=SAFE_HEAP_LOAD($91, "i32*", 0, 0);
 var $93=$i;
 var $94=(($92+($93<<2))|0);
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $96=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $97=((($95)-($96))|0);
 $j=$97;
 var $98=$j;
 var $99=($98|0)<0;
 if($99){label=25;break;}else{label=24;break;}
 case 24: 
 var $101=$j;
 var $102=$3;
 var $103=(($102+12)|0);
 var $104=SAFE_HEAP_LOAD($103, "i32", 0, 0);
 var $105=($101|0)>=($104|0);
 if($105){label=25;break;}else{label=26;break;}
 case 25: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=30;break;
 case 26: 
 var $108=$newleft;
 var $109=(($108)|0);
 var $110=$109;
 var $111=SAFE_HEAP_LOAD($110, "i32*", 0, 0);
 var $112=$j;
 var $113=(($111+($112<<2))|0);
 $ip=$113;
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 var $115=0!=($114|0);
 if($115){label=27;break;}else{label=28;break;}
 case 27: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=29;break;
 case 28: 
 var $118=$2;
 var $119=(($118)|0);
 var $120=$119;
 var $121=SAFE_HEAP_LOAD($120, "i32*", 0, 0);
 var $122=$i;
 var $123=(($121+($122<<2))|0);
 var $124=SAFE_HEAP_LOAD($123, "i32", 0, 0);
 var $125=$ip;
 SAFE_HEAP_STORE($125, $124, "i32", 0);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $129=$i;
 var $130=((($129)+(1))|0);
 $i=$130;
 label=22;break;
 case 32: 
 var $132=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $133=($132|0)!=0;
 if($133){label=33;break;}else{label=34;break;}
 case 33: 
 label=35;break;
 case 34: 
 var $136=$2;
 _endoper($136);
 var $137=$4;
 _endoper($137);
 var $138=$newleft;
 var $139=$3;
 var $140=_drop($138,$139);
 $1=$140;
 label=36;break;
 case 35: 
 var $142=$newleft;
 _endoper($142);
 var $143=$4;
 _endoper($143);
 var $144=$2;
 var $145=$3;
 var $146=_errstop(0,$144,$145,0);
 $1=$146;
 label=36;break;
 case 36: 
 var $148=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $148;
  default: assert(0, "bad label: " + label);
 }

}


function _drop($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $dimcb;
 var $takecb;
 var $savetemp;
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 var $4=_takeck($2,$3);
 var $5=1!=($4|0);
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $11=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $12=_errstop(0,$10,$11,0);
 $1=$12;
 label=7;break;
 case 4: 
 var $14=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$16&1;
 $savetemp=$17;
 var $18=($17|0)!=0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=((($22)-(1))|0);
 SAFE_HEAP_STORE($21, $23, "i32", 0);
 label=6;break;
 case 6: 
 var $25=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $26=_shape($25);
 var $27=_perm($26);
 $dimcb=$27;
 var $28=_iscalar(0);
 var $29=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $30=_idyadic((88),$28,$29);
 var $31=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $32=_imonadic((286),$31);
 var $33=_imonadic((260),$32);
 var $34=_idyadic((344),$30,$33);
 var $35=$dimcb;
 var $36=$dimcb;
 var $37=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $38=_imonadic((384),$37);
 var $39=_idyadic((338),$36,$38);
 var $40=_idyadic((102),$35,$39);
 var $41=_idyadic((72),$34,$40);
 var $42=_perm($41);
 $takecb=$42;
 var $43=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $44=_temp($43);
 var $45=_endoper($44);
 var $46=$dimcb;
 var $47=_temp($46);
 var $48=_endoper($47);
 var $49=$savetemp;
 var $50=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $51=(($50+4)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=((($52)+($49))|0);
 SAFE_HEAP_STORE($51, $53, "i32", 0);
 var $54=$takecb;
 var $55=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $56=_takeit($54,$55);
 $1=$56;
 label=7;break;
 case 7: 
 var $58=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $58;
  default: assert(0, "bad label: " + label);
 }

}


function _dtacopy($to,$from,$count,$incr,$type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $myto;
 var $myfrom;
 var $i;
 var $wrk;
 var $fr;
 $2=$to;
 $3=$from;
 $4=$count;
 $5=$incr;
 $6=$type;
 var $7=$6;
 switch(($7|0)){case 32:{ label=10;break;}case 64:{ label=2;break;}case 2:{ label=7;break;}case 4:{ label=8;break;}case 8:{ label=9;break;}default:{label=14;break;}}break;
 case 2: 
 var $9=$4;
 $i=$9;
 label=3;break;
 case 3: 
 var $11=$i;
 var $12=($11|0)!=0;
 if($12){label=4;break;}else{label=6;break;}
 case 4: 
 var $14=$2;
 var $15=$3;
 var $16=_dblcopy($14,$15,2,1);
 $2=$16;
 var $17=$3;
 var $18=$17;
 $fr=$18;
 var $19=$5;
 var $20=($19<<1);
 var $21=$fr;
 var $22=(($21+($20<<3))|0);
 $fr=$22;
 var $23=$fr;
 var $24=$23;
 $3=$24;
 label=5;break;
 case 5: 
 var $26=$i;
 var $27=((($26)-(1))|0);
 $i=$27;
 label=3;break;
 case 6: 
 var $29=$2;
 $1=$29;
 label=15;break;
 case 7: 
 var $31=$2;
 var $32=$3;
 var $33=$4;
 var $34=$5;
 var $35=_dblcopy($31,$32,$33,$34);
 $1=$35;
 label=15;break;
 case 8: 
 var $37=$2;
 var $38=$3;
 var $39=$4;
 var $40=$5;
 var $41=_intcopy($37,$38,$39,$40);
 $1=$41;
 label=15;break;
 case 9: 
 var $43=$2;
 var $44=$3;
 var $45=$4;
 var $46=$5;
 var $47=_chrcopy($43,$44,$45,$46);
 $1=$47;
 label=15;break;
 case 10: 
 var $49=$2;
 var $50=$49;
 $myto=$50;
 var $51=$3;
 var $52=$51;
 $myfrom=$52;
 label=11;break;
 case 11: 
 var $54=$4;
 var $55=((($54)-(1))|0);
 $4=$55;
 var $56=($54|0)!=0;
 if($56){label=12;break;}else{label=13;break;}
 case 12: 
 var $58=$myfrom;
 var $59=SAFE_HEAP_LOAD($58, "%struct.aplcb*", 0, 0);
 var $60=_aplcopy($59);
 var $61=$myto;
 var $62=(($61+4)|0);
 $myto=$62;
 SAFE_HEAP_STORE($61, $60, "%struct.aplcb*", 0);
 var $63=$5;
 var $64=$myfrom;
 var $65=(($64+($63<<2))|0);
 $myfrom=$65;
 label=11;break;
 case 13: 
 var $67=$myto;
 var $68=$67;
 $1=$68;
 label=15;break;
 case 14: 
 $1=0;
 label=15;break;
 case 15: 
 var $71=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $71;
  default: assert(0, "bad label: " + label);
 }

}


function _dublin($a,$b,$c,$d,$e){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $s=sp;
 var $t;
 var $div=(sp)+(8);
 var $mul;
 var $val=(sp)+(16);
 var $exp;
 var $expsign;
 var $i;
 var $sign=(sp)+(24);
 var $sw;
 $2=$a;
 $3=$b;
 $4=$c;
 $5=$d;
 $6=$e;
 var $7=$2;
 var $8=$6;
 var $9=_dublins($7,$8,$s,$sign,$val,$div);
 $sw=$9;
 var $10=$sw;
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=43;break;
 case 3: 
 var $14=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 $t=$14;
 $exp=0;
 $expsign=1;
 var $15=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $16=$6;
 var $17=($15>>>0)<($16>>>0);
 if($17){label=4;break;}else{label=16;break;}
 case 4: 
 var $19=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $20=SAFE_HEAP_LOAD($19, "i8", 0, 0);
 var $21=(($20<<24)>>24);
 var $22=((((SAFE_HEAP_LOAD(6668, "i8", 1, 0))|(SAFE_HEAP_LOAD(6669, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6670, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6671, "i8", 1, 0)<<24))|0));
 var $23=SAFE_HEAP_LOAD($22, "i8", 0, 0);
 var $24=(($23<<24)>>24);
 var $25=($21|0)==($24|0);
 if($25){label=5;break;}else{label=16;break;}
 case 5: 
 var $27=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $28=(($27+1)|0);
 SAFE_HEAP_STORE($s, $28, "i8*", 0);
 var $29=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $30=$6;
 var $31=($29>>>0)<($30>>>0);
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 var $33=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $34=SAFE_HEAP_LOAD($33, "i8", 0, 0);
 var $35=(($34<<24)>>24);
 var $36=((((SAFE_HEAP_LOAD(6276, "i8", 1, 0))|(SAFE_HEAP_LOAD(6277, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6278, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6279, "i8", 1, 0)<<24))|0));
 var $37=SAFE_HEAP_LOAD($36, "i8", 0, 0);
 var $38=(($37<<24)>>24);
 var $39=($35|0)==($38|0);
 if($39){label=8;break;}else{label=7;break;}
 case 7: 
 var $41=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $42=SAFE_HEAP_LOAD($41, "i8", 0, 0);
 var $43=(($42<<24)>>24);
 var $44=((((SAFE_HEAP_LOAD(6284, "i8", 1, 0))|(SAFE_HEAP_LOAD(6285, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6286, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6287, "i8", 1, 0)<<24))|0));
 var $45=SAFE_HEAP_LOAD($44, "i8", 0, 0);
 var $46=(($45<<24)>>24);
 var $47=($43|0)==($46|0);
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $50=(($49+1)|0);
 SAFE_HEAP_STORE($s, $50, "i8*", 0);
 var $51=SAFE_HEAP_LOAD($49, "i8", 0, 0);
 var $52=(($51<<24)>>24);
 var $53=((((SAFE_HEAP_LOAD(6276, "i8", 1, 0))|(SAFE_HEAP_LOAD(6277, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6278, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6279, "i8", 1, 0)<<24))|0));
 var $54=SAFE_HEAP_LOAD($53, "i8", 0, 0);
 var $55=(($54<<24)>>24);
 var $56=($52|0)==($55|0);
 var $57=($56?1:-1);
 $expsign=$57;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $60=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $61=$6;
 var $62=($60>>>0)<($61>>>0);
 if($62){label=11;break;}else{var $80=0;label=13;break;}
 case 11: 
 var $64=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $65=SAFE_HEAP_LOAD($64, "i8", 0, 0);
 var $66=(($65<<24)>>24);
 var $67=((((SAFE_HEAP_LOAD(6296, "i8", 1, 0))|(SAFE_HEAP_LOAD(6297, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6298, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6299, "i8", 1, 0)<<24))|0));
 var $68=SAFE_HEAP_LOAD($67, "i8", 0, 0);
 var $69=(($68<<24)>>24);
 var $70=($66|0)>=($69|0);
 if($70){label=12;break;}else{var $80=0;label=13;break;}
 case 12: 
 var $72=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $73=SAFE_HEAP_LOAD($72, "i8", 0, 0);
 var $74=(($73<<24)>>24);
 var $75=((((SAFE_HEAP_LOAD(6332, "i8", 1, 0))|(SAFE_HEAP_LOAD(6333, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6334, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6335, "i8", 1, 0)<<24))|0));
 var $76=SAFE_HEAP_LOAD($75, "i8", 0, 0);
 var $77=(($76<<24)>>24);
 var $78=($74|0)<=($77|0);
 var $80=$78;label=13;break;
 case 13: 
 var $80;
 if($80){label=14;break;}else{label=15;break;}
 case 14: 
 var $82=$exp;
 var $83=((($82)*(10))&-1);
 var $84=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $85=(($84+1)|0);
 SAFE_HEAP_STORE($s, $85, "i8*", 0);
 var $86=SAFE_HEAP_LOAD($84, "i8", 0, 0);
 var $87=(($86<<24)>>24);
 var $88=((((SAFE_HEAP_LOAD(6296, "i8", 1, 0))|(SAFE_HEAP_LOAD(6297, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6298, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6299, "i8", 1, 0)<<24))|0));
 var $89=SAFE_HEAP_LOAD($88, "i8", 0, 0);
 var $90=(($89<<24)>>24);
 var $91=((($87)-($90))|0);
 var $92=((($83)+($91))|0);
 $exp=$92;
 $sw=3;
 label=10;break;
 case 15: 
 label=16;break;
 case 16: 
 var $95=$sw;
 var $96=($95|0)!=3;
 if($96){label=17;break;}else{label=18;break;}
 case 17: 
 var $98=$t;
 SAFE_HEAP_STORE($s, $98, "i8*", 0);
 $exp=0;
 $expsign=1;
 label=18;break;
 case 18: 
 var $100=$sw;
 var $101=($100|0)>1;
 if($101){label=19;break;}else{label=34;break;}
 case 19: 
 var $103=$5;
 SAFE_HEAP_STORE($103, 1, "i32", 0);
 $mul=1;
 var $104=$expsign;
 var $105=($104|0)==1;
 if($105){label=20;break;}else{label=27;break;}
 case 20: 
 label=21;break;
 case 21: 
 var $108=$exp;
 var $109=((($108)-(1))|0);
 $exp=$109;
 var $110=0<($108|0);
 if($110){label=22;break;}else{label=26;break;}
 case 22: 
 var $112=SAFE_HEAP_LOAD($div, "double", 0, 0);
 var $113=$112>1;
 if($113){label=23;break;}else{label=24;break;}
 case 23: 
 var $115=SAFE_HEAP_LOAD($div, "double", 0, 0);
 var $116=($115)/(10);
 SAFE_HEAP_STORE($div, $116, "double", 0);
 label=25;break;
 case 24: 
 var $118=$mul;
 var $119=($118)*(10);
 $mul=$119;
 label=25;break;
 case 25: 
 label=21;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $124=$exp;
 var $125=((($124)-(1))|0);
 $exp=$125;
 var $126=0<($124|0);
 if($126){label=29;break;}else{label=33;break;}
 case 29: 
 var $128=$mul;
 var $129=$128>1;
 if($129){label=30;break;}else{label=31;break;}
 case 30: 
 var $131=$mul;
 var $132=($131)/(10);
 $mul=$132;
 label=32;break;
 case 31: 
 var $134=SAFE_HEAP_LOAD($div, "double", 0, 0);
 var $135=($134)*(10);
 SAFE_HEAP_STORE($div, $135, "double", 0);
 label=32;break;
 case 32: 
 label=28;break;
 case 33: 
 var $138=SAFE_HEAP_LOAD($sign, "i32", 0, 0);
 var $139=($138|0);
 var $140=$mul;
 var $141=($139)*($140);
 var $142=SAFE_HEAP_LOAD($div, "double", 0, 0);
 var $143=($141)/($142);
 var $144=SAFE_HEAP_LOAD($val, "double", 0, 0);
 var $145=($143)*($144);
 var $146=$3;
 SAFE_HEAP_STORE($146, $145, "double", 0);
 label=35;break;
 case 34: 
 var $148=$5;
 SAFE_HEAP_STORE($148, 0, "i32", 0);
 var $149=SAFE_HEAP_LOAD($val, "double", 0, 0);
 var $150=SAFE_HEAP_LOAD($sign, "i32", 0, 0);
 var $151=($150|0);
 var $152=($149)*($151);
 var $153=(($152)&-1);
 var $154=$4;
 SAFE_HEAP_STORE($154, $153, "i32", 0);
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $157=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $158=$6;
 var $159=($157>>>0)<($158>>>0);
 if($159){label=37;break;}else{label=38;break;}
 case 37: 
 var $161=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $162=SAFE_HEAP_LOAD($161, "i8", 0, 0);
 var $163=(($162<<24)>>24);
 var $164=((((SAFE_HEAP_LOAD(6232, "i8", 1, 0))|(SAFE_HEAP_LOAD(6233, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6234, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6235, "i8", 1, 0)<<24))|0));
 var $165=SAFE_HEAP_LOAD($164, "i8", 0, 0);
 var $166=(($165<<24)>>24);
 var $167=($163|0)==($166|0);
 if($167){var $179=1;label=40;break;}else{label=38;break;}
 case 38: 
 var $169=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $170=SAFE_HEAP_LOAD($169, "i8", 0, 0);
 var $171=(($170<<24)>>24);
 var $172=($171|0)==10;
 if($172){var $179=1;label=40;break;}else{label=39;break;}
 case 39: 
 var $174=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $175=SAFE_HEAP_LOAD($174, "i8", 0, 0);
 var $176=(($175<<24)>>24);
 var $177=($176|0)==9;
 var $179=$177;label=40;break;
 case 40: 
 var $179;
 if($179){label=41;break;}else{label=42;break;}
 case 41: 
 var $181=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $182=(($181+1)|0);
 SAFE_HEAP_STORE($s, $182, "i8*", 0);
 label=36;break;
 case 42: 
 var $184=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $185=$2;
 var $186=$184;
 var $187=$185;
 var $188=((($186)-($187))|0);
 $1=$188;
 label=43;break;
 case 43: 
 var $190=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $190;
  default: assert(0, "bad label: " + label);
 }

}


function _dublins($a,$e,$sp,$signp,$valp,$divp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $sw;
 var $s;
 $1=$a;
 $2=$e;
 $3=$sp;
 $4=$signp;
 $5=$valp;
 $6=$divp;
 $sw=0;
 var $7=$1;
 $s=$7;
 label=2;break;
 case 2: 
 var $9=$s;
 var $10=$2;
 var $11=($9>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 var $13=$s;
 var $14=SAFE_HEAP_LOAD($13, "i8", 0, 0);
 var $15=(($14<<24)>>24);
 var $16=((((SAFE_HEAP_LOAD(6232, "i8", 1, 0))|(SAFE_HEAP_LOAD(6233, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6234, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6235, "i8", 1, 0)<<24))|0));
 var $17=SAFE_HEAP_LOAD($16, "i8", 0, 0);
 var $18=(($17<<24)>>24);
 var $19=($15|0)==($18|0);
 if($19){var $31=1;label=6;break;}else{label=4;break;}
 case 4: 
 var $21=$s;
 var $22=SAFE_HEAP_LOAD($21, "i8", 0, 0);
 var $23=(($22<<24)>>24);
 var $24=($23|0)==10;
 if($24){var $31=1;label=6;break;}else{label=5;break;}
 case 5: 
 var $26=$s;
 var $27=SAFE_HEAP_LOAD($26, "i8", 0, 0);
 var $28=(($27<<24)>>24);
 var $29=($28|0)==9;
 var $31=$29;label=6;break;
 case 6: 
 var $31;
 if($31){label=7;break;}else{label=9;break;}
 case 7: 
 label=8;break;
 case 8: 
 var $34=$s;
 var $35=(($34+1)|0);
 $s=$35;
 label=2;break;
 case 9: 
 var $37=$4;
 SAFE_HEAP_STORE($37, 1, "i32", 0);
 var $38=$s;
 var $39=$2;
 var $40=($38>>>0)<($39>>>0);
 if($40){label=10;break;}else{label=12;break;}
 case 10: 
 var $42=$s;
 var $43=SAFE_HEAP_LOAD($42, "i8", 0, 0);
 var $44=(($43<<24)>>24);
 var $45=((((SAFE_HEAP_LOAD(6284, "i8", 1, 0))|(SAFE_HEAP_LOAD(6285, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6286, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6287, "i8", 1, 0)<<24))|0));
 var $46=SAFE_HEAP_LOAD($45, "i8", 0, 0);
 var $47=(($46<<24)>>24);
 var $48=($44|0)==($47|0);
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 var $50=$4;
 SAFE_HEAP_STORE($50, -1, "i32", 0);
 var $51=$s;
 var $52=(($51+1)|0);
 $s=$52;
 label=12;break;
 case 12: 
 var $54=$5;
 SAFE_HEAP_STORE($54, 0, "double", 0);
 label=13;break;
 case 13: 
 var $56=$s;
 var $57=$2;
 var $58=($56>>>0)<($57>>>0);
 if($58){label=14;break;}else{var $76=0;label=16;break;}
 case 14: 
 var $60=$s;
 var $61=SAFE_HEAP_LOAD($60, "i8", 0, 0);
 var $62=(($61<<24)>>24);
 var $63=((((SAFE_HEAP_LOAD(6296, "i8", 1, 0))|(SAFE_HEAP_LOAD(6297, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6298, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6299, "i8", 1, 0)<<24))|0));
 var $64=SAFE_HEAP_LOAD($63, "i8", 0, 0);
 var $65=(($64<<24)>>24);
 var $66=($62|0)>=($65|0);
 if($66){label=15;break;}else{var $76=0;label=16;break;}
 case 15: 
 var $68=$s;
 var $69=SAFE_HEAP_LOAD($68, "i8", 0, 0);
 var $70=(($69<<24)>>24);
 var $71=((((SAFE_HEAP_LOAD(6332, "i8", 1, 0))|(SAFE_HEAP_LOAD(6333, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6334, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6335, "i8", 1, 0)<<24))|0));
 var $72=SAFE_HEAP_LOAD($71, "i8", 0, 0);
 var $73=(($72<<24)>>24);
 var $74=($70|0)<=($73|0);
 var $76=$74;label=16;break;
 case 16: 
 var $76;
 if($76){label=17;break;}else{label=19;break;}
 case 17: 
 $sw=1;
 var $78=$5;
 var $79=SAFE_HEAP_LOAD($78, "double", 0, 0);
 var $80=($79)*(10);
 var $81=$s;
 var $82=SAFE_HEAP_LOAD($81, "i8", 0, 0);
 var $83=(($82<<24)>>24);
 var $84=((((SAFE_HEAP_LOAD(6296, "i8", 1, 0))|(SAFE_HEAP_LOAD(6297, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6298, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6299, "i8", 1, 0)<<24))|0));
 var $85=SAFE_HEAP_LOAD($84, "i8", 0, 0);
 var $86=(($85<<24)>>24);
 var $87=((($83)-($86))|0);
 var $88=($87|0);
 var $89=($80)+($88);
 var $90=$5;
 SAFE_HEAP_STORE($90, $89, "double", 0);
 label=18;break;
 case 18: 
 var $92=$s;
 var $93=(($92+1)|0);
 $s=$93;
 label=13;break;
 case 19: 
 var $95=$s;
 var $96=$2;
 var $97=($95>>>0)<($96>>>0);
 if($97){label=20;break;}else{label=24;break;}
 case 20: 
 var $99=$s;
 var $100=SAFE_HEAP_LOAD($99, "i8", 0, 0);
 var $101=(($100<<24)>>24);
 var $102=((((SAFE_HEAP_LOAD(6288, "i8", 1, 0))|(SAFE_HEAP_LOAD(6289, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6290, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6291, "i8", 1, 0)<<24))|0));
 var $103=SAFE_HEAP_LOAD($102, "i8", 0, 0);
 var $104=(($103<<24)>>24);
 var $105=($101|0)==($104|0);
 if($105){label=21;break;}else{label=24;break;}
 case 21: 
 var $107=$s;
 var $108=(($107+1)|0);
 $s=$108;
 var $109=$sw;
 var $110=($109|0)==1;
 if($110){label=22;break;}else{label=23;break;}
 case 22: 
 $sw=2;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $114=$4;
 var $115=SAFE_HEAP_LOAD($114, "i32", 0, 0);
 var $116=($115|0)==1;
 if($116){label=25;break;}else{label=26;break;}
 case 25: 
 var $118=$5;
 var $119=SAFE_HEAP_LOAD($118, "double", 0, 0);
 var $120=$119>2147483647;
 if($120){label=28;break;}else{label=26;break;}
 case 26: 
 var $122=$4;
 var $123=SAFE_HEAP_LOAD($122, "i32", 0, 0);
 var $124=($123|0)==-1;
 if($124){label=27;break;}else{label=29;break;}
 case 27: 
 var $126=$5;
 var $127=SAFE_HEAP_LOAD($126, "double", 0, 0);
 var $128=$127>-2147483648;
 if($128){label=28;break;}else{label=29;break;}
 case 28: 
 $sw=2;
 label=29;break;
 case 29: 
 var $131=$6;
 SAFE_HEAP_STORE($131, 1, "double", 0);
 label=30;break;
 case 30: 
 var $133=$s;
 var $134=$2;
 var $135=($133>>>0)<($134>>>0);
 if($135){label=31;break;}else{var $153=0;label=33;break;}
 case 31: 
 var $137=$s;
 var $138=SAFE_HEAP_LOAD($137, "i8", 0, 0);
 var $139=(($138<<24)>>24);
 var $140=((((SAFE_HEAP_LOAD(6296, "i8", 1, 0))|(SAFE_HEAP_LOAD(6297, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6298, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6299, "i8", 1, 0)<<24))|0));
 var $141=SAFE_HEAP_LOAD($140, "i8", 0, 0);
 var $142=(($141<<24)>>24);
 var $143=($139|0)>=($142|0);
 if($143){label=32;break;}else{var $153=0;label=33;break;}
 case 32: 
 var $145=$s;
 var $146=SAFE_HEAP_LOAD($145, "i8", 0, 0);
 var $147=(($146<<24)>>24);
 var $148=((((SAFE_HEAP_LOAD(6332, "i8", 1, 0))|(SAFE_HEAP_LOAD(6333, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6334, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6335, "i8", 1, 0)<<24))|0));
 var $149=SAFE_HEAP_LOAD($148, "i8", 0, 0);
 var $150=(($149<<24)>>24);
 var $151=($147|0)<=($150|0);
 var $153=$151;label=33;break;
 case 33: 
 var $153;
 if($153){label=34;break;}else{label=36;break;}
 case 34: 
 $sw=2;
 var $155=$5;
 var $156=SAFE_HEAP_LOAD($155, "double", 0, 0);
 var $157=($156)*(10);
 var $158=$s;
 var $159=SAFE_HEAP_LOAD($158, "i8", 0, 0);
 var $160=(($159<<24)>>24);
 var $161=((((SAFE_HEAP_LOAD(6296, "i8", 1, 0))|(SAFE_HEAP_LOAD(6297, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6298, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6299, "i8", 1, 0)<<24))|0));
 var $162=SAFE_HEAP_LOAD($161, "i8", 0, 0);
 var $163=(($162<<24)>>24);
 var $164=((($160)-($163))|0);
 var $165=($164|0);
 var $166=($157)+($165);
 var $167=$5;
 SAFE_HEAP_STORE($167, $166, "double", 0);
 var $168=$6;
 var $169=SAFE_HEAP_LOAD($168, "double", 0, 0);
 var $170=($169)*(10);
 SAFE_HEAP_STORE($168, $170, "double", 0);
 label=35;break;
 case 35: 
 var $172=$s;
 var $173=(($172+1)|0);
 $s=$173;
 label=30;break;
 case 36: 
 var $175=$s;
 var $176=$3;
 SAFE_HEAP_STORE($176, $175, "i8*", 0);
 var $177=$sw;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $177;
  default: assert(0, "bad label: " + label);
 }

}


function _dyadcom($pfun,$pintype,$poutype,$ltype,$rtype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $oper;
 var $fun;
 var $code;
 var $flags;
 $2=$pfun;
 $3=$pintype;
 $4=$poutype;
 $5=$ltype;
 $6=$rtype;
 $oper=0;
 var $7=$2;
 var $8=$7;
 var $9=(($8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 $code=$10;
 var $11=$2;
 var $12=$11;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 $flags=$14;
 if(($14|0)==38){ label=2;break;}else if(($14|0)==7){ label=3;break;}else if(($14|0)==6){ label=4;break;}else{label=5;break;}
 case 2: 
 var $16=$2;
 var $17=$16;
 var $18=(($17)|0);
 var $19=(($18+8)|0);
 $fun=$19;
 label=6;break;
 case 3: 
 var $21=$2;
 var $22=$21;
 var $23=(($22+8)|0);
 $fun=$23;
 label=6;break;
 case 4: 
 var $25=$2;
 var $26=$25;
 var $27=(($26+8)|0);
 $fun=$27;
 label=6;break;
 case 5: 
 $1=0;
 label=10;break;
 case 6: 
 var $30=$5;
 var $31=($30|0)==8;
 if($31){label=8;break;}else{label=7;break;}
 case 7: 
 var $33=$6;
 var $34=($33|0)==8;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=$2;
 var $37=$36;
 $fun=$37;
 label=9;break;
 case 9: 
 var $39=$fun;
 var $40=$39;
 var $41=$3;
 var $42=$4;
 var $43=$5;
 var $44=$6;
 var $45=$flags;
 var $46=$code;
 var $47=_dyadoper($40,$41,$42,$43,$44,$45,$46);
 $1=$47;
 label=10;break;
 case 10: 
 var $49=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }

}


function _dyadicm($left,$rite,$dataout,$leftptr,$riteptr,$leftinc,$riteinc,$dtype){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $big=sp;
 var $lit=(sp)+(8);
 var $out;
 var $dimbig;
 var $dimleft;
 var $dimptr;
 var $dimrite;
 var $i;
 var $ok;
 $2=$left;
 $3=$rite;
 $4=$dataout;
 $5=$leftptr;
 $6=$riteptr;
 $7=$leftinc;
 $8=$riteinc;
 $9=$dtype;
 $out=0;
 var $10=$2;
 var $11=$3;
 var $12=_conform($10,$11,0,$big,$lit);
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $15=$2;
 var $16=$3;
 var $17=$out;
 var $18=_errstop(17,$15,$16,$17);
 $1=$18;
 label=14;break;
 case 3: 
 var $20=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=($22|0)==0;
 if($23){label=4;break;}else{label=8;break;}
 case 4: 
 var $25=$9;
 var $26=($25|0)==32;
 if($26){label=5;break;}else{label=8;break;}
 case 5: 
 var $28=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $29=_aplcopy($28);
 $out=$29;
 var $30=$out;
 var $31=($30|0)==0;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 var $33=$2;
 var $34=$3;
 var $35=$out;
 var $36=_errstop(0,$33,$34,$35);
 $1=$36;
 label=14;break;
 case 7: 
 var $38=$out;
 var $39=(($38+4)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=$40|1;
 SAFE_HEAP_STORE($39, $41, "i32", 0);
 label=13;break;
 case 8: 
 var $43=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $44=(($43+8)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=$9;
 var $47=((($46)+(1))|0);
 var $48=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $49=(($48+12)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=_getcb(0,$45,$47,$50,0);
 $out=$51;
 var $52=$out;
 var $53=($52|0)==0;
 if($53){label=9;break;}else{label=10;break;}
 case 9: 
 var $55=$2;
 var $56=$3;
 var $57=$out;
 var $58=_errstop(0,$55,$56,$57);
 $1=$58;
 label=14;break;
 case 10: 
 var $60=$out;
 var $61=(($60+12)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=($62|0)>1;
 if($63){label=11;break;}else{label=12;break;}
 case 11: 
 var $65=$out;
 var $66=(($65+16)|0);
 var $67=SAFE_HEAP_LOAD($66, "i32*", 0, 0);
 var $68=$67;
 var $69=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $70=(($69+16)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32*", 0, 0);
 var $72=$71;
 var $73=$out;
 var $74=(($73+12)|0);
 var $75=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $76=_intcopy($68,$72,$75,1);
 var $77=$76;
 $dimptr=$77;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $80=$out;
 var $81=(($80)|0);
 var $82=$81;
 var $83=SAFE_HEAP_LOAD($82, "double*", 0, 0);
 var $84=$4;
 SAFE_HEAP_STORE($84, $83, "double*", 0);
 var $85=$2;
 var $86=(($85)|0);
 var $87=$86;
 var $88=SAFE_HEAP_LOAD($87, "double*", 0, 0);
 var $89=$5;
 SAFE_HEAP_STORE($89, $88, "double*", 0);
 var $90=$3;
 var $91=(($90)|0);
 var $92=$91;
 var $93=SAFE_HEAP_LOAD($92, "double*", 0, 0);
 var $94=$6;
 SAFE_HEAP_STORE($94, $93, "double*", 0);
 var $95=$2;
 var $96=(($95+8)|0);
 var $97=SAFE_HEAP_LOAD($96, "i32", 0, 0);
 var $98=($97|0)==1;
 var $99=$98^1;
 var $100=($99&1);
 var $101=$7;
 SAFE_HEAP_STORE($101, $100, "i32", 0);
 var $102=$3;
 var $103=(($102+8)|0);
 var $104=SAFE_HEAP_LOAD($103, "i32", 0, 0);
 var $105=($104|0)==1;
 var $106=$105^1;
 var $107=($106&1);
 var $108=$8;
 SAFE_HEAP_STORE($108, $107, "i32", 0);
 var $109=$out;
 $1=$109;
 label=14;break;
 case 14: 
 var $111=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $111;
  default: assert(0, "bad label: " + label);
 }

}


function _dyadicp($fun,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $oper;
 var $dataout=(sp)+(16);
 var $leftptr=(sp)+(24);
 var $riteptr=(sp)+(32);
 var $i;
 var $linc=(sp)+(40);
 var $ltype;
 var $otype=(sp)+(48);
 var $rinc=(sp)+(56);
 var $rtype;
 var $big;
 var $out;
 $2=$fun;
 SAFE_HEAP_STORE($3, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 $oper=0;
 $out=0;
 label=2;break;
 case 2: 
 var $6=$2;
 var $7=_dyadset($6,$3,$4,$otype);
 $oper=$7;
 var $8=$oper;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4592, 1, "i32", 0);
 label=4;break;
 case 4: 
 var $12=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $13=($12|0)!=0;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 label=16;break;
 case 6: 
 var $16=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$18&78;
 $ltype=$19;
 var $20=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$22&78;
 $rtype=$23;
 var $24=$ltype;
 var $25=$rtype;
 var $26=($24|0)!=($25|0);
 if($26){label=7;break;}else{label=13;break;}
 case 7: 
 var $28=$ltype;
 var $29=$rtype;
 var $30=$28|$29;
 var $31=$30&8;
 var $32=($31|0)!=0;
 if($32){label=8;break;}else{label=13;break;}
 case 8: 
 var $34=$2;
 var $35=$34;
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=($37|0)==38;
 if($38){label=9;break;}else{label=13;break;}
 case 9: 
 var $40=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $41=(($40+12)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $44=(($43+12)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=($42|0)>($45|0);
 if($46){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $52=$48;label=12;break;
 case 11: 
 var $50=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $52=$50;label=12;break;
 case 12: 
 var $52;
 $big=$52;
 var $53=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $54=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $55=$big;
 var $56=$2;
 var $57=$56;
 var $58=(($57)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=($59|0)==62;
 var $61=($60&1);
 var $62=_genint($55,$61);
 var $63=_errstop(0,$53,$54,$62);
 $1=$63;
 label=17;break;
 case 13: 
 var $65=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $66=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $67=SAFE_HEAP_LOAD($otype, "i32", 0, 0);
 var $68=_dyadicm($65,$66,$dataout,$leftptr,$riteptr,$linc,$rinc,$67);
 $out=$68;
 var $69=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $70=($69|0)!=0;
 if($70){label=14;break;}else{label=15;break;}
 case 14: 
 var $72=$out;
 var $73=_errstop(0,0,0,$72);
 $1=$73;
 label=17;break;
 case 15: 
 var $75=$oper;
 var $76=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $77=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $78=$out;
 var $79=_dyadrun($75,$76,$77,$78);
 $out=$79;
 label=16;break;
 case 16: 
 var $81=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $82=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $83=$out;
 var $84=_errstop(0,$81,$82,$83);
 $1=$84;
 label=17;break;
 case 17: 
 var $86=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $86;
  default: assert(0, "bad label: " + label);
 }

}


function _dyadopec($fun,$pintype,$poutype,$ltype,$rtype,$flags){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $oper;
 $2=$fun;
 $3=$pintype;
 $4=$poutype;
 $5=$ltype;
 $6=$rtype;
 $7=$flags;
 $oper=0;
 var $8=$7;
 var $9=($8|0)==38;
 if($9){label=2;break;}else{label=6;break;}
 case 2: 
 var $11=$5;
 var $12=$6;
 var $13=$11|$12;
 var $14=$3;
 SAFE_HEAP_STORE($14, $13, "i32", 0);
 var $15=$4;
 SAFE_HEAP_STORE($15, 4, "i32", 0);
 var $16=$5;
 var $17=$6;
 var $18=($16|0)==($17|0);
 if($18){label=3;break;}else{label=4;break;}
 case 3: 
 var $20=$2;
 var $21=$20;
 var $22=(($21+68)|0);
 var $23=SAFE_HEAP_LOAD($22, "void (i8*, i8*, i32*)*", 0, 0);
 var $24=$23;
 $oper=$24;
 label=5;break;
 case 4: 
 var $26=$2;
 var $27=$26;
 var $28=(($27+76)|0);
 var $29=SAFE_HEAP_LOAD($28, "void (i8*, i8*, i32*)*", 0, 0);
 var $30=$29;
 $oper=$30;
 label=5;break;
 case 5: 
 label=7;break;
 case 6: 
 SAFE_HEAP_STORE(4592, 75, "i32", 0);
 $1=0;
 label=8;break;
 case 7: 
 var $34=$oper;
 $1=$34;
 label=8;break;
 case 8: 
 var $36=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }

}


function _dyadoper($fun,$pintype,$poutype,$ltype,$rtype,$flags,$code){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $oper;
 $2=$fun;
 $3=$pintype;
 $4=$poutype;
 $5=$ltype;
 $6=$rtype;
 $7=$flags;
 $8=$code;
 $oper=0;
 var $9=$5;
 var $10=($9|0)==8;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 var $12=$6;
 var $13=($12|0)==8;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$2;
 var $16=$15;
 var $17=$3;
 var $18=$4;
 var $19=$5;
 var $20=$6;
 var $21=$7;
 var $22=_dyadopec($16,$17,$18,$19,$20,$21);
 $1=$22;
 label=26;break;
 case 4: 
 var $24=$8;
 var $25=($24|0)==47;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=$4;
 SAFE_HEAP_STORE($27, 64, "i32", 0);
 var $28=$3;
 SAFE_HEAP_STORE($28, 64, "i32", 0);
 var $29=$2;
 var $30=(($29+16)|0);
 var $31=(($30+16)|0);
 var $32=SAFE_HEAP_LOAD($31, "void (double*, double*, double*)*", 0, 0);
 var $33=$32;
 $oper=$33;
 label=23;break;
 case 6: 
 var $35=$5;
 var $36=$6;
 var $37=$35|$36;
 switch(($37|0)){case 2:case 6:{ label=10;break;}case 64:case 66:case 68:{ label=18;break;}case 4:{ label=7;break;}default:{label=21;break;}}break;
 case 7: 
 var $39=$4;
 SAFE_HEAP_STORE($39, 4, "i32", 0);
 var $40=$3;
 SAFE_HEAP_STORE($40, 4, "i32", 0);
 var $41=$2;
 var $42=(($41+16)|0);
 var $43=(($42)|0);
 var $44=SAFE_HEAP_LOAD($43, "void (i32*, i32*, i32*)*", 0, 0);
 var $45=$44;
 $oper=$45;
 var $46=0!=($45|0);
 if($46){label=8;break;}else{label=9;break;}
 case 8: 
 label=22;break;
 case 9: 
 label=10;break;
 case 10: 
 var $50=$4;
 SAFE_HEAP_STORE($50, 2, "i32", 0);
 var $51=$3;
 SAFE_HEAP_STORE($51, 2, "i32", 0);
 var $52=$2;
 var $53=(($52+16)|0);
 var $54=(($53+4)|0);
 var $55=SAFE_HEAP_LOAD($54, "void (double*, double*, double*)*", 0, 0);
 var $56=$55;
 $oper=$56;
 var $57=0!=($56|0);
 if($57){label=11;break;}else{label=12;break;}
 case 11: 
 label=22;break;
 case 12: 
 var $60=$7;
 var $61=($60|0)==38;
 if($61){label=14;break;}else{label=13;break;}
 case 13: 
 var $63=$7;
 var $64=($63|0)==6;
 if($64){label=14;break;}else{label=17;break;}
 case 14: 
 var $66=$4;
 SAFE_HEAP_STORE($66, 4, "i32", 0);
 var $67=$2;
 var $68=(($67+16)|0);
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "void (double*, double*, i32*)*", 0, 0);
 var $71=$70;
 $oper=$71;
 var $72=0!=($71|0);
 if($72){label=15;break;}else{label=16;break;}
 case 15: 
 label=22;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $77=$4;
 SAFE_HEAP_STORE($77, 64, "i32", 0);
 var $78=$3;
 SAFE_HEAP_STORE($78, 64, "i32", 0);
 var $79=$2;
 var $80=(($79+16)|0);
 var $81=(($80+16)|0);
 var $82=SAFE_HEAP_LOAD($81, "void (double*, double*, double*)*", 0, 0);
 var $83=$82;
 $oper=$83;
 var $84=$oper;
 var $85=($84|0)==0;
 if($85){label=19;break;}else{label=20;break;}
 case 19: 
 var $87=$4;
 SAFE_HEAP_STORE($87, 4, "i32", 0);
 var $88=$2;
 var $89=(($88+16)|0);
 var $90=(($89+20)|0);
 var $91=SAFE_HEAP_LOAD($90, "void (double*, double*, i32*)*", 0, 0);
 var $92=$91;
 $oper=$92;
 label=20;break;
 case 20: 
 label=22;break;
 case 21: 
 $oper=0;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $97=$oper;
 var $98=($97|0)==0;
 if($98){label=24;break;}else{label=25;break;}
 case 24: 
 var $100=$4;
 SAFE_HEAP_STORE($100, 2, "i32", 0);
 var $101=$3;
 SAFE_HEAP_STORE($101, 2, "i32", 0);
 var $102=$2;
 var $103=(($102+16)|0);
 var $104=(($103+4)|0);
 var $105=SAFE_HEAP_LOAD($104, "void (double*, double*, double*)*", 0, 0);
 var $106=$105;
 $oper=$106;
 label=25;break;
 case 25: 
 var $108=$oper;
 $1=$108;
 label=26;break;
 case 26: 
 var $110=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $110;
  default: assert(0, "bad label: " + label);
 }

}


function _dyadrun($subrtne,$left,$rite,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $dataout;
 var $leftptr;
 var $riteptr;
 var $cnt;
 var $linc;
 var $otype;
 var $rinc;
 var $tempsave;
 var $dblout;
 var $wrkd=sp;
 var $hold;
 $1=$subrtne;
 $2=$left;
 $3=$rite;
 $4=$out;
 var $5=$4;
 var $6=(($5+8)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=19;break;}
 case 2: 
 var $10=$4;
 var $11=(($10)|0);
 var $12=$11;
 var $13=SAFE_HEAP_LOAD($12, "i8*", 0, 0);
 $dataout=$13;
 var $14=$2;
 var $15=(($14)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "i8*", 0, 0);
 $leftptr=$17;
 var $18=$3;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "i8*", 0, 0);
 $riteptr=$21;
 var $22=$2;
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=($24|0)==1;
 var $26=$25^1;
 var $27=($26&1);
 var $28=$2;
 var $29=(($28+20)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=(Math_imul($27,$30)|0);
 $linc=$31;
 var $32=$3;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=($34|0)==1;
 var $36=$35^1;
 var $37=($36&1);
 var $38=$3;
 var $39=(($38+20)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=(Math_imul($37,$40)|0);
 $rinc=$41;
 var $42=$4;
 var $43=(($42+4)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=$44&110;
 $otype=$45;
 var $46=$otype;
 var $47=($46|0)==2;
 if($47){label=3;break;}else{label=13;break;}
 case 3: 
 $cnt=0;
 label=4;break;
 case 4: 
 var $50=$cnt;
 var $51=$4;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=($50|0)<($53|0);
 if($54){label=5;break;}else{label=12;break;}
 case 5: 
 var $56=(($wrkd)|0);
 var $57=(($56+8)|0);
 SAFE_HEAP_STORE($57, 0, "double", 0);
 var $58=$1;
 var $59=$leftptr;
 var $60=$riteptr;
 var $61=(($wrkd)|0);
 var $62=$61;
 FUNCTION_TABLE[$58]($59,$60,$62);
 var $63=$linc;
 var $64=$leftptr;
 var $65=(($64+$63)|0);
 $leftptr=$65;
 var $66=$rinc;
 var $67=$riteptr;
 var $68=(($67+$66)|0);
 $riteptr=$68;
 var $69=(($wrkd)|0);
 var $70=(($69+8)|0);
 var $71=SAFE_HEAP_LOAD($70, "double", 0, 0);
 var $72=$71!=0;
 if($72){label=6;break;}else{label=8;break;}
 case 6: 
 var $74=$otype;
 var $75=($74|0)!=64;
 if($75){label=7;break;}else{label=8;break;}
 case 7: 
 $otype=64;
 var $77=$4;
 var $78=$cnt;
 var $79=_dyadrup($77,$78);
 $4=$79;
 var $80=$4;
 var $81=(($80)|0);
 var $82=$81;
 var $83=SAFE_HEAP_LOAD($82, "i8*", 0, 0);
 var $84=$cnt;
 var $85=$4;
 var $86=(($85+20)|0);
 var $87=SAFE_HEAP_LOAD($86, "i32", 0, 0);
 var $88=(Math_imul($84,$87)|0);
 var $89=(($83+$88)|0);
 $dataout=$89;
 label=8;break;
 case 8: 
 var $91=(($wrkd)|0);
 var $92=SAFE_HEAP_LOAD($91, "double", 0, 0);
 var $93=$dataout;
 var $94=$93;
 SAFE_HEAP_STORE($94, $92, "double", 0);
 var $95=$otype;
 var $96=($95|0)==64;
 if($96){label=9;break;}else{label=10;break;}
 case 9: 
 var $98=(($wrkd)|0);
 var $99=(($98+8)|0);
 var $100=SAFE_HEAP_LOAD($99, "double", 0, 0);
 var $101=$dataout;
 var $102=$101;
 var $103=(($102+8)|0);
 SAFE_HEAP_STORE($103, $100, "double", 0);
 label=10;break;
 case 10: 
 var $105=$4;
 var $106=(($105+20)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32", 0, 0);
 var $108=$dataout;
 var $109=(($108+$107)|0);
 $dataout=$109;
 label=11;break;
 case 11: 
 var $111=$cnt;
 var $112=((($111)+(1))|0);
 $cnt=$112;
 label=4;break;
 case 12: 
 label=18;break;
 case 13: 
 $cnt=0;
 label=14;break;
 case 14: 
 var $116=$cnt;
 var $117=$4;
 var $118=(($117+8)|0);
 var $119=SAFE_HEAP_LOAD($118, "i32", 0, 0);
 var $120=($116|0)<($119|0);
 if($120){label=15;break;}else{label=17;break;}
 case 15: 
 var $122=$1;
 var $123=$leftptr;
 var $124=$riteptr;
 var $125=$dataout;
 FUNCTION_TABLE[$122]($123,$124,$125);
 var $126=$linc;
 var $127=$leftptr;
 var $128=(($127+$126)|0);
 $leftptr=$128;
 var $129=$rinc;
 var $130=$riteptr;
 var $131=(($130+$129)|0);
 $riteptr=$131;
 var $132=$4;
 var $133=(($132+20)|0);
 var $134=SAFE_HEAP_LOAD($133, "i32", 0, 0);
 var $135=$dataout;
 var $136=(($135+$134)|0);
 $dataout=$136;
 label=16;break;
 case 16: 
 var $138=$cnt;
 var $139=((($138)+(1))|0);
 $cnt=$139;
 label=14;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $143=$4;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $143;
  default: assert(0, "bad label: " + label);
 }

}


function _dyadrup($out,$cnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $hld;
 var $tempsave;
 var $ip;
 var $op;
 $2=$out;
 $3=$cnt;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&1;
 $tempsave=$7;
 var $8=$2;
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=$tempsave;
 var $12=((($11)+(64))|0);
 var $13=$2;
 var $14=(($13+12)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=_getcb(0,$10,$12,$15,0);
 $hld=$16;
 var $17=$hld;
 var $18=($17|0)==0;
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 var $20=$2;
 $1=$20;
 label=11;break;
 case 3: 
 var $22=$hld;
 var $23=(($22+12)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=($24|0)>1;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=$hld;
 var $28=(($27+16)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32*", 0, 0);
 var $30=$29;
 var $31=$2;
 var $32=(($31+16)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32*", 0, 0);
 var $34=$33;
 var $35=$hld;
 var $36=(($35+12)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=_intcopy($30,$34,$37,1);
 label=5;break;
 case 5: 
 var $40=$2;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "double*", 0, 0);
 $ip=$43;
 var $44=$hld;
 var $45=(($44)|0);
 var $46=$45;
 var $47=SAFE_HEAP_LOAD($46, "double*", 0, 0);
 $op=$47;
 label=6;break;
 case 6: 
 var $49=$3;
 var $50=((($49)-(1))|0);
 $3=$50;
 var $51=($49|0)!=0;
 if($51){label=7;break;}else{label=8;break;}
 case 7: 
 var $53=$op;
 var $54=(($53+8)|0);
 $op=$54;
 var $55=SAFE_HEAP_LOAD($53, "double", 0, 0);
 var $56=$ip;
 var $57=(($56+8)|0);
 $ip=$57;
 SAFE_HEAP_STORE($56, $55, "double", 0);
 var $58=$ip;
 var $59=(($58+8)|0);
 $ip=$59;
 SAFE_HEAP_STORE($58, 0, "double", 0);
 label=6;break;
 case 8: 
 var $61=$tempsave;
 var $62=($61|0)!=0;
 if($62){label=9;break;}else{label=10;break;}
 case 9: 
 var $64=$2;
 _endoper($64);
 label=10;break;
 case 10: 
 var $66=$hld;
 $1=$66;
 label=11;break;
 case 11: 
 var $68=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $68;
  default: assert(0, "bad label: " + label);
 }

}


function _dyadset($pfun,$pleft,$prite,$poutype){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $oper;
 var $intype=sp;
 var $ltype;
 var $rtype;
 var $fun;
 $2=$pfun;
 $3=$pleft;
 $4=$prite;
 $5=$poutype;
 $oper=0;
 var $6=$3;
 var $7=SAFE_HEAP_LOAD($6, "%struct.aplcb*", 0, 0);
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&78;
 $ltype=$10;
 var $11=$4;
 var $12=SAFE_HEAP_LOAD($11, "%struct.aplcb*", 0, 0);
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$14&78;
 $rtype=$15;
 var $16=$2;
 var $17=$5;
 var $18=$ltype;
 var $19=$rtype;
 var $20=_dyadcom($16,$intype,$17,$18,$19);
 $oper=$20;
 var $21=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $22=($21|0)==0;
 if($22){label=2;break;}else{label=7;break;}
 case 2: 
 var $24=SAFE_HEAP_LOAD($intype, "i32", 0, 0);
 var $25=$24&8;
 var $26=($25|0)!=0;
 if($26){label=6;break;}else{label=3;break;}
 case 3: 
 var $28=$3;
 var $29=$4;
 var $30=SAFE_HEAP_LOAD($intype, "i32", 0, 0);
 var $31=_matchok($28,$29,$30);
 var $32=($31|0)!=0;
 if($32){label=5;break;}else{label=4;break;}
 case 4: 
 $1=0;
 label=8;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $37=$oper;
 $1=$37;
 label=8;break;
 case 8: 
 var $39=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function _eachalc($big){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 var $dimptr;
 $1=$big;
 $out=0;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 var $5=$1;
 var $6=(($5+12)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=_getcb(0,$4,33,$7,0);
 $out=$8;
 var $9=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=4;break;}
 case 2: 
 var $12=$out;
 var $13=(($12+12)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=($14|0)>1;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$out;
 var $18=(($17+16)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32*", 0, 0);
 var $20=$19;
 var $21=$1;
 var $22=(($21+16)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32*", 0, 0);
 var $24=$23;
 var $25=$out;
 var $26=(($25+12)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=_intcopy($20,$24,$27,1);
 var $29=$28;
 $dimptr=$29;
 label=4;break;
 case 4: 
 var $31=$out;
 var $32=_errstop(0,0,0,$31);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _each($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $out;
 $1=$dp;
 $2=$left;
 $3=$rite;
 $out=0;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=_errstop(0,$7,$8,0);
 $out=$9;
 label=11;break;
 case 3: 
 var $11=$3;
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$13&1;
 var $15=($14|0)!=0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=$3;
 var $18=_aplcopy($17);
 $3=$18;
 var $19=$3;
 var $20=(($19+4)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=$21|1;
 SAFE_HEAP_STORE($20, $22, "i32", 0);
 label=5;break;
 case 5: 
 var $24=$2;
 var $25=($24|0)!=0;
 if($25){label=6;break;}else{label=9;break;}
 case 6: 
 var $27=$2;
 var $28=(($27+4)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=$29&1;
 var $31=($30|0)!=0;
 if($31){label=8;break;}else{label=7;break;}
 case 7: 
 var $33=$2;
 var $34=_aplcopy($33);
 $2=$34;
 var $35=$2;
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=$37|1;
 SAFE_HEAP_STORE($36, $38, "i32", 0);
 label=8;break;
 case 8: 
 var $40=$1;
 var $41=$2;
 var $42=$3;
 var $43=_eachdyad($40,$41,$42);
 $out=$43;
 label=10;break;
 case 9: 
 var $45=$1;
 var $46=$3;
 var $47=_eachmona($45,$46);
 $out=$47;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $50=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }

}


function _eachdyad($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $out;
 var $i;
 $2=$dp;
 $3=$left;
 $4=$rite;
 $out=0;
 $i=0;
 var $5=$2;
 var $6=(($5+28)|0);
 var $7=(($6)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=-7==($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=(($11+28)|0);
 var $13=(($12+16)|0);
 SAFE_HEAP_STORE($13, 11, "i32", 0);
 var $14=$2;
 var $15=(($14+28)|0);
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i8*", 0, 0);
 var $18=$17;
 var $19=(($18+24)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "%struct.aplcb* (%struct.aplderiv*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $22=$2;
 var $23=(($22+28)|0);
 var $24=(($23+20)|0);
 var $25=$24;
 SAFE_HEAP_STORE($25, $21, "%struct.aplcb* (%struct.aplderiv*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=6;break;
 case 3: 
 var $27=$2;
 var $28=(($27+28)|0);
 var $29=(($28+4)|0);
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 var $31=$30;
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 $i=$33;
 var $34=$i;
 var $35=$34&4;
 var $36=($35|0)!=0;
 if($36){label=4;break;}else{label=5;break;}
 case 4: 
 var $38=$2;
 var $39=(($38+28)|0);
 var $40=(($39)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$2;
 var $43=(($42+28)|0);
 var $44=(($43+4)|0);
 var $45=SAFE_HEAP_LOAD($44, "i8*", 0, 0);
 var $46=$3;
 var $47=$4;
 var $48=_execdyan($41,$45,$46,$47);
 $1=$48;
 label=28;break;
 case 5: 
 label=6;break;
 case 6: 
 var $51=$2;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "double", 0, 0);
 var $54=_mod($53,1);
 var $55=$54!=0;
 if($55){label=7;break;}else{label=11;break;}
 case 7: 
 var $57=$i;
 var $58=($57|0)==155;
 if($58){label=8;break;}else{label=9;break;}
 case 8: 
 var $60=$2;
 var $61=(($60+28)|0);
 var $62=(($61+16)|0);
 SAFE_HEAP_STORE($62, 3, "i32", 0);
 var $63=$2;
 var $64=(($63+28)|0);
 var $65=(($64+20)|0);
 var $66=$65;
 SAFE_HEAP_STORE($66, 396, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, double)*", 0);
 label=10;break;
 case 9: 
 var $68=$3;
 var $69=$4;
 var $70=_errstop(9,$68,$69,0);
 $1=$70;
 label=28;break;
 case 10: 
 label=24;break;
 case 11: 
 var $73=$2;
 var $74=(($73+28)|0);
 var $75=(($74)|0);
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $77=-7!=($76|0);
 if($77){label=12;break;}else{label=23;break;}
 case 12: 
 var $79=$2;
 var $80=(($79+28)|0);
 var $81=(($80+4)|0);
 var $82=SAFE_HEAP_LOAD($81, "i8*", 0, 0);
 var $83=$2;
 var $84=(($83+28)|0);
 var $85=(($84+8)|0);
 var $86=$2;
 var $87=(($86+28)|0);
 var $88=(($87+20)|0);
 var $89=_execdyas($82,$85,$88);
 var $90=$2;
 var $91=(($90+28)|0);
 var $92=(($91+16)|0);
 SAFE_HEAP_STORE($92, $89, "i32", 0);
 var $93=$2;
 var $94=(($93+28)|0);
 var $95=(($94+16)|0);
 var $96=SAFE_HEAP_LOAD($95, "i32", 0, 0);
 switch(($96|0)){case 8:case 1:case 10:{ label=13;break;}case 2:{ label=14;break;}case 0:{ label=20;break;}default:{label=21;break;}}break;
 case 13: 
 label=22;break;
 case 14: 
 var $99=$2;
 var $100=(($99+4)|0);
 var $101=SAFE_HEAP_LOAD($100, "i32", 0, 0);
 var $102=($101|0)<0;
 if($102){label=15;break;}else{label=19;break;}
 case 15: 
 var $104=$2;
 var $105=(($104+28)|0);
 var $106=(($105+4)|0);
 var $107=SAFE_HEAP_LOAD($106, "i8*", 0, 0);
 var $108=$107;
 var $109=$3;
 var $110=(($109+12)|0);
 var $111=SAFE_HEAP_LOAD($110, "i32", 0, 0);
 var $112=$4;
 var $113=(($112+12)|0);
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 var $115=($111|0)>($114|0);
 if($115){label=16;break;}else{label=17;break;}
 case 16: 
 var $117=$3;
 var $121=$117;label=18;break;
 case 17: 
 var $119=$4;
 var $121=$119;label=18;break;
 case 18: 
 var $121;
 var $122=_axisdft($108,$121);
 var $123=$2;
 var $124=(($123+4)|0);
 SAFE_HEAP_STORE($124, $122, "i32", 0);
 label=19;break;
 case 19: 
 label=22;break;
 case 20: 
 label=21;break;
 case 21: 
 var $128=$3;
 var $129=$4;
 var $130=_errstop(65,$128,$129,0);
 $1=$130;
 label=28;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $134=$3;
 var $135=(($134+8)|0);
 var $136=SAFE_HEAP_LOAD($135, "i32", 0, 0);
 var $137=($136|0)!=0;
 if($137){label=25;break;}else{label=27;break;}
 case 25: 
 var $139=$4;
 var $140=(($139+8)|0);
 var $141=SAFE_HEAP_LOAD($140, "i32", 0, 0);
 var $142=($141|0)!=0;
 if($142){label=26;break;}else{label=27;break;}
 case 26: 
 var $144=$2;
 var $145=$3;
 var $146=$4;
 var $147=_eachdyaf($144,$145,$146);
 $1=$147;
 label=28;break;
 case 27: 
 var $149=$2;
 var $150=$3;
 var $151=$4;
 var $152=_eachdyae($149,$150,$151);
 $1=$152;
 label=28;break;
 case 28: 
 var $154=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $154;
  default: assert(0, "bad label: " + label);
 }

}


function _eachdyae($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tempsave;
 var $sav;
 var $tmp;
 $1=$dp;
 $2=$left;
 $3=$rite;
 var $4=$3;
 var $5=(($4+8)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=0==($6|0);
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$3;
 var $13=$9;label=4;break;
 case 3: 
 var $11=$2;
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 $tmp=$13;
 var $14=$tmp;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$16&1;
 $tempsave=$17;
 var $18=$tempsave;
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$tmp;
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=((($23)-(1))|0);
 SAFE_HEAP_STORE($22, $24, "i32", 0);
 label=6;break;
 case 6: 
 var $26=$tmp;
 var $27=_shape($26);
 $sav=$27;
 var $28=$tempsave;
 var $29=$tmp;
 var $30=(($29+4)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=((($31)+($28))|0);
 SAFE_HEAP_STORE($30, $32, "i32", 0);
 var $33=$sav;
 var $34=$1;
 var $35=$1;
 var $36=(($35+28)|0);
 var $37=$2;
 var $38=_first($37);
 var $39=$3;
 var $40=_first($39);
 var $41=_eachdyag($34,$36,$38,$40);
 var $42=_enclose($41,0);
 var $43=_reshape($33,$42);
 var $44=_errstop(0,0,0,$43);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $44;
  default: assert(0, "bad label: " + label);
 }

}


function _eachdyaf($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $big=sp;
 var $cp;
 var $lit=(sp)+(8);
 var $out;
 var $wrk;
 var $wrkleft;
 var $wrkrite;
 var $dimptr;
 var $i;
 $2=$dp;
 $3=$left;
 $4=$rite;
 $wrkleft=0;
 $wrkrite=0;
 var $5=$3;
 var $6=$4;
 var $7=_conform($5,$6,0,$big,$lit);
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$3;
 var $11=$4;
 var $12=_errstop(17,$10,$11,0);
 $1=$12;
 label=22;break;
 case 3: 
 var $14=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $15=_eachalc($14);
 $out=$15;
 var $16=0!=($15|0);
 if($16){label=4;break;}else{label=17;break;}
 case 4: 
 var $18=$3;
 var $19=_eachwrk($18);
 $wrkleft=$19;
 var $20=$4;
 var $21=_eachwrk($20);
 $wrkrite=$21;
 var $22=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=16;break;}
 case 5: 
 $i=0;
 var $25=$out;
 var $26=(($25)|0);
 var $27=$26;
 var $28=SAFE_HEAP_LOAD($27, "%struct.aplcb**", 0, 0);
 $cp=$28;
 label=6;break;
 case 6: 
 var $30=$i;
 var $31=$out;
 var $32=(($31+8)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=($30|0)<($33|0);
 if($34){label=7;break;}else{label=15;break;}
 case 7: 
 var $36=$2;
 var $37=$2;
 var $38=(($37+28)|0);
 var $39=$i;
 var $40=$3;
 var $41=$wrkleft;
 var $42=_eachdyah($39,$40,$41);
 var $43=$i;
 var $44=$4;
 var $45=$wrkrite;
 var $46=_eachdyah($43,$44,$45);
 var $47=_eachdyag($36,$38,$42,$46);
 $wrk=$47;
 var $48=$wrk;
 var $49=($48|0)==0;
 if($49){label=8;break;}else{label=9;break;}
 case 8: 
 var $51=$cp;
 var $52=(($51+4)|0);
 $cp=$52;
 SAFE_HEAP_STORE($51, 0, "%struct.aplcb*", 0);
 label=13;break;
 case 9: 
 var $54=$wrk;
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=$56&1;
 var $58=($57|0)!=0;
 if($58){label=10;break;}else{label=11;break;}
 case 10: 
 var $60=$wrk;
 var $61=_perm($60);
 var $62=$cp;
 var $63=(($62+4)|0);
 $cp=$63;
 SAFE_HEAP_STORE($62, $61, "%struct.aplcb*", 0);
 label=12;break;
 case 11: 
 var $65=$wrk;
 var $66=_aplcopy($65);
 var $67=$cp;
 var $68=(($67+4)|0);
 $cp=$68;
 SAFE_HEAP_STORE($67, $66, "%struct.aplcb*", 0);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $72=$i;
 var $73=((($72)+(1))|0);
 $i=$73;
 label=6;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $77=$wrkleft;
 var $78=($77|0)!=0;
 if($78){label=18;break;}else{label=19;break;}
 case 18: 
 var $80=$wrkleft;
 var $81=_temp($80);
 _endoper($81);
 label=19;break;
 case 19: 
 var $83=$wrkrite;
 var $84=($83|0)!=0;
 if($84){label=20;break;}else{label=21;break;}
 case 20: 
 var $86=$wrkrite;
 var $87=_temp($86);
 _endoper($87);
 label=21;break;
 case 21: 
 var $89=$3;
 var $90=$4;
 var $91=$out;
 var $92=_errstop(0,$89,$90,$91);
 $1=$92;
 label=22;break;
 case 22: 
 var $94=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }

}


function _eachdyag($dp,$deriv_sub_ptr,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $out;
 $1=$dp;
 $2=$deriv_sub_ptr;
 $3=$left;
 $4=$rite;
 var $5=$2;
 var $6=(($5+16)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 switch(($7|0)){case 8:{ label=2;break;}case 1:{ label=3;break;}case 10:{ label=4;break;}case 2:{ label=5;break;}case 3:{ label=6;break;}case 11:{ label=7;break;}default:{label=8;break;}}break;
 case 2: 
 var $9=$2;
 var $10=(($9+20)|0);
 var $11=$10;
 var $12=SAFE_HEAP_LOAD($11, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $13=$3;
 var $14=$4;
 var $15=$1;
 var $16=(($15+16)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.aplcb*", 0, 0);
 var $18=FUNCTION_TABLE[$12]($13,$14,$17);
 $out=$18;
 label=8;break;
 case 3: 
 var $20=$2;
 var $21=(($20+20)|0);
 var $22=$21;
 var $23=SAFE_HEAP_LOAD($22, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $24=$3;
 var $25=$4;
 var $26=FUNCTION_TABLE[$23]($24,$25);
 $out=$26;
 label=8;break;
 case 4: 
 var $28=$2;
 var $29=(($28+20)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*, i8*)*", 0, 0);
 var $32=$3;
 var $33=$4;
 var $34=FUNCTION_TABLE[$31]($32,$33,0,0);
 $out=$34;
 label=8;break;
 case 5: 
 var $36=$2;
 var $37=(($36+20)|0);
 var $38=$37;
 var $39=SAFE_HEAP_LOAD($38, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0, 0);
 var $40=$3;
 var $41=$4;
 var $42=$1;
 var $43=(($42+4)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=FUNCTION_TABLE[$39]($40,$41,$44);
 $out=$45;
 label=8;break;
 case 6: 
 var $47=$2;
 var $48=(($47+20)|0);
 var $49=$48;
 var $50=SAFE_HEAP_LOAD($49, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, double)*", 0, 0);
 var $51=$3;
 var $52=$4;
 var $53=$1;
 var $54=(($53+8)|0);
 var $55=SAFE_HEAP_LOAD($54, "double", 0, 0);
 var $56=FUNCTION_TABLE[$50]($51,$52,$55);
 $out=$56;
 label=8;break;
 case 7: 
 var $58=$2;
 var $59=(($58+20)|0);
 var $60=$59;
 var $61=SAFE_HEAP_LOAD($60, "%struct.aplcb* (%struct.aplderiv.525*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $62=$2;
 var $63=(($62+4)|0);
 var $64=SAFE_HEAP_LOAD($63, "i8*", 0, 0);
 var $65=$64;
 var $66=$3;
 var $67=$4;
 var $68=FUNCTION_TABLE[$61]($65,$66,$67);
 $out=$68;
 label=8;break;
 case 8: 
 var $70=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }

}


function _eachdyah($argno,$argin,$wrkcb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $off;
 $2=$argno;
 $3=$argin;
 $4=$wrkcb;
 var $5=$3;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&32;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=5;break;}
 case 2: 
 var $11=$3;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)==1;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$3;
 var $17=(($16)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "%struct.aplcb**", 0, 0);
 var $20=SAFE_HEAP_LOAD($19, "%struct.aplcb*", 0, 0);
 $1=$20;
 label=9;break;
 case 4: 
 var $22=$3;
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "%struct.aplcb**", 0, 0);
 var $26=$2;
 var $27=(($25+($26<<2))|0);
 var $28=SAFE_HEAP_LOAD($27, "%struct.aplcb*", 0, 0);
 $1=$28;
 label=9;break;
 case 5: 
 var $30=$3;
 var $31=(($30+8)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=($32|0)==1;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 $off=0;
 label=8;break;
 case 7: 
 var $36=$2;
 var $37=$3;
 var $38=(($37+20)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=(Math_imul($36,$39)|0);
 $off=$40;
 label=8;break;
 case 8: 
 var $42=$4;
 var $43=(($42)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "i8*", 0, 0);
 var $46=$3;
 var $47=(($46)|0);
 var $48=$47;
 var $49=SAFE_HEAP_LOAD($48, "i8*", 0, 0);
 var $50=$off;
 var $51=(($49+$50)|0);
 var $52=$3;
 var $53=(($52+4)|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 var $55=$54&110;
 var $56=_dtacopy($45,$51,1,1,$55);
 var $57=$4;
 $1=$57;
 label=9;break;
 case 9: 
 var $59=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $59;
  default: assert(0, "bad label: " + label);
 }

}


function _eachmona($dp,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cp;
 var $lit;
 var $out;
 var $wrk;
 var $wrkrite;
 var $axis;
 var $code;
 var $i;
 var $ep=sp;
 var $arg=(sp)+(8);
 var $ptype;
 $2=$dp;
 $3=$rite;
 $out=0;
 $wrkrite=0;
 SAFE_HEAP_STORE($arg, 0, "i8*", 0);
 var $4=$2;
 var $5=(($4+8)|0);
 var $6=SAFE_HEAP_LOAD($5, "double", 0, 0);
 var $7=_mod($6,1);
 var $8=$7!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$3;
 var $11=_errstop(9,0,$10,0);
 $1=$11;
 label=35;break;
 case 3: 
 var $13=$2;
 var $14=(($13+28)|0);
 var $15=(($14)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$2;
 var $18=(($17+28)|0);
 var $19=(($18+4)|0);
 var $20=SAFE_HEAP_LOAD($19, "i8*", 0, 0);
 var $21=_execmons($16,$20,$arg,$ep);
 $ptype=$21;
 var $22=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $23=($22|0)!=0;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $25=$3;
 var $26=_eachalc($25);
 $out=$26;
 var $27=0==($26|0);
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $29=$3;
 var $30=_errstop(0,0,$29,0);
 $1=$30;
 label=35;break;
 case 6: 
 var $32=$3;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=($34|0)!=0;
 if($35){label=7;break;}else{label=27;break;}
 case 7: 
 var $37=$3;
 var $38=_eachwrk($37);
 $wrkrite=$38;
 var $39=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $40=($39|0)!=0;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 var $42=$wrkrite;
 var $43=$3;
 var $44=$out;
 var $45=_errstop(0,$42,$43,$44);
 $1=$45;
 label=35;break;
 case 9: 
 var $47=$2;
 var $48=(($47+28)|0);
 var $49=(($48)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=($50|0)==-7;
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=$2;
 var $54=(($53+28)|0);
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i8*", 0, 0);
 var $57=$56;
 var $58=(($57)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=$59|1;
 SAFE_HEAP_STORE($58, $60, "i32", 0);
 label=11;break;
 case 11: 
 $i=0;
 var $62=$out;
 var $63=(($62)|0);
 var $64=$63;
 var $65=SAFE_HEAP_LOAD($64, "%struct.aplcb**", 0, 0);
 $cp=$65;
 label=12;break;
 case 12: 
 var $67=$i;
 var $68=$out;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=($67|0)<($70|0);
 if($71){label=13;break;}else{label=24;break;}
 case 13: 
 var $73=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $74=($73|0)!=0;
 if($74){label=14;break;}else{label=15;break;}
 case 14: 
 var $76=$cp;
 var $77=(($76+4)|0);
 $cp=$77;
 SAFE_HEAP_STORE($76, 0, "%struct.aplcb*", 0);
 label=22;break;
 case 15: 
 var $79=$ptype;
 var $80=$2;
 var $81=(($80+28)|0);
 var $82=(($81+4)|0);
 var $83=SAFE_HEAP_LOAD($82, "i8*", 0, 0);
 var $84=SAFE_HEAP_LOAD($arg, "i8*", 0, 0);
 var $85=$i;
 var $86=$3;
 var $87=$wrkrite;
 var $88=_eachdyah($85,$86,$87);
 var $89=$2;
 var $90=(($89+16)|0);
 var $91=SAFE_HEAP_LOAD($90, "%struct.aplcb*", 0, 0);
 var $92=_execmonj($79,$83,$84,$ep,$88,$91);
 $wrk=$92;
 var $93=$wrk;
 var $94=($93|0)==0;
 if($94){label=16;break;}else{label=17;break;}
 case 16: 
 var $96=$cp;
 var $97=(($96+4)|0);
 $cp=$97;
 SAFE_HEAP_STORE($96, 0, "%struct.aplcb*", 0);
 label=21;break;
 case 17: 
 var $99=$wrk;
 var $100=(($99+4)|0);
 var $101=SAFE_HEAP_LOAD($100, "i32", 0, 0);
 var $102=$101&1;
 var $103=($102|0)!=0;
 if($103){label=18;break;}else{label=19;break;}
 case 18: 
 var $105=$wrk;
 var $106=_perm($105);
 var $107=$cp;
 var $108=(($107+4)|0);
 $cp=$108;
 SAFE_HEAP_STORE($107, $106, "%struct.aplcb*", 0);
 label=20;break;
 case 19: 
 var $110=$wrk;
 var $111=_aplcopy($110);
 var $112=$cp;
 var $113=(($112+4)|0);
 $cp=$113;
 SAFE_HEAP_STORE($112, $111, "%struct.aplcb*", 0);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $118=$i;
 var $119=((($118)+(1))|0);
 $i=$119;
 label=12;break;
 case 24: 
 var $121=$2;
 var $122=(($121+28)|0);
 var $123=(($122)|0);
 var $124=SAFE_HEAP_LOAD($123, "i32", 0, 0);
 var $125=($124|0)==-7;
 if($125){label=25;break;}else{label=26;break;}
 case 25: 
 var $127=$2;
 var $128=(($127+28)|0);
 var $129=(($128+4)|0);
 var $130=SAFE_HEAP_LOAD($129, "i8*", 0, 0);
 var $131=$130;
 var $132=(($131)|0);
 var $133=SAFE_HEAP_LOAD($132, "i32", 0, 0);
 var $134=((($133)-(1))|0);
 SAFE_HEAP_STORE($132, $134, "i32", 0);
 label=26;break;
 case 26: 
 label=32;break;
 case 27: 
 var $137=$2;
 var $138=(($137+28)|0);
 var $139=(($138)|0);
 var $140=SAFE_HEAP_LOAD($139, "i32", 0, 0);
 var $141=($140|0)==-10;
 if($141){label=28;break;}else{label=30;break;}
 case 28: 
 var $143=$2;
 var $144=(($143+28)|0);
 var $145=(($144+4)|0);
 var $146=SAFE_HEAP_LOAD($145, "i8*", 0, 0);
 var $147=$146;
 var $148=(($147)|0);
 var $149=SAFE_HEAP_LOAD($148, "i32", 0, 0);
 var $150=($149|0)==45;
 if($150){label=29;break;}else{label=30;break;}
 case 29: 
 var $152=$3;
 var $153=_first($152);
 var $154=_transpos(0,$153);
 var $155=_enclose($154,0);
 var $156=_errstop(0,0,0,$155);
 $1=$156;
 label=35;break;
 case 30: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $160=$wrkrite;
 var $161=($160|0)!=0;
 if($161){label=33;break;}else{label=34;break;}
 case 33: 
 var $163=$wrkrite;
 var $164=_temp($163);
 var $165=_endoper($164);
 label=34;break;
 case 34: 
 var $167=$3;
 var $168=$out;
 var $169=_errstop(0,0,$167,$168);
 $1=$169;
 label=35;break;
 case 35: 
 var $171=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $171;
  default: assert(0, "bad label: " + label);
 }

}


function _eachtran($tok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $axistok=sp;
 var $funtok=(sp)+(8);
 var $op=(sp)+(16);
 var $dp;
 var $code;
 var $i;
 var $noexit;
 var $funhold=(sp)+(24);
 var $axcb;
 $2=$tok;
 SAFE_HEAP_STORE($axistok, 0, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($funtok, 0, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($op, 0, "%struct.apltoken*", 0);
 label=2;break;
 case 2: 
 var $4=_execnext($funtok,$axistok,$op,0);
 $noexit=$4;
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 label=15;break;
 case 4: 
 var $9=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $10=($9|0)==0;
 if($10){label=6;break;}else{label=5;break;}
 case 5: 
 var $12=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $13=($12|0)!=0;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 63, "i32", 0);
 label=15;break;
 case 7: 
 var $16=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $17=_getcode($funhold,$16);
 $code=$17;
 var $18=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $19=($18|0)!=0;
 if($19){label=8;break;}else{label=9;break;}
 case 8: 
 label=15;break;
 case 9: 
 var $22=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $23=($22|0)!=0;
 if($23){label=10;break;}else{label=11;break;}
 case 10: 
 var $25=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $26=_execaxit($25);
 $axcb=$26;
 label=12;break;
 case 11: 
 $axcb=0;
 label=12;break;
 case 12: 
 var $29=$axcb;
 var $30=_newderiv($29,0,0);
 $dp=$30;
 var $31=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $32=($31|0)!=0;
 if($32){label=13;break;}else{label=14;break;}
 case 13: 
 label=15;break;
 case 14: 
 var $35=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 _execfree($35);
 var $36=$dp;
 var $37=(($36+24)|0);
 SAFE_HEAP_STORE($37, (120), "%struct.aplcb* (%struct.aplderiv.457*, %struct.aplcb*, %struct.aplcb*)*", 0);
 var $38=$code;
 var $39=$dp;
 var $40=(($39+28)|0);
 var $41=(($40)|0);
 SAFE_HEAP_STORE($41, $38, "i32", 0);
 var $42=SAFE_HEAP_LOAD($funhold, "i8*", 0, 0);
 var $43=$dp;
 var $44=(($43+28)|0);
 var $45=(($44+4)|0);
 SAFE_HEAP_STORE($45, $42, "i8*", 0);
 var $46=$2;
 var $47=(($46+4)|0);
 SAFE_HEAP_STORE($47, -7, "i32", 0);
 var $48=$dp;
 var $49=$48;
 var $50=$2;
 var $51=(($50+12)|0);
 var $52=$51;
 SAFE_HEAP_STORE($52, $49, "i8*", 0);
 var $53=$noexit;
 $1=$53;
 label=16;break;
 case 15: 
 var $55=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $56=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $57=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $58=$dp;
 _slasherr($55,$56,$57,$58);
 var $59=$noexit;
 $1=$59;
 label=16;break;
 case 16: 
 var $61=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }

}


function _eachwrk($argin){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$argin;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$5&32;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&78;
 var $14=_getcb(0,1,$13,0,0);
 $1=$14;
 label=4;break;
 case 4: 
 var $16=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }

}


function _edline($line,$offbad,$maxline,$insert){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $cursor=sp;
 var $j;
 var $linelen;
 var $c;
 $1=$line;
 $2=$offbad;
 $3=$maxline;
 $4=$insert;
 var $5=$1;
 var $6=_printf(11728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $5, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$1;
 var $8=_strlen($7);
 $linelen=$8;
 SAFE_HEAP_STORE($cursor, $8, "i32", 0);
 var $9=$1;
 var $10=$linelen;
 var $11=$2;
 var $12=((($10)-($11))|0);
 _edlinf($9,$cursor,$12);
 var $13=$1;
 var $14=$linelen;
 var $15=$3;
 var $16=SAFE_HEAP_LOAD($cursor, "i32", 0, 0);
 var $17=$4;
 var $18=_gettcom($13,$14,$15,$16,$17);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $18;
}


function _edlinf($line,$pcursor,$bsp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$line;
 $2=$pcursor;
 $3=$bsp;
 label=2;break;
 case 2: 
 var $5=$3;
 var $6=((($5)-(1))|0);
 $3=$6;
 var $7=($5|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=_putchar(8);
 var $10=$2;
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=((($11)-(1))|0);
 SAFE_HEAP_STORE($10, $12, "i32", 0);
 label=2;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _edling($line,$pcursor,$bs,$linelen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $tcursor=sp;
 $1=$line;
 $2=$pcursor;
 $3=$bs;
 $4=$linelen;
 var $5=$1;
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=(($5+$7)|0);
 var $9=((($8)-(1))|0);
 var $10=$1;
 var $11=$2;
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=(($10+$12)|0);
 var $14=_strcpy($9,$13);
 var $15=$3;
 var $16=($15|0)!=0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=$1;
 var $19=$2;
 var $20=$3;
 _edlinf($18,$19,$20);
 label=3;break;
 case 3: 
 var $22=$1;
 var $23=$2;
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=(($22+$24)|0);
 _aplprint($25);
 _aplputch(32);
 var $26=$2;
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 SAFE_HEAP_STORE($tcursor, $27, "i32", 0);
 var $28=$1;
 var $29=$4;
 var $30=$2;
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=((($29)-($31))|0);
 var $33=((($32)+(1))|0);
 _edlinf($28,$tcursor,$33);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _enclose($rite,$axes){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $icb;
 var $out;
 var $ocb;
 var $wrk;
 var $i;
 $2=$rite;
 $3=$axes;
 $out=0;
 label=2;break;
 case 2: 
 var $5=_errinit();
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 label=34;break;
 case 4: 
 var $9=$3;
 var $10=($9|0)==0;
 if($10){label=5;break;}else{label=18;break;}
 case 5: 
 var $12=$2;
 var $13=(($12+12)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=($14|0)==0;
 if($15){label=6;break;}else{label=11;break;}
 case 6: 
 var $17=$2;
 var $18=(($17+4)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=$19&32;
 var $21=($20|0)!=0;
 if($21){label=11;break;}else{label=7;break;}
 case 7: 
 var $23=$2;
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=$25&1;
 var $27=($26|0)!=0;
 if($27){label=8;break;}else{label=9;break;}
 case 8: 
 var $29=$2;
 var $35=$29;label=10;break;
 case 9: 
 var $31=$2;
 var $32=_aplcopy($31);
 var $33=_temp($32);
 var $35=$33;label=10;break;
 case 10: 
 var $35;
 $out=$35;
 label=17;break;
 case 11: 
 var $37=_getcb(0,1,33,0,0);
 $out=$37;
 var $38=$out;
 var $39=($38|0)==0;
 if($39){label=12;break;}else{label=13;break;}
 case 12: 
 label=34;break;
 case 13: 
 var $42=$2;
 var $43=(($42+4)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=$44&1;
 var $46=($45|0)!=0;
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=$2;
 var $53=$48;label=16;break;
 case 15: 
 var $50=$2;
 var $51=_aplcopy($50);
 var $53=$51;label=16;break;
 case 16: 
 var $53;
 $wrk=$53;
 var $54=$wrk;
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=$56&-2;
 SAFE_HEAP_STORE($55, $57, "i32", 0);
 var $58=$wrk;
 var $59=$out;
 var $60=(($59)|0);
 var $61=$60;
 var $62=SAFE_HEAP_LOAD($61, "%struct.aplcb**", 0, 0);
 SAFE_HEAP_STORE($62, $58, "%struct.aplcb*", 0);
 label=17;break;
 case 17: 
 $2=0;
 label=34;break;
 case 18: 
 var $65=$3;
 var $66=(($65+8)|0);
 var $67=SAFE_HEAP_LOAD($66, "i32", 0, 0);
 var $68=0==($67|0);
 if($68){label=19;break;}else{label=33;break;}
 case 19: 
 var $70=$2;
 var $71=(($70+4)|0);
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=$72&32;
 var $74=($73|0)!=0;
 if($74){label=20;break;}else{label=31;break;}
 case 20: 
 var $76=$2;
 var $77=(($76+8)|0);
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 var $79=$2;
 var $80=(($79+12)|0);
 var $81=SAFE_HEAP_LOAD($80, "i32", 0, 0);
 var $82=$2;
 var $83=(($82+16)|0);
 var $84=SAFE_HEAP_LOAD($83, "i32*", 0, 0);
 var $85=_getcbi(0,$78,33,$81,$84);
 $out=$85;
 var $86=$2;
 var $87=(($86)|0);
 var $88=$87;
 var $89=SAFE_HEAP_LOAD($88, "%struct.aplcb**", 0, 0);
 $icb=$89;
 var $90=$out;
 var $91=(($90)|0);
 var $92=$91;
 var $93=SAFE_HEAP_LOAD($92, "%struct.aplcb**", 0, 0);
 $ocb=$93;
 $i=0;
 label=21;break;
 case 21: 
 var $95=$i;
 var $96=$out;
 var $97=(($96+8)|0);
 var $98=SAFE_HEAP_LOAD($97, "i32", 0, 0);
 var $99=($95|0)<($98|0);
 if($99){label=22;break;}else{label=30;break;}
 case 22: 
 var $101=$icb;
 var $102=(($101+4)|0);
 $icb=$102;
 var $103=SAFE_HEAP_LOAD($101, "%struct.aplcb*", 0, 0);
 var $104=_enclose($103,0);
 var $105=_perm($104);
 $wrk=$105;
 var $106=$wrk;
 var $107=($106|0)==0;
 if($107){label=23;break;}else{label=24;break;}
 case 23: 
 var $109=$ocb;
 var $110=(($109+4)|0);
 $ocb=$110;
 SAFE_HEAP_STORE($109, 0, "%struct.aplcb*", 0);
 label=28;break;
 case 24: 
 var $112=$wrk;
 var $113=(($112+4)|0);
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 var $115=$114&1;
 var $116=($115|0)!=0;
 if($116){label=25;break;}else{label=26;break;}
 case 25: 
 var $118=$wrk;
 var $119=_perm($118);
 var $120=$ocb;
 var $121=(($120+4)|0);
 $ocb=$121;
 SAFE_HEAP_STORE($120, $119, "%struct.aplcb*", 0);
 label=27;break;
 case 26: 
 var $123=$wrk;
 var $124=_aplcopy($123);
 var $125=$ocb;
 var $126=(($125+4)|0);
 $ocb=$126;
 SAFE_HEAP_STORE($125, $124, "%struct.aplcb*", 0);
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $130=$i;
 var $131=((($130)+(1))|0);
 $i=$131;
 label=21;break;
 case 30: 
 label=32;break;
 case 31: 
 var $134=$2;
 var $135=_aplcopy($134);
 var $136=_temp($135);
 $out=$136;
 label=32;break;
 case 32: 
 label=34;break;
 case 33: 
 var $139=$2;
 var $140=$3;
 var $141=_enclosf($139,$140);
 $1=$141;
 label=35;break;
 case 34: 
 var $143=$3;
 var $144=$2;
 var $145=$out;
 var $146=_errstop(0,$143,$144,$145);
 $1=$146;
 label=35;break;
 case 35: 
 var $148=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $148;
  default: assert(0, "bad label: " + label);
 }

}


function _enclosf($rite,$axes){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $axeout;
 var $dimin;
 var $dimout;
 var $dimsub;
 var $icb;
 var $out;
 var $tmp;
 var $ocb;
 var $cntout;
 var $cntsub;
 var $i;
 var $ip;
 var $j;
 var $rank;
 var $ranksub;
 var $tempaxes;
 var $temprite;
 var $typesub;
 var $cp;
 $1=$rite;
 $2=$axes;
 $axeout=0;
 $dimin=0;
 $dimout=0;
 $dimsub=0;
 $out=0;
 $tempaxes=0;
 label=2;break;
 case 2: 
 var $4=$1;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&1;
 $temprite=$7;
 var $8=$1;
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=((($10)-($7))|0);
 SAFE_HEAP_STORE($9, $11, "i32", 0);
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$14&4;
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=$2;
 var $19=_integer($18);
 $2=$19;
 label=4;break;
 case 4: 
 var $21=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $22=($21|0)!=0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 label=31;break;
 case 6: 
 var $25=$2;
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=$27&1;
 $tempaxes=$28;
 var $29=$2;
 var $30=(($29+4)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=((($31)-($28))|0);
 SAFE_HEAP_STORE($30, $32, "i32", 0);
 var $33=$1;
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$35&110;
 $typesub=$36;
 var $37=$1;
 var $38=_shape($37);
 var $39=_perm($38);
 $dimin=$39;
 var $40=$2;
 var $41=_ravel($40);
 var $42=_enclose($41,0);
 var $43=_indexm($39,$42,0);
 var $44=_perm($43);
 $dimsub=$44;
 var $45=0==($44|0);
 if($45){label=7;break;}else{label=8;break;}
 case 7: 
 label=31;break;
 case 8: 
 $i=0;
 $cntsub=1;
 label=9;break;
 case 9: 
 var $49=$i;
 var $50=$dimsub;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 $ranksub=$52;
 var $53=($49|0)<($52|0);
 if($53){label=10;break;}else{label=12;break;}
 case 10: 
 var $55=$dimsub;
 var $56=(($55)|0);
 var $57=$56;
 var $58=SAFE_HEAP_LOAD($57, "i32*", 0, 0);
 var $59=$i;
 var $60=(($58+($59<<2))|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=$cntsub;
 var $63=(Math_imul($62,$61)|0);
 $cntsub=$63;
 label=11;break;
 case 11: 
 var $65=$i;
 var $66=((($65)+(1))|0);
 $i=$66;
 label=9;break;
 case 12: 
 var $68=$1;
 var $69=(($68+12)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=_indxsub($70);
 var $72=$2;
 var $73=_without($71,$72);
 var $74=_ravel($73);
 var $75=_perm($74);
 $axeout=$75;
 var $76=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $77=($76|0)!=0;
 if($77){label=13;break;}else{label=14;break;}
 case 13: 
 label=31;break;
 case 14: 
 var $80=$dimin;
 var $81=$axeout;
 var $82=_enclose($81,0);
 var $83=_indexm($80,$82,0);
 $dimout=$83;
 var $84=0==($83|0);
 if($84){label=15;break;}else{label=16;break;}
 case 15: 
 label=31;break;
 case 16: 
 $i=0;
 $cntout=1;
 label=17;break;
 case 17: 
 var $88=$i;
 var $89=$dimout;
 var $90=(($89+8)|0);
 var $91=SAFE_HEAP_LOAD($90, "i32", 0, 0);
 $rank=$91;
 var $92=($88|0)<($91|0);
 if($92){label=18;break;}else{label=20;break;}
 case 18: 
 var $94=$dimout;
 var $95=(($94)|0);
 var $96=$95;
 var $97=SAFE_HEAP_LOAD($96, "i32*", 0, 0);
 var $98=$i;
 var $99=(($97+($98<<2))|0);
 var $100=SAFE_HEAP_LOAD($99, "i32", 0, 0);
 var $101=$cntout;
 var $102=(Math_imul($101,$100)|0);
 $cntout=$102;
 label=19;break;
 case 19: 
 var $104=$i;
 var $105=((($104)+(1))|0);
 $i=$105;
 label=17;break;
 case 20: 
 var $107=$cntout;
 var $108=$rank;
 var $109=$dimout;
 var $110=(($109)|0);
 var $111=$110;
 var $112=SAFE_HEAP_LOAD($111, "i32*", 0, 0);
 var $113=_getcbi(0,$107,33,$108,$112);
 $out=$113;
 var $114=0==($113|0);
 if($114){label=21;break;}else{label=22;break;}
 case 21: 
 label=31;break;
 case 22: 
 var $117=$temprite;
 var $118=$1;
 var $119=(($118+4)|0);
 var $120=SAFE_HEAP_LOAD($119, "i32", 0, 0);
 var $121=((($120)+($117))|0);
 SAFE_HEAP_STORE($119, $121, "i32", 0);
 $temprite=0;
 var $122=$axeout;
 var $123=$2;
 var $124=_cat($122,$123,-1);
 var $125=$1;
 var $126=_transpos($124,$125);
 var $127=_ravel($126);
 $1=$127;
 var $128=0==($127|0);
 if($128){label=23;break;}else{label=24;break;}
 case 23: 
 label=31;break;
 case 24: 
 var $131=$1;
 var $132=(($131)|0);
 var $133=$132;
 var $134=SAFE_HEAP_LOAD($133, "i8*", 0, 0);
 $cp=$134;
 $i=0;
 var $135=$out;
 var $136=(($135)|0);
 var $137=$136;
 var $138=SAFE_HEAP_LOAD($137, "%struct.aplcb**", 0, 0);
 $ocb=$138;
 label=25;break;
 case 25: 
 var $140=$i;
 var $141=$cntout;
 var $142=($140|0)<($141|0);
 if($142){label=26;break;}else{label=30;break;}
 case 26: 
 var $144=$cntsub;
 var $145=$typesub;
 var $146=$ranksub;
 var $147=$dimsub;
 var $148=(($147)|0);
 var $149=$148;
 var $150=SAFE_HEAP_LOAD($149, "i32*", 0, 0);
 var $151=_getcbi(0,$144,$145,$146,$150);
 $tmp=$151;
 var $152=$ocb;
 var $153=(($152+4)|0);
 $ocb=$153;
 SAFE_HEAP_STORE($152, $151, "%struct.aplcb*", 0);
 var $154=$tmp;
 var $155=($154|0)!=0;
 if($155){label=27;break;}else{label=28;break;}
 case 27: 
 var $157=$tmp;
 var $158=(($157)|0);
 var $159=$158;
 var $160=SAFE_HEAP_LOAD($159, "i8*", 0, 0);
 var $161=$cp;
 var $162=$cntsub;
 var $163=$typesub;
 var $164=_dtacopy($160,$161,$162,1,$163);
 label=28;break;
 case 28: 
 var $166=$cntsub;
 var $167=$1;
 var $168=(($167+20)|0);
 var $169=SAFE_HEAP_LOAD($168, "i32", 0, 0);
 var $170=(Math_imul($166,$169)|0);
 var $171=$cp;
 var $172=(($171+$170)|0);
 $cp=$172;
 label=29;break;
 case 29: 
 var $174=$i;
 var $175=((($174)+(1))|0);
 $i=$175;
 label=25;break;
 case 30: 
 label=31;break;
 case 31: 
 var $178=$axeout;
 var $179=_temp($178);
 var $180=_endoper($179);
 var $181=$dimin;
 var $182=_temp($181);
 var $183=_endoper($182);
 var $184=$dimout;
 var $185=_temp($184);
 var $186=_endoper($185);
 var $187=$dimsub;
 var $188=_temp($187);
 var $189=_endoper($188);
 var $190=$2;
 var $191=($190|0)!=0;
 if($191){label=32;break;}else{label=33;break;}
 case 32: 
 var $193=$tempaxes;
 var $194=$2;
 var $195=(($194+4)|0);
 var $196=SAFE_HEAP_LOAD($195, "i32", 0, 0);
 var $197=((($196)+($193))|0);
 SAFE_HEAP_STORE($195, $197, "i32", 0);
 label=33;break;
 case 33: 
 var $199=$1;
 var $200=($199|0)!=0;
 if($200){label=34;break;}else{label=35;break;}
 case 34: 
 var $202=$temprite;
 var $203=$1;
 var $204=(($203+4)|0);
 var $205=SAFE_HEAP_LOAD($204, "i32", 0, 0);
 var $206=((($205)+($202))|0);
 SAFE_HEAP_STORE($204, $206, "i32", 0);
 label=35;break;
 case 35: 
 var $208=$2;
 var $209=$1;
 var $210=$out;
 var $211=_errstop(0,$208,$209,$210);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $211;
  default: assert(0, "bad label: " + label);
 }

}


function _encodbl($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $datacnt;
 var $datatyp;
 var $i;
 var $ip;
 var $rank;
 var $out;
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 var $4=_matchok($2,$3,2);
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 var $8=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=(Math_imul($10,$13)|0);
 $datacnt=$14;
 var $15=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$17&78;
 $datatyp=$18;
 var $19=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $20=(($19+12)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $23=(($22+12)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=((($21)+($24))|0);
 $rank=$25;
 var $26=$datacnt;
 var $27=$datatyp;
 var $28=((($27)+(1))|0);
 var $29=$rank;
 var $30=_getcb(0,$26,$28,$29,0);
 $out=$30;
 var $31=$rank;
 var $32=($31|0)>1;
 if($32){label=4;break;}else{label=5;break;}
 case 4: 
 var $34=$out;
 var $35=(($34+16)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32*", 0, 0);
 var $37=$36;
 var $38=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $39=(($38+16)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32*", 0, 0);
 var $41=$40;
 var $42=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $43=(($42+12)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=_intcopy($37,$41,$44,1);
 var $46=$45;
 $ip=$46;
 var $47=$ip;
 var $48=$47;
 var $49=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $50=(($49+16)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32*", 0, 0);
 var $52=$51;
 var $53=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $54=(($53+12)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=_intcopy($48,$52,$55,1);
 var $57=$56;
 $ip=$57;
 label=5;break;
 case 5: 
 var $59=$datacnt;
 var $60=($59|0)!=0;
 if($60){label=6;break;}else{label=7;break;}
 case 6: 
 var $62=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $63=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $64=$out;
 var $65=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $66=(($65)|0);
 var $67=$66;
 var $68=SAFE_HEAP_LOAD($67, "double*", 0, 0);
 var $69=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $70=(($69)|0);
 var $71=$70;
 var $72=SAFE_HEAP_LOAD($71, "double*", 0, 0);
 var $73=$out;
 var $74=(($73)|0);
 var $75=$74;
 var $76=SAFE_HEAP_LOAD($75, "double*", 0, 0);
 _encodeb($62,$63,$64,$68,$72,$76);
 label=7;break;
 case 7: 
 var $78=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $79=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $80=$out;
 var $81=_errstop(0,$78,$79,$80);
 $1=$81;
 label=8;break;
 case 8: 
 var $83=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $83;
  default: assert(0, "bad label: " + label);
 }

}


function _encodeb($left,$rite,$out,$ldata,$rdata,$odata){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $j;
 var $k;
 var $m;
 var $laxicnt=sp;
 var $lbotcnt=(sp)+(8);
 var $ltopcnt=(sp)+(16);
 var $oaxicnt=(sp)+(24);
 var $obotcnt=(sp)+(32);
 var $otopcnt=(sp)+(40);
 var $holdrite;
 var $ip;
 var $jp;
 var $kp;
 var $leftbase;
 var $outbase;
 var $rad;
 var $wrk;
 $1=$left;
 $2=$rite;
 $3=$out;
 $4=$ldata;
 $5=$rdata;
 $6=$odata;
 var $7=$1;
 var $8=_axispre($7,1,$laxicnt,$lbotcnt,$ltopcnt);
 $i=$8;
 var $9=$3;
 var $10=_axispre($9,1,$oaxicnt,$obotcnt,$otopcnt);
 $i=$10;
 var $11=SAFE_HEAP_LOAD($oaxicnt, "i32", 0, 0);
 var $12=SAFE_HEAP_LOAD($obotcnt, "i32", 0, 0);
 var $13=(Math_imul($11,$12)|0);
 $m=$13;
 $i=0;
 label=2;break;
 case 2: 
 var $15=$i;
 var $16=$2;
 var $17=(($16+8)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=($15|0)<($18|0);
 if($19){label=3;break;}else{label=19;break;}
 case 3: 
 var $21=$5;
 var $22=(($21+8)|0);
 $5=$22;
 var $23=SAFE_HEAP_LOAD($21, "double", 0, 0);
 $holdrite=$23;
 var $24=$6;
 var $25=(($24+8)|0);
 $6=$25;
 $outbase=$24;
 var $26=$4;
 $leftbase=$26;
 $j=0;
 label=4;break;
 case 4: 
 var $28=$j;
 var $29=SAFE_HEAP_LOAD($lbotcnt, "i32", 0, 0);
 var $30=($28|0)<($29|0);
 if($30){label=5;break;}else{label=17;break;}
 case 5: 
 var $32=$outbase;
 var $33=$j;
 var $34=$2;
 var $35=(($34+8)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=(Math_imul($33,$36)|0);
 var $38=(($32+($37<<3))|0);
 var $39=$m;
 var $40=(($38+($39<<3))|0);
 $jp=$40;
 $kp=$40;
 $k=0;
 label=6;break;
 case 6: 
 var $42=$k;
 var $43=SAFE_HEAP_LOAD($oaxicnt, "i32", 0, 0);
 var $44=($42|0)<($43|0);
 if($44){label=7;break;}else{label=9;break;}
 case 7: 
 var $46=SAFE_HEAP_LOAD($obotcnt, "i32", 0, 0);
 var $47=$kp;
 var $48=(((-$46))|0);
 var $49=(($47+($48<<3))|0);
 $kp=$49;
 SAFE_HEAP_STORE($49, 0, "double", 0);
 label=8;break;
 case 8: 
 var $51=$k;
 var $52=((($51)+(1))|0);
 $k=$52;
 label=6;break;
 case 9: 
 var $54=$leftbase;
 var $55=(($54+8)|0);
 $leftbase=$55;
 var $56=SAFE_HEAP_LOAD($laxicnt, "i32", 0, 0);
 var $57=SAFE_HEAP_LOAD($lbotcnt, "i32", 0, 0);
 var $58=(Math_imul($56,$57)|0);
 var $59=(($54+($58<<3))|0);
 $ip=$59;
 var $60=$holdrite;
 $wrk=$60;
 $k=0;
 label=10;break;
 case 10: 
 var $62=$k;
 var $63=SAFE_HEAP_LOAD($laxicnt, "i32", 0, 0);
 var $64=($62|0)<($63|0);
 if($64){label=11;break;}else{label=15;break;}
 case 11: 
 var $66=SAFE_HEAP_LOAD($lbotcnt, "i32", 0, 0);
 var $67=$ip;
 var $68=(((-$66))|0);
 var $69=(($67+($68<<3))|0);
 $ip=$69;
 var $70=SAFE_HEAP_LOAD($69, "double", 0, 0);
 $rad=$70;
 var $71=$wrk;
 var $72=_residue($70,$71);
 var $73=SAFE_HEAP_LOAD($obotcnt, "i32", 0, 0);
 var $74=$jp;
 var $75=(((-$73))|0);
 var $76=(($74+($75<<3))|0);
 $jp=$76;
 SAFE_HEAP_STORE($76, $72, "double", 0);
 var $77=$rad;
 var $78=$77==0;
 if($78){label=12;break;}else{label=13;break;}
 case 12: 
 label=15;break;
 case 13: 
 var $81=$wrk;
 var $82=$jp;
 var $83=SAFE_HEAP_LOAD($82, "double", 0, 0);
 var $84=($81)-($83);
 var $85=$rad;
 var $86=($84)/($85);
 $wrk=$86;
 label=14;break;
 case 14: 
 var $88=$k;
 var $89=((($88)+(1))|0);
 $k=$89;
 label=10;break;
 case 15: 
 label=16;break;
 case 16: 
 var $92=$j;
 var $93=((($92)+(1))|0);
 $j=$93;
 label=4;break;
 case 17: 
 label=18;break;
 case 18: 
 var $96=$i;
 var $97=((($96)+(1))|0);
 $i=$97;
 label=2;break;
 case 19: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _endoper($op){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $dp;
 var $v;
 var $i;
 $1=$op;
 var $2=$1;
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 label=25;break;
 case 3: 
 var $6=$1;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=$8&256;
 var $10=($9|0)!=0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$1;
 var $13=$12;
 var $14=_expunge($13);
 $v=$14;
 label=25;break;
 case 5: 
 var $16=$1;
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$18&1;
 var $20=($19|0)!=0;
 if($20){label=7;break;}else{label=6;break;}
 case 6: 
 label=25;break;
 case 7: 
 var $23=$1;
 var $24=(($23)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "%struct.aplcb**", 0, 0);
 $dp=$26;
 var $27=$1;
 var $28=(($27+4)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=$29&32;
 var $31=($30|0)!=0;
 if($31){label=8;break;}else{label=24;break;}
 case 8: 
 var $33=$1;
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$35&1024;
 var $37=($36|0)!=0;
 if($37){label=9;break;}else{label=16;break;}
 case 9: 
 var $39=$1;
 var $40=(($39+8)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 $i=$41;
 var $42=($41|0)!=0;
 if($42){label=10;break;}else{label=14;break;}
 case 10: 
 label=11;break;
 case 11: 
 var $45=$i;
 var $46=((($45)-(1))|0);
 $i=$46;
 var $47=($45|0)!=0;
 if($47){label=12;break;}else{label=13;break;}
 case 12: 
 var $49=$dp;
 var $50=(($49+4)|0);
 $dp=$50;
 var $51=SAFE_HEAP_LOAD($49, "%struct.aplcb*", 0, 0);
 _endoper($51);
 label=11;break;
 case 13: 
 label=15;break;
 case 14: 
 label=15;break;
 case 15: 
 label=23;break;
 case 16: 
 var $56=$1;
 var $57=(($56+8)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=($58|0)!=0;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 var $61=$1;
 var $62=(($61+8)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $66=$63;label=19;break;
 case 18: 
 var $66=1;label=19;break;
 case 19: 
 var $66;
 $i=$66;
 label=20;break;
 case 20: 
 var $68=$i;
 var $69=((($68)-(1))|0);
 $i=$69;
 var $70=($68|0)!=0;
 if($70){label=21;break;}else{label=22;break;}
 case 21: 
 var $72=$dp;
 var $73=(($72+4)|0);
 $dp=$73;
 var $74=SAFE_HEAP_LOAD($72, "%struct.aplcb*", 0, 0);
 var $75=_temp($74);
 _endoper($75);
 label=20;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $79=$1;
 var $80=$79;
 _aplfree($80);
 label=25;break;
 case 25: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _enlista($pcount,$pdatatype,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cb;
 var $work;
 var $i;
 var $thistype;
 $1=$pcount;
 $2=$pdatatype;
 $3=$rite;
 var $4=$3;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&110;
 $thistype=$7;
 var $8=$thistype;
 var $9=($8|0)==32;
 if($9){label=2;break;}else{label=7;break;}
 case 2: 
 var $11=$3;
 var $12=(($11)|0);
 var $13=$12;
 var $14=SAFE_HEAP_LOAD($13, "%struct.aplcb**", 0, 0);
 $cb=$14;
 var $15=$3;
 var $16=(($15+8)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 $i=$17;
 label=3;break;
 case 3: 
 var $19=$i;
 var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=6;break;}
 case 4: 
 var $22=$1;
 var $23=$2;
 var $24=$cb;
 var $25=SAFE_HEAP_LOAD($24, "%struct.aplcb*", 0, 0);
 _enlista($22,$23,$25);
 label=5;break;
 case 5: 
 var $27=$i;
 var $28=((($27)-(1))|0);
 $i=$28;
 var $29=$cb;
 var $30=(($29+4)|0);
 $cb=$30;
 label=3;break;
 case 6: 
 label=24;break;
 case 7: 
 var $33=$3;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$1;
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=((($37)+($35))|0);
 SAFE_HEAP_STORE($36, $38, "i32", 0);
 var $39=$2;
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=$thistype;
 var $42=($40|0)!=($41|0);
 if($42){label=8;break;}else{label=23;break;}
 case 8: 
 var $44=$2;
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 if(($45|0)==4){ label=10;break;}else if(($45|0)==2){ label=15;break;}else if(($45|0)==0){ label=9;break;}else{label=21;break;}
 case 9: 
 var $47=$thistype;
 var $48=$2;
 SAFE_HEAP_STORE($48, $47, "i32", 0);
 label=22;break;
 case 10: 
 var $50=$thistype;
 var $51=($50|0)==2;
 if($51){label=12;break;}else{label=11;break;}
 case 11: 
 var $53=$thistype;
 var $54=($53|0)==64;
 if($54){label=12;break;}else{label=13;break;}
 case 12: 
 var $56=$thistype;
 var $57=$2;
 SAFE_HEAP_STORE($57, $56, "i32", 0);
 label=14;break;
 case 13: 
 var $59=$2;
 SAFE_HEAP_STORE($59, 32, "i32", 0);
 label=14;break;
 case 14: 
 label=22;break;
 case 15: 
 var $62=$thistype;
 var $63=($62|0)==64;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 var $65=$thistype;
 var $66=$2;
 SAFE_HEAP_STORE($66, $65, "i32", 0);
 label=20;break;
 case 17: 
 var $68=$thistype;
 var $69=($68|0)!=4;
 if($69){label=18;break;}else{label=19;break;}
 case 18: 
 var $71=$2;
 SAFE_HEAP_STORE($71, 32, "i32", 0);
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=22;break;
 case 21: 
 var $75=$2;
 SAFE_HEAP_STORE($75, 32, "i32", 0);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _enlistb($totype,$tosize,$to,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $cb;
 var $wrk;
 var $i;
 var $thistype;
 var $from;
 $2=$totype;
 $3=$tosize;
 $4=$to;
 $5=$rite;
 var $6=$5;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=$8&110;
 $thistype=$9;
 var $10=$thistype;
 var $11=($10|0)==32;
 if($11){label=2;break;}else{label=7;break;}
 case 2: 
 var $13=$5;
 var $14=(($13)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "%struct.aplcb**", 0, 0);
 $cb=$16;
 var $17=$5;
 var $18=(($17+8)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 $i=$19;
 label=3;break;
 case 3: 
 var $21=$i;
 var $22=($21|0)!=0;
 if($22){label=4;break;}else{label=6;break;}
 case 4: 
 var $24=$2;
 var $25=$3;
 var $26=$4;
 var $27=$cb;
 var $28=SAFE_HEAP_LOAD($27, "%struct.aplcb*", 0, 0);
 var $29=_enlistb($24,$25,$26,$28);
 $4=$29;
 label=5;break;
 case 5: 
 var $31=$i;
 var $32=((($31)-(1))|0);
 $i=$32;
 var $33=$cb;
 var $34=(($33+4)|0);
 $cb=$34;
 label=3;break;
 case 6: 
 label=26;break;
 case 7: 
 var $37=$5;
 var $38=(($37+8)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 $i=$39;
 var $40=$5;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "i8*", 0, 0);
 $from=$43;
 label=8;break;
 case 8: 
 var $45=$i;
 var $46=($45|0)!=0;
 if($46){label=9;break;}else{label=25;break;}
 case 9: 
 var $48=$2;
 var $49=($48|0)==32;
 if($49){label=10;break;}else{label=13;break;}
 case 10: 
 var $51=$thistype;
 var $52=_getcb(0,1,$51,0,0);
 $wrk=$52;
 var $53=$4;
 var $54=$53;
 SAFE_HEAP_STORE($54, $52, "%struct.aplcb*", 0);
 var $55=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $56=($55|0)!=0;
 if($56){label=11;break;}else{label=12;break;}
 case 11: 
 $1=0;
 label=27;break;
 case 12: 
 var $59=$wrk;
 var $60=(($59)|0);
 var $61=$60;
 var $62=SAFE_HEAP_LOAD($61, "i8*", 0, 0);
 var $63=$from;
 var $64=$thistype;
 var $65=_dtacopy($62,$63,1,1,$64);
 label=23;break;
 case 13: 
 var $67=$2;
 var $68=$thistype;
 var $69=($67|0)==($68|0);
 if($69){label=14;break;}else{label=15;break;}
 case 14: 
 var $71=$4;
 var $72=$from;
 var $73=$thistype;
 var $74=_dtacopy($71,$72,1,1,$73);
 label=22;break;
 case 15: 
 var $76=$2;
 var $77=($76|0)==64;
 if($77){label=16;break;}else{label=20;break;}
 case 16: 
 var $79=$thistype;
 var $80=($79|0)==4;
 if($80){label=17;break;}else{label=18;break;}
 case 17: 
 var $82=$from;
 var $83=$82;
 var $84=SAFE_HEAP_LOAD($83, "i32", 0, 0);
 var $85=($84|0);
 var $86=$4;
 var $87=$86;
 SAFE_HEAP_STORE($87, $85, "double", 0);
 label=19;break;
 case 18: 
 var $89=$from;
 var $90=$89;
 var $91=SAFE_HEAP_LOAD($90, "double", 0, 0);
 var $92=$4;
 var $93=$92;
 SAFE_HEAP_STORE($93, $91, "double", 0);
 label=19;break;
 case 19: 
 var $95=$4;
 var $96=$95;
 var $97=(($96+8)|0);
 SAFE_HEAP_STORE($97, 0, "double", 0);
 label=21;break;
 case 20: 
 var $99=$from;
 var $100=$99;
 var $101=SAFE_HEAP_LOAD($100, "i32", 0, 0);
 var $102=($101|0);
 var $103=$4;
 var $104=$103;
 SAFE_HEAP_STORE($104, $102, "double", 0);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $109=$i;
 var $110=((($109)-(1))|0);
 $i=$110;
 var $111=$5;
 var $112=(($111+20)|0);
 var $113=SAFE_HEAP_LOAD($112, "i32", 0, 0);
 var $114=$from;
 var $115=(($114+$113)|0);
 $from=$115;
 var $116=$3;
 var $117=$4;
 var $118=(($117+$116)|0);
 $4=$118;
 label=8;break;
 case 25: 
 label=26;break;
 case 26: 
 var $121=$4;
 $1=$121;
 label=27;break;
 case 27: 
 var $123=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $123;
  default: assert(0, "bad label: " + label);
 }

}


function _enlist($rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $count=sp;
 var $datatype=(sp)+(8);
 var $out;
 $2=$rite;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=_errstop(0,0,$6,0);
 $1=$7;
 label=10;break;
 case 3: 
 SAFE_HEAP_STORE($datatype, 0, "i32", 0);
 SAFE_HEAP_STORE($count, 0, "i32", 0);
 var $9=$2;
 _enlista($count,$datatype,$9);
 var $10=SAFE_HEAP_LOAD($count, "i32", 0, 0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=6;break;}
 case 4: 
 var $13=SAFE_HEAP_LOAD($datatype, "i32", 0, 0);
 var $14=($13|0)==32;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE($datatype, 8, "i32", 0);
 label=6;break;
 case 6: 
 var $17=SAFE_HEAP_LOAD($count, "i32", 0, 0);
 var $18=SAFE_HEAP_LOAD($datatype, "i32", 0, 0);
 var $19=((($18)+(1))|0);
 var $20=_getcb(0,$17,$19,1,0);
 $out=$20;
 var $21=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $22=($21|0)==0;
 if($22){label=7;break;}else{label=9;break;}
 case 7: 
 var $24=SAFE_HEAP_LOAD($count, "i32", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 var $27=SAFE_HEAP_LOAD($datatype, "i32", 0, 0);
 var $28=$out;
 var $29=(($28+20)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=$out;
 var $32=(($31)|0);
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "i8*", 0, 0);
 var $35=$2;
 var $36=_enlistb($27,$30,$34,$35);
 label=9;break;
 case 9: 
 var $38=$2;
 var $39=$out;
 var $40=_errstop(0,0,$38,$39);
 $1=$40;
 label=10;break;
 case 10: 
 var $42=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $42;
  default: assert(0, "bad label: " + label);
 }

}


function _enqueue($hdr,$old,$new){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$hdr;
 $2=$old;
 $3=$new;
 var $4=$1;
 var $5=(($4)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.el*", 0, 0);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$3;
 var $10=$1;
 var $11=(($10+4)|0);
 SAFE_HEAP_STORE($11, $9, "%struct.el*", 0);
 var $12=$1;
 var $13=(($12)|0);
 SAFE_HEAP_STORE($13, $9, "%struct.el*", 0);
 var $14=$3;
 var $15=(($14+4)|0);
 SAFE_HEAP_STORE($15, 0, "%struct.el*", 0);
 var $16=$3;
 var $17=(($16)|0);
 SAFE_HEAP_STORE($17, 0, "%struct.el*", 0);
 label=10;break;
 case 3: 
 var $19=$2;
 var $20=($19|0)==0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$1;
 var $23=(($22)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.el*", 0, 0);
 $2=$24;
 var $25=$3;
 var $26=$1;
 var $27=(($26)|0);
 SAFE_HEAP_STORE($27, $25, "%struct.el*", 0);
 var $28=$2;
 var $29=$3;
 var $30=(($29)|0);
 SAFE_HEAP_STORE($30, $28, "%struct.el*", 0);
 var $31=$3;
 var $32=$2;
 var $33=(($32+4)|0);
 SAFE_HEAP_STORE($33, $31, "%struct.el*", 0);
 var $34=$3;
 var $35=(($34+4)|0);
 SAFE_HEAP_STORE($35, 0, "%struct.el*", 0);
 label=9;break;
 case 5: 
 var $37=$2;
 var $38=(($37)|0);
 var $39=SAFE_HEAP_LOAD($38, "%struct.el*", 0, 0);
 var $40=$3;
 var $41=(($40)|0);
 SAFE_HEAP_STORE($41, $39, "%struct.el*", 0);
 var $42=$3;
 var $43=(($42)|0);
 var $44=SAFE_HEAP_LOAD($43, "%struct.el*", 0, 0);
 var $45=($44|0)==0;
 if($45){label=6;break;}else{label=7;break;}
 case 6: 
 var $47=$3;
 var $48=$1;
 var $49=(($48+4)|0);
 SAFE_HEAP_STORE($49, $47, "%struct.el*", 0);
 label=8;break;
 case 7: 
 var $51=$3;
 var $52=$3;
 var $53=(($52)|0);
 var $54=SAFE_HEAP_LOAD($53, "%struct.el*", 0, 0);
 var $55=(($54+4)|0);
 SAFE_HEAP_STORE($55, $51, "%struct.el*", 0);
 label=8;break;
 case 8: 
 var $57=$3;
 var $58=$2;
 var $59=(($58)|0);
 SAFE_HEAP_STORE($59, $57, "%struct.el*", 0);
 var $60=$2;
 var $61=$3;
 var $62=(($61+4)|0);
 SAFE_HEAP_STORE($62, $60, "%struct.el*", 0);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _eq($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $diff;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=$3>$4;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=$2;
 var $9=($7)-($8);
 var $15=$9;label=4;break;
 case 3: 
 var $11=$2;
 var $12=$1;
 var $13=($11)-($12);
 var $15=$13;label=4;break;
 case 4: 
 var $15;
 $diff=$15;
 var $16=$diff;
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=$16<=$17;
 var $19=($18&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }

}


function _eqp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=$5>$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=$2;
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 var $14=($11)-($13);
 var $22=$14;label=4;break;
 case 3: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 var $18=$1;
 var $19=SAFE_HEAP_LOAD($18, "double", 0, 0);
 var $20=($17)-($19);
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 $diff=$22;
 var $23=$diff;
 var $24=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $25=$23<=$24;
 var $26=($25&1);
 var $27=$3;
 SAFE_HEAP_STORE($27, $26, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _eqx($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 var $lef;
 var $rit;
 var $i;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$3;
 SAFE_HEAP_STORE($4, 1, "i32", 0);
 $i=2;
 label=2;break;
 case 2: 
 var $6=$i;
 var $7=((($6)-(1))|0);
 $i=$7;
 var $8=($6|0)!=0;
 if($8){label=3;break;}else{label=9;break;}
 case 3: 
 var $10=$1;
 var $11=$i;
 var $12=(($10+($11<<3))|0);
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 $lef=$13;
 var $14=$2;
 var $15=$i;
 var $16=(($14+($15<<3))|0);
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 $rit=$17;
 var $18=$lef;
 var $19=$rit;
 var $20=$18>$19;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$lef;
 var $23=$rit;
 var $24=($22)-($23);
 var $30=$24;label=6;break;
 case 5: 
 var $26=$rit;
 var $27=$lef;
 var $28=($26)-($27);
 var $30=$28;label=6;break;
 case 6: 
 var $30;
 $diff=$30;
 var $31=$diff;
 var $32=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $33=$31>$32;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=$3;
 SAFE_HEAP_STORE($35, 0, "i32", 0);
 label=9;break;
 case 8: 
 label=2;break;
 case 9: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _errinit(){
 var label=0;


 var $1=___errno_location();
 SAFE_HEAP_STORE($1, 0, "i32", 0);
 var $2=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 return $2;
}


function _errstop($rc,$left,$rite,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $2=$rc;
 $3=$left;
 $4=$rite;
 $5=$out;
 var $6=$3;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$3;
 var $10=_endoper($9);
 label=3;break;
 case 3: 
 var $12=$4;
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 var $15=$4;
 var $16=$3;
 var $17=($15|0)!=($16|0);
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=$4;
 var $20=_endoper($19);
 label=6;break;
 case 6: 
 var $22=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $23=$2;
 var $24=((($22)+($23))|0);
 var $25=0!=($24|0);
 if($25){label=8;break;}else{label=7;break;}
 case 7: 
 var $27=___errno_location();
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=($28|0)>1;
 if($29){label=8;break;}else{label=15;break;}
 case 8: 
 var $31=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $32=($31|0)==0;
 if($32){label=9;break;}else{label=10;break;}
 case 9: 
 var $34=$2;
 SAFE_HEAP_STORE(4592, $34, "i32", 0);
 label=10;break;
 case 10: 
 var $36=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $37=($36|0)==0;
 if($37){label=11;break;}else{label=12;break;}
 case 11: 
 SAFE_HEAP_STORE(4592, 20, "i32", 0);
 label=12;break;
 case 12: 
 var $40=$5;
 var $41=($40|0)!=0;
 if($41){label=13;break;}else{label=14;break;}
 case 13: 
 var $43=$5;
 var $44=_endoper($43);
 label=14;break;
 case 14: 
 $1=0;
 label=16;break;
 case 15: 
 var $47=$5;
 $1=$47;
 label=16;break;
 case 16: 
 var $49=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }

}


function _execalt($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $out;
 $2=$left;
 $3=$rite;
 $out=0;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=8;break;
 case 3: 
 var $11=$3;
 var $12=_executg($11);
 $out=$12;
 $3=0;
 var $13=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 var $16=$out;
 var $17=_endoper($16);
 var $18=_errinit();
 var $19=$2;
 var $20=_executg($19);
 $out=$20;
 $2=0;
 label=5;break;
 case 5: 
 var $22=$out;
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $26=(($25+48)|0);
 SAFE_HEAP_STORE($26, 2, "i32", 0);
 label=7;break;
 case 7: 
 var $28=$2;
 var $29=$3;
 var $30=$out;
 var $31=_errstop(0,$28,$29,$30);
 $1=$31;
 label=8;break;
 case 8: 
 var $33=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $33;
  default: assert(0, "bad label: " + label);
 }

}


function _execasgn($lefttok,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 $1=$lefttok;
 $2=$rite;
 $out=0;
 var $3=$1;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 switch(($5|0)){case -28:{ label=10;break;}case -29:{ label=11;break;}case -34:{ label=12;break;}case 44:{ label=13;break;}case 49:{ label=14;break;}case -4:{ label=2;break;}case -12:{ label=3;break;}case -14:{ label=4;break;}case -33:{ label=5;break;}case -19:{ label=6;break;}case -21:{ label=7;break;}case -24:{ label=8;break;}case -26:{ label=9;break;}default:{label=15;break;}}break;
 case 2: 
 var $7=$1;
 var $8=(($7+12)|0);
 var $9=$8;
 var $10=SAFE_HEAP_LOAD($9, "i8*", 0, 0);
 var $11=$2;
 var $12=_assign($10,$11);
 $out=$12;
 label=16;break;
 case 3: 
 var $14=$2;
 var $15=_assign(2568,$14);
 $out=$15;
 label=16;break;
 case 4: 
 var $17=$2;
 var $18=_assign(2560,$17);
 $out=$18;
 label=16;break;
 case 5: 
 var $20=$2;
 var $21=_assign(2552,$20);
 $out=$21;
 label=16;break;
 case 6: 
 var $23=$2;
 var $24=_assign(2544,$23);
 $out=$24;
 label=16;break;
 case 7: 
 var $26=$2;
 var $27=_assign(2536,$26);
 $out=$27;
 label=16;break;
 case 8: 
 var $29=$2;
 var $30=_assign(2448,$29);
 $out=$30;
 label=16;break;
 case 9: 
 var $32=$2;
 var $33=_assign(2440,$32);
 $out=$33;
 var $34=$out;
 _aplsrand($34);
 label=16;break;
 case 10: 
 var $36=$2;
 var $37=_assign(2432,$36);
 $out=$37;
 label=16;break;
 case 11: 
 var $39=$2;
 var $40=_assign(2424,$39);
 $out=$40;
 label=16;break;
 case 12: 
 var $42=$2;
 var $43=_assign(2416,$42);
 $out=$43;
 label=16;break;
 case 13: 
 var $45=$2;
 var $46=_quadout($45);
 $out=$46;
 _aplnewl();
 label=16;break;
 case 14: 
 var $48=$2;
 var $49=_qquadout($48);
 $out=$49;
 label=16;break;
 case 15: 
 SAFE_HEAP_STORE(4592, 66, "i32", 0);
 var $51=$2;
 var $52=_endoper($51);
 $out=0;
 label=16;break;
 case 16: 
 var $54=$1;
 _execfree($54);
 var $55=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $55;
  default: assert(0, "bad label: " + label);
 }

}


function _execaxis($stackhdr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tok;
 $2=$stackhdr;
 var $3=$2;
 var $4=_pop($3);
 var $5=$4;
 $tok=$5;
 var $6=0==($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 SAFE_HEAP_STORE(4592, 83, "i32", 0);
 $1=0;
 label=4;break;
 case 3: 
 var $9=$tok;
 var $10=_execaxit($9);
 $1=$10;
 label=4;break;
 case 4: 
 var $12=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _execaxit($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $axcb;
 var $axtok;
 $1=$tok;
 $axcb=0;
 $axtok=0;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=$3;
 var $5=$4;
 var $6=_pop($5);
 var $7=$6;
 $axtok=$7;
 var $8=0==($7|0);
 if($8){label=4;break;}else{label=2;break;}
 case 2: 
 var $10=$axtok;
 var $11=_execgetp($10);
 $axcb=$11;
 var $12=0==($11|0);
 if($12){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=$1;
 var $15=(($14+12)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "%struct.apltoken*", 0, 0);
 var $18=0!=($17|0);
 if($18){label=4;break;}else{label=10;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 83, "i32", 0);
 var $20=$axcb;
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$axcb;
 _endoper($23);
 label=9;break;
 case 6: 
 var $25=$axtok;
 var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=$axtok;
 _execfree($28);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 $axcb=0;
 label=10;break;
 case 10: 
 var $32=$1;
 _execfree($32);
 var $33=$axcb;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $33;
  default: assert(0, "bad label: " + label);
 }

}


function _execaxiv($axcb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $axis;
 var $i;
 $1=$axcb;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 $i=$4;
 var $5=$1;
 var $6=_value($5);
 $axis=$6;
 var $7=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=8;break;}
 case 2: 
 var $10=$i;
 var $11=($10|0)!=1;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4592, 83, "i32", 0);
 label=7;break;
 case 4: 
 var $14=$axis;
 var $15=$14<0;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $20=$axis;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $20;
  default: assert(0, "bad label: " + label);
 }

}


function _execbrkt($brtok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $op;
 var $tok;
 var $i;
 $2=$brtok;
 $tok=0;
 var $3=$2;
 var $4=(($3+8)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 $i=$5;
 var $6=$2;
 _execfree($6);
 var $7=$i;
 var $8=_newtok(-8,0,$7,0,0);
 $2=$8;
 var $9=$2;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=21;break;
 case 3: 
 label=4;break;
 case 4: 
 var $14=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $15=($14|0)==0;
 if($15){label=5;break;}else{label=20;break;}
 case 5: 
 var $17=_execexec();
 $op=$17;
 var $18=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 label=20;break;
 case 7: 
 var $22=$op;
 var $23=($22|0)==0;
 if($23){label=8;break;}else{label=9;break;}
 case 8: 
 var $25=$2;
 var $26=(($25+8)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=_newtok(-9,0,$27,0,0);
 $op=$28;
 label=9;break;
 case 9: 
 var $30=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $31=($30|0)!=0;
 if($31){label=10;break;}else{label=11;break;}
 case 10: 
 label=20;break;
 case 11: 
 var $34=$2;
 var $35=(($34+12)|0);
 var $36=$35;
 var $37=$36;
 var $38=$op;
 var $39=$38;
 var $40=_lifo($37,$39);
 var $41=$40;
 $op=$41;
 var $42=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $43=(($42+44)|0);
 var $44=$43;
 var $45=_pop($44);
 var $46=$45;
 $tok=$46;
 var $47=0==($46|0);
 if($47){label=12;break;}else{label=13;break;}
 case 12: 
 SAFE_HEAP_STORE(4592, 80, "i32", 0);
 label=13;break;
 case 13: 
 var $50=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $51=($50|0)!=0;
 if($51){label=14;break;}else{label=15;break;}
 case 14: 
 label=20;break;
 case 15: 
 var $54=$tok;
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=($56|0)==59;
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 label=20;break;
 case 17: 
 var $60=$tok;
 var $61=(($60+4)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=($62|0)!=27;
 if($63){label=18;break;}else{label=19;break;}
 case 18: 
 SAFE_HEAP_STORE(4592, 81, "i32", 0);
 label=19;break;
 case 19: 
 var $66=$tok;
 _execfree($66);
 $tok=0;
 label=4;break;
 case 20: 
 var $68=$tok;
 _execfree($68);
 var $69=$2;
 $1=$69;
 label=21;break;
 case 21: 
 var $71=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $71;
  default: assert(0, "bad label: " + label);
 }

}


function _execdota($left,$rite,$type,$lscp,$rscp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $out;
 var $complex_identity=sp;
 $1=$left;
 $2=$rite;
 $3=$type;
 $4=$lscp;
 $5=$rscp;
 $out=0;
 var $6=$3;
 if(($6|0)==2){ label=16;break;}else if(($6|0)==64){ label=2;break;}else if(($6|0)==4){ label=9;break;}else{label=17;break;}
 case 2: 
 var $8=$5;
 var $9=(($8+16)|0);
 var $10=(($9+16)|0);
 var $11=SAFE_HEAP_LOAD($10, "void (double*, double*, double*)*", 0, 0);
 var $12=0!=($11|0);
 if($12){label=3;break;}else{label=6;break;}
 case 3: 
 var $14=$4;
 var $15=(($14+16)|0);
 var $16=(($15+16)|0);
 var $17=SAFE_HEAP_LOAD($16, "void (double*, double*, double*)*", 0, 0);
 var $18=0!=($17|0);
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$4;
 var $21=(($20)|0);
 var $22=(($21+8)|0);
 var $23=SAFE_HEAP_LOAD($22, "double", 0, 0);
 var $24=(($complex_identity)|0);
 SAFE_HEAP_STORE($24, $23, "double", 0);
 var $25=(($complex_identity+8)|0);
 SAFE_HEAP_STORE($25, 0, "double", 0);
 var $26=$4;
 var $27=(($26+16)|0);
 var $28=(($27+16)|0);
 var $29=SAFE_HEAP_LOAD($28, "void (double*, double*, double*)*", 0, 0);
 var $30=$29;
 var $31=$5;
 var $32=(($31+16)|0);
 var $33=(($32+16)|0);
 var $34=SAFE_HEAP_LOAD($33, "void (double*, double*, double*)*", 0, 0);
 var $35=$34;
 var $36=(($complex_identity)|0);
 var $37=$36;
 var $38=$1;
 var $39=$2;
 var $40=_innrprdp($30,$35,$37,$38,$39);
 $out=$40;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $43=$out;
 var $44=($43|0)!=0;
 if($44){label=7;break;}else{label=8;break;}
 case 7: 
 label=17;break;
 case 8: 
 label=9;break;
 case 9: 
 var $48=$5;
 var $49=(($48+16)|0);
 var $50=(($49)|0);
 var $51=SAFE_HEAP_LOAD($50, "void (i32*, i32*, i32*)*", 0, 0);
 var $52=0!=($51|0);
 if($52){label=10;break;}else{label=13;break;}
 case 10: 
 var $54=$4;
 var $55=(($54+16)|0);
 var $56=(($55)|0);
 var $57=SAFE_HEAP_LOAD($56, "void (i32*, i32*, i32*)*", 0, 0);
 var $58=0!=($57|0);
 if($58){label=11;break;}else{label=12;break;}
 case 11: 
 var $60=$4;
 var $61=(($60+16)|0);
 var $62=(($61)|0);
 var $63=SAFE_HEAP_LOAD($62, "void (i32*, i32*, i32*)*", 0, 0);
 var $64=$63;
 var $65=$5;
 var $66=(($65+16)|0);
 var $67=(($66)|0);
 var $68=SAFE_HEAP_LOAD($67, "void (i32*, i32*, i32*)*", 0, 0);
 var $69=$68;
 var $70=$4;
 var $71=(($70)|0);
 var $72=(($71)|0);
 var $73=$72;
 var $74=$1;
 var $75=$2;
 var $76=_innrprdp($64,$69,$73,$74,$75);
 $out=$76;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $79=$out;
 var $80=($79|0)!=0;
 if($80){label=14;break;}else{label=15;break;}
 case 14: 
 label=17;break;
 case 15: 
 label=16;break;
 case 16: 
 var $84=$1;
 var $85=$2;
 var $86=$3;
 var $87=$3;
 var $88=$4;
 var $89=$5;
 var $90=_execdotc($84,$85,$86,$87,$88,$89);
 $out=$90;
 label=17;break;
 case 17: 
 var $92=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $92;
  default: assert(0, "bad label: " + label);
 }

}


function _execdot($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $rfun;
 var $out;
 var $i;
 var $ltype;
 var $rtype;
 var $test;
 $2=$dp;
 $3=$left;
 $4=$rite;
 $out=0;
 var $5=$2;
 var $6=(($5+28)|0);
 var $7=(($6+8)|0);
 var $8=SAFE_HEAP_LOAD($7, "i8*", 0, 0);
 var $9=($8|0)==0;
 var $10=($9?1:0);
 $test=$10;
 var $11=$2;
 var $12=(($11+52)|0);
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i8*", 0, 0);
 var $15=($14|0)==0;
 var $16=($15?2:0);
 var $17=$test;
 var $18=((($17)+($16))|0);
 $test=$18;
 var $19=$test;
 if(($19|0)==2){ label=10;break;}else if(($19|0)==3){ label=11;break;}else if(($19|0)==0){ label=2;break;}else if(($19|0)==1){ label=9;break;}else{label=12;break;}
 case 2: 
 var $21=$3;
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=$23&110;
 $ltype=$24;
 var $25=$4;
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=$27&110;
 $rtype=$28;
 var $29=$ltype;
 var $30=$rtype;
 var $31=$29|$30;
 var $32=$31&8;
 var $33=($32|0)!=0;
 if($33){label=3;break;}else{label=4;break;}
 case 3: 
 var $35=$3;
 var $36=$4;
 var $37=$ltype;
 var $38=$rtype;
 var $39=$2;
 var $40=_execdotd($35,$36,$37,$38,$39);
 $out=$40;
 label=8;break;
 case 4: 
 var $42=$ltype;
 var $43=$rtype;
 var $44=($42|0)==($43|0);
 if($44){label=5;break;}else{label=6;break;}
 case 5: 
 var $46=$3;
 var $47=$4;
 var $48=$ltype;
 var $49=$2;
 var $50=(($49+28)|0);
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i8*", 0, 0);
 var $53=$2;
 var $54=(($53+52)|0);
 var $55=(($54+8)|0);
 var $56=SAFE_HEAP_LOAD($55, "i8*", 0, 0);
 var $57=_execdota($46,$47,$48,$52,$56);
 $out=$57;
 label=7;break;
 case 6: 
 var $59=$3;
 var $60=$4;
 var $61=$ltype;
 var $62=$rtype;
 var $63=$2;
 var $64=(($63+28)|0);
 var $65=(($64+8)|0);
 var $66=SAFE_HEAP_LOAD($65, "i8*", 0, 0);
 var $67=$66;
 var $68=$2;
 var $69=(($68+52)|0);
 var $70=(($69+8)|0);
 var $71=SAFE_HEAP_LOAD($70, "i8*", 0, 0);
 var $72=$71;
 var $73=_execdotc($59,$60,$61,$62,$67,$72);
 $out=$73;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=12;break;
 case 9: 
 var $77=$2;
 var $78=$3;
 var $79=$4;
 var $80=_execdote($77,$78,$79);
 $out=$80;
 label=12;break;
 case 10: 
 var $82=$2;
 var $83=$3;
 var $84=$4;
 var $85=_execdotf($82,$83,$84);
 $out=$85;
 label=12;break;
 case 11: 
 var $87=$2;
 var $88=$3;
 var $89=$4;
 var $90=_execdotg($87,$88);
 $out=$90;
 label=12;break;
 case 12: 
 var $92=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $93=($92|0)==0;
 if($93){label=13;break;}else{label=15;break;}
 case 13: 
 var $95=$out;
 var $96=($95|0)==0;
 if($96){label=14;break;}else{label=15;break;}
 case 14: 
 var $98=$3;
 var $99=$4;
 var $100=$out;
 var $101=_errstop(78,$98,$99,$100);
 $1=$101;
 label=16;break;
 case 15: 
 var $103=$out;
 $1=$103;
 label=16;break;
 case 16: 
 var $105=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $105;
  default: assert(0, "bad label: " + label);
 }

}


function _execdotc($left,$rite,$ltype,$rtype,$lscp,$rscp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 $1=$left;
 $2=$rite;
 $3=$ltype;
 $4=$rtype;
 $5=$lscp;
 $6=$rscp;
 $out=0;
 var $7=$6;
 var $8=(($7+16)|0);
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "void (double*, double*, double*)*", 0, 0);
 var $11=0!=($10|0);
 if($11){label=2;break;}else{label=8;break;}
 case 2: 
 var $13=$5;
 var $14=(($13+16)|0);
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "void (double*, double*, double*)*", 0, 0);
 var $17=0!=($16|0);
 if($17){label=3;break;}else{label=8;break;}
 case 3: 
 var $19=$3;
 var $20=($19|0)!=2;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$1;
 var $23=_real($22);
 $1=$23;
 label=5;break;
 case 5: 
 var $25=$4;
 var $26=($25|0)!=2;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=$2;
 var $29=_real($28);
 $2=$29;
 label=7;break;
 case 7: 
 var $31=$5;
 var $32=(($31+16)|0);
 var $33=(($32+4)|0);
 var $34=SAFE_HEAP_LOAD($33, "void (double*, double*, double*)*", 0, 0);
 var $35=$34;
 var $36=$6;
 var $37=(($36+16)|0);
 var $38=(($37+4)|0);
 var $39=SAFE_HEAP_LOAD($38, "void (double*, double*, double*)*", 0, 0);
 var $40=$39;
 var $41=$5;
 var $42=(($41)|0);
 var $43=(($42+8)|0);
 var $44=$43;
 var $45=$1;
 var $46=$2;
 var $47=_innrprdp($35,$40,$44,$45,$46);
 $out=$47;
 label=8;break;
 case 8: 
 var $49=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }

}


function _execdotd($left,$rite,$ltype,$rtype,$dp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $db;
 var $sp;
 var $ep;
 $2=$left;
 $3=$rite;
 $4=$ltype;
 $5=$rtype;
 $6=$dp;
 var $7=$6;
 var $8=(($7+52)|0);
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i8*", 0, 0);
 var $11=$10;
 var $12=(($11)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 if(($13|0)==29){ label=2;break;}else if(($13|0)==62){ label=3;break;}else{label=4;break;}
 case 2: 
 $i=0;
 label=5;break;
 case 3: 
 $i=1;
 label=5;break;
 case 4: 
 var $17=$2;
 var $18=$3;
 var $19=_errstop(75,$17,$18,0);
 $1=$19;
 label=13;break;
 case 5: 
 var $21=$6;
 var $22=(($21+28)|0);
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "i8*", 0, 0);
 var $25=$24;
 $sp=$25;
 var $26=$4;
 var $27=$5;
 var $28=($26|0)==($27|0);
 if($28){label=6;break;}else{label=9;break;}
 case 6: 
 var $30=$sp;
 var $31=(($30+16)|0);
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "void (double*, double*, double*)*", 0, 0);
 $db=$33;
 var $34=0!=($33|0);
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 var $36=$6;
 var $37=(($36+52)|0);
 var $38=(($37+4)|0);
 var $39=SAFE_HEAP_LOAD($38, "i8*", 0, 0);
 var $40=$39;
 $ep=$40;
 var $41=$db;
 var $42=$41;
 var $43=$ep;
 var $44=(($43+72)|0);
 var $45=SAFE_HEAP_LOAD($44, "void (i8*, i8*, double*)*", 0, 0);
 var $46=$45;
 var $47=$sp;
 var $48=(($47)|0);
 var $49=(($48+8)|0);
 var $50=$49;
 var $51=$2;
 var $52=$3;
 var $53=_innrprdp($42,$46,$50,$51,$52);
 $1=$53;
 label=13;break;
 case 8: 
 label=12;break;
 case 9: 
 var $56=$sp;
 var $57=(($56+16)|0);
 var $58=(($57+4)|0);
 var $59=SAFE_HEAP_LOAD($58, "void (double*, double*, double*)*", 0, 0);
 $db=$59;
 var $60=0!=($59|0);
 if($60){label=10;break;}else{label=11;break;}
 case 10: 
 var $62=$db;
 var $63=$62;
 var $64=$i;
 var $65=$sp;
 var $66=(($65)|0);
 var $67=(($66+8)|0);
 var $68=SAFE_HEAP_LOAD($67, "double", 0, 0);
 var $69=$2;
 var $70=$3;
 var $71=_innrprdx($63,$64,$68,$69,$70);
 $1=$71;
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 var $74=$2;
 var $75=$3;
 var $76=_errstop(78,$74,$75,0);
 $1=$76;
 label=13;break;
 case 13: 
 var $78=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $78;
  default: assert(0, "bad label: " + label);
 }

}


function _execdote($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $lo;
 var $opera;
 var $operb;
 var $identity;
 var $ro;
 var $code;
 var $flags;
 var $typ=(sp)+(16);
 var $i;
 var $ityp=(sp)+(24);
 var $j;
 var $k;
 var $n;
 var $otyp=(sp)+(32);
 var $laxcnt=(sp)+(40);
 var $laxis=(sp)+(48);
 var $lbot=(sp)+(56);
 var $linc=(sp)+(64);
 var $ltop=(sp)+(72);
 var $ltyp;
 var $raxcnt=(sp)+(80);
 var $rbot=(sp)+(88);
 var $rinc=(sp)+(96);
 var $rtop=(sp)+(104);
 var $rtyp;
 var $dout=(sp)+(112);
 var $ip;
 var $ldata=(sp)+(120);
 var $op;
 var $rdata=(sp)+(128);
 var $odata;
 var $out;
 var $wrkh;
 var $wrkl;
 var $wrko;
 var $wrkr;
 var $wrka;
 var $wrkb;
 var $wrkc;
 $2=$dp;
 SAFE_HEAP_STORE($3, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($typ, 32, "i32", 0);
 var $5=$2;
 var $6=(($5+52)|0);
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i8*", 0, 0);
 var $9=$8;
 var $10=(($9)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 $code=$11;
 var $12=$2;
 var $13=(($12+52)|0);
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=$15;
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 $flags=$18;
 var $19=$2;
 var $20=(($19+28)|0);
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i8*", 0, 0);
 $lo=$22;
 var $23=$2;
 var $24=(($23+52)|0);
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i8*", 0, 0);
 var $27=$26;
 $ro=$27;
 var $28=$ro;
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $31=(($30+4)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=$32&110;
 var $34=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $35=(($34+4)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=$36&110;
 var $38=$flags;
 var $39=$code;
 var $40=_dyadoper($29,$ityp,$otyp,$33,$37,$38,$39);
 $operb=$40;
 var $41=$operb;
 var $42=($41|0)==0;
 if($42){label=2;break;}else{label=3;break;}
 case 2: 
 var $44=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $45=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $46=_errstop(1,$44,$45,0);
 $1=$46;
 label=22;break;
 case 3: 
 var $48=SAFE_HEAP_LOAD($ityp, "i32", 0, 0);
 var $49=_matchok($3,$4,$48);
 var $50=($49|0)!=0;
 if($50){label=5;break;}else{label=4;break;}
 case 4: 
 $1=0;
 label=22;break;
 case 5: 
 var $53=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $54=(($53+4)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=$55&110;
 $ltyp=$56;
 var $57=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $58=(($57+4)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=$59&110;
 $rtyp=$60;
 var $61=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $62=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $63=_innrcom(2,$61,$62,$laxis,$laxcnt,$lbot,$ltop,$linc,$raxcnt,$rbot,$rtop,$rinc,$typ,$dout,$ldata,$rdata);
 $out=$63;
 var $64=$out;
 var $65=($64|0)==0;
 if($65){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=22;break;
 case 7: 
 var $68=$out;
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "%struct.aplcb**", 0, 0);
 $odata=$71;
 label=8;break;
 case 8: 
 var $73=SAFE_HEAP_LOAD($laxcnt, "i32", 0, 0);
 var $74=$ltyp;
 var $75=_getcb(0,$73,$74,1,0);
 $wrkl=$75;
 var $76=SAFE_HEAP_LOAD($raxcnt, "i32", 0, 0);
 var $77=$rtyp;
 var $78=_getcb(0,$76,$77,1,0);
 $wrkr=$78;
 var $79=SAFE_HEAP_LOAD($laxcnt, "i32", 0, 0);
 var $80=SAFE_HEAP_LOAD($otyp, "i32", 0, 0);
 var $81=_getcb(0,$79,$80,1,0);
 $wrkh=$81;
 var $82=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $83=($82|0)!=0;
 if($83){label=9;break;}else{label=10;break;}
 case 9: 
 label=21;break;
 case 10: 
 $i=0;
 label=11;break;
 case 11: 
 var $87=$i;
 var $88=SAFE_HEAP_LOAD($ltop, "i32", 0, 0);
 var $89=($87|0)<($88|0);
 if($89){label=12;break;}else{label=20;break;}
 case 12: 
 var $91=$wrkl;
 var $92=(($91)|0);
 var $93=$92;
 var $94=SAFE_HEAP_LOAD($93, "i8*", 0, 0);
 var $95=SAFE_HEAP_LOAD($ldata, "i8*", 0, 0);
 var $96=$i;
 var $97=SAFE_HEAP_LOAD($laxcnt, "i32", 0, 0);
 var $98=(Math_imul($96,$97)|0);
 var $99=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $100=(($99+20)|0);
 var $101=SAFE_HEAP_LOAD($100, "i32", 0, 0);
 var $102=(Math_imul($98,$101)|0);
 var $103=(($95+$102)|0);
 var $104=SAFE_HEAP_LOAD($laxcnt, "i32", 0, 0);
 var $105=$ltyp;
 var $106=_dtacopy($94,$103,$104,1,$105);
 $j=0;
 label=13;break;
 case 13: 
 var $108=$j;
 var $109=SAFE_HEAP_LOAD($rbot, "i32", 0, 0);
 var $110=($108|0)<($109|0);
 if($110){label=14;break;}else{label=18;break;}
 case 14: 
 var $112=$wrkr;
 var $113=(($112)|0);
 var $114=$113;
 var $115=SAFE_HEAP_LOAD($114, "i8*", 0, 0);
 var $116=SAFE_HEAP_LOAD($rdata, "i8*", 0, 0);
 var $117=$j;
 var $118=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $119=(($118+20)|0);
 var $120=SAFE_HEAP_LOAD($119, "i32", 0, 0);
 var $121=(Math_imul($117,$120)|0);
 var $122=(($116+$121)|0);
 var $123=SAFE_HEAP_LOAD($raxcnt, "i32", 0, 0);
 var $124=SAFE_HEAP_LOAD($rbot, "i32", 0, 0);
 var $125=$rtyp;
 var $126=_dtacopy($115,$122,$123,$124,$125);
 var $127=$operb;
 var $128=$wrkl;
 var $129=$wrkr;
 var $130=$wrkh;
 var $131=_dyadrun($127,$128,$129,$130);
 $wrko=$131;
 var $132=$wrko;
 var $133=$wrkh;
 var $134=($132|0)!=($133|0);
 if($134){label=15;break;}else{label=16;break;}
 case 15: 
 var $136=$wrkh;
 var $137=_temp($136);
 var $138=_endoper($137);
 var $139=$wrko;
 $wrkh=$139;
 label=16;break;
 case 16: 
 var $141=$2;
 var $142=$wrkh;
 var $143=_aplnest($142);
 var $144=_nreduces(1,$141,$143,1);
 var $145=_perm($144);
 var $146=$odata;
 var $147=(($146+4)|0);
 $odata=$147;
 SAFE_HEAP_STORE($146, $145, "%struct.aplcb*", 0);
 label=17;break;
 case 17: 
 var $149=$j;
 var $150=((($149)+(1))|0);
 $j=$150;
 label=13;break;
 case 18: 
 label=19;break;
 case 19: 
 var $153=$i;
 var $154=((($153)+(1))|0);
 $i=$154;
 label=11;break;
 case 20: 
 label=21;break;
 case 21: 
 var $157=$wrkh;
 var $158=_temp($157);
 var $159=_endoper($158);
 var $160=$wrkl;
 var $161=_temp($160);
 var $162=_endoper($161);
 var $163=$wrkr;
 var $164=_temp($163);
 var $165=_endoper($164);
 var $166=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $167=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $168=$out;
 var $169=_errstop(0,$166,$167,$168);
 $1=$169;
 label=22;break;
 case 22: 
 var $171=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $171;
  default: assert(0, "bad label: " + label);
 }

}


function _execdotf($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $otyp=sp;
 var $hit;
 var $i;
 var $j;
 var $k;
 var $n;
 var $rsw;
 var $laxcnt=(sp)+(8);
 var $laxis=(sp)+(16);
 var $lbot=(sp)+(24);
 var $linc=(sp)+(32);
 var $ltop=(sp)+(40);
 var $ltyp;
 var $raxcnt=(sp)+(48);
 var $rbot=(sp)+(56);
 var $rinc=(sp)+(64);
 var $rtop=(sp)+(72);
 var $rtyp;
 var $dout=(sp)+(80);
 var $ip;
 var $ld=(sp)+(88);
 var $op;
 var $rd=(sp)+(96);
 var $od;
 var $oh;
 var $out;
 var $oreal;
 var $wrkm;
 var $wrkl;
 var $wrkr;
 var $ro;
 var $opera;
 var $operb;
 var $identity;
 var $lo;
 $2=$dp;
 $3=$left;
 $4=$rite;
 SAFE_HEAP_STORE($otyp, 32, "i32", 0);
 $rsw=1;
 var $5=$3;
 var $6=$4;
 var $7=_innrcom(3,$5,$6,$laxis,$laxcnt,$lbot,$ltop,$linc,$raxcnt,$rbot,$rtop,$rinc,$otyp,$dout,$ld,$rd);
 $out=$7;
 var $8=$out;
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=30;break;
 case 3: 
 var $12=$2;
 var $13=(($12+28)|0);
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=$2;
 var $17=(($16+28)|0);
 var $18=(($17+8)|0);
 var $19=$2;
 var $20=(($19+28)|0);
 var $21=(($20+20)|0);
 var $22=_execdyas($15,$18,$21);
 var $23=$2;
 var $24=(($23+28)|0);
 var $25=(($24+16)|0);
 SAFE_HEAP_STORE($25, $22, "i32", 0);
 var $26=$out;
 var $27=(($26)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "%struct.aplcb**", 0, 0);
 $od=$29;
 label=4;break;
 case 4: 
 var $31=$3;
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=$33&110;
 $ltyp=$34;
 var $35=$4;
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=$37&110;
 $rtyp=$38;
 var $39=SAFE_HEAP_LOAD($laxcnt, "i32", 0, 0);
 var $40=$ltyp;
 var $41=_getcb(0,$39,$40,1,0);
 $wrkl=$41;
 var $42=SAFE_HEAP_LOAD($raxcnt, "i32", 0, 0);
 var $43=$rtyp;
 var $44=_getcb(0,$42,$43,1,0);
 $wrkr=$44;
 var $45=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $46=($45|0)!=0;
 if($46){label=5;break;}else{label=6;break;}
 case 5: 
 label=29;break;
 case 6: 
 $i=0;
 label=7;break;
 case 7: 
 var $50=$i;
 var $51=SAFE_HEAP_LOAD($ltop, "i32", 0, 0);
 var $52=($50|0)<($51|0);
 if($52){label=8;break;}else{label=24;break;}
 case 8: 
 var $54=$wrkl;
 var $55=(($54)|0);
 var $56=$55;
 var $57=SAFE_HEAP_LOAD($56, "i8*", 0, 0);
 var $58=SAFE_HEAP_LOAD($ld, "i8*", 0, 0);
 var $59=$i;
 var $60=SAFE_HEAP_LOAD($laxcnt, "i32", 0, 0);
 var $61=(Math_imul($59,$60)|0);
 var $62=$3;
 var $63=(($62+20)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=(Math_imul($61,$64)|0);
 var $66=(($58+$65)|0);
 var $67=SAFE_HEAP_LOAD($laxcnt, "i32", 0, 0);
 var $68=$ltyp;
 var $69=_dtacopy($57,$66,$67,1,$68);
 $j=0;
 label=9;break;
 case 9: 
 var $71=$j;
 var $72=SAFE_HEAP_LOAD($rbot, "i32", 0, 0);
 var $73=($71|0)<($72|0);
 if($73){label=10;break;}else{label=22;break;}
 case 10: 
 var $75=$wrkr;
 var $76=(($75)|0);
 var $77=$76;
 var $78=SAFE_HEAP_LOAD($77, "i8*", 0, 0);
 var $79=SAFE_HEAP_LOAD($rd, "i8*", 0, 0);
 var $80=$j;
 var $81=$4;
 var $82=(($81+20)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=(Math_imul($80,$83)|0);
 var $85=(($79+$84)|0);
 var $86=SAFE_HEAP_LOAD($raxcnt, "i32", 0, 0);
 var $87=SAFE_HEAP_LOAD($rbot, "i32", 0, 0);
 var $88=$rtyp;
 var $89=_dtacopy($78,$85,$86,$87,$88);
 var $90=$2;
 var $91=$2;
 var $92=(($91+52)|0);
 var $93=(($92)|0);
 var $94=SAFE_HEAP_LOAD($93, "i32", 0, 0);
 var $95=$2;
 var $96=(($95+52)|0);
 var $97=(($96+4)|0);
 var $98=SAFE_HEAP_LOAD($97, "i8*", 0, 0);
 var $99=$wrkl;
 var $100=$wrkr;
 var $101=_execdyan($94,$98,$99,$100);
 var $102=_reducef($90,0,$101);
 var $103=_perm($102);
 $oh=$103;
 var $104=$od;
 var $105=(($104+4)|0);
 $od=$105;
 SAFE_HEAP_STORE($104, $103, "%struct.aplcb*", 0);
 $hit=0;
 label=11;break;
 case 11: 
 var $107=$oh;
 var $108=($107|0)==0;
 if($108){label=12;break;}else{label=13;break;}
 case 12: 
 label=18;break;
 case 13: 
 var $111=$oh;
 var $112=(($111+8)|0);
 var $113=SAFE_HEAP_LOAD($112, "i32", 0, 0);
 var $114=($113|0)>1;
 if($114){label=14;break;}else{label=15;break;}
 case 14: 
 label=18;break;
 case 15: 
 var $117=$oh;
 var $118=(($117+4)|0);
 var $119=SAFE_HEAP_LOAD($118, "i32", 0, 0);
 var $120=$119&6;
 var $121=($120|0)!=0;
 if($121){label=17;break;}else{label=16;break;}
 case 16: 
 label=18;break;
 case 17: 
 $hit=1;
 label=18;break;
 case 18: 
 var $125=$hit;
 var $126=($125|0)!=0;
 if($126){label=20;break;}else{label=19;break;}
 case 19: 
 $rsw=0;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $130=$j;
 var $131=((($130)+(1))|0);
 $j=$131;
 label=9;break;
 case 22: 
 label=23;break;
 case 23: 
 var $134=$i;
 var $135=((($134)+(1))|0);
 $i=$135;
 label=7;break;
 case 24: 
 var $137=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $138=($137|0)!=0;
 if($138){label=25;break;}else{label=26;break;}
 case 25: 
 label=29;break;
 case 26: 
 var $141=$rsw;
 var $142=($141|0)!=0;
 if($142){label=27;break;}else{label=28;break;}
 case 27: 
 var $144=$out;
 var $145=_disclose($144,0);
 $out=$145;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $148=$wrkl;
 var $149=_temp($148);
 var $150=_endoper($149);
 var $151=$wrkr;
 var $152=_temp($151);
 var $153=_endoper($152);
 var $154=$3;
 var $155=$4;
 var $156=$out;
 var $157=_errstop(0,$154,$155,$156);
 $1=$157;
 label=30;break;
 case 30: 
 var $159=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $159;
  default: assert(0, "bad label: " + label);
 }

}


function _execdotg($fp,$sp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$fp;
 $2=$sp;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return 0;
}


function _execdyac($lefttok,$ritetok,$left,$rite,$out,$off){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $2=$lefttok;
 $3=$ritetok;
 $4=$left;
 $5=$rite;
 $6=$out;
 $7=$off;
 var $8=$4;
 _endoper($8);
 var $9=$5;
 _endoper($9);
 var $10=$2;
 _execfree($10);
 var $11=$3;
 _execfree($11);
 var $12=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$6;
 _endoper($15);
 $1=0;
 label=4;break;
 case 3: 
 var $17=$6;
 var $18=$7;
 var $19=_exectok($17,$18);
 $1=$19;
 label=4;break;
 case 4: 
 var $21=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyad($lefttok,$ritetok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $left;
 var $out;
 var $rite;
 var $func=sp;
 var $code;
 var $hit;
 $1=$lefttok;
 $2=$ritetok;
 $left=0;
 $out=0;
 $rite=0;
 var $3=_execfun($func);
 $code=$3;
 label=2;break;
 case 2: 
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 label=15;break;
 case 4: 
 var $9=$2;
 var $10=_execgetp($9);
 $rite=$10;
 $2=0;
 var $11=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $12=($11|0)!=0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 label=15;break;
 case 6: 
 var $15=$code;
 var $16=($15|0)==3;
 if($16){label=7;break;}else{label=8;break;}
 case 7: 
 var $18=$1;
 var $19=$rite;
 var $20=_execasgn($18,$19);
 $out=$20;
 $1=0;
 $rite=0;
 label=15;break;
 case 8: 
 var $22=$1;
 var $23=_execgetp($22);
 $left=$23;
 $1=0;
 var $24=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=9;break;}else{label=10;break;}
 case 9: 
 label=15;break;
 case 10: 
 var $28=$code;
 var $29=($28|0)==-10;
 if($29){label=11;break;}else{label=14;break;}
 case 11: 
 var $31=SAFE_HEAP_LOAD($func, "i8*", 0, 0);
 var $32=$31;
 var $33=(($32)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=($34|0)==75;
 if($35){label=12;break;}else{label=14;break;}
 case 12: 
 var $37=$left;
 var $38=(($37+8)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=($39|0)==0;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 var $42=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $43=(($42+56)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=$44|2;
 SAFE_HEAP_STORE($43, $45, "i32", 0);
 label=14;break;
 case 14: 
 var $47=$code;
 var $48=SAFE_HEAP_LOAD($func, "i8*", 0, 0);
 var $49=$left;
 var $50=$rite;
 var $51=_execdyan($47,$48,$49,$50);
 $out=$51;
 $rite=0;
 $left=0;
 label=15;break;
 case 15: 
 var $53=$1;
 var $54=$2;
 var $55=$left;
 var $56=$rite;
 var $57=$out;
 var $58=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $59=(($58+52)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=_execdyac($53,$54,$55,$56,$57,$60);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyah($op){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $rtok;
 var $noexit;
 $2=$op;
 $noexit=1;
 var $3=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$noexit;
 var $7=($6|0)!=0;
 var $8=$7^1;
 var $9=($8&1);
 $1=$9;
 label=9;break;
 case 3: 
 var $11=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $12=(($11+40)|0);
 var $13=SAFE_HEAP_LOAD($12, "%struct.execstk*", 0, 0);
 var $14=(($13+8)|0);
 var $15=$14;
 var $16=_pop($15);
 var $17=$16;
 $rtok=$17;
 var $18=0!=($17|0);
 if($18){label=4;break;}else{label=8;break;}
 case 4: 
 var $20=$2;
 var $21=$rtok;
 var $22=_execdyad($20,$21);
 $2=$22;
 var $23=$2;
 var $24=_execexeh($23);
 var $25=($24|0)!=0;
 if($25){label=6;break;}else{label=5;break;}
 case 5: 
 var $27=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $28=($27|0)!=0;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 var $30=$noexit;
 var $31=($30|0)!=0;
 var $32=$31^1;
 var $33=($32&1);
 $1=$33;
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $36=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $37=(($36+40)|0);
 var $38=SAFE_HEAP_LOAD($37, "%struct.execstk*", 0, 0);
 var $39=(($38+8)|0);
 var $40=$39;
 var $41=$2;
 var $42=$41;
 var $43=_lifo($40,$42);
 var $44=$43;
 $2=$44;
 var $45=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $46=($45|0)==0;
 var $47=($46&1);
 $1=$47;
 label=9;break;
 case 9: 
 var $49=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $49;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyaj($fun,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $dblaxis;
 var $axis;
 var $code;
 var $axcb;
 $2=$fun;
 $3=$left;
 $4=$rite;
 var $5=$2;
 var $6=$5;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $code=$8;
 var $9=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $10=(($9+40)|0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.execstk*", 0, 0);
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "%struct.apltoken*", 0, 0);
 var $14=_axistest($13);
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $18=(($17+40)|0);
 var $19=SAFE_HEAP_LOAD($18, "%struct.execstk*", 0, 0);
 var $20=(($19+4)|0);
 var $21=$20;
 var $22=_execaxis($21);
 $axcb=$22;
 label=4;break;
 case 3: 
 $axcb=0;
 label=4;break;
 case 4: 
 var $25=$code;
 var $26=$25&2048;
 var $27=($26|0)!=0;
 if($27){label=5;break;}else{label=10;break;}
 case 5: 
 var $29=$code;
 if(($29|0)==6154){ label=6;break;}else if(($29|0)==14346){ label=7;break;}else if(($29|0)==6155|($29|0)==2059){ label=8;break;}else{label=9;break;}
 case 6: 
 var $31=$2;
 var $32=$31;
 var $33=(($32+8)|0);
 var $34=$33;
 var $35=SAFE_HEAP_LOAD($34, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $36=$3;
 var $37=$4;
 var $38=$axcb;
 var $39=FUNCTION_TABLE[$35]($36,$37,$38);
 $1=$39;
 label=27;break;
 case 7: 
 var $41=$2;
 var $42=$41;
 var $43=(($42+8)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $46=$3;
 var $47=$4;
 var $48=$axcb;
 var $49=FUNCTION_TABLE[$45]($46,$47,$48,0);
 $1=$49;
 label=27;break;
 case 8: 
 var $51=$2;
 var $52=$51;
 var $53=(($52+12)|0);
 var $54=$53;
 var $55=SAFE_HEAP_LOAD($54, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $56=$3;
 var $57=$4;
 var $58=$axcb;
 var $59=FUNCTION_TABLE[$55]($56,$57,$58);
 $1=$59;
 label=27;break;
 case 9: 
 var $61=$2;
 var $62=$61;
 var $63=(($62+8)|0);
 var $64=$63;
 var $65=SAFE_HEAP_LOAD($64, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $66=$3;
 var $67=$4;
 var $68=$axcb;
 var $69=FUNCTION_TABLE[$65]($66,$67,$68);
 $1=$69;
 label=27;break;
 case 10: 
 $axis=-1;
 var $71=$code;
 var $72=$71&16;
 var $73=($72|0)!=0;
 if($73){label=11;break;}else{label=20;break;}
 case 11: 
 var $75=$axcb;
 var $76=($75|0)!=0;
 if($76){label=12;break;}else{label=19;break;}
 case 12: 
 var $78=$axcb;
 var $79=_execaxiv($78);
 $dblaxis=$79;
 var $80=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $81=($80|0)!=0;
 if($81){label=13;break;}else{label=14;break;}
 case 13: 
 var $83=$3;
 var $84=$4;
 var $85=_errstop(0,$83,$84,0);
 $1=$85;
 label=27;break;
 case 14: 
 var $87=$dblaxis;
 var $88=_mod($87,1);
 var $89=$88!=0;
 if($89){label=15;break;}else{label=18;break;}
 case 15: 
 var $91=$code;
 var $92=($91|0)==155;
 if($92){label=16;break;}else{label=17;break;}
 case 16: 
 var $94=$3;
 var $95=$4;
 var $96=$dblaxis;
 var $97=_laminate($94,$95,$96);
 $1=$97;
 label=27;break;
 case 17: 
 var $99=$3;
 var $100=$4;
 var $101=_errstop(9,$99,$100,0);
 $1=$101;
 label=27;break;
 case 18: 
 var $103=$dblaxis;
 var $104=(($103)&-1);
 $axis=$104;
 label=19;break;
 case 19: 
 label=26;break;
 case 20: 
 var $107=$axcb;
 var $108=($107|0)!=0;
 if($108){label=21;break;}else{label=25;break;}
 case 21: 
 var $110=$code;
 var $111=$110&4;
 var $112=($111|0)!=0;
 if($112){label=22;break;}else{label=24;break;}
 case 22: 
 var $114=$code;
 var $115=$114&2;
 var $116=($115|0)!=0;
 if($116){label=23;break;}else{label=24;break;}
 case 23: 
 var $118=$2;
 var $119=$3;
 var $120=$4;
 var $121=$axcb;
 var $122=_scalax($118,$119,$120,$121);
 $1=$122;
 label=27;break;
 case 24: 
 var $124=$3;
 var $125=$4;
 var $126=$axcb;
 var $127=_errstop(89,$124,$125,$126);
 $1=$127;
 label=27;break;
 case 25: 
 label=26;break;
 case 26: 
 var $130=$2;
 var $131=$3;
 var $132=$4;
 var $133=$axis;
 var $134=_execdyak($130,$131,$132,$133);
 $1=$134;
 label=27;break;
 case 27: 
 var $136=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $136;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyak($fun,$left,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $sdp=sp;
 var $ep=(sp)+(8);
 $2=$fun;
 $3=$left;
 $4=$rite;
 $5=$axis;
 var $6=$2;
 var $7=_execdyas($6,$sdp,$ep);
 switch(($7|0)){case 4:{ label=2;break;}case 1:{ label=3;break;}case 10:{ label=4;break;}case 8:{ label=5;break;}case 2:{ label=6;break;}default:{label=12;break;}}break;
 case 2: 
 var $9=$ep;
 var $10=SAFE_HEAP_LOAD($9, "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $11=SAFE_HEAP_LOAD($sdp, "i8*", 0, 0);
 var $12=$3;
 var $13=$4;
 var $14=FUNCTION_TABLE[$10]($11,$12,$13);
 $1=$14;
 label=13;break;
 case 3: 
 var $16=$ep;
 var $17=SAFE_HEAP_LOAD($16, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $18=$3;
 var $19=$4;
 var $20=FUNCTION_TABLE[$17]($18,$19);
 $1=$20;
 label=13;break;
 case 4: 
 var $22=$ep;
 var $23=SAFE_HEAP_LOAD($22, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*, i8*)*", 0, 0);
 var $24=$3;
 var $25=$4;
 var $26=FUNCTION_TABLE[$23]($24,$25,0,0);
 $1=$26;
 label=13;break;
 case 5: 
 var $28=$ep;
 var $29=SAFE_HEAP_LOAD($28, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $30=$3;
 var $31=$4;
 var $32=FUNCTION_TABLE[$29]($30,$31,0);
 $1=$32;
 label=13;break;
 case 6: 
 var $34=$5;
 var $35=($34|0)<0;
 if($35){label=7;break;}else{label=11;break;}
 case 7: 
 var $37=$2;
 var $38=$37;
 var $39=$3;
 var $40=(($39+12)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$4;
 var $43=(($42+12)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=($41|0)>($44|0);
 if($45){label=8;break;}else{label=9;break;}
 case 8: 
 var $47=$3;
 var $51=$47;label=10;break;
 case 9: 
 var $49=$4;
 var $51=$49;label=10;break;
 case 10: 
 var $51;
 var $52=_axisdft($38,$51);
 $5=$52;
 label=11;break;
 case 11: 
 var $54=$ep;
 var $55=SAFE_HEAP_LOAD($54, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0, 0);
 var $56=$3;
 var $57=$4;
 var $58=$5;
 var $59=FUNCTION_TABLE[$55]($56,$57,$58);
 $1=$59;
 label=13;break;
 case 12: 
 var $61=$3;
 var $62=$4;
 var $63=_errstop(65,$61,$62,0);
 $1=$63;
 label=13;break;
 case 13: 
 var $65=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $65;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyal($pfun,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $lefttype;
 var $ritetype;
 $2=$pfun;
 $3=$left;
 $4=$rite;
 var $5=$3;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&110;
 $lefttype=$8;
 var $9=$4;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$11&110;
 $ritetype=$12;
 var $13=$lefttype;
 var $14=($13|0)==32;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=$ritetype;
 var $17=($16|0)==32;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 var $19=$2;
 var $20=$3;
 var $21=$4;
 var $22=_execdyat($19,$20,$21,36);
 $1=$22;
 label=5;break;
 case 4: 
 var $24=$2;
 var $25=$3;
 var $26=$4;
 var $27=_dyadicp($24,$25,$26);
 $1=$27;
 label=5;break;
 case 5: 
 var $29=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyam($pfun,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $lefttype;
 var $ritetype;
 $2=$pfun;
 $3=$left;
 $4=$rite;
 var $5=$3;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=$4;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$3;
 var $12=$4;
 var $13=_errstop(44,$11,$12,0);
 $1=$13;
 label=8;break;
 case 4: 
 var $15=$3;
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$17&110;
 $lefttype=$18;
 var $19=$4;
 var $20=(($19+4)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=$21&110;
 $ritetype=$22;
 var $23=$lefttype;
 var $24=($23|0)==32;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=$ritetype;
 var $27=($26|0)==32;
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 var $29=$2;
 var $30=$3;
 var $31=$4;
 var $32=_execdyat($29,$30,$31,34);
 $1=$32;
 label=8;break;
 case 7: 
 var $34=$2;
 var $35=$3;
 var $36=$4;
 var $37=_dyadicp($34,$35,$36);
 $1=$37;
 label=8;break;
 case 8: 
 var $39=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyan($code,$func,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $dyad_func;
 $2=$code;
 $3=$func;
 $4=$left;
 $5=$rite;
 var $6=$2;
 var $7=($6|0)>=256;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $dyad_func=(128);
 var $9=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $10=(($9+48)|0);
 SAFE_HEAP_STORE($10, 2, "i32", 0);
 label=10;break;
 case 3: 
 var $12=$2;
 var $13=($12|0)==-10;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $dyad_func=40;
 label=9;break;
 case 5: 
 var $16=$2;
 var $17=($16|0)==-7;
 if($17){label=6;break;}else{label=7;break;}
 case 6: 
 $dyad_func=(148);
 label=8;break;
 case 7: 
 var $20=$4;
 var $21=$5;
 var $22=_errstop(65,$20,$21,0);
 $1=$22;
 label=11;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $26=$dyad_func;
 var $27=$3;
 var $28=$4;
 var $29=$5;
 var $30=FUNCTION_TABLE[$26]($27,$28,$29);
 $1=$30;
 label=11;break;
 case 11: 
 var $32=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyap($agg_result,$fun,$arg){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$fun;
 $2=$arg;
 var $3=$1;
 var $4=$3;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 if(($6|0)==38){ label=2;break;}else if(($6|0)==7){ label=3;break;}else if(($6|0)==6){ label=4;break;}else{label=5;break;}
 case 2: 
 var $8=$1;
 var $9=$2;
 SAFE_HEAP_STORE($9, $8, "i8*", 0);
 var $10=$agg_result;
 SAFE_HEAP_STORE($10, 36, "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=7;break;
 case 3: 
 var $12=$1;
 var $13=$2;
 SAFE_HEAP_STORE($13, $12, "i8*", 0);
 label=6;break;
 case 4: 
 var $15=$1;
 var $16=$2;
 SAFE_HEAP_STORE($16, $15, "i8*", 0);
 label=6;break;
 case 5: 
 var $18=$2;
 SAFE_HEAP_STORE($18, 0, "i8*", 0);
 var $19=$agg_result;
 SAFE_HEAP_STORE($19, 0, "i8*", 0);
 label=7;break;
 case 6: 
 var $21=$agg_result;
 SAFE_HEAP_STORE($21, 34, "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyaq($agg_result,$fun){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $mdp;
 $1=$fun;
 var $2=$1;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 switch(($5|0)){case 15:{ label=2;break;}case 11:{ label=3;break;}case 138:case 75:case 10:{ label=4;break;}default:{label=5;break;}}break;
 case 2: 
 var $7=$1;
 var $8=$7;
 var $9=(($8+36)|0);
 $mdp=$9;
 label=6;break;
 case 3: 
 var $11=$1;
 var $12=$11;
 var $13=(($12+12)|0);
 $mdp=$13;
 label=6;break;
 case 4: 
 var $15=$1;
 var $16=$15;
 var $17=(($16+8)|0);
 $mdp=$17;
 label=6;break;
 case 5: 
 var $19=$agg_result;
 SAFE_HEAP_STORE($19, 0, "i8*", 0);
 label=7;break;
 case 6: 
 var $21=$agg_result;
 var $22=$mdp;
 var $23=$22;
 var $24=SAFE_HEAP_LOAD($23, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 SAFE_HEAP_STORE($21, $24, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyar($agg_result,$fun){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $mdp;
 var $ret=sp;
 $1=$fun;
 var $2=$1;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 if(($5|0)==283|($5|0)==539|($5|0)==27|($5|0)==155){ label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=$7;
 var $9=(($8+12)|0);
 $mdp=$9;
 var $10=$ret;
 var $11=$mdp;
 var $12=$11;
 var $13=SAFE_HEAP_LOAD($12, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0, 0);
 SAFE_HEAP_STORE($10, $13, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0);
 label=4;break;
 case 3: 
 var $15=$ret;
 SAFE_HEAP_STORE($15, 0, "i8*", 0);
 label=4;break;
 case 4: 
 var $17=$agg_result;
 var $18=$ret;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($17, SAFE_HEAP_LOAD($18, "i32", 0, 0), "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyas($fun,$arg,$pep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ep=sp;
 var $5=(sp)+(8);
 var $6=(sp)+(16);
 var $7=(sp)+(24);
 var $8=(sp)+(32);
 var $9=(sp)+(40);
 $2=$fun;
 $3=$arg;
 $4=$pep;
 var $10=$4;
 var $11=$2;
 var $12=$3;
 _execdyap($5,$11,$12);
 var $13=$ep;
 var $14=$5;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($13, SAFE_HEAP_LOAD($14, "i32", 0, 0), "i32", 0);
 var $15=$10;
 var $16=$ep;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($15, SAFE_HEAP_LOAD($16, "i32", 0, 0), "i32", 0);
 var $17=$ep;
 var $18=SAFE_HEAP_LOAD($17, "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $19=($18|0)!=0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 $1=4;
 label=12;break;
 case 3: 
 var $22=$4;
 var $23=$2;
 _execdyaq($6,$23);
 var $24=$ep;
 var $25=$6;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($24, SAFE_HEAP_LOAD($25, "i32", 0, 0), "i32", 0);
 var $26=$22;
 var $27=$ep;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($26, SAFE_HEAP_LOAD($27, "i32", 0, 0), "i32", 0);
 var $28=$ep;
 var $29=SAFE_HEAP_LOAD($28, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $30=($29|0)!=0;
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=12;break;
 case 5: 
 var $33=$4;
 var $34=$2;
 _execdyau($7,$34);
 var $35=$ep;
 var $36=$7;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($35, SAFE_HEAP_LOAD($36, "i32", 0, 0), "i32", 0);
 var $37=$33;
 var $38=$ep;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($37, SAFE_HEAP_LOAD($38, "i32", 0, 0), "i32", 0);
 var $39=$ep;
 var $40=SAFE_HEAP_LOAD($39, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*, i8*)*", 0, 0);
 var $41=($40|0)!=0;
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 $1=10;
 label=12;break;
 case 7: 
 var $44=$4;
 var $45=$2;
 _execdyar($8,$45);
 var $46=$ep;
 var $47=$8;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($46, SAFE_HEAP_LOAD($47, "i32", 0, 0), "i32", 0);
 var $48=$44;
 var $49=$ep;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($48, SAFE_HEAP_LOAD($49, "i32", 0, 0), "i32", 0);
 var $50=$ep;
 var $51=SAFE_HEAP_LOAD($50, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0, 0);
 var $52=($51|0)!=0;
 if($52){label=8;break;}else{label=9;break;}
 case 8: 
 $1=2;
 label=12;break;
 case 9: 
 var $55=$4;
 var $56=$2;
 _execdyav($9,$56);
 var $57=$ep;
 var $58=$9;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($57, SAFE_HEAP_LOAD($58, "i32", 0, 0), "i32", 0);
 var $59=$55;
 var $60=$ep;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($59, SAFE_HEAP_LOAD($60, "i32", 0, 0), "i32", 0);
 var $61=$ep;
 var $62=SAFE_HEAP_LOAD($61, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $63=($62|0)!=0;
 if($63){label=10;break;}else{label=11;break;}
 case 10: 
 $1=8;
 label=12;break;
 case 11: 
 SAFE_HEAP_STORE(4592, 65, "i32", 0);
 $1=0;
 label=12;break;
 case 12: 
 var $67=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $67;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyat($pfun,$left,$rite,$subrtne){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $leftinc=sp;
 var $lefttemp;
 var $lefttype;
 var $riteinc=(sp)+(8);
 var $ritetemp;
 var $ritetype;
 var $dataout=(sp)+(16);
 var $leftptr=(sp)+(24);
 var $out;
 var $riteptr=(sp)+(32);
 var $wrk1;
 var $wrk2;
 var $wrk3;
 $2=$pfun;
 $3=$left;
 $4=$rite;
 $5=$subrtne;
 var $6=$3;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=$8&32;
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 var $12=$3;
 var $13=_aplnest($12);
 $3=$13;
 label=3;break;
 case 3: 
 var $15=$4;
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$17&32;
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=4;break;}
 case 4: 
 var $21=$4;
 var $22=_aplnest($21);
 $4=$22;
 label=5;break;
 case 5: 
 var $24=$dataout;
 $wrk1=$24;
 var $25=$leftptr;
 $wrk2=$25;
 var $26=$riteptr;
 $wrk3=$26;
 var $27=$3;
 var $28=$4;
 var $29=$wrk1;
 var $30=$29;
 var $31=$wrk2;
 var $32=$31;
 var $33=$wrk3;
 var $34=$33;
 var $35=_dyadicm($27,$28,$30,$32,$34,$leftinc,$riteinc,32);
 $out=$35;
 var $36=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $37=($36|0)!=0;
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=20;break;
 case 7: 
 var $40=$out;
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=($42|0)==0;
 if($43){label=8;break;}else{label=9;break;}
 case 8: 
 var $45=$3;
 var $46=$4;
 var $47=$out;
 var $48=_errstop(0,$45,$46,$47);
 $1=$48;
 label=20;break;
 case 9: 
 var $50=$3;
 var $51=(($50+4)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=$52&1;
 $lefttemp=$53;
 var $54=($53|0)!=0;
 if($54){label=10;break;}else{label=11;break;}
 case 10: 
 var $56=$3;
 var $57=(($56+4)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=((($58)-(1))|0);
 SAFE_HEAP_STORE($57, $59, "i32", 0);
 label=11;break;
 case 11: 
 var $61=$4;
 var $62=(($61+4)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=$63&1;
 $ritetemp=$64;
 var $65=($64|0)!=0;
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 var $67=$4;
 var $68=(($67+4)|0);
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 var $70=((($69)-(1))|0);
 SAFE_HEAP_STORE($68, $70, "i32", 0);
 label=13;break;
 case 13: 
 var $72=$out;
 var $73=(($72+8)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 $i=$74;
 label=14;break;
 case 14: 
 var $76=$i;
 var $77=($76|0)>0;
 if($77){label=15;break;}else{var $82=0;label=16;break;}
 case 15: 
 var $79=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $80=($79|0)==0;
 var $82=$80;label=16;break;
 case 16: 
 var $82;
 if($82){label=17;break;}else{label=19;break;}
 case 17: 
 var $84=$5;
 var $85=$2;
 var $86=SAFE_HEAP_LOAD($leftptr, "%struct.aplcb**", 0, 0);
 var $87=SAFE_HEAP_LOAD($86, "%struct.aplcb*", 0, 0);
 var $88=SAFE_HEAP_LOAD($riteptr, "%struct.aplcb**", 0, 0);
 var $89=SAFE_HEAP_LOAD($88, "%struct.aplcb*", 0, 0);
 var $90=FUNCTION_TABLE[$84]($85,$87,$89);
 var $91=_perm($90);
 var $92=SAFE_HEAP_LOAD($dataout, "%struct.aplcb**", 0, 0);
 var $93=(($92+4)|0);
 SAFE_HEAP_STORE($dataout, $93, "%struct.aplcb**", 0);
 SAFE_HEAP_STORE($92, $91, "%struct.aplcb*", 0);
 var $94=SAFE_HEAP_LOAD($leftinc, "i32", 0, 0);
 var $95=SAFE_HEAP_LOAD($leftptr, "%struct.aplcb**", 0, 0);
 var $96=(($95+($94<<2))|0);
 SAFE_HEAP_STORE($leftptr, $96, "%struct.aplcb**", 0);
 var $97=SAFE_HEAP_LOAD($riteinc, "i32", 0, 0);
 var $98=SAFE_HEAP_LOAD($riteptr, "%struct.aplcb**", 0, 0);
 var $99=(($98+($97<<2))|0);
 SAFE_HEAP_STORE($riteptr, $99, "%struct.aplcb**", 0);
 label=18;break;
 case 18: 
 var $101=$i;
 var $102=((($101)-(1))|0);
 $i=$102;
 label=14;break;
 case 19: 
 var $104=$lefttemp;
 var $105=$3;
 var $106=(($105+4)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32", 0, 0);
 var $108=((($107)+($104))|0);
 SAFE_HEAP_STORE($106, $108, "i32", 0);
 var $109=$ritetemp;
 var $110=$4;
 var $111=(($110+4)|0);
 var $112=SAFE_HEAP_LOAD($111, "i32", 0, 0);
 var $113=((($112)+($109))|0);
 SAFE_HEAP_STORE($111, $113, "i32", 0);
 var $114=$3;
 var $115=$4;
 var $116=$out;
 var $117=_errstop(0,$114,$115,$116);
 $1=$117;
 label=20;break;
 case 20: 
 var $119=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $119;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyau($agg_result,$fun){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $mdp;
 var $ret=sp;
 $1=$fun;
 var $2=$1;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 if(($5|0)==4107){ label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=$7;
 var $9=(($8+12)|0);
 $mdp=$9;
 var $10=$ret;
 var $11=$mdp;
 var $12=$11;
 var $13=SAFE_HEAP_LOAD($12, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 SAFE_HEAP_STORE($10, $13, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=4;break;
 case 3: 
 var $15=$ret;
 SAFE_HEAP_STORE($15, 0, "i8*", 0);
 label=4;break;
 case 4: 
 var $17=$agg_result;
 var $18=$ret;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($17, SAFE_HEAP_LOAD($18, "i32", 0, 0), "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execdyav($agg_result,$fun){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $mdp;
 var $ret=sp;
 $1=$fun;
 var $2=$1;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 if(($5|0)==6154){ label=2;break;}else if(($5|0)==6155|($5|0)==4107|($5|0)==2059){ label=3;break;}else{label=4;break;}
 case 2: 
 var $7=$1;
 var $8=$7;
 var $9=(($8+8)|0);
 $mdp=$9;
 var $10=$ret;
 var $11=$mdp;
 var $12=$11;
 var $13=SAFE_HEAP_LOAD($12, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 SAFE_HEAP_STORE($10, $13, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=5;break;
 case 3: 
 var $15=$1;
 var $16=$15;
 var $17=(($16+12)|0);
 $mdp=$17;
 var $18=$ret;
 var $19=$mdp;
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 SAFE_HEAP_STORE($18, $21, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=5;break;
 case 4: 
 var $23=$ret;
 SAFE_HEAP_STORE($23, 0, "i8*", 0);
 label=5;break;
 case 5: 
 var $25=$agg_result;
 var $26=$ret;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($25, SAFE_HEAP_LOAD($26, "i32", 0, 0), "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execexec(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $op;
 $op=0;
 _execinit();
 var $2=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 var $6=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $7=(($6+48)|0);
 SAFE_HEAP_STORE($7, 0, "i32", 0);
 _execexed();
 var $8=_execexek();
 $op=$8;
 _execterm();
 var $9=$op;
 $1=$9;
 label=4;break;
 case 4: 
 var $11=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _execexed(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $axistok=sp;
 var $op=(sp)+(8);
 var $tok=(sp)+(16);
 var $noexit;
 SAFE_HEAP_STORE($tok, 0, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($axistok, 0, "%struct.apltoken*", 0);
 label=2;break;
 case 2: 
 var $2=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=21;break;}
 case 3: 
 var $5=_execnext($tok,$axistok,$op,0);
 $noexit=$5;
 var $6=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $7=($6|0)!=0;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 label=21;break;
 case 5: 
 var $10=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $11=($10|0)!=0;
 if($11){label=6;break;}else{label=9;break;}
 case 6: 
 var $13=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $14=_execdyah($13);
 var $15=($14|0)!=0;
 if($15){label=8;break;}else{label=7;break;}
 case 7: 
 label=21;break;
 case 8: 
 label=9;break;
 case 9: 
 var $19=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $20=($19|0)!=0;
 if($20){label=10;break;}else{label=11;break;}
 case 10: 
 _execmong();
 var $22=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $23=(($22+40)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.execstk*", 0, 0);
 var $25=(($24+4)|0);
 var $26=$25;
 var $27=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $28=$27;
 var $29=_lifo($26,$28);
 var $30=$29;
 SAFE_HEAP_STORE($axistok, $30, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($axistok, 0, "%struct.apltoken*", 0);
 label=11;break;
 case 11: 
 var $32=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $33=($32|0)!=0;
 if($33){label=12;break;}else{label=18;break;}
 case 12: 
 var $35=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=($37|0)==-10;
 if($38){label=13;break;}else{label=14;break;}
 case 13: 
 var $40=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $41=(($40+12)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "i8*", 0, 0);
 var $44=$43;
 var $45=(($44)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=($46|0)==35;
 if($47){label=15;break;}else{label=14;break;}
 case 14: 
 var $49=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $50=(($49+4)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32", 0, 0);
 var $52=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $53=(($52+48)|0);
 SAFE_HEAP_STORE($53, $51, "i32", 0);
 label=15;break;
 case 15: 
 var $55=_execspec($tok);
 var $56=($55|0)!=0;
 if($56){label=17;break;}else{label=16;break;}
 case 16: 
 label=21;break;
 case 17: 
 label=18;break;
 case 18: 
 var $60=$noexit;
 var $61=($60|0)!=0;
 if($61){label=20;break;}else{label=19;break;}
 case 19: 
 label=21;break;
 case 20: 
 label=2;break;
 case 21: 
 var $65=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 _execfree($65);
 var $66=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 _execfree($66);
 _execmong();
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execexee($pfun,$ptop){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $op;
 var $tok;
 var $wrk;
 var $cp;
 var $fun;
 var $noexit;
 var $ret;
 $2=$pfun;
 $3=$ptop;
 $noexit=1;
 $ret=1;
 var $4=$2;
 SAFE_HEAP_STORE($4, 0, "%struct.apltoken*", 0);
 var $5=$3;
 SAFE_HEAP_STORE($5, 0, "%struct.apltoken*", 0);
 var $6=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $7=($6|0)!=0;
 if($7){label=5;break;}else{label=2;break;}
 case 2: 
 var $9=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $10=(($9+44)|0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.apltoken*", 0, 0);
 $wrk=$11;
 var $12=0==($11|0);
 if($12){label=5;break;}else{label=3;break;}
 case 3: 
 var $14=$wrk;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)==59;
 if($17){label=5;break;}else{label=4;break;}
 case 4: 
 var $19=$wrk;
 var $20=(($19+4)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)==27;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=30;break;
 case 6: 
 var $25=_execexeg();
 $tok=$25;
 var $26=$2;
 SAFE_HEAP_STORE($26, $25, "%struct.apltoken*", 0);
 var $27=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=30;break;
 case 8: 
 var $31=$tok;
 var $32=(($31+20)|0);
 SAFE_HEAP_STORE($32, 0, "i8*", 0);
 var $33=$tok;
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=($35|0)==-10;
 if($36){label=9;break;}else{label=13;break;}
 case 9: 
 var $38=$tok;
 var $39=(($38+12)|0);
 var $40=$39;
 var $41=SAFE_HEAP_LOAD($40, "i8*", 0, 0);
 var $42=$41;
 $fun=$42;
 var $43=$fun;
 var $44=$43;
 $cp=$44;
 var $45=$cp;
 var $46=(($45+4)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=$47&1024;
 var $49=($48|0)!=0;
 if($49){label=10;break;}else{label=12;break;}
 case 10: 
 var $51=$cp;
 var $52=(($51)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=($53|0)!=42;
 if($54){label=11;break;}else{label=12;break;}
 case 11: 
 var $56=$fun;
 var $57=(($56+8)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32 (%struct.apltoken*)*", 0, 0);
 var $59=$tok;
 var $60=FUNCTION_TABLE[$58]($59);
 $noexit=$60;
 label=12;break;
 case 12: 
 var $62=$noexit;
 var $63=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $64=($63|0)==0;
 var $65=($64&1);
 var $66=$62&$65;
 $ret=$66;
 label=22;break;
 case 13: 
 var $68=$tok;
 var $69=(($68+4)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=($70|0)==8;
 if($71){label=14;break;}else{label=15;break;}
 case 14: 
 var $73=$tok;
 _execfree($73);
 $tok=0;
 var $74=$2;
 SAFE_HEAP_STORE($74, 0, "%struct.apltoken*", 0);
 $ret=0;
 label=21;break;
 case 15: 
 var $76=$tok;
 var $77=_execexef($76);
 $op=$77;
 var $78=$op;
 var $79=($78|0)!=0;
 if($79){label=16;break;}else{label=17;break;}
 case 16: 
 var $81=$op;
 $tok=$81;
 var $82=$2;
 SAFE_HEAP_STORE($82, $81, "%struct.apltoken*", 0);
 label=17;break;
 case 17: 
 var $84=$tok;
 var $85=(($84+4)|0);
 var $86=SAFE_HEAP_LOAD($85, "i32", 0, 0);
 var $87=($86|0)==-4;
 if($87){label=18;break;}else{label=19;break;}
 case 18: 
 var $89=$2;
 var $90=$3;
 var $91=$tok;
 var $92=_execexei($89,$90,$91);
 $ret=$92;
 label=20;break;
 case 19: 
 var $94=$2;
 var $95=_execoptk($94);
 var $96=$3;
 SAFE_HEAP_STORE($96, $95, "%struct.apltoken*", 0);
 var $97=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $98=($97|0)==0;
 var $99=($98&1);
 $ret=$99;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $103=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $104=($103|0)==0;
 if($104){label=23;break;}else{label=29;break;}
 case 23: 
 var $106=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $107=(($106+44)|0);
 var $108=SAFE_HEAP_LOAD($107, "%struct.apltoken*", 0, 0);
 $wrk=$108;
 var $109=0!=($108|0);
 if($109){label=24;break;}else{label=29;break;}
 case 24: 
 var $111=$wrk;
 var $112=(($111+4)|0);
 var $113=SAFE_HEAP_LOAD($112, "i32", 0, 0);
 var $114=($113|0)==14;
 if($114){label=25;break;}else{label=29;break;}
 case 25: 
 var $116=$tok;
 var $117=($116|0)==0;
 if($117){label=26;break;}else{label=27;break;}
 case 26: 
 SAFE_HEAP_STORE(4592, 63, "i32", 0);
 label=28;break;
 case 27: 
 var $120=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $121=(($120+40)|0);
 var $122=SAFE_HEAP_LOAD($121, "%struct.execstk*", 0, 0);
 var $123=(($122+4)|0);
 var $124=$123;
 var $125=$tok;
 var $126=$125;
 var $127=_lifo($124,$126);
 var $128=$127;
 $tok=$128;
 var $129=_execexeg();
 $tok=$129;
 var $130=$2;
 SAFE_HEAP_STORE($130, $129, "%struct.apltoken*", 0);
 var $131=$tok;
 var $132=(($131+12)|0);
 var $133=$132;
 var $134=SAFE_HEAP_LOAD($133, "i8*", 0, 0);
 var $135=$134;
 $fun=$135;
 var $136=$fun;
 var $137=$136;
 $cp=$137;
 var $138=$fun;
 var $139=(($138+8)|0);
 var $140=SAFE_HEAP_LOAD($139, "i32 (%struct.apltoken*)*", 0, 0);
 var $141=$tok;
 var $142=FUNCTION_TABLE[$140]($141);
 $noexit=$142;
 label=28;break;
 case 28: 
 var $144=$noexit;
 var $145=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $146=($145|0)==0;
 var $147=($146&1);
 var $148=$144&$147;
 $ret=$148;
 label=29;break;
 case 29: 
 var $150=$ret;
 $1=$150;
 label=30;break;
 case 30: 
 var $152=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $152;
  default: assert(0, "bad label: " + label);
 }

}


function _execexef($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 $2=$tok;
 var $3=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $4=(($3+40)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.execstk*", 0, 0);
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "%struct.apltoken*", 0, 0);
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 var $10=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $11=(($10+40)|0);
 var $12=SAFE_HEAP_LOAD($11, "%struct.execstk*", 0, 0);
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.apltoken*", 0, 0);
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)==3;
 if($17){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=11;break;
 case 4: 
 var $20=$2;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 if(($22|0)==44){ label=5;break;}else if(($22|0)==49){ label=6;break;}else{label=7;break;}
 case 5: 
 var $24=_quadin();
 $out=$24;
 label=8;break;
 case 6: 
 var $26=_qquadin();
 $out=$26;
 label=8;break;
 case 7: 
 $1=0;
 label=11;break;
 case 8: 
 var $29=$out;
 var $30=($29|0)==0;
 if($30){label=9;break;}else{label=10;break;}
 case 9: 
 $1=0;
 label=11;break;
 case 10: 
 var $33=$2;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $37=(($36+52)|0);
 SAFE_HEAP_STORE($37, $35, "i32", 0);
 var $38=$2;
 _execfree($38);
 var $39=$out;
 var $40=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $41=(($40+52)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=_exectok($39,$42);
 $1=$43;
 label=11;break;
 case 11: 
 var $45=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $45;
  default: assert(0, "bad label: " + label);
 }

}


function _execexeg(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tok;
 var $savelast;
 label=2;break;
 case 2: 
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $3=(($2+44)|0);
 var $4=$3;
 var $5=_pop($4);
 var $6=$5;
 $tok=$6;
 var $7=$tok;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $11=(($10+52)|0);
 SAFE_HEAP_STORE($11, $9, "i32", 0);
 var $12=$tok;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$tok;
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=($17|0)==-8;
 if($18){label=5;break;}else{label=4;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $21=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $22=(($21+40)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.execstk*", 0, 0);
 var $24=(($23+8)|0);
 var $25=$24;
 var $26=$tok;
 var $27=$26;
 var $28=_lifo($25,$27);
 var $29=$28;
 $tok=$29;
 label=2;break;
 case 6: 
 var $31=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $32=(($31+48)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 $savelast=$33;
 label=7;break;
 case 7: 
 var $35=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{var $43=0;label=9;break;}
 case 8: 
 var $38=$tok;
 var $39=(($38+4)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=($40|0)==61;
 var $43=$41;label=9;break;
 case 9: 
 var $43;
 if($43){label=10;break;}else{label=16;break;}
 case 10: 
 var $45=$tok;
 var $46=_execbrkt($45);
 $tok=$46;
 var $47=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $48=($47|0)!=0;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 label=16;break;
 case 12: 
 var $51=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $52=(($51+40)|0);
 var $53=SAFE_HEAP_LOAD($52, "%struct.execstk*", 0, 0);
 var $54=(($53+8)|0);
 var $55=$54;
 var $56=$tok;
 var $57=$56;
 var $58=_lifo($55,$57);
 var $59=$58;
 $tok=$59;
 var $60=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $61=(($60+44)|0);
 var $62=$61;
 var $63=_pop($62);
 var $64=$63;
 $tok=$64;
 var $65=0==($64|0);
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=15;break;
 case 14: 
 var $68=$tok;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $72=(($71+52)|0);
 SAFE_HEAP_STORE($72, $70, "i32", 0);
 label=15;break;
 case 15: 
 var $74=$savelast;
 var $75=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $76=(($75+48)|0);
 SAFE_HEAP_STORE($76, $74, "i32", 0);
 label=7;break;
 case 16: 
 var $78=$tok;
 var $79=(($78+4)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 var $81=($80|0)==9;
 if($81){label=17;break;}else{label=18;break;}
 case 17: 
 var $83=$tok;
 _execfree($83);
 var $84=_execexej();
 $tok=$84;
 var $85=$savelast;
 var $86=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $87=(($86+48)|0);
 SAFE_HEAP_STORE($87, $85, "i32", 0);
 label=18;break;
 case 18: 
 var $89=$tok;
 var $90=_funexec($89);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }

}


function _execexeh($op){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ret;
 $1=$op;
 $ret=0;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $3=(($2+48)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 var $5=($4|0)==2;
 if($5){label=2;break;}else{label=10;break;}
 case 2: 
 var $7=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $8=(($7+48)|0);
 SAFE_HEAP_STORE($8, 0, "i32", 0);
 var $9=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $10=($9|0)==0;
 if($10){label=3;break;}else{label=9;break;}
 case 3: 
 var $12=$1;
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=9;break;}
 case 4: 
 $ret=1;
 var $15=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $16=(($15+44)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.apltoken*", 0, 0);
 var $18=($17|0)!=0;
 if($18){label=7;break;}else{label=5;break;}
 case 5: 
 var $20=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $21=(($20+40)|0);
 var $22=SAFE_HEAP_LOAD($21, "%struct.execstk*", 0, 0);
 var $23=(($22+4)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.apltoken*", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=7;break;}else{label=6;break;}
 case 6: 
 var $27=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $28=(($27+40)|0);
 var $29=SAFE_HEAP_LOAD($28, "%struct.execstk*", 0, 0);
 var $30=(($29+8)|0);
 var $31=SAFE_HEAP_LOAD($30, "%struct.apltoken*", 0, 0);
 var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 94, "i32", 0);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $37=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _execexei($pfun,$ptop,$tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $func;
 $2=$pfun;
 $3=$ptop;
 $4=$tok;
 var $5=$4;
 var $6=(($5+12)|0);
 var $7=$6;
 var $8=SAFE_HEAP_LOAD($7, "i8*", 0, 0);
 var $9=_treesrch($8);
 var $10=$9;
 $func=$10;
 var $11=$func;
 var $12=0!=($11|0);
 if($12){label=2;break;}else{label=6;break;}
 case 2: 
 var $14=$func;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$16&256;
 var $18=($17|0)!=0;
 if($18){label=3;break;}else{label=6;break;}
 case 3: 
 var $20=$func;
 var $21=$20;
 var $22=$4;
 var $23=(($22+20)|0);
 SAFE_HEAP_STORE($23, $21, "i8*", 0);
 var $24=$func;
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=$26&256;
 var $28=($27|0)!=0;
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 var $30=$4;
 var $31=_execnila($30);
 var $32=$3;
 SAFE_HEAP_STORE($32, $31, "%struct.apltoken*", 0);
 var $33=$2;
 SAFE_HEAP_STORE($33, 0, "%struct.apltoken*", 0);
 var $34=$3;
 var $35=SAFE_HEAP_LOAD($34, "%struct.apltoken*", 0, 0);
 var $36=0!=($35|0);
 var $37=($36&1);
 $1=$37;
 label=8;break;
 case 5: 
 label=7;break;
 case 6: 
 var $40=$4;
 var $41=$3;
 SAFE_HEAP_STORE($41, $40, "%struct.apltoken*", 0);
 var $42=$2;
 SAFE_HEAP_STORE($42, 0, "%struct.apltoken*", 0);
 label=7;break;
 case 7: 
 var $44=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $45=($44|0)==0;
 var $46=($45&1);
 $1=$46;
 label=8;break;
 case 8: 
 var $48=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }

}


function _execexej(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $op;
 var $bug;
 $op=0;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $bug=$2;
 _execinit();
 var $3=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=14;break;
 case 3: 
 _execexed();
 var $7=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $8=($7|0)!=0;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=14;break;
 case 5: 
 var $11=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $12=(($11+40)|0);
 var $13=SAFE_HEAP_LOAD($12, "%struct.execstk*", 0, 0);
 var $14=(($13+8)|0);
 var $15=$14;
 var $16=_pop($15);
 var $17=$16;
 $op=$17;
 var $18=$op;
 var $19=($18|0)==0;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 var $21=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $22=(($21+40)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.execstk*", 0, 0);
 var $24=(($23+4)|0);
 var $25=$24;
 var $26=_pop($25);
 var $27=$26;
 $op=$27;
 label=7;break;
 case 7: 
 var $29=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $30=(($29+40)|0);
 var $31=SAFE_HEAP_LOAD($30, "%struct.execstk*", 0, 0);
 var $32=(($31+8)|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.apltoken*", 0, 0);
 var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 var $36=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $37=(($36+40)|0);
 var $38=SAFE_HEAP_LOAD($37, "%struct.execstk*", 0, 0);
 var $39=(($38+4)|0);
 var $40=SAFE_HEAP_LOAD($39, "%struct.apltoken*", 0, 0);
 var $41=($40|0)!=0;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 61, "i32", 0);
 label=13;break;
 case 10: 
 var $44=$op;
 var $45=($44|0)==0;
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 SAFE_HEAP_STORE(4592, 60, "i32", 0);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 _execterm();
 var $49=$op;
 $1=$49;
 label=14;break;
 case 14: 
 var $51=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function _execexek(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $op;
 $op=0;
 var $1=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=7;break;}
 case 2: 
 var $4=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $5=(($4+40)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.execstk*", 0, 0);
 var $7=(($6+8)|0);
 var $8=$7;
 var $9=_pop($8);
 var $10=$9;
 $op=$10;
 var $11=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $15=(($14+40)|0);
 var $16=SAFE_HEAP_LOAD($15, "%struct.execstk*", 0, 0);
 var $17=(($16+8)|0);
 var $18=SAFE_HEAP_LOAD($17, "%struct.apltoken*", 0, 0);
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=4;break;}
 case 4: 
 var $21=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $22=(($21+40)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.execstk*", 0, 0);
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "%struct.apltoken*", 0, 0);
 var $26=($25|0)!=0;
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE(4592, 61, "i32", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $30=$op;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function _execfree($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ix;
 var $dp;
 $1=$tok;
 var $2=$1;
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=$1;
 var $6=(($5+16)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&1;
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 label=15;break;
 case 4: 
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 switch(($14|0)){case -7:{ label=11;break;}case 7:case -3:{ label=5;break;}case -4:case 2:{ label=6;break;}case -8:{ label=7;break;}default:{label=14;break;}}break;
 case 5: 
 var $16=$1;
 var $17=(($16+12)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "%struct.aplcb*", 0, 0);
 _endoper($19);
 label=14;break;
 case 6: 
 var $21=$1;
 var $22=(($21+12)|0);
 var $23=$22;
 var $24=SAFE_HEAP_LOAD($23, "i8*", 0, 0);
 _aplfree($24);
 label=14;break;
 case 7: 
 label=8;break;
 case 8: 
 var $27=$1;
 var $28=(($27+12)|0);
 var $29=$28;
 var $30=$29;
 var $31=_pop($30);
 var $32=$31;
 $ix=$32;
 var $33=0!=($32|0);
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=$ix;
 _execfree($35);
 label=8;break;
 case 10: 
 label=14;break;
 case 11: 
 var $38=$1;
 var $39=(($38+12)|0);
 var $40=$39;
 var $41=SAFE_HEAP_LOAD($40, "%struct.aplderiv.441*", 0, 0);
 $dp=$41;
 var $42=($41|0)!=0;
 if($42){label=12;break;}else{label=13;break;}
 case 12: 
 var $44=$dp;
 _dervfree($44);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $47=$1;
 var $48=$47;
 _aplfree($48);
 label=15;break;
 case 15: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execfun($pfunc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $funtok;
 var $code;
 $1=$pfunc;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $3=(($2+40)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.execstk*", 0, 0);
 var $5=(($4+4)|0);
 var $6=$5;
 var $7=_pop($6);
 var $8=$7;
 $funtok=$8;
 var $9=0==($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 SAFE_HEAP_STORE(4592, 63, "i32", 0);
 label=4;break;
 case 3: 
 var $12=$funtok;
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $16=(($15+52)|0);
 SAFE_HEAP_STORE($16, $14, "i32", 0);
 var $17=$1;
 var $18=$funtok;
 var $19=_getcode($17,$18);
 $code=$19;
 var $20=$funtok;
 _execfree($20);
 label=4;break;
 case 4: 
 var $22=$code;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _execgeto($hdr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tok;
 $2=$hdr;
 var $3=$2;
 var $4=_pop($3);
 var $5=$4;
 $tok=$5;
 var $6=0==($5|0);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=_errstop(59,0,0,0);
 $1=$8;
 label=4;break;
 case 3: 
 var $10=$tok;
 var $11=_execgetp($10);
 $1=$11;
 label=4;break;
 case 4: 
 var $13=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }

}


function _execgetp($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $out;
 $1=$tok;
 var $2=$1;
 var $3=_execgetr($2);
 $out=$3;
 var $4=$1;
 _execfree($4);
 var $5=$out;
 var $6=_errstop(0,0,0,$5);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $6;
}


function _execgetq($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $hdr;
 var $code;
 var $i;
 var $ip;
 var $c;
 var $out;
 $2=$tok;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 $code=$5;
 var $6=$code;
 var $7=($6|0)>-11;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=$code;
 var $10=($9|0)<-99;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=19;break;
 case 4: 
 var $13=$code;
 var $14=_quadnami($13);
 $c=$14;
 var $15=0!=($14|0);
 if($15){label=5;break;}else{label=8;break;}
 case 5: 
 var $17=$c;
 var $18=_treesrch($17);
 var $19=$18;
 $out=$19;
 var $20=0!=($19|0);
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$out;
 $1=$22;
 label=19;break;
 case 7: 
 label=8;break;
 case 8: 
 $out=0;
 var $25=$code;
 switch(($25|0)){case -11:case -21:{ label=14;break;}case -18:{ label=15;break;}case -24:case -25:case -26:case -28:{ label=16;break;}case -27:case -29:case -30:case -31:{ label=17;break;}case -12:{ label=9;break;}default:{label=18;break;}}break;
 case 9: 
 var $27=_getcb(0,256,9,1,0);
 $out=$27;
 var $28=$out;
 var $29=(($28)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "i8*", 0, 0);
 $c=$31;
 $i=0;
 label=10;break;
 case 10: 
 var $33=$i;
 var $34=($33|0)<256;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=$i;
 var $37=(($36)&255);
 var $38=$c;
 var $39=(($38+1)|0);
 $c=$39;
 SAFE_HEAP_STORE($38, $37, "i8", 0);
 label=12;break;
 case 12: 
 var $41=$i;
 var $42=((($41)+(1))|0);
 $i=$42;
 label=10;break;
 case 13: 
 label=18;break;
 case 14: 
 var $45=_getcb(0,0,9,1,0);
 $out=$45;
 label=18;break;
 case 15: 
 var $47=_getcb(0,0,5,1,0);
 $out=$47;
 label=18;break;
 case 16: 
 var $49=_execqts();
 $out=$49;
 label=18;break;
 case 17: 
 SAFE_HEAP_STORE(4592, 88, "i32", 0);
 label=18;break;
 case 18: 
 var $52=$out;
 $1=$52;
 label=19;break;
 case 19: 
 var $54=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }

}


function _execgetr($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 $1=$tok;
 $out=0;
 var $2=$1;
 var $3=($2|0)==0;
 if($3){label=19;break;}else{label=2;break;}
 case 2: 
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)!=0;
 if($6){label=19;break;}else{label=3;break;}
 case 3: 
 var $8=$1;
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 if(($10|0)==-9){ label=11;break;}else if(($10|0)==-4){ label=4;break;}else if(($10|0)==7|($10|0)==-3){ label=7;break;}else{label=12;break;}
 case 4: 
 var $12=$1;
 var $13=(($12+12)|0);
 var $14=$13;
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=_treesrch($15);
 var $17=$16;
 $out=$17;
 var $18=$out;
 var $19=($18|0)==0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE(4592, 59, "i32", 0);
 label=6;break;
 case 6: 
 label=18;break;
 case 7: 
 var $23=$1;
 var $24=(($23+12)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "%struct.aplcb*", 0, 0);
 $out=$26;
 var $27=$out;
 var $28=($27|0)!=0;
 if($28){label=8;break;}else{label=10;break;}
 case 8: 
 var $30=$out;
 var $31=(($30+4)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=$32&1;
 var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=$1;
 var $37=(($36+12)|0);
 var $38=$37;
 SAFE_HEAP_STORE($38, 0, "%struct.aplcb*", 0);
 label=10;break;
 case 10: 
 label=18;break;
 case 11: 
 $out=0;
 label=18;break;
 case 12: 
 var $42=$1;
 var $43=_execgets($42);
 $out=$43;
 var $44=$out;
 var $45=($44|0)!=0;
 if($45){label=14;break;}else{label=13;break;}
 case 13: 
 var $47=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $48=($47|0)!=0;
 if($48){label=14;break;}else{label=15;break;}
 case 14: 
 label=18;break;
 case 15: 
 var $51=$1;
 var $52=_execgetq($51);
 $out=$52;
 var $53=$out;
 var $54=($53|0)==0;
 if($54){label=16;break;}else{label=17;break;}
 case 16: 
 SAFE_HEAP_STORE(4592, 69, "i32", 0);
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $59=$out;
 var $60=_errstop(0,0,0,$59);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $60;
  default: assert(0, "bad label: " + label);
 }

}


function _execgets($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 $1=$tok;
 $out=0;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 switch(($4|0)){case -20:{ label=11;break;}case -21:{ label=12;break;}case -24:{ label=15;break;}case -26:{ label=18;break;}case -14:{ label=2;break;}case -28:{ label=21;break;}case -34:{ label=22;break;}case -33:{ label=5;break;}case -19:{ label=8;break;}default:{label=23;break;}}break;
 case 2: 
 var $6=_getcb(0,1,3,0,0);
 $out=$6;
 var $7=$out;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 label=24;break;
 case 4: 
 var $11=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $12=$out;
 var $13=(($12)|0);
 var $14=$13;
 var $15=SAFE_HEAP_LOAD($14, "double*", 0, 0);
 SAFE_HEAP_STORE($15, $11, "double", 0);
 label=24;break;
 case 5: 
 var $17=_treesrch(2552);
 var $18=$17;
 $out=$18;
 var $19=$out;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 59, "i32", 0);
 label=7;break;
 case 7: 
 label=24;break;
 case 8: 
 var $24=_getcb(0,1,5,0,0);
 $out=$24;
 var $25=$out;
 var $26=($25|0)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 label=24;break;
 case 10: 
 var $29=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $30=$out;
 var $31=(($30)|0);
 var $32=$31;
 var $33=SAFE_HEAP_LOAD($32, "i32*", 0, 0);
 SAFE_HEAP_STORE($33, $29, "i32", 0);
 label=24;break;
 case 11: 
 var $35=_execglc();
 $out=$35;
 label=24;break;
 case 12: 
 var $37=_treesrch(2536);
 var $38=$37;
 $out=$38;
 var $39=$out;
 var $40=($39|0)==0;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 SAFE_HEAP_STORE(4592, 59, "i32", 0);
 label=14;break;
 case 14: 
 label=24;break;
 case 15: 
 var $44=_getcb(0,1,3,0,0);
 $out=$44;
 var $45=$out;
 var $46=($45|0)==0;
 if($46){label=16;break;}else{label=17;break;}
 case 16: 
 label=24;break;
 case 17: 
 var $49=SAFE_HEAP_LOAD(2576, "double", 0, 0);
 var $50=$out;
 var $51=(($50)|0);
 var $52=$51;
 var $53=SAFE_HEAP_LOAD($52, "double*", 0, 0);
 SAFE_HEAP_STORE($53, $49, "double", 0);
 label=24;break;
 case 18: 
 var $55=_treesrch(2440);
 var $56=$55;
 $out=$56;
 var $57=$out;
 var $58=($57|0)==0;
 if($58){label=19;break;}else{label=20;break;}
 case 19: 
 SAFE_HEAP_STORE(4592, 59, "i32", 0);
 label=20;break;
 case 20: 
 label=24;break;
 case 21: 
 var $62=_execqts();
 $out=$62;
 label=24;break;
 case 22: 
 var $64=_execqtz();
 $out=$64;
 label=24;break;
 case 23: 
 $out=0;
 label=24;break;
 case 24: 
 var $67=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $67;
  default: assert(0, "bad label: " + label);
 }

}


function _execglc(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $hdr;
 var $out;
 var $datacnt;
 var $ip;
 $datacnt=0;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $hdr=$2;
 label=2;break;
 case 2: 
 var $4=$hdr;
 var $5=(($4)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.treelist*", 0, 0);
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 var $9=$datacnt;
 var $10=((($9)+(1))|0);
 $datacnt=$10;
 label=4;break;
 case 4: 
 var $12=$hdr;
 var $13=(($12)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.treelist*", 0, 0);
 $hdr=$14;
 label=2;break;
 case 5: 
 var $16=$datacnt;
 var $17=_getcb(0,$16,5,1,0);
 $out=$17;
 var $18=$out;
 var $19=($18|0)==0;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=12;break;
 case 7: 
 var $22=$out;
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 $ip=$25;
 var $26=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $hdr=$26;
 label=8;break;
 case 8: 
 var $28=$hdr;
 var $29=(($28)|0);
 var $30=SAFE_HEAP_LOAD($29, "%struct.treelist*", 0, 0);
 var $31=($30|0)!=0;
 if($31){label=9;break;}else{label=11;break;}
 case 9: 
 var $33=$hdr;
 var $34=(($33+16)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$ip;
 var $37=(($36+4)|0);
 $ip=$37;
 SAFE_HEAP_STORE($36, $35, "i32", 0);
 label=10;break;
 case 10: 
 var $39=$hdr;
 var $40=(($39)|0);
 var $41=SAFE_HEAP_LOAD($40, "%struct.treelist*", 0, 0);
 $hdr=$41;
 label=8;break;
 case 11: 
 var $43=$out;
 var $44=_errstop(0,0,0,$43);
 $1=$44;
 label=12;break;
 case 12: 
 var $46=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $46;
  default: assert(0, "bad label: " + label);
 }

}


function _execindx($op){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $indices;
 var $ixout;
 var $left=sp;
 var $rite=(sp)+(8);
 var $ixnxt;
 var $ixtok;
 var $p;
 var $wrk;
 var $i;
 var $offset;
 $2=$op;
 SAFE_HEAP_STORE($rite, 0, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($left, 0, "%struct.aplcb*", 0);
 $indices=0;
 var $3=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $4=(($3+40)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.execstk*", 0, 0);
 var $6=(($5+8)|0);
 var $7=$6;
 var $8=_pop($7);
 var $9=$8;
 $ixtok=$9;
 var $10=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $11=(($10+40)|0);
 var $12=SAFE_HEAP_LOAD($11, "%struct.execstk*", 0, 0);
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.apltoken*", 0, 0);
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=4;break;}
 case 2: 
 var $17=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $18=(($17+40)|0);
 var $19=SAFE_HEAP_LOAD($18, "%struct.execstk*", 0, 0);
 var $20=(($19+4)|0);
 var $21=SAFE_HEAP_LOAD($20, "%struct.apltoken*", 0, 0);
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=($23|0)==3;
 if($24){label=3;break;}else{label=4;break;}
 case 3: 
 var $26=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $27=(($26+40)|0);
 var $28=SAFE_HEAP_LOAD($27, "%struct.execstk*", 0, 0);
 var $29=(($28+4)|0);
 var $30=$29;
 var $31=_pop($30);
 var $32=_execfree($31);
 var $33=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $34=(($33+40)|0);
 var $35=SAFE_HEAP_LOAD($34, "%struct.execstk*", 0, 0);
 var $36=(($35+8)|0);
 var $37=$36;
 var $38=_execgeto($37);
 SAFE_HEAP_STORE($rite, $38, "%struct.aplcb*", 0);
 label=4;break;
 case 4: 
 var $40=$2;
 var $41=(($40+4)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=($42|0)==-4;
 if($43){label=5;break;}else{label=16;break;}
 case 5: 
 var $45=SAFE_HEAP_LOAD($rite, "%struct.aplcb*", 0, 0);
 var $46=($45|0)!=0;
 if($46){label=6;break;}else{label=16;break;}
 case 6: 
 var $48=$2;
 var $49=(($48+12)|0);
 var $50=$49;
 var $51=SAFE_HEAP_LOAD($50, "i8*", 0, 0);
 var $52=_treenode($51);
 $p=$52;
 var $53=0==($52|0);
 if($53){label=10;break;}else{label=7;break;}
 case 7: 
 var $55=$p;
 var $56=(($55+8)|0);
 var $57=SAFE_HEAP_LOAD($56, "i8*", 0, 0);
 var $58=$57;
 SAFE_HEAP_STORE($left, $58, "%struct.aplcb*", 0);
 var $59=0==($58|0);
 if($59){label=10;break;}else{label=8;break;}
 case 8: 
 var $61=SAFE_HEAP_LOAD($left, "%struct.aplcb*", 0, 0);
 var $62=(($61+4)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=$63&128;
 var $65=($64|0)!=0;
 if($65){label=10;break;}else{label=9;break;}
 case 9: 
 var $67=SAFE_HEAP_LOAD($left, "%struct.aplcb*", 0, 0);
 var $68=(($67+4)|0);
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 var $70=$69&256;
 var $71=($70|0)!=0;
 if($71){label=10;break;}else{label=11;break;}
 case 10: 
 SAFE_HEAP_STORE(4592, 59, "i32", 0);
 label=15;break;
 case 11: 
 var $74=_matchok($left,$rite,110);
 var $75=($74|0)!=0;
 if($75){label=12;break;}else{label=14;break;}
 case 12: 
 var $77=SAFE_HEAP_LOAD($left, "%struct.aplcb*", 0, 0);
 var $78=$p;
 var $79=(($78+8)|0);
 var $80=SAFE_HEAP_LOAD($79, "i8*", 0, 0);
 var $81=$80;
 var $82=($77|0)!=($81|0);
 if($82){label=13;break;}else{label=14;break;}
 case 13: 
 var $84=$p;
 var $85=(($84+8)|0);
 var $86=SAFE_HEAP_LOAD($85, "i8*", 0, 0);
 var $87=$86;
 _leafdel($87);
 var $88=SAFE_HEAP_LOAD($left, "%struct.aplcb*", 0, 0);
 var $89=_perm($88);
 var $90=$89;
 var $91=$p;
 var $92=(($91+8)|0);
 SAFE_HEAP_STORE($92, $90, "i8*", 0);
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $95=$2;
 var $96=_execfree($95);
 label=17;break;
 case 16: 
 var $98=$2;
 var $99=_execgetp($98);
 SAFE_HEAP_STORE($left, $99, "%struct.aplcb*", 0);
 label=17;break;
 case 17: 
 var $101=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $102=($101|0)==0;
 if($102){label=18;break;}else{label=20;break;}
 case 18: 
 var $104=SAFE_HEAP_LOAD($left, "%struct.aplcb*", 0, 0);
 var $105=(($104+12)|0);
 var $106=SAFE_HEAP_LOAD($105, "i32", 0, 0);
 var $107=($106|0)<1;
 if($107){label=19;break;}else{label=20;break;}
 case 19: 
 SAFE_HEAP_STORE(4592, 68, "i32", 0);
 label=20;break;
 case 20: 
 var $110=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $111=($110|0)==0;
 if($111){label=21;break;}else{label=22;break;}
 case 21: 
 var $113=$ixtok;
 var $114=(($113+8)|0);
 var $115=SAFE_HEAP_LOAD($114, "i32", 0, 0);
 $offset=$115;
 var $116=$ixtok;
 var $117=SAFE_HEAP_LOAD($left, "%struct.aplcb*", 0, 0);
 var $118=(($117+12)|0);
 var $119=SAFE_HEAP_LOAD($118, "i32", 0, 0);
 var $120=_execindy($116,$119);
 $indices=$120;
 label=22;break;
 case 22: 
 var $122=$ixtok;
 var $123=_execfree($122);
 var $124=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $125=($124|0)!=0;
 if($125){label=23;break;}else{label=24;break;}
 case 23: 
 var $127=SAFE_HEAP_LOAD($left, "%struct.aplcb*", 0, 0);
 var $128=_endoper($127);
 var $129=$indices;
 var $130=_endoper($129);
 var $131=SAFE_HEAP_LOAD($rite, "%struct.aplcb*", 0, 0);
 var $132=_endoper($131);
 $1=0;
 label=25;break;
 case 24: 
 var $134=SAFE_HEAP_LOAD($left, "%struct.aplcb*", 0, 0);
 var $135=$indices;
 var $136=SAFE_HEAP_LOAD($rite, "%struct.aplcb*", 0, 0);
 var $137=_indexm($134,$135,$136);
 var $138=$offset;
 var $139=_exectok($137,$138);
 $1=$139;
 label=25;break;
 case 25: 
 var $141=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $141;
  default: assert(0, "bad label: " + label);
 }

}


function _execindy($ixtok,$rank){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $indices;
 var $ixout;
 var $ixnxt;
 var $i;
 $1=$ixtok;
 $2=$rank;
 var $3=$2;
 var $4=_getcb(0,$3,1057,1,0);
 $indices=$4;
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=16;break;}
 case 2: 
 var $8=$indices;
 var $9=(($8)|0);
 var $10=$9;
 var $11=SAFE_HEAP_LOAD($10, "%struct.aplcb**", 0, 0);
 $ixout=$11;
 var $12=$2;
 $i=$12;
 label=3;break;
 case 3: 
 var $14=$i;
 var $15=($14|0)>0;
 if($15){label=4;break;}else{label=12;break;}
 case 4: 
 var $17=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $18=($17|0)==0;
 if($18){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=$1;
 var $21=(($20+12)|0);
 var $22=$21;
 var $23=$22;
 var $24=_pop($23);
 var $25=$24;
 $ixnxt=$25;
 var $26=0==($25|0);
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=7;break;
 case 7: 
 var $29=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $30=($29|0)!=0;
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 var $32=$ixout;
 var $33=(($32+4)|0);
 $ixout=$33;
 SAFE_HEAP_STORE($32, 0, "%struct.aplcb*", 0);
 label=10;break;
 case 9: 
 var $35=$ixnxt;
 var $36=_execgetp($35);
 var $37=$ixout;
 var $38=(($37+4)|0);
 $ixout=$38;
 SAFE_HEAP_STORE($37, $36, "%struct.aplcb*", 0);
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $41=$i;
 var $42=((($41)-(1))|0);
 $i=$42;
 label=3;break;
 case 12: 
 var $44=$1;
 var $45=(($44+12)|0);
 var $46=$45;
 var $47=SAFE_HEAP_LOAD($46, "%struct.apltoken*", 0, 0);
 var $48=0!=($47|0);
 if($48){label=13;break;}else{label=15;break;}
 case 13: 
 var $50=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $51=($50|0)==0;
 if($51){label=14;break;}else{label=15;break;}
 case 14: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $55=$indices;
 var $56=_errstop(0,0,0,$55);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }

}


function _execinit(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $new;
 var $1=_aplmall(12);
 var $2=$1;
 $new=$2;
 var $3=0!=($2|0);
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $6=(($5+40)|0);
 var $7=SAFE_HEAP_LOAD($6, "%struct.execstk*", 0, 0);
 var $8=$new;
 var $9=(($8)|0);
 SAFE_HEAP_STORE($9, $7, "%struct.execstk*", 0);
 var $10=$new;
 var $11=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $12=(($11+40)|0);
 SAFE_HEAP_STORE($12, $10, "%struct.execstk*", 0);
 var $13=$new;
 var $14=(($13+4)|0);
 SAFE_HEAP_STORE($14, 0, "%struct.apltoken*", 0);
 var $15=$new;
 var $16=(($15+8)|0);
 SAFE_HEAP_STORE($16, 0, "%struct.apltoken*", 0);
 label=3;break;
 case 3: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execjot2($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $lp;
 var $op;
 var $out;
 var $rp;
 var $datacnt;
 var $i;
 var $ip;
 var $j;
 var $rank;
 $2=$dp;
 SAFE_HEAP_STORE($3, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 $out=0;
 var $5=_matchok($3,$4,32);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=15;break;
 case 3: 
 var $9=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $10=(($9+8)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=(Math_imul($11,$14)|0);
 $datacnt=$15;
 var $16=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $20=(($19+12)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=((($18)+($21))|0);
 $rank=$22;
 var $23=$datacnt;
 var $24=$rank;
 var $25=_getcb(0,$23,33,$24,0);
 $out=$25;
 var $26=$out;
 var $27=($26|0)!=0;
 if($27){label=4;break;}else{label=6;break;}
 case 4: 
 var $29=$rank;
 var $30=($29|0)>1;
 if($30){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=$out;
 var $33=(($32+16)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32*", 0, 0);
 var $35=$34;
 var $36=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $37=(($36+16)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32*", 0, 0);
 var $39=$38;
 var $40=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $41=(($40+12)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=_intcopy($35,$39,$42,1);
 var $44=$43;
 $ip=$44;
 var $45=$ip;
 var $46=$45;
 var $47=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $48=(($47+16)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32*", 0, 0);
 var $50=$49;
 var $51=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $52=(($51+12)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=_intcopy($46,$50,$53,1);
 var $55=$54;
 $ip=$55;
 label=6;break;
 case 6: 
 var $57=$datacnt;
 var $58=($57|0)!=0;
 if($58){label=7;break;}else{label=14;break;}
 case 7: 
 var $60=$out;
 var $61=(($60)|0);
 var $62=$61;
 var $63=SAFE_HEAP_LOAD($62, "%struct.aplcb**", 0, 0);
 $op=$63;
 var $64=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "%struct.aplcb**", 0, 0);
 $lp=$67;
 var $68=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 $i=$70;
 label=8;break;
 case 8: 
 var $72=$i;
 var $73=((($72)-(1))|0);
 $i=$73;
 var $74=0<($72|0);
 if($74){label=9;break;}else{label=13;break;}
 case 9: 
 var $76=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $77=(($76)|0);
 var $78=$77;
 var $79=SAFE_HEAP_LOAD($78, "%struct.aplcb**", 0, 0);
 $rp=$79;
 var $80=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $81=(($80+8)|0);
 var $82=SAFE_HEAP_LOAD($81, "i32", 0, 0);
 $j=$82;
 label=10;break;
 case 10: 
 var $84=$j;
 var $85=((($84)-(1))|0);
 $j=$85;
 var $86=0<($84|0);
 if($86){label=11;break;}else{label=12;break;}
 case 11: 
 var $88=$2;
 var $89=$2;
 var $90=(($89+52)|0);
 var $91=$lp;
 var $92=SAFE_HEAP_LOAD($91, "%struct.aplcb*", 0, 0);
 var $93=$rp;
 var $94=(($93+4)|0);
 $rp=$94;
 var $95=SAFE_HEAP_LOAD($93, "%struct.aplcb*", 0, 0);
 var $96=_eachdyag($88,$90,$92,$95);
 var $97=_perm($96);
 var $98=$op;
 var $99=(($98+4)|0);
 $op=$99;
 SAFE_HEAP_STORE($98, $97, "%struct.aplcb*", 0);
 label=10;break;
 case 12: 
 var $101=$lp;
 var $102=(($101+4)|0);
 $lp=$102;
 label=8;break;
 case 13: 
 label=14;break;
 case 14: 
 var $105=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $106=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $107=$out;
 var $108=_errstop(0,$105,$106,$107);
 $1=$108;
 label=15;break;
 case 15: 
 var $110=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $110;
  default: assert(0, "bad label: " + label);
 }

}


function _execjota($left,$rite,$type,$rscp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $out;
 $1=$left;
 $2=$rite;
 $3=$type;
 $4=$rscp;
 $out=0;
 var $5=$3;
 if(($5|0)==2){ label=12;break;}else if(($5|0)==64){ label=2;break;}else if(($5|0)==4){ label=7;break;}else{label=13;break;}
 case 2: 
 var $7=$4;
 var $8=(($7+16)|0);
 var $9=(($8+16)|0);
 var $10=SAFE_HEAP_LOAD($9, "void (double*, double*, double*)*", 0, 0);
 var $11=0!=($10|0);
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 var $13=$4;
 var $14=(($13+16)|0);
 var $15=(($14+16)|0);
 var $16=SAFE_HEAP_LOAD($15, "void (double*, double*, double*)*", 0, 0);
 var $17=$16;
 var $18=$1;
 var $19=$2;
 var $20=_outrprdp($17,$18,$19);
 $out=$20;
 label=4;break;
 case 4: 
 var $22=$out;
 var $23=($22|0)!=0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 label=13;break;
 case 6: 
 label=7;break;
 case 7: 
 var $27=$4;
 var $28=(($27+16)|0);
 var $29=(($28)|0);
 var $30=SAFE_HEAP_LOAD($29, "void (i32*, i32*, i32*)*", 0, 0);
 var $31=0!=($30|0);
 if($31){label=8;break;}else{label=9;break;}
 case 8: 
 var $33=$4;
 var $34=(($33+16)|0);
 var $35=(($34)|0);
 var $36=SAFE_HEAP_LOAD($35, "void (i32*, i32*, i32*)*", 0, 0);
 var $37=$36;
 var $38=$1;
 var $39=$2;
 var $40=_outrprdp($37,$38,$39);
 $out=$40;
 label=9;break;
 case 9: 
 var $42=$out;
 var $43=($42|0)!=0;
 if($43){label=10;break;}else{label=11;break;}
 case 10: 
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 var $47=$1;
 var $48=$2;
 var $49=$3;
 var $50=$3;
 var $51=$4;
 var $52=_execjotc($47,$48,$49,$50,$51);
 $out=$52;
 label=13;break;
 case 13: 
 var $54=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }

}


function _execjot($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $rfun;
 var $out;
 var $ltype;
 var $rtype;
 $2=$dp;
 $3=$left;
 $4=$rite;
 $out=0;
 var $5=$3;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&78;
 $ltype=$8;
 var $9=$4;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$11&78;
 $rtype=$12;
 var $13=$ltype;
 var $14=$rtype;
 var $15=$13|$14;
 var $16=$15&8;
 var $17=($16|0)!=0;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$3;
 var $20=$4;
 var $21=$ltype;
 var $22=$rtype;
 var $23=$2;
 var $24=(($23+52)|0);
 var $25=(($24+4)|0);
 var $26=SAFE_HEAP_LOAD($25, "i8*", 0, 0);
 var $27=_execjotd($19,$20,$21,$22,$26);
 $out=$27;
 label=7;break;
 case 3: 
 var $29=$ltype;
 var $30=$rtype;
 var $31=($29|0)==($30|0);
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 var $33=$3;
 var $34=$4;
 var $35=$ltype;
 var $36=$2;
 var $37=(($36+52)|0);
 var $38=(($37+8)|0);
 var $39=SAFE_HEAP_LOAD($38, "i8*", 0, 0);
 var $40=$39;
 var $41=_execjota($33,$34,$35,$40);
 $out=$41;
 label=6;break;
 case 5: 
 var $43=$3;
 var $44=$4;
 var $45=$ltype;
 var $46=$rtype;
 var $47=$2;
 var $48=(($47+52)|0);
 var $49=(($48+8)|0);
 var $50=SAFE_HEAP_LOAD($49, "i8*", 0, 0);
 var $51=$50;
 var $52=_execjotc($43,$44,$45,$46,$51);
 $out=$52;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $55=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $56=($55|0)==0;
 if($56){label=8;break;}else{label=10;break;}
 case 8: 
 var $58=$out;
 var $59=($58|0)==0;
 if($59){label=9;break;}else{label=10;break;}
 case 9: 
 var $61=$3;
 var $62=$4;
 var $63=$out;
 var $64=_errstop(78,$61,$62,$63);
 $1=$64;
 label=11;break;
 case 10: 
 var $66=$out;
 $1=$66;
 label=11;break;
 case 11: 
 var $68=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $68;
  default: assert(0, "bad label: " + label);
 }

}


function _execjotc($left,$rite,$ltype,$rtype,$rscp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $out;
 $1=$left;
 $2=$rite;
 $3=$ltype;
 $4=$rtype;
 $5=$rscp;
 $out=0;
 var $6=$3;
 var $7=($6|0)==64;
 if($7){label=4;break;}else{label=2;break;}
 case 2: 
 var $9=$4;
 var $10=($9|0)==64;
 if($10){label=3;break;}else{label=9;break;}
 case 3: 
 var $12=$5;
 var $13=(($12+16)|0);
 var $14=(($13+16)|0);
 var $15=SAFE_HEAP_LOAD($14, "void (double*, double*, double*)*", 0, 0);
 var $16=0!=($15|0);
 if($16){label=4;break;}else{label=9;break;}
 case 4: 
 var $18=$3;
 var $19=($18|0)!=64;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$1;
 var $22=_complex($21);
 $1=$22;
 label=6;break;
 case 6: 
 var $24=$4;
 var $25=($24|0)!=64;
 if($25){label=7;break;}else{label=8;break;}
 case 7: 
 var $27=$2;
 var $28=_complex($27);
 $2=$28;
 label=8;break;
 case 8: 
 var $30=$5;
 var $31=(($30+16)|0);
 var $32=(($31+16)|0);
 var $33=SAFE_HEAP_LOAD($32, "void (double*, double*, double*)*", 0, 0);
 var $34=$33;
 var $35=$1;
 var $36=$2;
 var $37=_outrprdp($34,$35,$36);
 $out=$37;
 label=16;break;
 case 9: 
 var $39=$5;
 var $40=(($39+16)|0);
 var $41=(($40+4)|0);
 var $42=SAFE_HEAP_LOAD($41, "void (double*, double*, double*)*", 0, 0);
 var $43=0!=($42|0);
 if($43){label=10;break;}else{label=15;break;}
 case 10: 
 var $45=$3;
 var $46=($45|0)!=2;
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $48=$1;
 var $49=_real($48);
 $1=$49;
 label=12;break;
 case 12: 
 var $51=$4;
 var $52=($51|0)!=2;
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=$2;
 var $55=_real($54);
 $2=$55;
 label=14;break;
 case 14: 
 var $57=$5;
 var $58=(($57+16)|0);
 var $59=(($58+4)|0);
 var $60=SAFE_HEAP_LOAD($59, "void (double*, double*, double*)*", 0, 0);
 var $61=$60;
 var $62=$1;
 var $63=$2;
 var $64=_outrprdp($61,$62,$63);
 $out=$64;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $67=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $67;
  default: assert(0, "bad label: " + label);
 }

}


function _execjotd($left,$rite,$ltype,$rtype,$rfun){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 $2=$left;
 $3=$rite;
 $4=$ltype;
 $5=$rtype;
 $6=$rfun;
 var $7=$6;
 var $8=$7;
 var $9=(($8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 if(($10|0)==29){ label=2;break;}else if(($10|0)==62){ label=3;break;}else{label=4;break;}
 case 2: 
 $i=0;
 label=5;break;
 case 3: 
 $i=1;
 label=5;break;
 case 4: 
 var $14=$2;
 var $15=$3;
 var $16=_errstop(75,$14,$15,0);
 $1=$16;
 label=8;break;
 case 5: 
 var $18=$4;
 var $19=$5;
 var $20=($18|0)==($19|0);
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$6;
 var $23=$22;
 var $24=(($23+68)|0);
 var $25=SAFE_HEAP_LOAD($24, "void (i8*, i8*, i32*)*", 0, 0);
 var $26=$25;
 var $27=$2;
 var $28=$3;
 var $29=_outrprdp($26,$27,$28);
 $1=$29;
 label=8;break;
 case 7: 
 var $31=$i;
 var $32=$2;
 var $33=$3;
 var $34=_outrprdx($31,$32,$33);
 $1=$34;
 label=8;break;
 case 8: 
 var $36=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }

}


function _execmona($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$tok;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $3=(($2+40)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.execstk*", 0, 0);
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $10=(($9+40)|0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.execstk*", 0, 0);
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "%struct.apltoken*", 0, 0);
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=($15|0)!=-8;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=_execmonh();
 label=4;break;
 case 4: 
 var $20=$1;
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $24=(($23+40)|0);
 var $25=SAFE_HEAP_LOAD($24, "%struct.execstk*", 0, 0);
 var $26=(($25+4)|0);
 var $27=$26;
 var $28=$1;
 var $29=$28;
 var $30=_lifo($27,$29);
 var $31=$30;
 $1=$31;
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execmong(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break;
 case 2: 
 var $2=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{var $19=0;label=5;break;}
 case 3: 
 var $5=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $6=(($5+40)|0);
 var $7=SAFE_HEAP_LOAD($6, "%struct.execstk*", 0, 0);
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.apltoken*", 0, 0);
 var $10=($9|0)!=0;
 if($10){label=4;break;}else{var $19=0;label=5;break;}
 case 4: 
 var $12=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $13=(($12+40)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.execstk*", 0, 0);
 var $15=(($14+8)|0);
 var $16=SAFE_HEAP_LOAD($15, "%struct.apltoken*", 0, 0);
 var $17=($16|0)!=0;
 var $19=$17;label=5;break;
 case 5: 
 var $19;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 _execmona(0);
 label=2;break;
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _execmonh(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $axcb;
 var $out;
 var $rite;
 var $arg=sp;
 var $fun=(sp)+(8);
 var $code;
 var $funtype;
 var $offset;
 var $ep=(sp)+(16);
 var $ptype;
 SAFE_HEAP_STORE($arg, 0, "i8*", 0);
 var $1=_execfun($fun);
 $code=$1;
 var $2=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 label=25;break;
 case 3: 
 var $6=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $7=(($6+40)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.execstk*", 0, 0);
 var $9=(($8+8)|0);
 var $10=$9;
 var $11=_execgeto($10);
 $rite=$11;
 var $12=0==($11|0);
 if($12){label=4;break;}else{label=7;break;}
 case 4: 
 var $14=$code;
 var $15=($14|0)==-7;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 var $17=SAFE_HEAP_LOAD($fun, "i8*", 0, 0);
 var $18=$17;
 _dervfree($18);
 label=6;break;
 case 6: 
 SAFE_HEAP_STORE(4592, 70, "i32", 0);
 label=25;break;
 case 7: 
 var $21=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $22=(($21+52)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 $offset=$23;
 var $24=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $25=(($24+40)|0);
 var $26=SAFE_HEAP_LOAD($25, "%struct.execstk*", 0, 0);
 var $27=(($26+4)|0);
 var $28=SAFE_HEAP_LOAD($27, "%struct.apltoken*", 0, 0);
 var $29=_axistest($28);
 var $30=($29|0)!=0;
 if($30){label=8;break;}else{label=15;break;}
 case 8: 
 var $32=$code;
 var $33=($32|0)!=-10;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 89, "i32", 0);
 label=14;break;
 case 10: 
 var $36=SAFE_HEAP_LOAD($fun, "i8*", 0, 0);
 var $37=$36;
 var $38=(($37+4)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=$39&6160;
 var $41=($40|0)!=0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 SAFE_HEAP_STORE(4592, 89, "i32", 0);
 label=13;break;
 case 12: 
 var $44=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $45=(($44+40)|0);
 var $46=SAFE_HEAP_LOAD($45, "%struct.execstk*", 0, 0);
 var $47=(($46+4)|0);
 var $48=$47;
 var $49=_execaxis($48);
 $axcb=$49;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=16;break;
 case 15: 
 $axcb=0;
 label=16;break;
 case 16: 
 var $54=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $55=($54|0)!=0;
 if($55){label=17;break;}else{label=18;break;}
 case 17: 
 label=25;break;
 case 18: 
 var $58=$code;
 var $59=SAFE_HEAP_LOAD($fun, "i8*", 0, 0);
 var $60=_execmons($58,$59,$arg,$ep);
 $ptype=$60;
 var $61=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $62=($61|0)!=0;
 if($62){label=19;break;}else{label=20;break;}
 case 19: 
 label=25;break;
 case 20: 
 var $65=$code;
 var $66=($65|0)==-10;
 if($66){label=21;break;}else{label=23;break;}
 case 21: 
 var $68=SAFE_HEAP_LOAD($fun, "i8*", 0, 0);
 var $69=$68;
 var $70=(($69)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=($71|0)==57;
 if($72){label=22;break;}else{label=23;break;}
 case 22: 
 var $74=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $75=(($74+56)|0);
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $77=$76|2;
 SAFE_HEAP_STORE($75, $77, "i32", 0);
 label=23;break;
 case 23: 
 var $79=$ptype;
 var $80=SAFE_HEAP_LOAD($fun, "i8*", 0, 0);
 var $81=SAFE_HEAP_LOAD($arg, "i8*", 0, 0);
 var $82=$rite;
 var $83=$axcb;
 var $84=_execmonj($79,$80,$81,$ep,$82,$83);
 $out=$84;
 var $85=$out;
 var $86=($85|0)!=0;
 if($86){label=24;break;}else{label=25;break;}
 case 24: 
 var $88=$out;
 var $89=$offset;
 _execout($88,$89);
 label=25;break;
 case 25: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execmoni($fun,$arg,$pep){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $code;
 var $ret;
 var $smp;
 $2=$fun;
 $3=$arg;
 $4=$pep;
 $smp=0;
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=15;break;
 case 3: 
 var $9=$2;
 var $10=$9;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 $code=$12;
 var $13=$code;
 switch(($13|0)){case 75:{ label=10;break;}case 283:case 539:case 27:{ label=11;break;}case 6155:case 4107:{ label=12;break;}case 7:{ label=4;break;}case 15:{ label=5;break;}case 9:case 11:case 2059:{ label=8;break;}case 155:{ label=9;break;}default:{label=13;break;}}break;
 case 4: 
 var $15=$2;
 var $16=$15;
 var $17=(($16+64)|0);
 var $18=$17;
 var $19=$3;
 SAFE_HEAP_STORE($19, $18, "i8*", 0);
 label=5;break;
 case 5: 
 var $21=$3;
 var $22=SAFE_HEAP_LOAD($21, "i8*", 0, 0);
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$2;
 var $26=$25;
 var $27=(($26+8)|0);
 var $28=$27;
 var $29=$3;
 SAFE_HEAP_STORE($29, $28, "i8*", 0);
 label=7;break;
 case 7: 
 var $31=$4;
 var $32=$31;
 SAFE_HEAP_STORE($32, (90), "%struct.aplcb* (i8*, %struct.aplcb*)*", 0);
 $ret=5;
 label=14;break;
 case 8: 
 var $34=$2;
 var $35=$34;
 var $36=(($35+8)|0);
 var $37=$36;
 var $38=SAFE_HEAP_LOAD($37, "%struct.aplcb* (%struct.aplcb*)*", 0, 0);
 var $39=$4;
 var $40=$39;
 SAFE_HEAP_STORE($40, $38, "%struct.aplcb* (%struct.aplcb*)*", 0);
 $ret=6;
 label=14;break;
 case 9: 
 var $42=$2;
 var $43=$42;
 var $44=(($43+8)|0);
 var $45=$44;
 var $46=SAFE_HEAP_LOAD($45, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $47=$4;
 var $48=$47;
 SAFE_HEAP_STORE($48, $46, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 $ret=9;
 label=14;break;
 case 10: 
 var $50=$2;
 var $51=$50;
 var $52=(($51+8)|0);
 var $53=$52;
 var $54=SAFE_HEAP_LOAD($53, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $55=$4;
 var $56=$55;
 SAFE_HEAP_STORE($56, $54, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 $ret=1;
 label=14;break;
 case 11: 
 var $58=$2;
 var $59=$58;
 var $60=(($59+8)|0);
 var $61=$60;
 var $62=SAFE_HEAP_LOAD($61, "%struct.aplcb* (%struct.aplcb*, i32)*", 0, 0);
 var $63=$4;
 var $64=$63;
 SAFE_HEAP_STORE($64, $62, "%struct.aplcb* (%struct.aplcb*, i32)*", 0);
 $ret=7;
 label=14;break;
 case 12: 
 var $66=$2;
 var $67=$66;
 var $68=(($67+8)|0);
 var $69=$68;
 var $70=SAFE_HEAP_LOAD($69, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $71=$4;
 var $72=$71;
 SAFE_HEAP_STORE($72, $70, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 $ret=9;
 label=14;break;
 case 13: 
 $ret=0;
 label=14;break;
 case 14: 
 var $75=$ret;
 $1=$75;
 label=15;break;
 case 15: 
 var $77=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $77;
  default: assert(0, "bad label: " + label);
 }

}


function _execmonj($ptype,$fun,$arg,$ep,$rite,$axcb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ep; $ep=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);SAFE_HEAP_STORE($ep, SAFE_HEAP_LOAD(tempParam, "i32", 0, 0), "i32", 0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $out;
 var $axis;
 $1=$ptype;
 $2=$fun;
 $3=$arg;
 $4=$rite;
 $5=$axcb;
 $out=0;
 var $6=$1;
 switch(($6|0)){case 7:{ label=10;break;}case 4:{ label=2;break;}case 1:{ label=3;break;}case 9:{ label=4;break;}case 5:{ label=5;break;}case 6:{ label=9;break;}default:{label=14;break;}}break;
 case 2: 
 var $8=$ep;
 var $9=SAFE_HEAP_LOAD($8, "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $10=$2;
 var $11=$4;
 var $12=FUNCTION_TABLE[$9]($10,0,$11);
 $out=$12;
 label=15;break;
 case 3: 
 var $14=$ep;
 var $15=SAFE_HEAP_LOAD($14, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $16=$4;
 var $17=FUNCTION_TABLE[$15](0,$16);
 $out=$17;
 label=15;break;
 case 4: 
 var $19=$ep;
 var $20=SAFE_HEAP_LOAD($19, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $21=$4;
 var $22=$5;
 var $23=FUNCTION_TABLE[$20]($21,$22);
 $out=$23;
 label=15;break;
 case 5: 
 var $25=$4;
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=$27&32;
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$1;
 var $32=$3;
 var $33=$4;
 var $34=_execmonk($31,$32,$ep,$33,0);
 $out=$34;
 label=8;break;
 case 7: 
 var $36=$ep;
 var $37=SAFE_HEAP_LOAD($36, "%struct.aplcb* (i8*, %struct.aplcb*)*", 0, 0);
 var $38=$3;
 var $39=$4;
 var $40=FUNCTION_TABLE[$37]($38,$39);
 $out=$40;
 label=8;break;
 case 8: 
 label=15;break;
 case 9: 
 var $43=$ep;
 var $44=SAFE_HEAP_LOAD($43, "%struct.aplcb* (%struct.aplcb*)*", 0, 0);
 var $45=$4;
 var $46=FUNCTION_TABLE[$44]($45);
 $out=$46;
 label=15;break;
 case 10: 
 var $48=$5;
 var $49=($48|0)!=0;
 if($49){label=11;break;}else{label=12;break;}
 case 11: 
 var $51=$5;
 var $52=_execaxiv($51);
 var $53=(($52)&-1);
 $axis=$53;
 label=13;break;
 case 12: 
 var $55=$2;
 var $56=$55;
 var $57=$4;
 var $58=_axisdft($56,$57);
 $axis=$58;
 label=13;break;
 case 13: 
 var $60=$ep;
 var $61=SAFE_HEAP_LOAD($60, "%struct.aplcb* (%struct.aplcb*, i32)*", 0, 0);
 var $62=$4;
 var $63=$axis;
 var $64=FUNCTION_TABLE[$61]($62,$63);
 $out=$64;
 label=15;break;
 case 14: 
 SAFE_HEAP_STORE(4592, 73, "i32", 0);
 var $66=$4;
 var $67=_endoper($66);
 label=15;break;
 case 15: 
 var $69=$out;
 var $70=_errstop(0,0,0,$69);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }

}


function _execmonk($ptype,$arg,$ep,$rite,$axisp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ep; $ep=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);SAFE_HEAP_STORE($ep, SAFE_HEAP_LOAD(tempParam, "i32", 0, 0), "i32", 0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $ib;
 var $ob;
 var $out;
 var $tb;
 var $i;
 $2=$ptype;
 $3=$arg;
 $4=$rite;
 $5=$axisp;
 var $6=$4;
 var $7=(($6+8)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $i=$8;
 var $9=$i;
 var $10=0==($9|0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$4;
 var $13=$4;
 var $14=_aplcopy($13);
 var $15=_temp($14);
 var $16=_errstop(0,0,$12,$15);
 $1=$16;
 label=16;break;
 case 3: 
 var $18=$4;
 var $19=(($18+8)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=$4;
 var $22=(($21+12)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=_getcb(0,$20,33,$23,0);
 $out=$24;
 var $25=$out;
 var $26=($25|0)!=0;
 if($26){label=4;break;}else{label=15;break;}
 case 4: 
 var $28=$4;
 var $29=(($28)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "%struct.aplcb**", 0, 0);
 $ib=$31;
 var $32=$out;
 var $33=(($32)|0);
 var $34=$33;
 var $35=SAFE_HEAP_LOAD($34, "%struct.aplcb**", 0, 0);
 $ob=$35;
 label=5;break;
 case 5: 
 var $37=$i;
 var $38=((($37)-(1))|0);
 $i=$38;
 var $39=($37|0)!=0;
 if($39){label=6;break;}else{var $44=0;label=7;break;}
 case 6: 
 var $41=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $42=($41|0)==0;
 var $44=$42;label=7;break;
 case 7: 
 var $44;
 if($44){label=8;break;}else{label=14;break;}
 case 8: 
 var $46=$5;
 var $47=($46|0)==0;
 if($47){label=9;break;}else{label=10;break;}
 case 9: 
 var $49=$ep;
 var $50=SAFE_HEAP_LOAD($49, "%struct.aplcb* (i8*, %struct.aplcb*)*", 0, 0);
 var $51=$3;
 var $52=$ib;
 var $53=(($52+4)|0);
 $ib=$53;
 var $54=SAFE_HEAP_LOAD($52, "%struct.aplcb*", 0, 0);
 var $55=FUNCTION_TABLE[$50]($51,$54);
 var $66=$55;label=11;break;
 case 10: 
 var $57=$ep;
 var $58=SAFE_HEAP_LOAD($57, "%struct.aplcb* (%struct.aplcb*, i32)*", 0, 0);
 var $59=$ib;
 var $60=(($59+4)|0);
 $ib=$60;
 var $61=SAFE_HEAP_LOAD($59, "%struct.aplcb*", 0, 0);
 var $62=$5;
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=FUNCTION_TABLE[$58]($61,$63);
 var $66=$64;label=11;break;
 case 11: 
 var $66;
 $tb=$66;
 var $67=$ob;
 var $68=(($67+4)|0);
 $ob=$68;
 SAFE_HEAP_STORE($67, $66, "%struct.aplcb*", 0);
 var $69=$tb;
 var $70=($69|0)!=0;
 if($70){label=12;break;}else{label=13;break;}
 case 12: 
 var $72=$tb;
 var $73=(($72+4)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 var $75=((($74)-(1))|0);
 SAFE_HEAP_STORE($73, $75, "i32", 0);
 label=13;break;
 case 13: 
 label=5;break;
 case 14: 
 label=15;break;
 case 15: 
 var $79=$4;
 var $80=$out;
 var $81=_errstop(0,0,$79,$80);
 $1=$81;
 label=16;break;
 case 16: 
 var $83=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $83;
  default: assert(0, "bad label: " + label);
 }

}


function _execmonq($code,$pep){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ret;
 $1=$code;
 $2=$pep;
 $ret=6;
 var $3=$1;
 switch(($3|0)){case -13:{ label=2;break;}case -15:{ label=3;break;}case -16:{ label=4;break;}case -17:{ label=5;break;}case -22:{ label=6;break;}case -23:{ label=7;break;}default:{label=8;break;}}break;
 case 2: 
 var $5=$2;
 var $6=$5;
 SAFE_HEAP_STORE($6, 164, "%struct.aplcb* (%struct.aplcb*)*", 0);
 label=9;break;
 case 3: 
 var $8=$2;
 var $9=$8;
 SAFE_HEAP_STORE($9, 358, "%struct.aplcb* (%struct.aplcb*)*", 0);
 label=9;break;
 case 4: 
 var $11=$2;
 var $12=$11;
 SAFE_HEAP_STORE($12, 376, "%struct.aplcb* (%struct.aplcb*)*", 0);
 label=9;break;
 case 5: 
 var $14=$2;
 var $15=$14;
 SAFE_HEAP_STORE($15, 426, "%struct.aplcb* (%struct.aplcb*)*", 0);
 label=9;break;
 case 6: 
 var $17=$2;
 var $18=$17;
 SAFE_HEAP_STORE($18, 422, "%struct.aplcb* (%struct.aplcb*)*", 0);
 label=9;break;
 case 7: 
 $ret=1;
 var $20=$2;
 var $21=$20;
 SAFE_HEAP_STORE($21, 420, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 label=9;break;
 case 8: 
 $ret=0;
 label=9;break;
 case 9: 
 var $24=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _execmons($code,$fun,$arg,$pep){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ret;
 $1=$code;
 $2=$fun;
 $3=$arg;
 $4=$pep;
 var $5=$1;
 var $6=($5|0)>=256;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$4;
 var $9=$8;
 SAFE_HEAP_STORE($9, (128), "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0);
 $ret=4;
 label=13;break;
 case 3: 
 var $11=$1;
 var $12=($11|0)==-7;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=$4;
 var $15=$14;
 SAFE_HEAP_STORE($15, (148), "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0);
 $ret=4;
 label=12;break;
 case 5: 
 var $17=$1;
 var $18=($17|0)==-10;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=$2;
 var $21=$3;
 var $22=$4;
 var $23=_execmoni($20,$21,$22);
 $ret=$23;
 label=11;break;
 case 7: 
 var $25=$1;
 var $26=($25|0)<-11;
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$1;
 var $29=$4;
 var $30=_execmonq($28,$29);
 $ret=$30;
 label=10;break;
 case 9: 
 SAFE_HEAP_STORE(4592, 73, "i32", 0);
 $ret=0;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $36=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }

}


function _execmsg($stmt,$stmtlen,$offset,$msg){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 $1=$stmt;
 $2=$stmtlen;
 $3=$offset;
 $4=$msg;
 var $5=$4;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 var $8=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $12=_aplmsg($11);
 $4=$12;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $15=$2;
 var $16=((($15)-(1))|0);
 $2=$16;
 var $17=($15|0)!=0;
 if($17){label=6;break;}else{label=7;break;}
 case 6: 
 var $19=$1;
 var $20=(($19+1)|0);
 $1=$20;
 var $21=SAFE_HEAP_LOAD($19, "i8", 0, 0);
 var $22=(($21<<24)>>24);
 var $23=_printf(11096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $22, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 7: 
 _aplnewl();
 var $25=$4;
 var $26=($25|0)!=0;
 if($26){label=8;break;}else{label=13;break;}
 case 8: 
 var $28=$3;
 $i=$28;
 label=9;break;
 case 9: 
 var $30=$i;
 var $31=($30|0)>0;
 if($31){label=10;break;}else{label=12;break;}
 case 10: 
 var $33=_printf(13352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, 0, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 label=11;break;
 case 11: 
 var $35=$i;
 var $36=((($35)-(1))|0);
 $i=$36;
 label=9;break;
 case 12: 
 var $38=$4;
 var $39=_printf(12160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $38, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 13: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execnexs($pfun,$parg,$op,$varcnt,$pnoexit,$savelast,$varsw){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $tok;
 var $wrk=sp;
 $2=$pfun;
 $3=$parg;
 $4=$op;
 $5=$varcnt;
 $6=$pnoexit;
 $7=$savelast;
 $8=$varsw;
 SAFE_HEAP_STORE($wrk, 0, "%struct.apltoken*", 0);
 var $9=$4;
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=8;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $13=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $14=(($13+40)|0);
 var $15=SAFE_HEAP_LOAD($14, "%struct.execstk*", 0, 0);
 var $16=(($15+8)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.apltoken*", 0, 0);
 var $18=_axistest($17);
 var $19=($18|0)!=0;
 if($19){label=4;break;}else{label=7;break;}
 case 4: 
 $8=0;
 var $21=$4;
 var $22=_execindx($21);
 $4=$22;
 var $23=$4;
 var $24=($23|0)==0;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=26;break;
 case 6: 
 label=3;break;
 case 7: 
 label=8;break;
 case 8: 
 var $29=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $30=(($29+40)|0);
 var $31=SAFE_HEAP_LOAD($30, "%struct.execstk*", 0, 0);
 var $32=(($31+8)|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.apltoken*", 0, 0);
 var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=17;break;}
 case 9: 
 var $36=$7;
 var $37=($36|0)==3;
 if($37){label=10;break;}else{label=17;break;}
 case 10: 
 var $39=$wrk;
 var $40=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $41=(($40+40)|0);
 var $42=SAFE_HEAP_LOAD($41, "%struct.execstk*", 0, 0);
 var $43=(($42+8)|0);
 var $44=$43;
 var $45=_pop($44);
 var $46=_lifo($39,$45);
 var $47=$46;
 $tok=$47;
 var $48=$5;
 var $49=($48|0)!=0;
 if($49){label=11;break;}else{label=16;break;}
 case 11: 
 var $51=$8;
 var $52=($51|0)!=0;
 if($52){label=12;break;}else{label=16;break;}
 case 12: 
 var $54=$tok;
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=($56|0)!=-4;
 if($57){label=13;break;}else{label=14;break;}
 case 13: 
 $8=0;
 label=15;break;
 case 14: 
 var $60=$5;
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=((($61)+(1))|0);
 SAFE_HEAP_STORE($60, $62, "i32", 0);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $66=$4;
 var $67=($66|0)!=0;
 if($67){label=18;break;}else{label=25;break;}
 case 18: 
 var $69=$5;
 var $70=($69|0)!=0;
 if($70){label=19;break;}else{label=24;break;}
 case 19: 
 var $72=$8;
 var $73=($72|0)!=0;
 if($73){label=20;break;}else{label=24;break;}
 case 20: 
 var $75=$4;
 var $76=(($75+4)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=($77|0)!=-4;
 if($78){label=21;break;}else{label=22;break;}
 case 21: 
 $8=0;
 label=23;break;
 case 22: 
 var $81=$5;
 var $82=SAFE_HEAP_LOAD($81, "i32", 0, 0);
 var $83=((($82)+(1))|0);
 SAFE_HEAP_STORE($81, $83, "i32", 0);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $86=$wrk;
 var $87=$4;
 var $88=$87;
 var $89=_lifo($86,$88);
 var $90=$89;
 $4=$90;
 $4=0;
 label=25;break;
 case 25: 
 var $92=$2;
 var $93=$3;
 var $94=$5;
 var $95=$6;
 var $96=$8;
 var $97=_execnexu($92,$93,$wrk,$94,$95,$96);
 $1=$97;
 label=26;break;
 case 26: 
 var $99=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $99;
  default: assert(0, "bad label: " + label);
 }

}


function _execnext($pfun,$pax,$parg,$varcnt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $op=sp;
 var $noexit=(sp)+(8);
 var $savelast;
 var $varsw;
 $2=$pfun;
 $3=$pax;
 $4=$parg;
 $5=$varcnt;
 $varsw=1;
 SAFE_HEAP_STORE($op, 0, "%struct.apltoken*", 0);
 var $6=$3;
 SAFE_HEAP_STORE($6, 0, "%struct.apltoken*", 0);
 var $7=$4;
 SAFE_HEAP_STORE($7, 0, "%struct.apltoken*", 0);
 var $8=$2;
 SAFE_HEAP_STORE($8, 0, "%struct.apltoken*", 0);
 var $9=$5;
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$5;
 SAFE_HEAP_STORE($12, 0, "i32", 0);
 label=4;break;
 case 3: 
 $varsw=0;
 label=4;break;
 case 4: 
 var $15=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $16=(($15+48)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 $savelast=$17;
 var $18=$2;
 var $19=_execexee($18,$op);
 SAFE_HEAP_STORE($noexit, $19, "i32", 0);
 var $20=$2;
 var $21=SAFE_HEAP_LOAD($20, "%struct.apltoken*", 0, 0);
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=7;break;}
 case 5: 
 var $24=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $25=($24|0)==0;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=SAFE_HEAP_LOAD($noexit, "i32", 0, 0);
 $1=$27;
 label=21;break;
 case 7: 
 var $29=$2;
 var $30=SAFE_HEAP_LOAD($29, "%struct.apltoken*", 0, 0);
 var $31=($30|0)!=0;
 if($31){label=8;break;}else{label=11;break;}
 case 8: 
 var $33=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 _exit(1);
 throw "Reached an unreachable!";
 case 10: 
 label=12;break;
 case 11: 
 var $38=$2;
 var $39=$4;
 var $40=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $41=$5;
 var $42=$savelast;
 var $43=$varsw;
 var $44=_execnexs($38,$39,$40,$41,$noexit,$42,$43);
 $varsw=$44;
 label=12;break;
 case 12: 
 var $46=$2;
 var $47=SAFE_HEAP_LOAD($46, "%struct.apltoken*", 0, 0);
 var $48=($47|0)!=0;
 if($48){label=13;break;}else{label=18;break;}
 case 13: 
 var $50=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $51=($50|0)!=0;
 if($51){label=18;break;}else{label=14;break;}
 case 14: 
 var $53=SAFE_HEAP_LOAD($noexit, "i32", 0, 0);
 var $54=($53|0)!=0;
 if($54){label=15;break;}else{label=17;break;}
 case 15: 
 var $56=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $57=(($56+40)|0);
 var $58=SAFE_HEAP_LOAD($57, "%struct.execstk*", 0, 0);
 var $59=(($58+8)|0);
 var $60=SAFE_HEAP_LOAD($59, "%struct.apltoken*", 0, 0);
 var $61=_axistest($60);
 var $62=($61|0)!=0;
 if($62){label=16;break;}else{label=17;break;}
 case 16: 
 $varsw=0;
 var $64=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $65=(($64+40)|0);
 var $66=SAFE_HEAP_LOAD($65, "%struct.execstk*", 0, 0);
 var $67=(($66+8)|0);
 var $68=$67;
 var $69=_pop($68);
 var $70=$69;
 var $71=$3;
 SAFE_HEAP_STORE($71, $70, "%struct.apltoken*", 0);
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $74=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $75=($74|0)!=0;
 if($75){label=19;break;}else{label=20;break;}
 case 19: 
 SAFE_HEAP_STORE($noexit, 0, "i32", 0);
 label=20;break;
 case 20: 
 var $78=SAFE_HEAP_LOAD($noexit, "i32", 0, 0);
 $1=$78;
 label=21;break;
 case 21: 
 var $80=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $80;
  default: assert(0, "bad label: " + label);
 }

}


function _execnexu($pfun,$parg,$pwrk,$varcnt,$pnoexit,$varsw){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $op=sp;
 var $tck;
 var $tok;
 $2=$pfun;
 $3=$parg;
 $4=$pwrk;
 $5=$varcnt;
 $6=$pnoexit;
 $7=$varsw;
 var $8=$6;
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=23;break;}
 case 2: 
 var $12=$4;
 var $13=SAFE_HEAP_LOAD($12, "%struct.apltoken*", 0, 0);
 var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=23;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $17=$5;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{label=8;break;}
 case 5: 
 var $20=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $21=(($20+44)|0);
 var $22=SAFE_HEAP_LOAD($21, "%struct.apltoken*", 0, 0);
 $tck=$22;
 var $23=0!=($22|0);
 if($23){label=6;break;}else{label=8;break;}
 case 6: 
 var $25=$tck;
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($27|0)==8;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 label=22;break;
 case 8: 
 var $31=$2;
 var $32=_execexee($31,$op);
 var $33=$6;
 SAFE_HEAP_STORE($33, $32, "i32", 0);
 var $34=0==($32|0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 label=22;break;
 case 10: 
 var $37=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $38=($37|0)==0;
 if($38){label=11;break;}else{label=12;break;}
 case 11: 
 label=22;break;
 case 12: 
 label=13;break;
 case 13: 
 var $42=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $43=(($42+40)|0);
 var $44=SAFE_HEAP_LOAD($43, "%struct.execstk*", 0, 0);
 var $45=(($44+8)|0);
 var $46=SAFE_HEAP_LOAD($45, "%struct.apltoken*", 0, 0);
 var $47=_axistest($46);
 var $48=($47|0)!=0;
 if($48){label=14;break;}else{label=15;break;}
 case 14: 
 $7=0;
 var $50=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $51=_execindx($50);
 SAFE_HEAP_STORE($op, $51, "%struct.apltoken*", 0);
 label=13;break;
 case 15: 
 var $53=$5;
 var $54=($53|0)!=0;
 if($54){label=16;break;}else{label=21;break;}
 case 16: 
 var $56=$7;
 var $57=($56|0)!=0;
 if($57){label=17;break;}else{label=21;break;}
 case 17: 
 var $59=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $60=(($59+4)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=($61|0)!=-4;
 if($62){label=18;break;}else{label=19;break;}
 case 18: 
 $7=0;
 label=20;break;
 case 19: 
 var $65=$5;
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=((($66)+(1))|0);
 SAFE_HEAP_STORE($65, $67, "i32", 0);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $70=$4;
 var $71=$70;
 var $72=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $73=$72;
 var $74=_lifo($71,$73);
 var $75=$74;
 SAFE_HEAP_STORE($op, $75, "%struct.apltoken*", 0);
 label=4;break;
 case 22: 
 label=23;break;
 case 23: 
 var $78=$2;
 var $79=SAFE_HEAP_LOAD($78, "%struct.apltoken*", 0, 0);
 var $80=($79|0)!=0;
 if($80){label=24;break;}else{label=27;break;}
 case 24: 
 $7=0;
 var $82=$6;
 SAFE_HEAP_STORE($82, 1, "i32", 0);
 var $83=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $84=(($83+44)|0);
 var $85=$84;
 var $86=$2;
 var $87=SAFE_HEAP_LOAD($86, "%struct.apltoken*", 0, 0);
 var $88=$87;
 var $89=_lifo($85,$88);
 var $90=$89;
 $tok=$90;
 var $91=$2;
 SAFE_HEAP_STORE($91, 0, "%struct.apltoken*", 0);
 var $92=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $93=(($92+40)|0);
 var $94=SAFE_HEAP_LOAD($93, "%struct.execstk*", 0, 0);
 var $95=(($94+8)|0);
 var $96=SAFE_HEAP_LOAD($95, "%struct.apltoken*", 0, 0);
 var $97=_axistest($96);
 var $98=($97|0)!=0;
 if($98){label=25;break;}else{label=26;break;}
 case 25: 
 var $100=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $101=(($100+44)|0);
 var $102=$101;
 var $103=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $104=(($103+40)|0);
 var $105=SAFE_HEAP_LOAD($104, "%struct.execstk*", 0, 0);
 var $106=(($105+8)|0);
 var $107=$106;
 var $108=_pop($107);
 var $109=_lifo($102,$108);
 var $110=$109;
 $tok=$110;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $113=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $114=($113|0)!=0;
 if($114){label=28;break;}else{label=29;break;}
 case 28: 
 var $116=$4;
 _execpop($116);
 $1=0;
 label=39;break;
 case 29: 
 var $118=$7;
 var $119=($118|0)!=0;
 if($119){label=30;break;}else{label=31;break;}
 case 30: 
 var $121=$4;
 var $122=SAFE_HEAP_LOAD($121, "%struct.apltoken*", 0, 0);
 var $123=$3;
 SAFE_HEAP_STORE($123, $122, "%struct.apltoken*", 0);
 label=38;break;
 case 31: 
 var $125=$4;
 var $126=SAFE_HEAP_LOAD($125, "%struct.apltoken*", 0, 0);
 var $127=($126|0)!=0;
 if($127){label=32;break;}else{label=35;break;}
 case 32: 
 var $129=$4;
 var $130=_popnest($129);
 var $131=$3;
 SAFE_HEAP_STORE($131, $130, "%struct.apltoken*", 0);
 var $132=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $133=($132|0)!=0;
 if($133){label=33;break;}else{label=34;break;}
 case 33: 
 var $135=$4;
 _execpop($135);
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $138=$5;
 var $139=($138|0)!=0;
 if($139){label=36;break;}else{label=37;break;}
 case 36: 
 var $141=$5;
 SAFE_HEAP_STORE($141, 0, "i32", 0);
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 var $144=$7;
 $1=$144;
 label=39;break;
 case 39: 
 var $146=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $146;
  default: assert(0, "bad label: " + label);
 }

}


function _execnila($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $op;
 var $func;
 var $out;
 var $off;
 $2=$tok;
 var $3=$2;
 var $4=(($3+20)|0);
 var $5=SAFE_HEAP_LOAD($4, "i8*", 0, 0);
 var $6=$5;
 $func=$6;
 var $7=$2;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $off=$9;
 var $10=$2;
 _execfree($10);
 var $11=$func;
 var $12=$11;
 var $13=_funcmain($12,0,0);
 $out=$13;
 var $14=$func;
 var $15=(($14+8)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$16&2048;
 var $18=($17|0)!=0;
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 var $20=$out;
 var $21=$off;
 var $22=_exectok($20,$21);
 $1=$22;
 label=8;break;
 case 3: 
 var $24=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $25=(($24+44)|0);
 var $26=SAFE_HEAP_LOAD($25, "%struct.apltoken*", 0, 0);
 var $27=($26|0)!=0;
 if($27){label=6;break;}else{label=4;break;}
 case 4: 
 var $29=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $30=(($29+40)|0);
 var $31=SAFE_HEAP_LOAD($30, "%struct.execstk*", 0, 0);
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.apltoken*", 0, 0);
 var $34=($33|0)!=0;
 if($34){label=6;break;}else{label=5;break;}
 case 5: 
 var $36=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $37=(($36+40)|0);
 var $38=SAFE_HEAP_LOAD($37, "%struct.execstk*", 0, 0);
 var $39=(($38+8)|0);
 var $40=SAFE_HEAP_LOAD($39, "%struct.apltoken*", 0, 0);
 var $41=($40|0)!=0;
 if($41){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 94, "i32", 0);
 label=7;break;
 case 7: 
 var $44=$out;
 _endoper($44);
 $1=0;
 label=8;break;
 case 8: 
 var $46=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $46;
  default: assert(0, "bad label: " + label);
 }

}


function _execoptk($ptok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $op;
 var $tok;
 $2=$ptok;
 var $3=$2;
 var $4=SAFE_HEAP_LOAD($3, "%struct.apltoken*", 0, 0);
 $tok=$4;
 var $5=0==($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 $op=0;
 var $8=$tok;
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 switch(($10|0)){case -4:case 7:case -3:case 49:case 44:case -11:case -12:case -14:case -33:case -18:case -19:case -20:case -21:case -24:case -25:case -26:case -27:case -29:case -28:case -34:case -30:case -31:{ label=4;break;}default:{label=5;break;}}break;
 case 4: 
 var $12=$tok;
 $op=$12;
 var $13=$2;
 SAFE_HEAP_STORE($13, 0, "%struct.apltoken*", 0);
 label=5;break;
 case 5: 
 var $15=$op;
 $1=$15;
 label=6;break;
 case 6: 
 var $17=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function _execout($out,$offset){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $outtok;
 $1=$out;
 $2=$offset;
 var $3=$1;
 var $4=0==($3|0);
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=5;break;
 case 3: 
 var $7=$1;
 var $8=$2;
 var $9=_exectok($7,$8);
 $outtok=$9;
 var $10=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $14=(($13+40)|0);
 var $15=SAFE_HEAP_LOAD($14, "%struct.execstk*", 0, 0);
 var $16=(($15+8)|0);
 var $17=$16;
 var $18=$outtok;
 var $19=$18;
 var $20=_lifo($17,$19);
 var $21=$20;
 $outtok=$21;
 label=5;break;
 case 5: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execpars($stmtptr,$stmtlen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bug;
 var $tokhdr=sp;
 var $msg;
 var $offset;
 $2=$stmtptr;
 $3=$stmtlen;
 $msg=0;
 $offset=0;
 var $4=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=9;break;
 case 3: 
 var $8=$2;
 var $9=$3;
 var $10=_aplparse($8,$9);
 SAFE_HEAP_STORE($tokhdr, $10, "%struct.apltoken*", 0);
 var $11=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)==-5;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 var $16=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $17=(($16+12)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "i8*", 0, 0);
 $msg=$19;
 var $20=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 $offset=$22;
 label=6;break;
 case 5: 
 var $24=$tokhdr;
 var $25=_pop($24);
 var $26=$25;
 $bug=$26;
 var $27=$bug;
 _execfree($27);
 label=6;break;
 case 6: 
 var $29=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $30=($29|0)!=0;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 var $32=$2;
 var $33=$3;
 var $34=$offset;
 var $35=$msg;
 _execmsg($32,$33,$34,$35);
 _execpop($tokhdr);
 label=8;break;
 case 8: 
 var $37=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 $1=$37;
 label=9;break;
 case 9: 
 var $39=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function _execpop($ptokhdr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $tok;
 $1=$ptokhdr;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=$3;
 var $5=_pop($4);
 var $6=$5;
 $tok=$6;
 var $7=0!=($6|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$tok;
 _execfree($9);
 label=2;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execqcr($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $cb;
 var $cbp;
 var $out;
 var $cbcount;
 var $datatype;
 var $maxlen;
 var $thislen;
 var $op;
 $1=$rite;
 $out=0;
 label=2;break;
 case 2: 
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 label=18;break;
 case 4: 
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=8!=($9|0);
 var $11=($10&1);
 var $12=$11&78;
 var $13=($12|0)!=0;
 if($13){label=7;break;}else{label=5;break;}
 case 5: 
 var $15=$1;
 var $16=(($15+12)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=1<($17|0);
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=$1;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=0==($22|0);
 if($23){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 109, "i32", 0);
 label=18;break;
 case 8: 
 var $26=$1;
 var $27=(($26)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "i8*", 0, 0);
 var $30=_treenode($29);
 $p=$30;
 var $31=0!=($30|0);
 if($31){label=9;break;}else{label=14;break;}
 case 9: 
 var $33=$p;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i8*", 0, 0);
 var $36=$35;
 var $37=(($36+4)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=$38&256;
 var $40=($39|0)!=0;
 if($40){label=10;break;}else{label=14;break;}
 case 10: 
 var $42=$p;
 var $43=(($42+8)|0);
 var $44=SAFE_HEAP_LOAD($43, "i8*", 0, 0);
 var $45=$44;
 var $46=(($45+24)|0);
 var $47=SAFE_HEAP_LOAD($46, "%struct.aplcb*", 0, 0);
 $cb=$47;
 var $48=$cb;
 var $49=(($48+4)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=$50&110;
 $datatype=$51;
 var $52=$datatype;
 var $53=($52|0)==8;
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 var $55=$cb;
 var $56=_aplcopy($55);
 var $57=_temp($56);
 $out=$57;
 label=13;break;
 case 12: 
 var $59=$cb;
 var $60=_nestchar($59);
 $out=$60;
 label=13;break;
 case 13: 
 label=17;break;
 case 14: 
 var $63=_getcb(0,0,9,2,0);
 $out=$63;
 var $64=$out;
 var $65=($64|0)!=0;
 if($65){label=15;break;}else{label=16;break;}
 case 15: 
 var $67=$out;
 var $68=(($67+16)|0);
 var $69=SAFE_HEAP_LOAD($68, "i32*", 0, 0);
 var $70=(($69+4)|0);
 SAFE_HEAP_STORE($70, 0, "i32", 0);
 var $71=$out;
 var $72=(($71+16)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32*", 0, 0);
 SAFE_HEAP_STORE($73, 0, "i32", 0);
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $77=$1;
 var $78=$out;
 var $79=_errstop(0,0,$77,$78);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $79;
  default: assert(0, "bad label: " + label);
 }

}


function _execqdl($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 $2=$rite;
 $out=0;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=_errstop(0,0,$6,0);
 $1=$7;
 label=4;break;
 case 3: 
 var $9=$2;
 var $10=$out;
 var $11=_errstop(0,0,$9,$10);
 $1=$11;
 label=4;break;
 case 4: 
 var $13=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }

}


function _execqex($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=_execqncs((12),$2);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $3;
}


function _execqext($nameok,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $k;
 var $wrk;
 $1=$nameok;
 $2=$p;
 var $3=$1;
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 $k=0;
 label=10;break;
 case 3: 
 $k=1;
 var $7=$2;
 var $8=0!=($7|0);
 if($8){label=4;break;}else{label=9;break;}
 case 4: 
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "i8*", 0, 0);
 var $13=$12;
 $wrk=$13;
 var $14=0!=($13|0);
 if($14){label=5;break;}else{label=9;break;}
 case 5: 
 var $16=$wrk;
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$18&128;
 var $20=($19|0)!=0;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 $k=0;
 label=8;break;
 case 7: 
 var $23=$2;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i8*", 0, 0);
 var $26=$25;
 _leafdel($26);
 var $27=$2;
 var $28=(($27+8)|0);
 SAFE_HEAP_STORE($28, 0, "i8*", 0);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $32=$k;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxa($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $fp;
 $2=$rite;
 var $3=_aplmall(48);
 var $4=$3;
 $fp=$4;
 var $5=0==($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=12;break;
 case 3: 
 var $8=$fp;
 var $9=(($8)|0);
 SAFE_HEAP_STORE($9, 0, "%struct.aplfunc*", 0);
 var $10=$fp;
 var $11=(($10+4)|0);
 SAFE_HEAP_STORE($11, 256, "i32", 0);
 var $12=$fp;
 var $13=(($12+8)|0);
 SAFE_HEAP_STORE($13, 0, "i32", 0);
 var $14=$fp;
 var $15=(($14+12)|0);
 SAFE_HEAP_STORE($15, 0, "i32", 0);
 var $16=$fp;
 var $17=(($16+16)|0);
 SAFE_HEAP_STORE($17, 0, "i32", 0);
 var $18=$fp;
 var $19=(($18+20)|0);
 SAFE_HEAP_STORE($19, 0, "i32*", 0);
 var $20=$fp;
 var $21=(($20+24)|0);
 SAFE_HEAP_STORE($21, 0, "%struct.aplcb*", 0);
 var $22=$fp;
 var $23=(($22+28)|0);
 SAFE_HEAP_STORE($23, 0, "%struct.apltoken*", 0);
 var $24=$fp;
 var $25=(($24+32)|0);
 SAFE_HEAP_STORE($25, 0, "%struct.apltoken**", 0);
 var $26=$fp;
 var $27=(($26+36)|0);
 SAFE_HEAP_STORE($27, 0, "%struct.apltoken*", 0);
 var $28=$fp;
 var $29=(($28+40)|0);
 SAFE_HEAP_STORE($29, 0, "%struct.apltoken*", 0);
 var $30=$fp;
 var $31=(($30+44)|0);
 SAFE_HEAP_STORE($31, 0, "%struct.apltoken*", 0);
 var $32=$2;
 var $33=($32|0)==0;
 if($33){label=4;break;}else{label=5;break;}
 case 4: 
 var $35=$fp;
 var $36=(($35+24)|0);
 SAFE_HEAP_STORE($36, 0, "%struct.aplcb*", 0);
 label=11;break;
 case 5: 
 var $38=$2;
 var $39=(($38+4)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=$40&1;
 var $42=($41|0)!=0;
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 var $44=$2;
 var $45=(($44+4)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=((($46)-(1))|0);
 SAFE_HEAP_STORE($45, $47, "i32", 0);
 var $48=$2;
 var $49=$fp;
 var $50=(($49+24)|0);
 SAFE_HEAP_STORE($50, $48, "%struct.aplcb*", 0);
 label=10;break;
 case 7: 
 var $52=$2;
 var $53=_aplcopy($52);
 var $54=$fp;
 var $55=(($54+24)|0);
 SAFE_HEAP_STORE($55, $53, "%struct.aplcb*", 0);
 var $56=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $57=($56|0)!=0;
 if($57){label=8;break;}else{label=9;break;}
 case 8: 
 var $59=$2;
 _endoper($59);
 var $60=$fp;
 var $61=$60;
 _aplfree($61);
 $fp=0;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $65=$fp;
 $1=$65;
 label=12;break;
 case 12: 
 var $67=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $67;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxb($fp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $cb;
 var $rite;
 var $fromhdr=sp;
 var $tok;
 var $tokary;
 var $chartype;
 var $stmtcnt;
 var $stmtno;
 var $stmtlen;
 var $cp;
 $1=$fp;
 var $2=$1;
 var $3=(($2+24)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $5=(($4+16)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32*", 0, 0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$1;
 var $9=(($8+16)|0);
 SAFE_HEAP_STORE($9, $7, "i32", 0);
 $stmtcnt=$7;
 var $10=$1;
 _execqfxj($10);
 var $11=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 label=25;break;
 case 3: 
 var $15=$1;
 var $16=(($15+24)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.aplcb*", 0, 0);
 $rite=$17;
 var $18=$1;
 var $19=(($18+32)|0);
 var $20=SAFE_HEAP_LOAD($19, "%struct.apltoken**", 0, 0);
 $tokary=$20;
 var $21=$rite;
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=$23&8;
 $chartype=$24;
 var $25=$chartype;
 var $26=($25|0)!=0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 var $28=$rite;
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=(($30+4)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 $stmtlen=$32;
 label=6;break;
 case 5: 
 var $34=$rite;
 var $35=(($34)|0);
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "%struct.aplcb**", 0, 0);
 $cb=$37;
 label=6;break;
 case 6: 
 $stmtno=0;
 label=7;break;
 case 7: 
 var $40=$stmtno;
 var $41=$stmtcnt;
 var $42=($40|0)<($41|0);
 if($42){label=8;break;}else{var $47=0;label=9;break;}
 case 8: 
 var $44=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $45=($44|0)==0;
 var $47=$45;label=9;break;
 case 9: 
 var $47;
 if($47){label=10;break;}else{label=15;break;}
 case 10: 
 var $49=$chartype;
 var $50=($49|0)!=0;
 if($50){label=11;break;}else{label=12;break;}
 case 11: 
 var $52=$rite;
 var $53=(($52)|0);
 var $54=$53;
 var $55=SAFE_HEAP_LOAD($54, "i8*", 0, 0);
 var $56=$stmtno;
 var $57=$stmtlen;
 var $58=(Math_imul($56,$57)|0);
 var $59=(($55+$58)|0);
 $cp=$59;
 label=13;break;
 case 12: 
 var $61=$cb;
 var $62=(($61+4)|0);
 $cb=$62;
 var $63=SAFE_HEAP_LOAD($61, "%struct.aplcb*", 0, 0);
 $rite=$63;
 var $64=$rite;
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "i8*", 0, 0);
 $cp=$67;
 var $68=$rite;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 $stmtlen=$70;
 label=13;break;
 case 13: 
 var $72=$cp;
 var $73=$stmtlen;
 var $74=_execpars($72,$73);
 var $75=$tokary;
 var $76=(($75+4)|0);
 $tokary=$76;
 SAFE_HEAP_STORE($75, $74, "%struct.apltoken*", 0);
 label=14;break;
 case 14: 
 var $78=$stmtno;
 var $79=((($78)+(1))|0);
 $stmtno=$79;
 label=7;break;
 case 15: 
 var $81=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $82=($81|0)!=0;
 if($82){label=16;break;}else{label=24;break;}
 case 16: 
 var $84=$1;
 var $85=(($84+32)|0);
 var $86=SAFE_HEAP_LOAD($85, "%struct.apltoken**", 0, 0);
 $tokary=$86;
 $stmtno=0;
 label=17;break;
 case 17: 
 var $88=$stmtno;
 var $89=$stmtcnt;
 var $90=($88|0)<($89|0);
 if($90){label=18;break;}else{label=23;break;}
 case 18: 
 var $92=$tokary;
 var $93=(($92+4)|0);
 $tokary=$93;
 var $94=SAFE_HEAP_LOAD($92, "%struct.apltoken*", 0, 0);
 SAFE_HEAP_STORE($fromhdr, $94, "%struct.apltoken*", 0);
 label=19;break;
 case 19: 
 var $96=$fromhdr;
 var $97=_pop($96);
 var $98=$97;
 $tok=$98;
 var $99=0!=($98|0);
 if($99){label=20;break;}else{label=21;break;}
 case 20: 
 var $101=$tok;
 _execfree($101);
 label=19;break;
 case 21: 
 label=22;break;
 case 22: 
 var $104=$stmtno;
 var $105=((($104)+(1))|0);
 $stmtno=$105;
 label=17;break;
 case 23: 
 label=25;break;
 case 24: 
 var $108=$1;
 _execqfxk($108);
 label=25;break;
 case 25: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfx($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $nametok;
 var $cb;
 var $cbp;
 var $out;
 var $fp;
 var $oldfunc;
 var $datatype;
 var $stmtcnt;
 $2=$rite;
 $fp=0;
 label=2;break;
 case 2: 
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 label=37;break;
 case 4: 
 var $8=$2;
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=$10&40;
 $datatype=$11;
 var $12=$2;
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=0==($14|0);
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE(4592, 90, "i32", 0);
 label=28;break;
 case 6: 
 var $18=$datatype;
 var $19=($18|0)==8;
 if($19){label=7;break;}else{label=10;break;}
 case 7: 
 var $21=$2;
 var $22=(($21+12)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=2!=($23|0);
 if($24){label=8;break;}else{label=9;break;}
 case 8: 
 SAFE_HEAP_STORE(4592, 90, "i32", 0);
 label=9;break;
 case 9: 
 label=27;break;
 case 10: 
 var $28=$datatype;
 var $29=($28|0)==32;
 if($29){label=11;break;}else{label=26;break;}
 case 11: 
 var $31=$2;
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=1!=($33|0);
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 SAFE_HEAP_STORE(4592, 90, "i32", 0);
 label=23;break;
 case 13: 
 var $37=$2;
 var $38=(($37)|0);
 var $39=$38;
 var $40=SAFE_HEAP_LOAD($39, "%struct.aplcb**", 0, 0);
 $cbp=$40;
 var $41=$2;
 var $42=(($41+8)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 $stmtcnt=$43;
 label=14;break;
 case 14: 
 var $45=$stmtcnt;
 var $46=((($45)-(1))|0);
 $stmtcnt=$46;
 var $47=($45|0)!=0;
 if($47){label=15;break;}else{var $52=0;label=16;break;}
 case 15: 
 var $49=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $50=($49|0)==0;
 var $52=$50;label=16;break;
 case 16: 
 var $52;
 if($52){label=17;break;}else{label=22;break;}
 case 17: 
 var $54=$cbp;
 var $55=(($54+4)|0);
 $cbp=$55;
 var $56=SAFE_HEAP_LOAD($54, "%struct.aplcb*", 0, 0);
 $cb=$56;
 var $57=$cb;
 var $58=(($57+4)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=$59&8;
 $datatype=$60;
 var $61=$datatype;
 var $62=($61|0)!=8;
 if($62){label=20;break;}else{label=18;break;}
 case 18: 
 var $64=$cb;
 var $65=(($64+12)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=($66|0)>1;
 if($67){label=20;break;}else{label=19;break;}
 case 19: 
 var $69=$cb;
 var $70=(($69+8)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=($71|0)==0;
 if($72){label=20;break;}else{label=21;break;}
 case 20: 
 SAFE_HEAP_STORE(4592, 90, "i32", 0);
 label=21;break;
 case 21: 
 label=14;break;
 case 22: 
 label=23;break;
 case 23: 
 var $77=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $78=($77|0)!=0;
 if($78){label=24;break;}else{label=25;break;}
 case 24: 
 label=37;break;
 case 25: 
 var $81=$2;
 var $82=_nestchar($81);
 $2=$82;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $86=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $87=($86|0)!=0;
 if($87){label=29;break;}else{label=30;break;}
 case 29: 
 label=37;break;
 case 30: 
 var $90=$2;
 var $91=_execqfxa($90);
 $fp=$91;
 $2=0;
 var $92=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $93=($92|0)!=0;
 if($93){label=31;break;}else{label=32;break;}
 case 31: 
 label=37;break;
 case 32: 
 var $96=$fp;
 _execqfxb($96);
 var $97=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $98=($97|0)!=0;
 if($98){label=33;break;}else{label=34;break;}
 case 33: 
 label=37;break;
 case 34: 
 var $101=$fp;
 var $102=_execqfxl($101);
 $nametok=$102;
 var $103=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $104=($103|0)!=0;
 if($104){label=35;break;}else{label=36;break;}
 case 35: 
 label=37;break;
 case 36: 
 var $107=$nametok;
 var $108=$fp;
 var $109=_execqfxm($107,$108);
 $1=$109;
 label=40;break;
 case 37: 
 var $111=$fp;
 var $112=($111|0)!=0;
 if($112){label=38;break;}else{label=39;break;}
 case 38: 
 var $114=$fp;
 var $115=_expunge($114);
 $2=0;
 label=39;break;
 case 39: 
 var $117=$2;
 var $118=_errstop(0,0,$117,0);
 $1=$118;
 label=40;break;
 case 40: 
 var $120=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $120;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxc($totok,$fromtok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cb;
 $1=$totok;
 $2=$fromtok;
 var $3=$2;
 var $4=(($3)|0);
 var $5=$4;
 var $6=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$1;
 var $10=(($9)|0);
 var $11=$10;
 SAFE_HEAP_STORE($11, 0, "%struct.apltoken*", 0);
 label=4;break;
 case 3: 
 var $13=$1;
 var $14=(($13+24)|0);
 var $15=$1;
 var $16=(($15)|0);
 var $17=$16;
 SAFE_HEAP_STORE($17, $14, "%struct.apltoken*", 0);
 label=4;break;
 case 4: 
 var $19=$2;
 var $20=(($19+4)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=$1;
 var $23=(($22+4)|0);
 SAFE_HEAP_STORE($23, $21, "i32", 0);
 var $24=$2;
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=$1;
 var $28=(($27+8)|0);
 SAFE_HEAP_STORE($28, $26, "i32", 0);
 var $29=$1;
 var $30=(($29+16)|0);
 SAFE_HEAP_STORE($30, 1, "i32", 0);
 var $31=$2;
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 if(($33|0)==7|($33|0)==-3){ label=5;break;}else if(($33|0)==-4){ label=9;break;}else{label=10;break;}
 case 5: 
 var $35=$2;
 var $36=(($35+12)|0);
 var $37=$36;
 var $38=SAFE_HEAP_LOAD($37, "%struct.aplcb*", 0, 0);
 $cb=$38;
 var $39=$cb;
 var $40=(($39+4)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$41&1;
 var $43=($42|0)!=0;
 if($43){label=6;break;}else{label=7;break;}
 case 6: 
 var $45=$cb;
 var $46=(($45+4)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=((($47)-(1))|0);
 SAFE_HEAP_STORE($46, $48, "i32", 0);
 var $49=$cb;
 var $50=$1;
 var $51=(($50+12)|0);
 var $52=$51;
 SAFE_HEAP_STORE($52, $49, "%struct.aplcb*", 0);
 var $53=$2;
 var $54=(($53+12)|0);
 var $55=$54;
 SAFE_HEAP_STORE($55, 0, "%struct.aplcb*", 0);
 label=8;break;
 case 7: 
 var $57=$cb;
 var $58=_aplcopy($57);
 var $59=$1;
 var $60=(($59+12)|0);
 var $61=$60;
 SAFE_HEAP_STORE($61, $58, "%struct.aplcb*", 0);
 label=8;break;
 case 8: 
 label=11;break;
 case 9: 
 var $64=$2;
 var $65=(($64+12)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "i8*", 0, 0);
 var $68=$1;
 var $69=(($68+12)|0);
 var $70=$69;
 SAFE_HEAP_STORE($70, $67, "i8*", 0);
 var $71=$2;
 var $72=(($71+12)|0);
 var $73=$72;
 SAFE_HEAP_STORE($73, 0, "i8*", 0);
 label=11;break;
 case 10: 
 var $75=$1;
 var $76=(($75+12)|0);
 var $77=$76;
 SAFE_HEAP_STORE($77, 0, "i8*", 0);
 label=11;break;
 case 11: 
 var $79=$2;
 _execfree($79);
 var $80=$1;
 var $81=(($80+24)|0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $81;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxd($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $curtok;
 var $curvar;
 var $lastok;
 var $nametok;
 var $tokhdr;
 var $tokcnt;
 $2=$fp;
 $curvar=0;
 $nametok=0;
 var $3=$2;
 var $4=(($3+20)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32*", 0, 0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 $tokcnt=$6;
 var $7=$2;
 var $8=(($7+32)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.apltoken**", 0, 0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.apltoken*", 0, 0);
 $tokhdr=$10;
 var $11=$tokhdr;
 var $12=$tokcnt;
 var $13=((($12)-(1))|0);
 $tokcnt=$13;
 var $14=(($11+((($13)*(24))&-1))|0);
 var $15=_execqfxe($14,-4,93);
 $curtok=$15;
 var $16=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $17=($16|0)!=0;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=23;break;
 case 3: 
 var $20=$tokcnt;
 var $21=($20|0)>1;
 if($21){label=4;break;}else{label=6;break;}
 case 4: 
 var $23=$curtok;
 var $24=((($23)-(24))|0);
 var $25=(($24+4)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=($26|0)==3;
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $29=$tokcnt;
 var $30=((($29)-(1))|0);
 $tokcnt=$30;
 var $31=$2;
 var $32=(($31+8)|0);
 SAFE_HEAP_STORE($32, 2048, "i32", 0);
 var $33=$2;
 var $34=(($33+40)|0);
 var $35=$34;
 var $36=$curvar;
 var $37=$36;
 var $38=$curtok;
 var $39=$38;
 var $40=_fifo($35,$37,$39);
 var $41=$40;
 $curvar=$41;
 var $42=$tokhdr;
 var $43=$tokcnt;
 var $44=((($43)-(1))|0);
 $tokcnt=$44;
 var $45=(($42+((($44)*(24))&-1))|0);
 var $46=_execqfxe($45,-4,93);
 $curtok=$46;
 label=6;break;
 case 6: 
 var $48=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $49=($48|0)!=0;
 if($49){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=23;break;
 case 8: 
 var $52=$tokcnt;
 var $53=($52|0)<2;
 if($53){label=9;break;}else{label=10;break;}
 case 9: 
 var $55=$2;
 var $56=$curtok;
 var $57=$tokcnt;
 var $58=$curvar;
 var $59=_execqfxg($55,$56,$57,$58);
 $1=$59;
 label=23;break;
 case 10: 
 var $61=$curtok;
 $nametok=$61;
 var $62=$curtok;
 var $63=((($62)-(24))|0);
 var $64=(($63+4)|0);
 var $65=SAFE_HEAP_LOAD($64, "i32", 0, 0);
 var $66=($65|0)==27;
 if($66){label=11;break;}else{label=12;break;}
 case 11: 
 var $68=$2;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=((($70)+(256))|0);
 SAFE_HEAP_STORE($69, $71, "i32", 0);
 label=20;break;
 case 12: 
 var $73=$tokhdr;
 var $74=$tokcnt;
 var $75=((($74)-(1))|0);
 $tokcnt=$75;
 var $76=(($73+((($75)*(24))&-1))|0);
 var $77=_execqfxe($76,-4,93);
 $curtok=$77;
 var $78=$curtok;
 var $79=0==($78|0);
 if($79){label=13;break;}else{label=14;break;}
 case 13: 
 $1=0;
 label=23;break;
 case 14: 
 var $82=$curtok;
 var $83=((($82)-(24))|0);
 var $84=(($83+4)|0);
 var $85=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 var $86=($85|0)==27;
 if($86){label=15;break;}else{label=16;break;}
 case 15: 
 var $88=$2;
 var $89=(($88+8)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=((($90)+(512))|0);
 SAFE_HEAP_STORE($89, $91, "i32", 0);
 label=19;break;
 case 16: 
 var $93=$2;
 var $94=(($93+8)|0);
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $96=((($95)+(1024))|0);
 SAFE_HEAP_STORE($94, $96, "i32", 0);
 var $97=$2;
 var $98=(($97+40)|0);
 var $99=$98;
 var $100=$curvar;
 var $101=$100;
 var $102=$nametok;
 var $103=$102;
 var $104=_fifo($99,$101,$103);
 var $105=$104;
 $curvar=$105;
 var $106=$curtok;
 $nametok=$106;
 var $107=$tokhdr;
 var $108=$tokcnt;
 var $109=((($108)-(1))|0);
 $tokcnt=$109;
 var $110=(($107+((($109)*(24))&-1))|0);
 var $111=_execqfxe($110,-4,93);
 $curtok=$111;
 var $112=$curtok;
 var $113=0==($112|0);
 if($113){label=17;break;}else{label=18;break;}
 case 17: 
 $1=0;
 label=23;break;
 case 18: 
 label=19;break;
 case 19: 
 var $117=$2;
 var $118=(($117+40)|0);
 var $119=$118;
 var $120=$curvar;
 var $121=$120;
 var $122=$curtok;
 var $123=$122;
 var $124=_fifo($119,$121,$123);
 var $125=$124;
 $curvar=$125;
 label=20;break;
 case 20: 
 var $127=$2;
 var $128=$tokhdr;
 var $129=$curtok;
 var $130=$tokcnt;
 var $131=$curvar;
 _execqfxh($127,$128,$129,$130,$131);
 var $132=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $133=($132|0)!=0;
 if($133){label=21;break;}else{label=22;break;}
 case 21: 
 $1=0;
 label=23;break;
 case 22: 
 var $136=$nametok;
 $1=$136;
 label=23;break;
 case 23: 
 var $138=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $138;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxe($curtok,$code,$errcode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ret;
 var $curtype;
 $2=$curtok;
 $3=$code;
 $4=$errcode;
 var $5=$2;
 $ret=$5;
 var $6=$3;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=$ret;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 if(($11|0)==-4|($11|0)==-14|($11|0)==-19){ label=3;break;}else{label=4;break;}
 case 3: 
 var $13=$ret;
 $1=$13;
 label=9;break;
 case 4: 
 label=8;break;
 case 5: 
 var $16=$3;
 var $17=$ret;
 var $18=(($17+4)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=($16|0)==($19|0);
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$ret;
 $1=$22;
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $25=$4;
 SAFE_HEAP_STORE(4592, $25, "i32", 0);
 $1=0;
 label=9;break;
 case 9: 
 var $27=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxf($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $curtok;
 var $curvar;
 var $tokhdr;
 var $stmtno;
 var $tokcnt;
 $1=$fp;
 $curvar=0;
 $stmtno=1;
 label=2;break;
 case 2: 
 var $3=$stmtno;
 var $4=$1;
 var $5=(($4+16)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=($3|0)<($6|0);
 if($7){label=3;break;}else{label=11;break;}
 case 3: 
 var $9=$1;
 var $10=(($9+20)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32*", 0, 0);
 var $12=$stmtno;
 var $13=(($11+($12<<2))|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 $tokcnt=$14;
 var $15=$1;
 var $16=(($15+32)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.apltoken**", 0, 0);
 var $18=$stmtno;
 var $19=(($17+($18<<2))|0);
 var $20=SAFE_HEAP_LOAD($19, "%struct.apltoken*", 0, 0);
 $tokhdr=$20;
 var $21=$tokhdr;
 var $22=$tokcnt;
 var $23=((($22)-(1))|0);
 $tokcnt=$23;
 var $24=(($21+((($23)*(24))&-1))|0);
 $curtok=$24;
 var $25=$curtok;
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($27|0)!=-4;
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 label=10;break;
 case 5: 
 var $31=$tokcnt;
 var $32=($31|0)==0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 label=10;break;
 case 7: 
 var $35=$tokhdr;
 var $36=$tokcnt;
 var $37=((($36)-(1))|0);
 $tokcnt=$37;
 var $38=(($35+((($37)*(24))&-1))|0);
 var $39=(($38+4)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=($40|0)!=26;
 if($41){label=8;break;}else{label=9;break;}
 case 8: 
 label=10;break;
 case 9: 
 var $44=$stmtno;
 var $45=$curtok;
 var $46=(($45+8)|0);
 SAFE_HEAP_STORE($46, $44, "i32", 0);
 var $47=$1;
 var $48=(($47+44)|0);
 var $49=$48;
 var $50=$curvar;
 var $51=$50;
 var $52=$curtok;
 var $53=$52;
 var $54=_fifo($49,$51,$53);
 var $55=$54;
 $curvar=$55;
 var $56=$1;
 var $57=(($56+20)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32*", 0, 0);
 var $59=$stmtno;
 var $60=(($58+($59<<2))|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=((($61)-(2))|0);
 SAFE_HEAP_STORE($60, $62, "i32", 0);
 label=10;break;
 case 10: 
 var $64=$stmtno;
 var $65=((($64)+(1))|0);
 $stmtno=$65;
 label=2;break;
 case 11: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxg($fp,$curtok,$tokcnt,$curvar){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $nametok;
 $2=$fp;
 $3=$curtok;
 $4=$tokcnt;
 $5=$curvar;
 var $6=$4;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$2;
 var $10=(($9+8)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=((($11)+(256))|0);
 SAFE_HEAP_STORE($10, $12, "i32", 0);
 var $13=$3;
 $1=$13;
 label=6;break;
 case 3: 
 var $15=$4;
 var $16=($15|0)==1;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=((($20)+(512))|0);
 SAFE_HEAP_STORE($19, $21, "i32", 0);
 var $22=$3;
 $nametok=$22;
 var $23=$3;
 var $24=((($23)-(24))|0);
 var $25=_execqfxe($24,-4,93);
 $3=$25;
 var $26=$2;
 var $27=(($26+40)|0);
 var $28=$27;
 var $29=$5;
 var $30=$29;
 var $31=$3;
 var $32=$31;
 var $33=_fifo($28,$30,$32);
 var $34=$33;
 $5=$34;
 var $35=$nametok;
 $1=$35;
 label=6;break;
 case 5: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 $1=0;
 label=6;break;
 case 6: 
 var $38=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxh($fp,$tokhdr,$curtok,$tokcnt,$curvar){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$fp;
 $2=$tokhdr;
 $3=$curtok;
 $4=$tokcnt;
 $5=$curvar;
 var $6=$4;
 var $7=((($6)-(1))|0);
 $4=$7;
 var $8=0==($6|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 label=14;break;
 case 3: 
 label=4;break;
 case 4: 
 var $12=$4;
 var $13=((($12)-(1))|0);
 $4=$13;
 var $14=($12|0)!=0;
 if($14){label=5;break;}else{label=12;break;}
 case 5: 
 var $16=$2;
 var $17=$4;
 var $18=(($16+((($17)*(24))&-1))|0);
 var $19=_execqfxe($18,0,93);
 $3=$19;
 var $20=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $21=($20|0)!=0;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 label=12;break;
 case 7: 
 var $24=$1;
 var $25=(($24+40)|0);
 var $26=$25;
 var $27=$5;
 var $28=$27;
 var $29=$3;
 var $30=$29;
 var $31=_fifo($26,$28,$30);
 var $32=$31;
 $5=$32;
 var $33=$4;
 var $34=($33|0)==0;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 label=14;break;
 case 9: 
 var $37=$2;
 var $38=$4;
 var $39=((($38)-(1))|0);
 $4=$39;
 var $40=(($37+((($39)*(24))&-1))|0);
 var $41=_execqfxe($40,27,93);
 $3=$41;
 var $42=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $43=($42|0)!=0;
 if($43){label=10;break;}else{label=11;break;}
 case 10: 
 label=12;break;
 case 11: 
 label=4;break;
 case 12: 
 var $47=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $48=($47|0)==0;
 if($48){label=13;break;}else{label=14;break;}
 case 13: 
 SAFE_HEAP_STORE(4592, 93, "i32", 0);
 label=14;break;
 case 14: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxi($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $mytree;
 var $tok;
 var $p;
 var $nameptr;
 $1=$fp;
 var $2=_aplmall(64);
 var $3=$2;
 $mytree=$3;
 var $4=$mytree;
 var $5=(($4)|0);
 SAFE_HEAP_STORE($5, 0, "%struct.treelist*", 0);
 var $6=$mytree;
 var $7=(($6+4)|0);
 SAFE_HEAP_STORE($7, 0, "%struct.avlnode*", 0);
 var $8=$1;
 var $9=(($8+40)|0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.apltoken*", 0, 0);
 $tok=$10;
 label=2;break;
 case 2: 
 var $12=$tok;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{var $18=0;label=4;break;}
 case 3: 
 var $15=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $16=($15|0)==0;
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 if($18){label=5;break;}else{label=14;break;}
 case 5: 
 var $20=$tok;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 if(($22|0)==-14){ label=6;break;}else if(($22|0)==-19){ label=7;break;}else{label=8;break;}
 case 6: 
 $nameptr=2560;
 label=9;break;
 case 7: 
 $nameptr=2544;
 label=9;break;
 case 8: 
 var $26=$tok;
 var $27=(($26+12)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "i8*", 0, 0);
 $nameptr=$29;
 label=9;break;
 case 9: 
 var $31=$mytree;
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.avlnode*", 0, 0);
 var $34=$nameptr;
 var $35=_avlsrch($33,$34);
 var $36=0!=($35|0);
 if($36){label=10;break;}else{label=11;break;}
 case 10: 
 SAFE_HEAP_STORE(4592, 96, "i32", 0);
 label=12;break;
 case 11: 
 var $39=$mytree;
 var $40=(($39+4)|0);
 var $41=$nameptr;
 var $42=_avladd($40,$41,0);
 $p=$42;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $45=$tok;
 var $46=(($45)|0);
 var $47=$46;
 var $48=SAFE_HEAP_LOAD($47, "%struct.apltoken*", 0, 0);
 $tok=$48;
 label=2;break;
 case 14: 
 var $50=$1;
 var $51=(($50+44)|0);
 var $52=SAFE_HEAP_LOAD($51, "%struct.apltoken*", 0, 0);
 $tok=$52;
 label=15;break;
 case 15: 
 var $54=$tok;
 var $55=($54|0)!=0;
 if($55){label=16;break;}else{var $60=0;label=17;break;}
 case 16: 
 var $57=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $58=($57|0)==0;
 var $60=$58;label=17;break;
 case 17: 
 var $60;
 if($60){label=18;break;}else{label=23;break;}
 case 18: 
 var $62=$mytree;
 var $63=(($62+4)|0);
 var $64=SAFE_HEAP_LOAD($63, "%struct.avlnode*", 0, 0);
 var $65=$tok;
 var $66=(($65+12)|0);
 var $67=$66;
 var $68=SAFE_HEAP_LOAD($67, "i8*", 0, 0);
 var $69=_avlsrch($64,$68);
 var $70=0!=($69|0);
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 SAFE_HEAP_STORE(4592, 97, "i32", 0);
 label=21;break;
 case 20: 
 var $73=$mytree;
 var $74=(($73+4)|0);
 var $75=$tok;
 var $76=(($75+12)|0);
 var $77=$76;
 var $78=SAFE_HEAP_LOAD($77, "i8*", 0, 0);
 var $79=_avladd($74,$78,0);
 $p=$79;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $82=$tok;
 var $83=(($82)|0);
 var $84=$83;
 var $85=SAFE_HEAP_LOAD($84, "%struct.apltoken*", 0, 0);
 $tok=$85;
 label=15;break;
 case 23: 
 var $87=$mytree;
 var $88=(($87+4)|0);
 var $89=SAFE_HEAP_LOAD($88, "%struct.avlnode*", 0, 0);
 _aplclsub($89);
 var $90=$mytree;
 var $91=$90;
 _aplfree($91);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxj($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $tokary;
 var $stmtcnt;
 var $stmtno;
 $1=$fp;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 $stmtcnt=$4;
 var $5=$stmtcnt;
 var $6=($5<<2);
 var $7=_aplmall($6);
 var $8=$7;
 var $9=$1;
 var $10=(($9+32)|0);
 SAFE_HEAP_STORE($10, $8, "%struct.apltoken**", 0);
 var $11=$stmtcnt;
 var $12=($11<<2);
 var $13=_aplmall($12);
 var $14=$13;
 var $15=$1;
 var $16=(($15+20)|0);
 SAFE_HEAP_STORE($16, $14, "i32*", 0);
 var $17=$1;
 var $18=(($17+32)|0);
 var $19=SAFE_HEAP_LOAD($18, "%struct.apltoken**", 0, 0);
 var $20=0==($19|0);
 if($20){label=3;break;}else{label=2;break;}
 case 2: 
 var $22=$1;
 var $23=(($22+20)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32*", 0, 0);
 var $25=0==($24|0);
 if($25){label=3;break;}else{label=4;break;}
 case 3: 
 label=8;break;
 case 4: 
 var $28=$1;
 var $29=(($28+32)|0);
 var $30=SAFE_HEAP_LOAD($29, "%struct.apltoken**", 0, 0);
 $tokary=$30;
 $stmtno=0;
 label=5;break;
 case 5: 
 var $32=$stmtno;
 var $33=$stmtcnt;
 var $34=($32|0)<($33|0);
 if($34){label=6;break;}else{label=8;break;}
 case 6: 
 var $36=$tokary;
 var $37=(($36+4)|0);
 $tokary=$37;
 SAFE_HEAP_STORE($36, 0, "%struct.apltoken*", 0);
 label=7;break;
 case 7: 
 var $39=$stmtno;
 var $40=((($39)+(1))|0);
 $stmtno=$40;
 label=5;break;
 case 8: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxk($fp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $fromhdr=sp;
 var $tok;
 var $tokary;
 var $tohdr;
 var $totok;
 var $cntary;
 var $stmtcnt;
 var $stmtno;
 var $subcnt;
 var $totcnt;
 $1=$fp;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 $stmtcnt=$4;
 $totcnt=0;
 var $5=$1;
 var $6=(($5+20)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32*", 0, 0);
 $cntary=$7;
 var $8=$1;
 var $9=(($8+32)|0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.apltoken**", 0, 0);
 $tokary=$10;
 $stmtno=0;
 label=2;break;
 case 2: 
 var $12=$stmtno;
 var $13=$stmtcnt;
 var $14=($12|0)<($13|0);
 if($14){label=3;break;}else{label=9;break;}
 case 3: 
 $subcnt=0;
 var $16=$tokary;
 var $17=(($16+4)|0);
 $tokary=$17;
 var $18=SAFE_HEAP_LOAD($16, "%struct.apltoken*", 0, 0);
 $tok=$18;
 label=4;break;
 case 4: 
 var $20=$tok;
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=7;break;}
 case 5: 
 var $23=$subcnt;
 var $24=((($23)+(1))|0);
 $subcnt=$24;
 label=6;break;
 case 6: 
 var $26=$tok;
 var $27=(($26)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "%struct.apltoken*", 0, 0);
 $tok=$29;
 label=4;break;
 case 7: 
 var $31=$subcnt;
 var $32=$cntary;
 var $33=(($32+4)|0);
 $cntary=$33;
 SAFE_HEAP_STORE($32, $31, "i32", 0);
 var $34=$subcnt;
 var $35=$totcnt;
 var $36=((($35)+($34))|0);
 $totcnt=$36;
 label=8;break;
 case 8: 
 var $38=$stmtno;
 var $39=((($38)+(1))|0);
 $stmtno=$39;
 label=2;break;
 case 9: 
 var $41=$totcnt;
 var $42=$1;
 var $43=(($42+12)|0);
 SAFE_HEAP_STORE($43, $41, "i32", 0);
 var $44=$totcnt;
 var $45=((($44)*(24))&-1);
 var $46=_aplmall($45);
 var $47=$46;
 var $48=$1;
 var $49=(($48+36)|0);
 SAFE_HEAP_STORE($49, $47, "%struct.apltoken*", 0);
 $totok=$47;
 var $50=$totok;
 var $51=0==($50|0);
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 label=18;break;
 case 11: 
 var $54=$1;
 var $55=(($54+32)|0);
 var $56=SAFE_HEAP_LOAD($55, "%struct.apltoken**", 0, 0);
 $tokary=$56;
 $stmtno=0;
 label=12;break;
 case 12: 
 var $58=$stmtno;
 var $59=$stmtcnt;
 var $60=($58|0)<($59|0);
 if($60){label=13;break;}else{label=18;break;}
 case 13: 
 var $62=$tokary;
 var $63=SAFE_HEAP_LOAD($62, "%struct.apltoken*", 0, 0);
 SAFE_HEAP_STORE($fromhdr, $63, "%struct.apltoken*", 0);
 var $64=$totok;
 var $65=$tokary;
 var $66=(($65+4)|0);
 $tokary=$66;
 SAFE_HEAP_STORE($65, $64, "%struct.apltoken*", 0);
 label=14;break;
 case 14: 
 var $68=$fromhdr;
 var $69=_pop($68);
 var $70=$69;
 $tok=$70;
 var $71=0!=($70|0);
 if($71){label=15;break;}else{label=16;break;}
 case 15: 
 var $73=$totok;
 var $74=$tok;
 var $75=_execqfxc($73,$74);
 $totok=$75;
 label=14;break;
 case 16: 
 label=17;break;
 case 17: 
 var $78=$stmtno;
 var $79=((($78)+(1))|0);
 $stmtno=$79;
 label=12;break;
 case 18: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxl($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $nametok;
 $1=$fp;
 var $2=$1;
 var $3=_execqfxd($2);
 var $4=$1;
 var $5=(($4+28)|0);
 SAFE_HEAP_STORE($5, $3, "%struct.apltoken*", 0);
 var $6=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$1;
 _execqfxf($9);
 var $10=$1;
 _execqfxi($10);
 label=3;break;
 case 3: 
 var $12=$1;
 var $13=(($12+28)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.apltoken*", 0, 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _execqfxm($nametok,$fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $symp;
 var $fun;
 var $wrk;
 var $pav;
 var $nameptr;
 $1=$nametok;
 $2=$fp;
 var $3=$1;
 var $4=(($3+12)|0);
 var $5=$4;
 var $6=SAFE_HEAP_LOAD($5, "i8*", 0, 0);
 $nameptr=$6;
 label=2;break;
 case 2: 
 var $8=$nameptr;
 var $9=_treenode($8);
 $pav=$9;
 var $10=$pav;
 var $11=($10|0)==0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 label=15;break;
 case 4: 
 var $14=$pav;
 var $15=(($14+8)|0);
 var $16=SAFE_HEAP_LOAD($15, "i8*", 0, 0);
 var $17=$16;
 $fun=$17;
 var $18=$fun;
 var $19=($18|0)==0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 label=15;break;
 case 6: 
 var $22=$fun;
 var $23=(($22+4)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=$24&256;
 var $26=($25|0)!=0;
 if($26){label=8;break;}else{label=7;break;}
 case 7: 
 label=15;break;
 case 8: 
 var $29=$fun;
 var $30=(($29+4)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=$2;
 var $33=(($32+4)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=$34|$31;
 SAFE_HEAP_STORE($33, $35, "i32", 0);
 var $36=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $symp=$36;
 label=9;break;
 case 9: 
 var $38=$symp;
 var $39=($38|0)!=0;
 if($39){label=10;break;}else{label=14;break;}
 case 10: 
 var $41=$symp;
 var $42=(($41+8)|0);
 var $43=SAFE_HEAP_LOAD($42, "%struct.aplfunc*", 0, 0);
 var $44=$fun;
 var $45=($43|0)==($44|0);
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 var $47=$2;
 var $48=$symp;
 var $49=(($48+8)|0);
 SAFE_HEAP_STORE($49, $47, "%struct.aplfunc*", 0);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $52=$symp;
 var $53=(($52)|0);
 var $54=SAFE_HEAP_LOAD($53, "%struct.treelist*", 0, 0);
 $symp=$54;
 label=9;break;
 case 14: 
 label=15;break;
 case 15: 
 var $57=$nameptr;
 var $58=$2;
 var $59=$58;
 var $60=_assign($57,$59);
 $wrk=$60;
 var $61=$nameptr;
 var $62=_chrvect($61);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }

}


function _execqnc($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=_execqncs((414),$2);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $3;
}


function _execqnct($nameok,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $k;
 var $wrk;
 $1=$nameok;
 $2=$p;
 var $3=$1;
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 $k=4;
 label=13;break;
 case 3: 
 $k=0;
 var $7=$2;
 var $8=0!=($7|0);
 if($8){label=4;break;}else{label=12;break;}
 case 4: 
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "i8*", 0, 0);
 var $13=$12;
 $wrk=$13;
 var $14=0!=($13|0);
 if($14){label=5;break;}else{label=12;break;}
 case 5: 
 var $16=$wrk;
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$18&128;
 var $20=($19|0)!=0;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 $k=1;
 label=11;break;
 case 7: 
 var $23=$wrk;
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=$25&256;
 var $27=($26|0)!=0;
 if($27){label=8;break;}else{label=9;break;}
 case 8: 
 $k=3;
 label=10;break;
 case 9: 
 $k=2;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $34=$k;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $34;
  default: assert(0, "bad label: " + label);
 }

}


function _execqncs($oper,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cp;
 var $s=sp;
 var $t=(sp)+(8);
 var $wrk;
 var $code;
 var $datacnt;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $nameok;
 var $rank;
 var $p;
 var $out;
 $2=$oper;
 $3=$rite;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=_errstop(0,0,$7,0);
 $1=$8;
 label=30;break;
 case 3: 
 var $10=$3;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=8!=($12|0);
 var $14=($13&1);
 var $15=$14&78;
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=4;break;}
 case 4: 
 var $18=$3;
 var $19=(($18+12)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=($20|0)>2;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$3;
 var $24=_errstop(110,0,$23,0);
 $1=$24;
 label=30;break;
 case 6: 
 var $26=$3;
 var $27=(($26+8)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=($28|0)!=0;
 if($29){label=7;break;}else{label=11;break;}
 case 7: 
 var $31=$3;
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=($33|0)==2;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=$3;
 var $37=(($36+16)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32*", 0, 0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 $datacnt=$39;
 $rank=1;
 var $40=$3;
 var $41=(($40+16)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 var $43=(($42+4)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 $j=$44;
 label=10;break;
 case 9: 
 $datacnt=1;
 $rank=0;
 var $46=$3;
 var $47=(($46+8)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 $j=$48;
 label=10;break;
 case 10: 
 var $50=$datacnt;
 var $51=$rank;
 var $52=_getcb(0,$50,5,$51,0);
 $out=$52;
 label=12;break;
 case 11: 
 var $54=_getcb(0,0,5,0,0);
 $out=$54;
 label=12;break;
 case 12: 
 var $56=$out;
 var $57=(($56+8)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=($58|0)!=0;
 if($59){label=13;break;}else{label=29;break;}
 case 13: 
 var $61=$j;
 var $62=((($61)+(1))|0);
 var $63=_aplmall($62);
 $wrk=$63;
 var $64=$wrk;
 var $65=($64|0)==0;
 if($65){label=14;break;}else{label=15;break;}
 case 14: 
 var $67=$3;
 var $68=$out;
 var $69=_errstop(0,0,$67,$68);
 $1=$69;
 label=30;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $72=$i;
 var $73=$out;
 var $74=(($73+8)|0);
 var $75=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $76=($72|0)<($75|0);
 if($76){label=17;break;}else{label=28;break;}
 case 17: 
 var $78=$3;
 var $79=(($78)|0);
 var $80=$79;
 var $81=SAFE_HEAP_LOAD($80, "i8*", 0, 0);
 var $82=$j;
 var $83=$i;
 var $84=_namelen($81,$82,$83,$s);
 $k=$84;
 var $85=0==($84|0);
 if($85){label=18;break;}else{label=19;break;}
 case 18: 
 $nameok=0;
 $p=0;
 label=26;break;
 case 19: 
 $nameok=1;
 var $88=$wrk;
 var $89=SAFE_HEAP_LOAD($s, "i8*", 0, 0);
 var $90=$k;
 var $91=_chrcopy($88,$89,$90,1);
 $cp=$91;
 var $92=$cp;
 SAFE_HEAP_STORE($92, 0, "i8", 0);
 var $93=$wrk;
 SAFE_HEAP_STORE($t, $93, "i8*", 0);
 var $94=$cp;
 var $95=_aplquae($t,$94);
 if(($95|0)==-12){ label=20;break;}else if(($95|0)==-14){ label=21;break;}else if(($95|0)==-19){ label=22;break;}else if(($95|0)==-21){ label=23;break;}else{label=24;break;}
 case 20: 
 SAFE_HEAP_STORE($t, 2568, "i8*", 0);
 label=25;break;
 case 21: 
 SAFE_HEAP_STORE($t, 2560, "i8*", 0);
 label=25;break;
 case 22: 
 SAFE_HEAP_STORE($t, 2544, "i8*", 0);
 label=25;break;
 case 23: 
 SAFE_HEAP_STORE($t, 2536, "i8*", 0);
 label=25;break;
 case 24: 
 var $101=$wrk;
 SAFE_HEAP_STORE($t, $101, "i8*", 0);
 label=25;break;
 case 25: 
 var $103=SAFE_HEAP_LOAD($t, "i8*", 0, 0);
 var $104=_treenode($103);
 $p=$104;
 label=26;break;
 case 26: 
 var $106=$2;
 var $107=$nameok;
 var $108=$p;
 var $109=$106;
 var $110=FUNCTION_TABLE[$109]($107,$108);
 var $111=$out;
 var $112=(($111)|0);
 var $113=$112;
 var $114=SAFE_HEAP_LOAD($113, "i32*", 0, 0);
 var $115=$i;
 var $116=(($114+($115<<2))|0);
 SAFE_HEAP_STORE($116, $110, "i32", 0);
 label=27;break;
 case 27: 
 var $118=$i;
 var $119=((($118)+(1))|0);
 $i=$119;
 label=16;break;
 case 28: 
 var $121=$wrk;
 _aplfree($121);
 label=29;break;
 case 29: 
 var $123=$3;
 var $124=$out;
 var $125=_errstop(0,0,$123,$124);
 $1=$125;
 label=30;break;
 case 30: 
 var $127=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $127;
  default: assert(0, "bad label: " + label);
 }

}


function _execqnl($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p=sp;
 var $nexthdr;
 var $workhdr;
 var $i;
 var $ip;
 $2=$left;
 $3=$rite;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=24;break;
 case 3: 
 var $11=$2;
 var $12=($11|0)!=0;
 if($12){label=4;break;}else{label=7;break;}
 case 4: 
 var $14=$2;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=8!=($16|0);
 var $18=($17&1);
 var $19=$18&78;
 var $20=($19|0)!=0;
 if($20){label=6;break;}else{label=5;break;}
 case 5: 
 var $22=$2;
 var $23=(($22+12)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=($24|0)>1;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$2;
 var $28=$3;
 var $29=_errstop(111,$27,$28,0);
 $1=$29;
 label=24;break;
 case 7: 
 var $31=$3;
 var $32=_vectin($31);
 var $33=_temp($32);
 $3=$33;
 var $34=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $35=($34|0)!=0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $37=$2;
 var $38=$3;
 var $39=_errstop(0,$37,$38,0);
 $1=$39;
 label=24;break;
 case 9: 
 var $41=$3;
 var $42=(($41)|0);
 var $43=$42;
 var $44=SAFE_HEAP_LOAD($43, "i32*", 0, 0);
 $ip=$44;
 var $45=$3;
 var $46=(($45+8)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 $i=$47;
 var $48=(($p+8)|0);
 SAFE_HEAP_STORE($48, 0, "i32", 0);
 var $49=(($p+4)|0);
 SAFE_HEAP_STORE($49, 0, "i32", 0);
 var $50=(($p)|0);
 SAFE_HEAP_STORE($50, 0, "i32", 0);
 label=10;break;
 case 10: 
 var $52=$i;
 var $53=((($52)-(1))|0);
 $i=$53;
 var $54=($52|0)!=0;
 if($54){label=11;break;}else{label=17;break;}
 case 11: 
 var $56=$ip;
 var $57=(($56+4)|0);
 $ip=$57;
 var $58=SAFE_HEAP_LOAD($56, "i32", 0, 0);
 if(($58|0)==1){ label=12;break;}else if(($58|0)==2){ label=13;break;}else if(($58|0)==3){ label=14;break;}else{label=15;break;}
 case 12: 
 var $60=(($p)|0);
 SAFE_HEAP_STORE($60, 1, "i32", 0);
 label=16;break;
 case 13: 
 var $62=(($p+4)|0);
 SAFE_HEAP_STORE($62, 2, "i32", 0);
 label=16;break;
 case 14: 
 var $64=(($p+8)|0);
 SAFE_HEAP_STORE($64, 3, "i32", 0);
 label=16;break;
 case 15: 
 var $66=$2;
 var $67=$3;
 var $68=_errstop(117,$66,$67,0);
 $1=$68;
 label=24;break;
 case 16: 
 label=10;break;
 case 17: 
 var $71=$2;
 var $72=($71|0)==0;
 if($72){label=18;break;}else{label=19;break;}
 case 18: 
 var $74=(($p+12)|0);
 SAFE_HEAP_STORE($74, 0, "i8*", 0);
 var $75=(($p+16)|0);
 SAFE_HEAP_STORE($75, 0, "i32", 0);
 label=20;break;
 case 19: 
 var $77=$2;
 var $78=(($77)|0);
 var $79=$78;
 var $80=SAFE_HEAP_LOAD($79, "i8*", 0, 0);
 var $81=(($p+12)|0);
 SAFE_HEAP_STORE($81, $80, "i8*", 0);
 var $82=$2;
 var $83=(($82+8)|0);
 var $84=SAFE_HEAP_LOAD($83, "i32", 0, 0);
 var $85=(($p+16)|0);
 SAFE_HEAP_STORE($85, $84, "i32", 0);
 label=20;break;
 case 20: 
 var $87=(($p+24)|0);
 SAFE_HEAP_STORE($87, 0, "i32", 0);
 var $88=(($p+20)|0);
 SAFE_HEAP_STORE($88, 0, "i32", 0);
 var $89=(($p+28)|0);
 SAFE_HEAP_STORE($89, 0, "i8*", 0);
 var $90=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $nexthdr=$90;
 label=21;break;
 case 21: 
 var $92=$nexthdr;
 $workhdr=$92;
 var $93=0!=($92|0);
 if($93){label=22;break;}else{label=23;break;}
 case 22: 
 var $95=$workhdr;
 var $96=(($95)|0);
 var $97=SAFE_HEAP_LOAD($96, "%struct.treelist*", 0, 0);
 $nexthdr=$97;
 var $98=$workhdr;
 var $99=(($98+4)|0);
 var $100=SAFE_HEAP_LOAD($99, "%struct.avlnode*", 0, 0);
 _execqnls($100,$p);
 label=21;break;
 case 23: 
 var $102=$2;
 var $103=$3;
 var $104=_execqnlu($p);
 var $105=_errstop(0,$102,$103,$104);
 $1=$105;
 label=24;break;
 case 24: 
 var $107=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $107;
  default: assert(0, "bad label: " + label);
 }

}


function _execqnls($node,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $wrk;
 var $op;
 var $i;
 var $j;
 var $qn;
 var $rn;
 $1=$node;
 $2=$p;
 var $3=$1;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 label=27;break;
 case 3: 
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.avlnode*", 0, 0);
 var $10=$2;
 _execqnls($9,$10);
 label=4;break;
 case 4: 
 var $12=$1;
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i8*", 0, 0);
 var $15=$14;
 $wrk=$15;
 var $16=$wrk;
 var $17=($16|0)==0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 label=26;break;
 case 6: 
 var $20=$1;
 var $21=(($20+16)|0);
 var $22=SAFE_HEAP_LOAD($21, "i8*", 0, 0);
 var $23=_strcmp($22,2552);
 var $24=0==($23|0);
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 label=26;break;
 case 8: 
 var $27=$1;
 var $28=(($27+16)|0);
 var $29=SAFE_HEAP_LOAD($28, "i8*", 0, 0);
 var $30=_quadname($29);
 $qn=$30;
 var $31=$qn;
 var $32=$2;
 var $33=(($32+12)|0);
 var $34=SAFE_HEAP_LOAD($33, "i8*", 0, 0);
 var $35=_execqnlt($31,$34);
 var $36=($35|0)!=0;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 label=26;break;
 case 10: 
 var $39=$2;
 var $40=(($39)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=($41|0)!=0;
 if($42){label=11;break;}else{label=12;break;}
 case 11: 
 var $44=$wrk;
 var $45=(($44+4)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=$46&128;
 var $48=($47|0)!=0;
 if($48){label=17;break;}else{label=12;break;}
 case 12: 
 var $50=$2;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=($52|0)!=0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=$wrk;
 var $56=(($55+4)|0);
 var $57=SAFE_HEAP_LOAD($56, "i32", 0, 0);
 var $58=$57&256;
 var $59=($58|0)!=0;
 if($59){label=17;break;}else{label=14;break;}
 case 14: 
 var $61=$2;
 var $62=(($61+4)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=($63|0)!=0;
 if($64){label=15;break;}else{label=16;break;}
 case 15: 
 var $66=$wrk;
 var $67=(($66+4)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=$68&384;
 var $70=($69|0)!=0;
 if($70){label=16;break;}else{label=17;break;}
 case 16: 
 label=26;break;
 case 17: 
 var $73=$qn;
 var $74=_strlen($73);
 $j=$74;
 var $75=$2;
 var $76=(($75+20)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=((($77)+(1))|0);
 SAFE_HEAP_STORE($76, $78, "i32", 0);
 var $79=$2;
 var $80=(($79+24)|0);
 var $81=SAFE_HEAP_LOAD($80, "i32", 0, 0);
 var $82=$j;
 var $83=_imax($81,$82);
 var $84=$2;
 var $85=(($84+24)|0);
 SAFE_HEAP_STORE($85, $83, "i32", 0);
 var $86=$qn;
 var $87=$1;
 var $88=(($87+16)|0);
 var $89=SAFE_HEAP_LOAD($88, "i8*", 0, 0);
 var $90=($86|0)==($89|0);
 if($90){label=18;break;}else{label=19;break;}
 case 18: 
 var $96=0;label=20;break;
 case 19: 
 var $93=$j;
 var $94=((($93)+(1))|0);
 var $96=$94;label=20;break;
 case 20: 
 var $96;
 var $97=((($96)+(8))|0);
 $i=$97;
 var $98=$2;
 var $99=(($98+28)|0);
 var $100=$99;
 var $101=$i;
 var $102=_aplmall($101);
 var $103=_lifo($100,$102);
 var $104=$103;
 $op=$104;
 var $105=$op;
 var $106=($105|0)==0;
 if($106){label=21;break;}else{label=22;break;}
 case 21: 
 label=27;break;
 case 22: 
 var $109=$qn;
 var $110=$1;
 var $111=(($110+16)|0);
 var $112=SAFE_HEAP_LOAD($111, "i8*", 0, 0);
 var $113=($109|0)==($112|0);
 if($113){label=23;break;}else{label=24;break;}
 case 23: 
 var $115=$1;
 var $116=(($115+16)|0);
 var $117=SAFE_HEAP_LOAD($116, "i8*", 0, 0);
 var $118=$op;
 var $119=(($118+4)|0);
 SAFE_HEAP_STORE($119, $117, "i8*", 0);
 label=25;break;
 case 24: 
 var $121=$op;
 var $122=$121;
 var $123=(($122+4)|0);
 $rn=$123;
 var $124=$op;
 var $125=(($124+4)|0);
 SAFE_HEAP_STORE($125, $123, "i8*", 0);
 var $126=$rn;
 var $127=$qn;
 var $128=_strcpy($126,$127);
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $131=$1;
 var $132=(($131)|0);
 var $133=SAFE_HEAP_LOAD($132, "%struct.avlnode*", 0, 0);
 var $134=$2;
 _execqnls($133,$134);
 label=27;break;
 case 27: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _execqnlt($name,$delim){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ch;
 $2=$name;
 $3=$delim;
 var $4=$3;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=10;break;
 case 3: 
 var $8=$3;
 $ch=$8;
 label=4;break;
 case 4: 
 var $10=$ch;
 var $11=SAFE_HEAP_LOAD($10, "i8", 0, 0);
 var $12=(($11<<24)>>24);
 var $13=($12|0)!=0;
 if($13){label=5;break;}else{label=9;break;}
 case 5: 
 var $15=$2;
 var $16=SAFE_HEAP_LOAD($15, "i8", 0, 0);
 var $17=(($16<<24)>>24);
 var $18=$ch;
 var $19=SAFE_HEAP_LOAD($18, "i8", 0, 0);
 var $20=(($19<<24)>>24);
 var $21=($17|0)==($20|0);
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 $1=1;
 label=10;break;
 case 7: 
 label=8;break;
 case 8: 
 var $25=$ch;
 var $26=(($25+1)|0);
 $ch=$26;
 label=4;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $29=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $29;
  default: assert(0, "bad label: " + label);
 }

}


function _execqnlu($p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 var $op;
 var $ophdr=sp;
 var $cols;
 var $datacnt;
 var $rank;
 var $rows;
 var $cp;
 $1=$p;
 $out=0;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 $rows=$4;
 var $5=$1;
 var $6=(($5+24)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 $cols=$7;
 var $8=(Math_imul($4,$7)|0);
 $datacnt=$8;
 var $9=0==($8|0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $rank=1;
 label=4;break;
 case 3: 
 $rank=2;
 label=4;break;
 case 4: 
 var $13=$datacnt;
 var $14=$rank;
 var $15=_getcb(0,$13,9,$14,0);
 $out=$15;
 var $16=$rank;
 var $17=($16|0)==2;
 if($17){label=5;break;}else{label=10;break;}
 case 5: 
 var $19=$out;
 var $20=($19|0)!=0;
 if($20){label=6;break;}else{label=10;break;}
 case 6: 
 var $22=$rows;
 var $23=$out;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 SAFE_HEAP_STORE($25, $22, "i32", 0);
 var $26=$cols;
 var $27=$out;
 var $28=(($27+16)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32*", 0, 0);
 var $30=(($29+4)|0);
 SAFE_HEAP_STORE($30, $26, "i32", 0);
 var $31=$out;
 var $32=(($31)|0);
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "i8*", 0, 0);
 $cp=$34;
 var $35=$1;
 var $36=(($35+28)|0);
 var $37=SAFE_HEAP_LOAD($36, "i8*", 0, 0);
 var $38=$37;
 SAFE_HEAP_STORE($ophdr, $38, "%struct.nlq*", 0);
 label=7;break;
 case 7: 
 var $40=$ophdr;
 var $41=_pop($40);
 var $42=$41;
 $op=$42;
 var $43=0!=($42|0);
 if($43){label=8;break;}else{label=9;break;}
 case 8: 
 var $45=$cp;
 var $46=$op;
 var $47=(($46+4)|0);
 var $48=SAFE_HEAP_LOAD($47, "i8*", 0, 0);
 var $49=$cols;
 var $50=_aplstr($45,$48,$49);
 $cp=$50;
 var $51=$op;
 var $52=$51;
 _aplfree($52);
 label=7;break;
 case 9: 
 label=10;break;
 case 10: 
 var $55=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $55;
  default: assert(0, "bad label: " + label);
 }

}


function _execqts(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 var $ntime=sp;
 var $t;
 var $2=_errinit();
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $6=_getcb(0,7,5,1,0);
 $out=$6;
 var $7=$out;
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=6;break;
 case 5: 
 var $11=_time($ntime);
 var $12=_execqtzs();
 var $13=(($12)&-1);
 var $14=((($13)*(3600))&-1);
 var $15=SAFE_HEAP_LOAD($ntime, "i32", 0, 0);
 var $16=((($15)+($14))|0);
 SAFE_HEAP_STORE($ntime, $16, "i32", 0);
 var $17=_localtime($ntime);
 $t=$17;
 var $18=$t;
 var $19=(($18+20)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=((($20)+(1900))|0);
 var $22=$out;
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 var $26=(($25)|0);
 SAFE_HEAP_STORE($26, $21, "i32", 0);
 var $27=$t;
 var $28=(($27+16)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=((($29)+(1))|0);
 var $31=$out;
 var $32=(($31)|0);
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "i32*", 0, 0);
 var $35=(($34+4)|0);
 SAFE_HEAP_STORE($35, $30, "i32", 0);
 var $36=$t;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=$out;
 var $40=(($39)|0);
 var $41=$40;
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 var $43=(($42+8)|0);
 SAFE_HEAP_STORE($43, $38, "i32", 0);
 var $44=$t;
 var $45=(($44+8)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=$out;
 var $48=(($47)|0);
 var $49=$48;
 var $50=SAFE_HEAP_LOAD($49, "i32*", 0, 0);
 var $51=(($50+12)|0);
 SAFE_HEAP_STORE($51, $46, "i32", 0);
 var $52=$t;
 var $53=(($52+4)|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 var $55=$out;
 var $56=(($55)|0);
 var $57=$56;
 var $58=SAFE_HEAP_LOAD($57, "i32*", 0, 0);
 var $59=(($58+16)|0);
 SAFE_HEAP_STORE($59, $54, "i32", 0);
 var $60=$t;
 var $61=(($60)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=$out;
 var $64=(($63)|0);
 var $65=$64;
 var $66=SAFE_HEAP_LOAD($65, "i32*", 0, 0);
 var $67=(($66+20)|0);
 SAFE_HEAP_STORE($67, $62, "i32", 0);
 var $68=$out;
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "i32*", 0, 0);
 var $72=(($71+24)|0);
 SAFE_HEAP_STORE($72, 0, "i32", 0);
 var $73=$out;
 var $74=_errstop(0,0,0,$73);
 $1=$74;
 label=6;break;
 case 6: 
 var $76=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $76;
  default: assert(0, "bad label: " + label);
 }

}


function _execqtz(){
 var label=0;


 var $1=_execqtzs();
 var $2=_scalar($1);
 return $2;
}


function _execqtzs(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $pav;
 var $leaf;
 var $zone;
 $zone=0;
 label=2;break;
 case 2: 
 var $2=_treenode(2416);
 $pav=$2;
 var $3=$pav;
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 label=7;break;
 case 4: 
 var $7=$pav;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i8*", 0, 0);
 var $10=$9;
 $leaf=$10;
 var $11=$leaf;
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 label=7;break;
 case 6: 
 var $15=$leaf;
 var $16=_value($15);
 $zone=$16;
 label=7;break;
 case 7: 
 var $18=$zone;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }

}


function _execspec($ptok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $op=sp;
 var $tok=(sp)+(8);
 var $code;
 var $noexit;
 $2=$ptok;
 $noexit=1;
 var $3=$2;
 var $4=SAFE_HEAP_LOAD($3, "%struct.apltoken*", 0, 0);
 SAFE_HEAP_STORE($tok, $4, "%struct.apltoken*", 0);
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$noexit;
 var $12=($11|0)!=0;
 var $13=$12^1;
 var $14=($13&1);
 $1=$14;
 label=12;break;
 case 4: 
 var $16=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 $code=$18;
 var $19=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 _execmona($19);
 var $20=$2;
 SAFE_HEAP_STORE($20, 0, "%struct.apltoken*", 0);
 var $21=$code;
 var $22=($21|0)!=3;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=$noexit;
 $1=$24;
 label=12;break;
 case 6: 
 var $26=_execspex();
 var $27=($26|0)!=0;
 if($27){label=7;break;}else{label=8;break;}
 case 7: 
 var $29=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $30=($29|0)==0;
 var $31=($30&1);
 $1=$31;
 label=12;break;
 case 8: 
 var $33=$noexit;
 var $34=_execexee($tok,$op);
 var $35=($33|0)!=($34|0);
 if($35){label=10;break;}else{label=9;break;}
 case 9: 
 var $37=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $38=($37|0)!=0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=$noexit;
 var $41=($40|0)!=0;
 var $42=$41^1;
 var $43=($42&1);
 $1=$43;
 label=12;break;
 case 11: 
 var $45=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $46=(($45+48)|0);
 SAFE_HEAP_STORE($46, 3, "i32", 0);
 var $47=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $48=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $49=_execsped($47,$48);
 $1=$49;
 label=12;break;
 case 12: 
 var $51=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function _execsped($tok,$op){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $noexit;
 $2=$tok;
 $3=$op;
 $noexit=1;
 var $4=$2;
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$3;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$2;
 _execfree($10);
 var $11=$3;
 _execfree($11);
 SAFE_HEAP_STORE(4592, 66, "i32", 0);
 var $12=$noexit;
 var $13=($12|0)!=0;
 var $14=$13^1;
 var $15=($14&1);
 $1=$15;
 label=9;break;
 case 4: 
 var $17=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $18=(($17+40)|0);
 var $19=SAFE_HEAP_LOAD($18, "%struct.execstk*", 0, 0);
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "%struct.apltoken*", 0, 0);
 var $22=_axistest($21);
 var $23=($22|0)!=0;
 if($23){label=5;break;}else{label=8;break;}
 case 5: 
 var $25=$3;
 var $26=_execindx($25);
 $3=$26;
 var $27=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $28=($27|0)!=0;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 var $30=$noexit;
 var $31=($30|0)!=0;
 var $32=$31^1;
 var $33=($32&1);
 $1=$33;
 label=9;break;
 case 7: 
 var $35=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $36=(($35+40)|0);
 var $37=SAFE_HEAP_LOAD($36, "%struct.execstk*", 0, 0);
 var $38=(($37+8)|0);
 var $39=$38;
 var $40=$3;
 var $41=$40;
 var $42=_lifo($39,$41);
 var $43=$42;
 $3=$43;
 var $44=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $45=($44|0)==0;
 var $46=($45&1);
 $1=$46;
 label=9;break;
 case 8: 
 var $48=$3;
 var $49=_execdyah($48);
 $1=$49;
 label=9;break;
 case 9: 
 var $51=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function _execspee($tok,$axistok,$op,$namecnt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $err;
 var $off;
 var $tempsave;
 var $incb;
 var $out;
 var $tmp;
 var $wrk;
 var $nametok;
 var $treetest;
 $1=$tok;
 $2=$axistok;
 SAFE_HEAP_STORE($3, $op, "%struct.apltoken*", 0);
 $4=$namecnt;
 $err=0;
 $out=0;
 var $5=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $treetest=$5;
 label=2;break;
 case 2: 
 var $7=$1;
 var $8=($7|0)!=0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$2;
 var $11=($10|0)!=0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$1;
 _execfree($13);
 var $14=$2;
 _execfree($14);
 SAFE_HEAP_STORE(4592, 127, "i32", 0);
 label=31;break;
 case 5: 
 var $16=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $17=(($16+40)|0);
 var $18=SAFE_HEAP_LOAD($17, "%struct.execstk*", 0, 0);
 var $19=(($18+8)|0);
 var $20=$19;
 var $21=_pop($20);
 var $22=$21;
 $1=$22;
 var $23=$1;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 $off=$25;
 var $26=$1;
 var $27=_execgetp($26);
 $out=$27;
 $incb=$27;
 var $28=$out;
 var $29=(($28+4)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=$30&1;
 $tempsave=$31;
 var $32=($31|0)!=0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$out;
 var $35=(($34+4)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=((($36)-(1))|0);
 SAFE_HEAP_STORE($35, $37, "i32", 0);
 label=7;break;
 case 7: 
 var $39=$4;
 var $40=($39|0)==1;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 var $42=$3;
 var $43=_pop($42);
 var $44=$43;
 $nametok=$44;
 var $45=$nametok;
 var $46=(($45+12)|0);
 var $47=$46;
 var $48=SAFE_HEAP_LOAD($47, "i8*", 0, 0);
 var $49=$out;
 var $50=_assign($48,$49);
 $wrk=$50;
 var $51=$nametok;
 _execfree($51);
 label=31;break;
 case 9: 
 var $53=$out;
 var $54=(($53+12)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=($55|0)>1;
 if($56){label=10;break;}else{label=11;break;}
 case 10: 
 SAFE_HEAP_STORE(4592, 128, "i32", 0);
 label=31;break;
 case 11: 
 var $59=$out;
 var $60=(($59+12)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=($61|0)==1;
 if($62){label=12;break;}else{label=18;break;}
 case 12: 
 var $64=$out;
 var $65=(($64+8)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=$4;
 var $68=($66|0)!=($67|0);
 if($68){label=13;break;}else{label=14;break;}
 case 13: 
 SAFE_HEAP_STORE(4592, 127, "i32", 0);
 label=31;break;
 case 14: 
 var $71=$out;
 var $72=(($71+4)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $74=$73&32;
 var $75=($74|0)!=0;
 if($75){label=16;break;}else{label=15;break;}
 case 15: 
 var $77=$out;
 var $78=_aplnest($77);
 $incb=$78;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $84=$4;
 var $85=((($84)-(1))|0);
 $4=$85;
 var $86=($84|0)!=0;
 if($86){label=21;break;}else{label=28;break;}
 case 21: 
 var $88=$3;
 var $89=_pop($88);
 var $90=$89;
 $nametok=$90;
 var $91=$incb;
 var $92=(($91+12)|0);
 var $93=SAFE_HEAP_LOAD($92, "i32", 0, 0);
 var $94=($93|0)!=0;
 if($94){label=22;break;}else{label=26;break;}
 case 22: 
 var $96=$incb;
 var $97=(($96)|0);
 var $98=$97;
 var $99=SAFE_HEAP_LOAD($98, "%struct.aplcb**", 0, 0);
 var $100=$incb;
 var $101=(($100+8)|0);
 var $102=SAFE_HEAP_LOAD($101, "i32", 0, 0);
 var $103=(($99+($102<<2))|0);
 var $104=$4;
 var $105=(((-$104))|0);
 var $106=(($103+($105<<2))|0);
 var $107=((($106)-(4))|0);
 $tmp=$107;
 var $108=SAFE_HEAP_LOAD($107, "%struct.aplcb*", 0, 0);
 $wrk=$108;
 var $109=$incb;
 var $110=$out;
 var $111=($109|0)!=($110|0);
 if($111){label=23;break;}else{label=24;break;}
 case 23: 
 var $113=$tmp;
 SAFE_HEAP_STORE($113, 0, "%struct.aplcb*", 0);
 label=25;break;
 case 24: 
 var $115=$wrk;
 var $116=_aplcopy($115);
 $wrk=$116;
 label=25;break;
 case 25: 
 label=27;break;
 case 26: 
 var $119=$incb;
 var $120=_aplcopy($119);
 $wrk=$120;
 label=27;break;
 case 27: 
 var $122=$wrk;
 var $123=(($122+4)|0);
 var $124=SAFE_HEAP_LOAD($123, "i32", 0, 0);
 var $125=$124|1;
 SAFE_HEAP_STORE($123, $125, "i32", 0);
 var $126=$nametok;
 var $127=(($126+12)|0);
 var $128=$127;
 var $129=SAFE_HEAP_LOAD($128, "i8*", 0, 0);
 var $130=$wrk;
 var $131=_assign($129,$130);
 $wrk=$131;
 var $132=$nametok;
 _execfree($132);
 label=20;break;
 case 28: 
 var $134=$incb;
 var $135=$out;
 var $136=($134|0)!=($135|0);
 if($136){label=29;break;}else{label=30;break;}
 case 29: 
 var $138=$incb;
 _endoper($138);
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $141=$out;
 var $142=($141|0)!=0;
 if($142){label=32;break;}else{label=33;break;}
 case 32: 
 var $144=$tempsave;
 var $145=$out;
 var $146=(($145+4)|0);
 var $147=SAFE_HEAP_LOAD($146, "i32", 0, 0);
 var $148=((($147)+($144))|0);
 SAFE_HEAP_STORE($146, $148, "i32", 0);
 var $149=$out;
 var $150=$off;
 var $151=_exectok($149,$150);
 $1=$151;
 var $152=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $153=(($152+40)|0);
 var $154=SAFE_HEAP_LOAD($153, "%struct.execstk*", 0, 0);
 var $155=(($154+8)|0);
 var $156=$155;
 var $157=$1;
 var $158=$157;
 var $159=_lifo($156,$158);
 var $160=$159;
 $1=$160;
 label=33;break;
 case 33: 
 var $162=SAFE_HEAP_LOAD($3, "%struct.apltoken*", 0, 0);
 var $163=($162|0)!=0;
 if($163){label=34;break;}else{label=35;break;}
 case 34: 
 _execpop($3);
 label=35;break;
 case 35: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return 1;
  default: assert(0, "bad label: " + label);
 }

}


function _execspef($lefttok,$leftorig,$left,$indices,$nwa){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4;
 var $5;
 var $ritetok;
 var $rite;
 var $saveorig;
 var $ld;
 var $rd;
 var $td;
 var $hit;
 var $i;
 var $ip;
 var $j;
 var $off;
 var $size;
 var $tempsave;
 var $type;
 $1=$lefttok;
 SAFE_HEAP_STORE($2, $leftorig, "%struct.aplcb*", 0);
 $3=$left;
 $4=$indices;
 $5=$nwa;
 $ritetok=0;
 $rite=0;
 label=2;break;
 case 2: 
 var $7=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $8=(($7+40)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.execstk*", 0, 0);
 var $10=(($9+8)|0);
 var $11=$10;
 var $12=_pop($11);
 var $13=$12;
 $ritetok=$13;
 var $14=$ritetok;
 var $15=($14|0)==0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4592, 59, "i32", 0);
 label=14;break;
 case 4: 
 var $18=$ritetok;
 var $19=(($18+8)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 $off=$20;
 var $21=$ritetok;
 var $22=_execgetp($21);
 $rite=$22;
 var $23=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $24=($23|0)!=0;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 label=14;break;
 case 6: 
 var $27=$rite;
 var $28=(($27+4)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=$29&1;
 $tempsave=$30;
 var $31=$tempsave;
 var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$rite;
 var $35=(($34+4)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=((($36)-(1))|0);
 SAFE_HEAP_STORE($35, $37, "i32", 0);
 label=8;break;
 case 8: 
 var $39=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 $saveorig=$39;
 var $40=$5;
 var $41=($40|0)!=0;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 var $43=$3;
 var $44=$rite;
 var $45=$4;
 var $46=(($45)|0);
 var $47=$46;
 var $48=SAFE_HEAP_LOAD($47, "i32*", 0, 0);
 var $49=$4;
 var $50=(($49+8)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32", 0, 0);
 var $52=_execspen($2,$43,$44,$48,$51);
 var $65=$52;label=11;break;
 case 10: 
 var $54=$3;
 var $55=$rite;
 var $56=$4;
 var $57=(($56)|0);
 var $58=$57;
 var $59=SAFE_HEAP_LOAD($58, "i32*", 0, 0);
 var $60=$4;
 var $61=(($60+8)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=_execspeh($2,$54,$55,$59,$62);
 var $65=$63;label=11;break;
 case 11: 
 var $65;
 $hit=$65;
 var $66=$saveorig;
 var $67=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $68=($66|0)!=($67|0);
 if($68){label=12;break;}else{label=13;break;}
 case 12: 
 var $70=$1;
 var $71=(($70+12)|0);
 var $72=$71;
 var $73=SAFE_HEAP_LOAD($72, "i8*", 0, 0);
 var $74=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $75=_temp($74);
 var $76=_assign($73,$75);
 SAFE_HEAP_STORE($2, $76, "%struct.aplcb*", 0);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $79=$1;
 _execfree($79);
 var $80=$4;
 var $81=_endoper($80);
 var $82=$tempsave;
 var $83=$rite;
 var $84=(($83+4)|0);
 var $85=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 var $86=((($85)+($82))|0);
 SAFE_HEAP_STORE($84, $86, "i32", 0);
 var $87=$rite;
 var $88=$off;
 var $89=_exectok($87,$88);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $89;
  default: assert(0, "bad label: " + label);
 }

}


function _execspeg($tok,$axistok,$op,$psw){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 $1=$tok;
 $2=$axistok;
 $3=$op;
 $4=$psw;
 var $5=$3;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $9=(($8+40)|0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.execstk*", 0, 0);
 var $11=(($10+8)|0);
 var $12=$11;
 var $13=$3;
 var $14=$13;
 var $15=_lifo($12,$14);
 var $16=$15;
 $3=$16;
 label=3;break;
 case 3: 
 var $18=$2;
 var $19=($18|0)!=0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $22=(($21+40)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.execstk*", 0, 0);
 var $24=(($23+4)|0);
 var $25=$24;
 var $26=$2;
 var $27=$26;
 var $28=_lifo($25,$27);
 var $29=$28;
 $2=$29;
 label=5;break;
 case 5: 
 var $31=$1;
 var $32=($31|0)!=0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $35=(($34+40)|0);
 var $36=SAFE_HEAP_LOAD($35, "%struct.execstk*", 0, 0);
 var $37=(($36+4)|0);
 var $38=$37;
 var $39=$1;
 var $40=$39;
 var $41=_lifo($38,$40);
 var $42=$41;
 $1=$42;
 label=7;break;
 case 7: 
 var $44=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $45=(($44+56)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 $i=$46;
 _execexed();
 var $47=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $48=(($47+56)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 var $50=$49&2;
 var $51=$4;
 SAFE_HEAP_STORE($51, $50, "i32", 0);
 var $52=$i;
 var $53=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $54=(($53+56)|0);
 SAFE_HEAP_STORE($54, $52, "i32", 0);
 var $55=_execexek();
 var $56=_execgetp($55);
 var $57=_errstop(0,0,0,$56);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $57;
  default: assert(0, "bad label: " + label);
 }

}


function _execspeh($pleftorig,$left,$rite,$ixp,$ixc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $leftorig;
 var $leftsave;
 var $lp;
 var $lop;
 var $ritenew;
 var $riteprm;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $rinc;
 var $size;
 var $sw;
 var $type;
 var $ld;
 var $lo;
 var $rn;
 var $ro;
 var $td;
 var $ud;
 $2=$pleftorig;
 $3=$left;
 $4=$rite;
 $5=$ixp;
 $6=$ixc;
 $ritenew=0;
 $rinc=0;
 $sw=0;
 var $7=$4;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&110;
 $type=$10;
 var $11=$6;
 var $12=($11|0)>1;
 if($12){label=2;break;}else{var $20=0;label=3;break;}
 case 2: 
 var $14=$6;
 var $15=$4;
 var $16=(($15+8)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=($14|0)==($17|0);
 var $20=$18;label=3;break;
 case 3: 
 var $20;
 var $21=($20&1);
 $sw=$21;
 var $22=$sw;
 var $23=($22|0)!=0;
 if($23){label=4;break;}else{label=8;break;}
 case 4: 
 var $25=$type;
 var $26=($25|0)!=32;
 if($26){label=5;break;}else{label=8;break;}
 case 5: 
 $rinc=1;
 var $28=$type;
 var $29=_getcb(0,1,$28,0,0);
 $riteprm=$29;
 $ritenew=$29;
 var $30=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $31=($30|0)!=0;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=21;break;
 case 7: 
 var $34=$4;
 var $35=(($34)|0);
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "i8*", 0, 0);
 $ro=$37;
 var $38=$ritenew;
 var $39=(($38)|0);
 var $40=$39;
 var $41=SAFE_HEAP_LOAD($40, "i8*", 0, 0);
 $rn=$41;
 label=9;break;
 case 8: 
 var $43=$4;
 $riteprm=$43;
 $ritenew=$43;
 label=9;break;
 case 9: 
 var $45=$ritenew;
 var $46=(($45+20)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 $size=$47;
 $i=0;
 label=10;break;
 case 10: 
 var $49=$i;
 var $50=$6;
 var $51=($49|0)<($50|0);
 if($51){label=11;break;}else{label=18;break;}
 case 11: 
 var $53=$sw;
 var $54=($53|0)!=0;
 if($54){label=12;break;}else{label=16;break;}
 case 12: 
 var $56=$rinc;
 var $57=($56|0)!=0;
 if($57){label=13;break;}else{label=14;break;}
 case 13: 
 var $59=$rn;
 var $60=$ro;
 var $61=$i;
 var $62=$size;
 var $63=(Math_imul($61,$62)|0);
 var $64=(($60+$63)|0);
 var $65=$type;
 var $66=_dtacopy($59,$64,1,1,$65);
 $td=$66;
 label=15;break;
 case 14: 
 var $68=$4;
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "%struct.aplcb**", 0, 0);
 var $72=$i;
 var $73=(($71+($72<<2))|0);
 var $74=SAFE_HEAP_LOAD($73, "%struct.aplcb*", 0, 0);
 $riteprm=$74;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $77=$2;
 var $78=$3;
 var $79=$riteprm;
 var $80=$5;
 var $81=$i;
 var $82=(($80+($81<<2))|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=_execspei($77,$78,$79,$83);
 $j=$84;
 label=17;break;
 case 17: 
 var $86=$i;
 var $87=((($86)+(1))|0);
 $i=$87;
 label=10;break;
 case 18: 
 var $89=$rinc;
 var $90=($89|0)!=0;
 if($90){label=19;break;}else{label=20;break;}
 case 19: 
 var $92=$ritenew;
 var $93=_temp($92);
 _endoper($93);
 label=20;break;
 case 20: 
 $1=1;
 label=21;break;
 case 21: 
 var $96=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $96;
  default: assert(0, "bad label: " + label);
 }

}


function _execspei($pleftorig,$left,$rite,$ix){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $leftorig;
 var $leftsave;
 var $lp;
 var $lop;
 var $i;
 var $ip;
 var $k;
 $2=$pleftorig;
 $3=$left;
 $4=$rite;
 $5=$ix;
 $k=0;
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "%struct.aplcb*", 0, 0);
 $leftorig=$7;
 var $8=$3;
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=$10&32;
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=11;break;}
 case 2: 
 var $14=$3;
 var $15=(($14)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "%struct.aplcb**", 0, 0);
 $lp=$17;
 var $18=$leftorig;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "%struct.aplcb**", 0, 0);
 $lop=$21;
 var $22=$3;
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 $i=$24;
 label=3;break;
 case 3: 
 var $26=$i;
 var $27=((($26)-(1))|0);
 $i=$27;
 var $28=($26|0)!=0;
 if($28){label=4;break;}else{label=7;break;}
 case 4: 
 var $30=$lop;
 var $31=$i;
 var $32=(($30+($31<<2))|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.aplcb*", 0, 0);
 $leftsave=$33;
 var $34=$lop;
 var $35=$i;
 var $36=(($34+($35<<2))|0);
 var $37=$lp;
 var $38=$i;
 var $39=(($37+($38<<2))|0);
 var $40=SAFE_HEAP_LOAD($39, "%struct.aplcb*", 0, 0);
 var $41=$4;
 var $42=$5;
 var $43=_execspei($36,$40,$41,$42);
 $k=$43;
 var $44=($43|0)!=0;
 if($44){label=5;break;}else{label=6;break;}
 case 5: 
 label=7;break;
 case 6: 
 label=3;break;
 case 7: 
 var $48=$i;
 var $49=($48|0)>=0;
 if($49){label=8;break;}else{label=10;break;}
 case 8: 
 var $51=$leftsave;
 var $52=$lop;
 var $53=$i;
 var $54=(($52+($53<<2))|0);
 var $55=SAFE_HEAP_LOAD($54, "%struct.aplcb*", 0, 0);
 var $56=($51|0)!=($55|0);
 if($56){label=9;break;}else{label=10;break;}
 case 9: 
 var $58=$leftsave;
 var $59=_temp($58);
 _endoper($59);
 label=10;break;
 case 10: 
 var $61=$k;
 $1=$61;
 label=15;break;
 case 11: 
 var $63=$3;
 var $64=(($63)|0);
 var $65=$64;
 var $66=SAFE_HEAP_LOAD($65, "i32*", 0, 0);
 $ip=$66;
 var $67=$5;
 var $68=$ip;
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 $k=$69;
 var $70=($67|0)>=($69|0);
 if($70){label=12;break;}else{label=13;break;}
 case 12: 
 var $72=$5;
 var $73=$ip;
 var $74=$3;
 var $75=(($74+8)|0);
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $77=(($73+($76<<2))|0);
 var $78=((($77)-(4))|0);
 var $79=SAFE_HEAP_LOAD($78, "i32", 0, 0);
 var $80=($72|0)<=($79|0);
 if($80){label=14;break;}else{label=13;break;}
 case 13: 
 $1=0;
 label=15;break;
 case 14: 
 var $83=$2;
 var $84=$4;
 var $85=$5;
 var $86=$k;
 var $87=((($85)-($86))|0);
 var $88=_execspej($83,$84,$87);
 $1=$88;
 label=15;break;
 case 15: 
 var $90=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }

}


function _execspej($pleft,$rite,$ix){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4;
 var $lop;
 var $riteorig;
 var $i;
 var $ltype;
 var $rtype;
 var $size;
 var $ld;
 var $lo;
 var $td;
 var $ud;
 $2=$pleft;
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 $4=$ix;
 var $5=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 $riteorig=$5;
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "%struct.aplcb*", 0, 0);
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&110;
 $ltype=$10;
 var $11=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$13&110;
 $rtype=$14;
 var $15=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $16=(($15+8)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=($17|0)>1;
 var $19=($18&1);
 var $20=$ltype;
 var $21=($20|0)!=32;
 var $22=($21&1);
 var $23=$19&$22;
 var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=3;break;}
 case 2: 
 var $26=$2;
 var $27=SAFE_HEAP_LOAD($26, "%struct.aplcb*", 0, 0);
 var $28=_aplnest($27);
 var $29=_perm($28);
 var $30=$2;
 SAFE_HEAP_STORE($30, $29, "%struct.aplcb*", 0);
 $ltype=32;
 label=14;break;
 case 3: 
 var $32=$ltype;
 var $33=($32|0)!=32;
 if($33){label=4;break;}else{label=13;break;}
 case 4: 
 var $35=$ltype;
 var $36=$rtype;
 var $37=($35|0)==($36|0);
 if($37){label=5;break;}else{label=6;break;}
 case 5: 
 var $45=0;label=7;break;
 case 6: 
 var $40=$2;
 var $41=_matchoks($40,$3,70);
 var $42=0==($41|0);
 var $43=($42&1);
 var $45=$43;label=7;break;
 case 7: 
 var $45;
 $i=$45;
 var $46=$i;
 var $47=($46|0)!=0;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 var $49=$2;
 var $50=SAFE_HEAP_LOAD($49, "%struct.aplcb*", 0, 0);
 var $51=_aplnest($50);
 var $52=_perm($51);
 var $53=$2;
 SAFE_HEAP_STORE($53, $52, "%struct.aplcb*", 0);
 label=12;break;
 case 9: 
 var $55=$2;
 var $56=SAFE_HEAP_LOAD($55, "%struct.aplcb*", 0, 0);
 var $57=(($56+4)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=$58&1;
 var $60=($59|0)!=0;
 if($60){label=10;break;}else{label=11;break;}
 case 10: 
 var $62=$2;
 var $63=SAFE_HEAP_LOAD($62, "%struct.aplcb*", 0, 0);
 var $64=(($63+4)|0);
 var $65=SAFE_HEAP_LOAD($64, "i32", 0, 0);
 var $66=((($65)-(1))|0);
 SAFE_HEAP_STORE($64, $66, "i32", 0);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $71=$2;
 var $72=SAFE_HEAP_LOAD($71, "%struct.aplcb*", 0, 0);
 var $73=(($72+4)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 var $75=$74&32;
 var $76=($75|0)!=0;
 if($76){label=15;break;}else{label=16;break;}
 case 15: 
 var $78=$2;
 var $79=SAFE_HEAP_LOAD($78, "%struct.aplcb*", 0, 0);
 var $80=(($79)|0);
 var $81=$80;
 var $82=SAFE_HEAP_LOAD($81, "%struct.aplcb**", 0, 0);
 var $83=$4;
 var $84=(($82+($83<<2))|0);
 $lop=$84;
 var $85=$lop;
 var $86=SAFE_HEAP_LOAD($85, "%struct.aplcb*", 0, 0);
 var $87=_temp($86);
 _endoper($87);
 var $88=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $89=_aplcopy($88);
 var $90=$lop;
 SAFE_HEAP_STORE($90, $89, "%struct.aplcb*", 0);
 $1=1;
 label=21;break;
 case 16: 
 var $92=$2;
 var $93=SAFE_HEAP_LOAD($92, "%struct.aplcb*", 0, 0);
 var $94=(($93+20)|0);
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 $size=$95;
 var $96=$2;
 var $97=SAFE_HEAP_LOAD($96, "%struct.aplcb*", 0, 0);
 var $98=(($97+4)|0);
 var $99=SAFE_HEAP_LOAD($98, "i32", 0, 0);
 var $100=$99&110;
 $ltype=$100;
 var $101=$2;
 var $102=SAFE_HEAP_LOAD($101, "%struct.aplcb*", 0, 0);
 var $103=(($102)|0);
 var $104=$103;
 var $105=SAFE_HEAP_LOAD($104, "i8*", 0, 0);
 $lo=$105;
 var $106=$lo;
 var $107=$4;
 var $108=$size;
 var $109=(Math_imul($107,$108)|0);
 var $110=(($106+$109)|0);
 $ud=$110;
 var $111=$ltype;
 var $112=$111&32;
 var $113=($112|0)!=0;
 if($113){label=17;break;}else{label=18;break;}
 case 17: 
 var $115=$ud;
 var $116=$115;
 var $117=SAFE_HEAP_LOAD($116, "%struct.aplcb*", 0, 0);
 var $118=_temp($117);
 _endoper($118);
 label=18;break;
 case 18: 
 var $120=$ud;
 var $121=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $122=(($121)|0);
 var $123=$122;
 var $124=SAFE_HEAP_LOAD($123, "i8*", 0, 0);
 var $125=$ltype;
 var $126=_dtacopy($120,$124,1,1,$125);
 $td=$126;
 var $127=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $128=$riteorig;
 var $129=($127|0)!=($128|0);
 if($129){label=19;break;}else{label=20;break;}
 case 19: 
 var $131=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 _endoper($131);
 label=20;break;
 case 20: 
 $1=1;
 label=21;break;
 case 21: 
 var $134=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $134;
  default: assert(0, "bad label: " + label);
 }

}


function _execspek($code,$tok,$axistok,$op){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $nwa=sp;
 var $off;
 var $out;
 $1=$code;
 $2=$tok;
 $3=$axistok;
 $4=$op;
 $out=0;
 label=2;break;
 case 2: 
 var $6=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 label=9;break;
 case 4: 
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 $off=$12;
 var $13=$2;
 var $14=(($13+12)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "%struct.aplderiv.1263*", 0, 0);
 var $17=(($16+28)|0);
 var $18=(($17+20)|0);
 var $19=$18;
 SAFE_HEAP_STORE($19, 126, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0);
 var $20=$2;
 var $21=$3;
 var $22=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $23=(($22+40)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.execstk*", 0, 0);
 var $25=(($24)|0);
 var $26=SAFE_HEAP_LOAD($25, "%struct.execstk*", 0, 0);
 var $27=(($26+8)|0);
 var $28=$27;
 var $29=_pop($28);
 var $30=$29;
 var $31=_execspeg($20,$21,$30,$nwa);
 $out=$31;
 $2=0;
 $3=0;
 var $32=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $33=($32|0)!=0;
 if($33){label=5;break;}else{label=6;break;}
 case 5: 
 label=9;break;
 case 6: 
 var $36=$4;
 var $37=(($36+12)|0);
 var $38=$37;
 var $39=SAFE_HEAP_LOAD($38, "i8*", 0, 0);
 var $40=$out;
 var $41=_assign($39,$40);
 $out=$41;
 var $42=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $43=($42|0)!=0;
 if($43){label=7;break;}else{label=8;break;}
 case 7: 
 label=9;break;
 case 8: 
 var $46=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $47=(($46+40)|0);
 var $48=SAFE_HEAP_LOAD($47, "%struct.execstk*", 0, 0);
 var $49=(($48)|0);
 var $50=SAFE_HEAP_LOAD($49, "%struct.execstk*", 0, 0);
 var $51=(($50+8)|0);
 var $52=$51;
 var $53=$out;
 var $54=$off;
 var $55=_exectok($53,$54);
 var $56=$55;
 var $57=_lifo($52,$56);
 $out=0;
 label=9;break;
 case 9: 
 var $59=$out;
 var $60=($59|0)!=0;
 if($60){label=10;break;}else{label=11;break;}
 case 10: 
 var $62=$out;
 _endoper($62);
 label=11;break;
 case 11: 
 var $64=$2;
 var $65=($64|0)!=0;
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 var $67=$2;
 var $68=_execfree($67);
 label=13;break;
 case 13: 
 var $70=$3;
 var $71=($70|0)!=0;
 if($71){label=14;break;}else{label=15;break;}
 case 14: 
 var $73=$3;
 var $74=_execfree($73);
 label=15;break;
 case 15: 
 var $76=$4;
 var $77=($76|0)!=0;
 if($77){label=16;break;}else{label=17;break;}
 case 16: 
 var $79=$4;
 var $80=_execfree($79);
 label=17;break;
 case 17: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return 1;
  default: assert(0, "bad label: " + label);
 }

}


function _execspel($ptok,$pax,$parg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $hit;
 var $i;
 var $namecnt=sp;
 var $noexit;
 var $dp;
 var $wrk=(sp)+(8);
 $2=$ptok;
 $3=$pax;
 $4=$parg;
 SAFE_HEAP_STORE($namecnt, 0, "i32", 0);
 var $5=$2;
 var $6=$3;
 var $7=_execnext($5,$6,$wrk,$namecnt);
 $noexit=$7;
 var $8=$2;
 var $9=SAFE_HEAP_LOAD($8, "%struct.apltoken*", 0, 0);
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=9;break;
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "%struct.apltoken*", 0, 0);
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 if(($16|0)==-10){ label=4;break;}else if(($16|0)==-7){ label=5;break;}else{label=8;break;}
 case 4: 
 var $18=$2;
 var $19=SAFE_HEAP_LOAD($18, "%struct.apltoken*", 0, 0);
 var $20=_execspey($19);
 $hit=$20;
 label=8;break;
 case 5: 
 var $22=$2;
 var $23=SAFE_HEAP_LOAD($22, "%struct.apltoken*", 0, 0);
 var $24=(($23+12)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "i8*", 0, 0);
 var $27=$26;
 $dp=$27;
 var $28=$dp;
 var $29=(($28+20)|0);
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 var $31=$30;
 var $32=(($31)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 $i=$33;
 var $34=$i;
 if(($34|0)==15|($34|0)==64|($34|0)==60|($34|0)==77){ label=6;break;}else{label=7;break;}
 case 6: 
 var $36=$i;
 $hit=$36;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $39=$hit;
 $1=$39;
 label=9;break;
 case 9: 
 var $41=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $41;
  default: assert(0, "bad label: " + label);
 }

}


function _execspen($pleftorig,$left,$rite,$ixp,$ixc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5;
 var $6;
 var $i;
 var $ltype;
 var $rtype;
 var $ileft;
 var $oleft;
 var $sleft;
 var $replaced;
 var $saveleft;
 var $spot;
 $2=$pleftorig;
 $3=$left;
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 $5=$ixp;
 $6=$ixc;
 var $7=$3;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&32;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=11;break;}
 case 2: 
 var $13=$3;
 var $14=(($13)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "%struct.aplcb**", 0, 0);
 $ileft=$16;
 var $17=$2;
 var $18=SAFE_HEAP_LOAD($17, "%struct.aplcb*", 0, 0);
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "%struct.aplcb**", 0, 0);
 $oleft=$21;
 var $22=$3;
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 $i=$24;
 label=3;break;
 case 3: 
 var $26=$i;
 var $27=($26|0)!=0;
 if($27){label=4;break;}else{label=10;break;}
 case 4: 
 var $29=$oleft;
 var $30=(($29+4)|0);
 $oleft=$30;
 $sleft=$29;
 var $31=SAFE_HEAP_LOAD($29, "%struct.aplcb*", 0, 0);
 $saveleft=$31;
 var $32=$sleft;
 var $33=$ileft;
 var $34=(($33+4)|0);
 $ileft=$34;
 var $35=SAFE_HEAP_LOAD($33, "%struct.aplcb*", 0, 0);
 var $36=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $37=$5;
 var $38=$6;
 var $39=_execspen($32,$35,$36,$37,$38);
 var $40=($39|0)!=0;
 if($40){label=5;break;}else{label=8;break;}
 case 5: 
 var $42=$saveleft;
 var $43=$sleft;
 var $44=SAFE_HEAP_LOAD($43, "%struct.aplcb*", 0, 0);
 var $45=($42|0)!=($44|0);
 if($45){label=6;break;}else{label=7;break;}
 case 6: 
 var $47=$saveleft;
 var $48=_temp($47);
 _endoper($48);
 label=7;break;
 case 7: 
 $1=1;
 label=26;break;
 case 8: 
 label=9;break;
 case 9: 
 var $52=$i;
 var $53=((($52)-(1))|0);
 $i=$53;
 label=3;break;
 case 10: 
 SAFE_HEAP_STORE(4592, 34, "i32", 0);
 label=25;break;
 case 11: 
 var $56=$3;
 var $57=(($56)|0);
 var $58=$57;
 var $59=SAFE_HEAP_LOAD($58, "i32*", 0, 0);
 var $60=$3;
 var $61=(($60+8)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=(($59+($62<<2))|0);
 var $64=((($63)-(4))|0);
 var $65=SAFE_HEAP_LOAD($64, "i32", 0, 0);
 var $66=$5;
 var $67=SAFE_HEAP_LOAD($66, "i32", 0, 0);
 var $68=($65|0)<($67|0);
 if($68){label=12;break;}else{label=13;break;}
 case 12: 
 $1=0;
 label=26;break;
 case 13: 
 var $71=$3;
 var $72=(($71+8)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $74=$6;
 var $75=($73|0)==($74|0);
 if($75){label=14;break;}else{label=15;break;}
 case 14: 
 var $77=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $78=_aplcopy($77);
 var $79=$2;
 SAFE_HEAP_STORE($79, $78, "%struct.aplcb*", 0);
 label=24;break;
 case 15: 
 var $81=$2;
 var $82=SAFE_HEAP_LOAD($81, "%struct.aplcb*", 0, 0);
 var $83=(($82+4)|0);
 var $84=SAFE_HEAP_LOAD($83, "i32", 0, 0);
 var $85=$84&110;
 $ltype=$85;
 var $86=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $87=(($86+4)|0);
 var $88=SAFE_HEAP_LOAD($87, "i32", 0, 0);
 var $89=$88&110;
 $rtype=$89;
 var $90=$ltype;
 var $91=$rtype;
 var $92=($90|0)==($91|0);
 if($92){label=16;break;}else{label=17;break;}
 case 16: 
 var $100=0;label=18;break;
 case 17: 
 var $95=$2;
 var $96=_matchoks($95,$4,70);
 var $97=0==($96|0);
 var $98=($97&1);
 var $100=$98;label=18;break;
 case 18: 
 var $100;
 $i=$100;
 var $101=$i;
 var $102=($101|0)!=0;
 if($102){label=19;break;}else{label=20;break;}
 case 19: 
 var $104=$2;
 var $105=SAFE_HEAP_LOAD($104, "%struct.aplcb*", 0, 0);
 var $106=_aplnest($105);
 var $107=_perm($106);
 var $108=$2;
 SAFE_HEAP_STORE($108, $107, "%struct.aplcb*", 0);
 label=20;break;
 case 20: 
 var $110=$2;
 var $111=SAFE_HEAP_LOAD($110, "%struct.aplcb*", 0, 0);
 var $112=(($111+4)|0);
 var $113=SAFE_HEAP_LOAD($112, "i32", 0, 0);
 var $114=$113&110;
 $ltype=$114;
 var $115=$ltype;
 var $116=($115|0)==32;
 if($116){label=21;break;}else{label=22;break;}
 case 21: 
 var $118=$2;
 var $119=SAFE_HEAP_LOAD($118, "%struct.aplcb*", 0, 0);
 var $120=(($119)|0);
 var $121=$120;
 var $122=SAFE_HEAP_LOAD($121, "%struct.aplcb**", 0, 0);
 var $123=$5;
 var $124=SAFE_HEAP_LOAD($123, "i32", 0, 0);
 var $125=(($122+($124<<2))|0);
 $spot=$125;
 var $126=$spot;
 var $127=SAFE_HEAP_LOAD($126, "%struct.aplcb*", 0, 0);
 $replaced=$127;
 var $128=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $129=_aplcopy($128);
 var $130=$spot;
 SAFE_HEAP_STORE($130, $129, "%struct.aplcb*", 0);
 var $131=$replaced;
 var $132=_temp($131);
 _endoper($132);
 label=23;break;
 case 22: 
 var $134=$2;
 var $135=SAFE_HEAP_LOAD($134, "%struct.aplcb*", 0, 0);
 var $136=(($135)|0);
 var $137=$136;
 var $138=SAFE_HEAP_LOAD($137, "i8*", 0, 0);
 var $139=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $140=(($139)|0);
 var $141=$140;
 var $142=SAFE_HEAP_LOAD($141, "i8*", 0, 0);
 var $143=$ltype;
 var $144=_dtacopy($138,$142,1,1,$143);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 $1=1;
 label=26;break;
 case 26: 
 var $149=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $149;
  default: assert(0, "bad label: " + label);
 }

}


function _execspep(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $nametok;
 var $treetest;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $3=(($2+44)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.apltoken*", 0, 0);
 $nametok=$4;
 label=2;break;
 case 2: 
 var $6=$nametok;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=($8|0)==-4;
 if($9){label=3;break;}else{label=6;break;}
 case 3: 
 var $11=$nametok;
 var $12=(($11)|0);
 var $13=$12;
 var $14=SAFE_HEAP_LOAD($13, "%struct.apltoken*", 0, 0);
 $nametok=$14;
 var $15=$nametok;
 var $16=($15|0)==0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=7;break;
 case 5: 
 label=2;break;
 case 6: 
 var $20=$nametok;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=($22|0)==8;
 var $24=($23?1:0);
 $1=$24;
 label=7;break;
 case 7: 
 var $26=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _execspeq($pp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $nametok;
 var $i;
 var $cb;
 var $p;
 var $treetest;
 $1=$pp;
 $nametok=0;
 $p=0;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $treetest=$2;
 $i=1;
 var $3=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $4=(($3+44)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.apltoken*", 0, 0);
 $nametok=$5;
 label=2;break;
 case 2: 
 var $7=$i;
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{var $13=0;label=4;break;}
 case 3: 
 var $10=$nametok;
 var $11=($10|0)!=0;
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 if($13){label=5;break;}else{label=20;break;}
 case 5: 
 var $15=$nametok;
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=($17|0)==-4;
 if($18){label=6;break;}else{label=11;break;}
 case 6: 
 var $20=$nametok;
 var $21=(($20+12)|0);
 var $22=$21;
 var $23=SAFE_HEAP_LOAD($22, "i8*", 0, 0);
 var $24=_treenode($23);
 $p=$24;
 var $25=$p;
 var $26=0!=($25|0);
 if($26){label=7;break;}else{label=10;break;}
 case 7: 
 var $28=$p;
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 var $31=$30;
 $cb=$31;
 var $32=0!=($31|0);
 if($32){label=8;break;}else{label=10;break;}
 case 8: 
 var $34=$cb;
 var $35=(($34+4)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=$36&110;
 var $38=($37|0)!=0;
 if($38){label=9;break;}else{label=10;break;}
 case 9: 
 label=20;break;
 case 10: 
 label=19;break;
 case 11: 
 var $42=$nametok;
 var $43=(($42+4)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=($44|0)==9;
 if($45){label=12;break;}else{label=13;break;}
 case 12: 
 var $47=$i;
 var $48=((($47)+(1))|0);
 $i=$48;
 label=18;break;
 case 13: 
 var $50=$nametok;
 var $51=(($50+4)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=($52|0)==8;
 if($53){label=14;break;}else{label=17;break;}
 case 14: 
 var $55=$i;
 var $56=((($55)-(1))|0);
 $i=$56;
 var $57=$i;
 var $58=($57|0)==0;
 if($58){label=15;break;}else{label=16;break;}
 case 15: 
 $nametok=0;
 label=20;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $64=$nametok;
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "%struct.apltoken*", 0, 0);
 $nametok=$67;
 label=2;break;
 case 20: 
 var $69=$p;
 var $70=$1;
 SAFE_HEAP_STORE($70, $69, "%struct.avlnode*", 0);
 var $71=$nametok;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $71;
  default: assert(0, "bad label: " + label);
 }

}


function _execsper($p,$cbn,$nametok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $axistok=sp;
 var $op=(sp)+(8);
 var $tok=(sp)+(16);
 var $wrk;
 var $exec_sw;
 var $hit;
 var $i;
 var $namecnt=(sp)+(24);
 var $noexit;
 var $nwa;
 var $off;
 var $cb;
 var $treetest;
 $2=$p;
 $3=$cbn;
 $4=$nametok;
 $exec_sw=1;
 $hit=0;
 $nwa=0;
 $off=0;
 var $5=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $treetest=$5;
 label=2;break;
 case 2: 
 var $7=$2;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i8*", 0, 0);
 var $10=$9;
 $cb=$10;
 var $11=$3;
 var $12=$11;
 var $13=$2;
 var $14=(($13+8)|0);
 SAFE_HEAP_STORE($14, $12, "i8*", 0);
 _execinit();
 var $15=_execnext($tok,$axistok,$op,$namecnt);
 $noexit=$15;
 var $16=$cb;
 var $17=$16;
 var $18=$2;
 var $19=(($18+8)|0);
 SAFE_HEAP_STORE($19, $17, "i8*", 0);
 var $20=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $21=($20|0)!=0;
 if($21){label=4;break;}else{label=3;break;}
 case 3: 
 var $23=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 label=10;break;
 case 5: 
 var $27=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 $off=$29;
 var $30=$noexit;
 var $31=($30|0)!=0;
 if($31){label=9;break;}else{label=6;break;}
 case 6: 
 $exec_sw=0;
 _execterm();
 var $33=$4;
 var $34=$cb;
 var $35=$3;
 var $36=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $37=_execgetp($36);
 var $38=$nwa;
 var $39=_execspef($33,$34,$35,$37,$38);
 SAFE_HEAP_STORE($op, $39, "%struct.apltoken*", 0);
 var $40=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $41=($40|0)!=0;
 if($41){label=7;break;}else{label=8;break;}
 case 7: 
 $hit=1;
 var $43=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $44=(($43+40)|0);
 var $45=SAFE_HEAP_LOAD($44, "%struct.execstk*", 0, 0);
 var $46=(($45+8)|0);
 var $47=$46;
 var $48=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $49=$48;
 var $50=_lifo($47,$49);
 var $51=$50;
 SAFE_HEAP_STORE($op, $51, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($op, 0, "%struct.apltoken*", 0);
 label=8;break;
 case 8: 
 label=10;break;
 case 9: 
 var $54=$hit;
 var $55=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $56=$4;
 var $57=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $58=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $59=$cb;
 var $60=$3;
 var $61=_execspet($54,$55,$56,$57,$58,$59,$60);
 $1=$61;
 label=13;break;
 case 10: 
 var $63=$exec_sw;
 var $64=($63|0)!=0;
 if($64){label=11;break;}else{label=12;break;}
 case 11: 
 _execterm();
 label=12;break;
 case 12: 
 var $67=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 _execfree($67);
 var $68=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 _execfree($68);
 var $69=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 _execfree($69);
 var $70=$hit;
 $1=$70;
 label=13;break;
 case 13: 
 var $72=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $72;
  default: assert(0, "bad label: " + label);
 }

}


function _execspes($out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$out;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 label=11;break;
 case 4: 
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&32;
 var $11=($10|0)!=0;
 if($11){label=5;break;}else{label=6;break;}
 case 5: 
 var $13=$1;
 var $14=_enlist($13);
 $1=$14;
 label=6;break;
 case 6: 
 var $16=$1;
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=8;break;}
 case 7: 
 label=11;break;
 case 8: 
 var $20=$1;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$22&4;
 var $24=($23|0)!=0;
 if($24){label=10;break;}else{label=9;break;}
 case 9: 
 var $26=$1;
 var $27=_integer($26);
 $1=$27;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $30=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function _execspet($hit,$op,$nametok,$tok,$axistok,$cb,$cbn){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5=(sp)+(8);
 var $6;
 var $7;
 var $wrk;
 var $exec_sw;
 var $iw=(sp)+(16);
 var $nwa=(sp)+(24);
 var $out;
 $1=$hit;
 $2=$op;
 $3=$nametok;
 SAFE_HEAP_STORE($4, $tok, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($5, $axistok, "%struct.apltoken*", 0);
 $6=$cb;
 $7=$cbn;
 $exec_sw=1;
 SAFE_HEAP_STORE($nwa, 0, "i32", 0);
 $out=0;
 label=2;break;
 case 2: 
 var $9=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $10=(($9+44)|0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.apltoken*", 0, 0);
 $wrk=$11;
 var $12=0!=($11|0);
 if($12){label=3;break;}else{label=5;break;}
 case 3: 
 var $14=$wrk;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)!=8;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=_execspel($4,$5,0);
 $1=$19;
 label=5;break;
 case 5: 
 var $21=$1;
 var $22=($21|0)==-1;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 label=16;break;
 case 7: 
 var $25=$1;
 if(($25|0)==0){ label=8;break;}else if(($25|0)==60|($25|0)==77){ label=9;break;}else{label=10;break;}
 case 8: 
 var $27=SAFE_HEAP_LOAD($4, "%struct.apltoken*", 0, 0);
 var $28=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 var $29=$2;
 var $30=_execspeg($27,$28,$29,$iw);
 $out=$30;
 label=15;break;
 case 9: 
 var $32=$1;
 var $33=SAFE_HEAP_LOAD($4, "%struct.apltoken*", 0, 0);
 var $34=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 var $35=$2;
 var $36=_execspek($32,$33,$34,$35);
 $1=$36;
 label=15;break;
 case 10: 
 var $38=SAFE_HEAP_LOAD($4, "%struct.apltoken*", 0, 0);
 var $39=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 var $40=$2;
 var $41=$6;
 var $42=$7;
 var $43=_execspez($38,$39,$40,$41,$42,$nwa);
 $out=$43;
 SAFE_HEAP_STORE($5, 0, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($4, 0, "%struct.apltoken*", 0);
 var $44=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $45=($44|0)!=0;
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 label=15;break;
 case 12: 
 $exec_sw=0;
 _execterm();
 var $48=$2;
 var $49=$6;
 var $50=$7;
 var $51=$out;
 var $52=SAFE_HEAP_LOAD($nwa, "i32", 0, 0);
 var $53=_execspef($48,$49,$50,$51,$52);
 $2=$53;
 $out=0;
 var $54=$2;
 var $55=($54|0)!=0;
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 $1=1;
 var $57=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $58=(($57+40)|0);
 var $59=SAFE_HEAP_LOAD($58, "%struct.execstk*", 0, 0);
 var $60=(($59+8)|0);
 var $61=$60;
 var $62=$2;
 var $63=$62;
 var $64=_lifo($61,$63);
 var $65=$64;
 $2=$65;
 $2=0;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 $2=0;
 SAFE_HEAP_STORE($5, 0, "%struct.apltoken*", 0);
 SAFE_HEAP_STORE($4, 0, "%struct.apltoken*", 0);
 label=16;break;
 case 16: 
 var $69=$exec_sw;
 var $70=($69|0)!=0;
 if($70){label=17;break;}else{label=18;break;}
 case 17: 
 _execterm();
 label=18;break;
 case 18: 
 var $73=SAFE_HEAP_LOAD($4, "%struct.apltoken*", 0, 0);
 _execfree($73);
 var $74=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 _execfree($74);
 var $75=$2;
 _execfree($75);
 var $76=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $76;
  default: assert(0, "bad label: " + label);
 }

}


function _execspeu($leftorig,$pnix){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $icb;
 var $ocb;
 var $out;
 var $wrk;
 var $i;
 var $j;
 var $o;
 var $op;
 var $type;
 $2=$leftorig;
 $3=$pnix;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&32;
 var $8=($7|0)!=0;
 var $9=($8?32:4);
 $type=$9;
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 $o=$12;
 var $13=$o;
 var $14=$type;
 var $15=$2;
 var $16=(($15+12)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=_getcb(0,$13,$14,$17,0);
 $out=$18;
 var $19=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $20=($19|0)!=0;
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=15;break;
 case 3: 
 var $23=$out;
 var $24=(($23+12)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)>1;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 var $28=$out;
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$30;
 var $32=$2;
 var $33=(($32+16)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32*", 0, 0);
 var $35=$34;
 var $36=$out;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=_intcopy($31,$35,$38,1);
 label=5;break;
 case 5: 
 var $41=$type;
 var $42=($41|0)==32;
 if($42){label=6;break;}else{label=10;break;}
 case 6: 
 var $44=$2;
 var $45=(($44)|0);
 var $46=$45;
 var $47=SAFE_HEAP_LOAD($46, "%struct.aplcb**", 0, 0);
 $icb=$47;
 var $48=$out;
 var $49=(($48)|0);
 var $50=$49;
 var $51=SAFE_HEAP_LOAD($50, "%struct.aplcb**", 0, 0);
 $ocb=$51;
 label=7;break;
 case 7: 
 var $53=$o;
 var $54=((($53)-(1))|0);
 $o=$54;
 var $55=($53|0)!=0;
 if($55){label=8;break;}else{label=9;break;}
 case 8: 
 var $57=$icb;
 var $58=(($57+4)|0);
 $icb=$58;
 var $59=SAFE_HEAP_LOAD($57, "%struct.aplcb*", 0, 0);
 var $60=$3;
 var $61=_execspeu($59,$60);
 var $62=$ocb;
 var $63=(($62+4)|0);
 $ocb=$63;
 SAFE_HEAP_STORE($62, $61, "%struct.aplcb*", 0);
 label=7;break;
 case 9: 
 label=14;break;
 case 10: 
 var $66=$out;
 var $67=(($66)|0);
 var $68=$67;
 var $69=SAFE_HEAP_LOAD($68, "i32*", 0, 0);
 $op=$69;
 label=11;break;
 case 11: 
 var $71=$o;
 var $72=((($71)-(1))|0);
 $o=$72;
 var $73=($71|0)!=0;
 if($73){label=12;break;}else{label=13;break;}
 case 12: 
 var $75=$3;
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $77=((($76)+(1))|0);
 SAFE_HEAP_STORE($75, $77, "i32", 0);
 var $78=$op;
 var $79=(($78+4)|0);
 $op=$79;
 SAFE_HEAP_STORE($78, $76, "i32", 0);
 label=11;break;
 case 13: 
 label=14;break;
 case 14: 
 var $82=$out;
 $1=$82;
 label=15;break;
 case 15: 
 var $84=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $84;
  default: assert(0, "bad label: " + label);
 }

}


function _execspex(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $axistok=sp;
 var $nametok;
 var $op=(sp)+(8);
 var $tok=(sp)+(16);
 var $wrk;
 var $hit;
 var $i=(sp)+(24);
 var $namecnt=(sp)+(32);
 var $noexit;
 var $savelast;
 var $saveperm;
 var $cb;
 var $cbn;
 var $func=(sp)+(40);
 var $p=(sp)+(48);
 var $treetest;
 $nametok=0;
 $hit=0;
 $cbn=0;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $treetest=$2;
 var $3=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $4=($3|0)!=0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $7=(($6+44)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.apltoken*", 0, 0);
 $wrk=$8;
 var $9=0==($8|0);
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=$wrk;
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)!=9;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=19;break;
 case 5: 
 var $17=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $18=(($17+48)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 $savelast=$19;
 var $20=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $21=(($20+48)|0);
 SAFE_HEAP_STORE($21, 0, "i32", 0);
 label=6;break;
 case 6: 
 var $23=_execfun($func);
 SAFE_HEAP_STORE($i, $23, "i32", 0);
 var $24=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $25=(($24+44)|0);
 var $26=$25;
 var $27=_pop($26);
 var $28=$27;
 _execfree($28);
 var $29=_execspep();
 var $30=($29|0)!=0;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 _execinit();
 var $32=_execnext($tok,$axistok,$op,$namecnt);
 $noexit=$32;
 _execterm();
 var $33=SAFE_HEAP_LOAD($tok, "%struct.apltoken*", 0, 0);
 var $34=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $35=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $36=SAFE_HEAP_LOAD($namecnt, "i32", 0, 0);
 var $37=_execspee($33,$34,$35,$36);
 $hit=$37;
 label=15;break;
 case 8: 
 var $39=_execspeq($p);
 $nametok=$39;
 var $40=$nametok;
 var $41=($40|0)==0;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 58, "i32", 0);
 label=15;break;
 case 10: 
 var $44=$nametok;
 var $45=(($44+16)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=$46&1;
 $saveperm=$47;
 var $48=$saveperm;
 var $49=($48|0)!=0;
 if($49){label=12;break;}else{label=11;break;}
 case 11: 
 var $51=$nametok;
 var $52=(($51+16)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=$53|1;
 SAFE_HEAP_STORE($52, $54, "i32", 0);
 label=12;break;
 case 12: 
 SAFE_HEAP_STORE($i, 0, "i32", 0);
 var $56=SAFE_HEAP_LOAD($p, "%struct.avlnode*", 0, 0);
 var $57=(($56+8)|0);
 var $58=SAFE_HEAP_LOAD($57, "i8*", 0, 0);
 var $59=$58;
 var $60=_execspeu($59,$i);
 $cbn=$60;
 var $61=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $62=($61|0)!=0;
 if($62){label=13;break;}else{label=14;break;}
 case 13: 
 label=15;break;
 case 14: 
 var $65=SAFE_HEAP_LOAD($p, "%struct.avlnode*", 0, 0);
 var $66=$cbn;
 var $67=$nametok;
 var $68=_execsper($65,$66,$67);
 $hit=$68;
 label=15;break;
 case 15: 
 var $70=$savelast;
 var $71=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $72=(($71+48)|0);
 SAFE_HEAP_STORE($72, $70, "i32", 0);
 var $73=$nametok;
 var $74=($73|0)!=0;
 if($74){label=16;break;}else{label=18;break;}
 case 16: 
 var $76=$saveperm;
 var $77=($76|0)!=0;
 if($77){label=18;break;}else{label=17;break;}
 case 17: 
 var $79=$nametok;
 var $80=(($79+16)|0);
 var $81=SAFE_HEAP_LOAD($80, "i32", 0, 0);
 var $82=((($81)-(1))|0);
 SAFE_HEAP_STORE($80, $82, "i32", 0);
 var $83=$nametok;
 _execfree($83);
 label=18;break;
 case 18: 
 var $85=$cbn;
 var $86=_temp($85);
 var $87=_endoper($86);
 var $88=$hit;
 $1=$88;
 label=19;break;
 case 19: 
 var $90=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }

}


function _execspey($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $hit;
 var $i;
 var $wrk;
 $1=$tok;
 $hit=0;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=$3;
 var $5=SAFE_HEAP_LOAD($4, "i8*", 0, 0);
 var $6=$5;
 var $7=(($6)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $i=$8;
 var $9=$i;
 switch(($9|0)){case 37:case 12:case 57:case 70:case 52:case 53:case 135:{ label=2;break;}case 75:case 50:{ label=3;break;}default:{label=7;break;}}break;
 case 2: 
 var $11=$i;
 $hit=$11;
 label=7;break;
 case 3: 
 var $13=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $14=(($13+44)|0);
 var $15=SAFE_HEAP_LOAD($14, "%struct.apltoken*", 0, 0);
 $wrk=$15;
 var $16=0!=($15|0);
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$wrk;
 var $19=(($18+4)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=($20|0)==8;
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=$i;
 $hit=$23;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $26=$hit;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _execspez($tok,$axistok,$op,$leftorig,$left,$pnwa){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $ip;
 var $j;
 var $out;
 $1=$tok;
 $2=$axistok;
 $3=$op;
 $4=$leftorig;
 $5=$left;
 $6=$pnwa;
 $out=0;
 label=2;break;
 case 2: 
 var $8=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 label=5;break;
 case 4: 
 $i=0;
 var $12=$1;
 var $13=$2;
 var $14=$5;
 var $15=$3;
 var $16=(($15+8)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=_exectok($14,$17);
 var $19=$6;
 var $20=_execspeg($12,$13,$18,$19);
 $out=$20;
 $2=0;
 $1=0;
 var $21=$out;
 var $22=_execspes($21);
 $out=$22;
 label=5;break;
 case 5: 
 var $24=$1;
 _execfree($24);
 var $25=$2;
 _execfree($25);
 var $26=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _execterm(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $old;
 var $1=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $2=(($1+40)|0);
 var $3=$2;
 var $4=_pop($3);
 var $5=$4;
 $old=$5;
 var $6=$old;
 var $7=(($6+4)|0);
 _execpop($7);
 var $8=$old;
 var $9=(($8+8)|0);
 _execpop($9);
 var $10=$old;
 var $11=$10;
 _aplfree($11);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _exectok($out,$offset){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $outtok;
 $2=$out;
 $3=$offset;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $8=$3;
 var $9=_newtok(-3,0,$8,0,0);
 $outtok=$9;
 var $10=$outtok;
 var $11=0==($10|0);
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 27, "i32", 0);
 var $13=$2;
 _endoper($13);
 $1=0;
 label=6;break;
 case 5: 
 var $15=$outtok;
 var $16=(($15)|0);
 var $17=$16;
 SAFE_HEAP_STORE($17, 0, "%struct.apltoken*", 0);
 var $18=$2;
 var $19=$outtok;
 var $20=(($19+12)|0);
 var $21=$20;
 SAFE_HEAP_STORE($21, $18, "%struct.aplcb*", 0);
 var $22=$outtok;
 $1=$22;
 label=6;break;
 case 6: 
 var $24=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _execute($cmd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 var $rite;
 $2=$cmd;
 var $3=$2;
 var $4=_strlen($3);
 var $5=_getcb(0,$4,9,1,0);
 var $6=$5;
 $rite=$6;
 var $7=$2;
 var $8=$rite;
 var $9=(($8)|0);
 var $10=$9;
 SAFE_HEAP_STORE($10, $7, "i8*", 0);
 var $11=$rite;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=0==($13|0);
 if($14){label=2;break;}else{label=3;break;}
 case 2: 
 var $16=$rite;
 var $17=_errstop(0,0,$16,0);
 $1=$17;
 label=9;break;
 case 3: 
 var $19=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$rite;
 var $23=_errstop(0,0,$22,0);
 $1=$23;
 label=9;break;
 case 5: 
 var $25=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $26=(($25+52)|0);
 SAFE_HEAP_STORE($26, 0, "i32", 0);
 var $27=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $28=(($27+48)|0);
 SAFE_HEAP_STORE($28, 0, "i32", 0);
 var $29=$rite;
 var $30=_executf($29);
 $out=$30;
 var $31=$out;
 var $32=($31|0)!=0;
 if($32){label=6;break;}else{label=8;break;}
 case 6: 
 var $34=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $35=(($34+48)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=($36|0)!=3;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 var $39=$out;
 var $40=_quadout($39);
 $out=$40;
 label=8;break;
 case 8: 
 var $42=$out;
 $1=$42;
 label=9;break;
 case 9: 
 var $44=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $44;
  default: assert(0, "bad label: " + label);
 }

}


function _executf($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 $1=$rite;
 $out=0;
 var $2=_errinit();
 var $3=($2|0)!=0;
 if($3){label=5;break;}else{label=2;break;}
 case 2: 
 var $5=$1;
 var $6=_executg($5);
 $out=$6;
 var $7=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$1;
 var $11=(($10)|0);
 var $12=$11;
 var $13=SAFE_HEAP_LOAD($12, "i8*", 0, 0);
 var $14=$1;
 var $15=(($14+8)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $18=(($17+52)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=_execmsg($13,$16,$19,0);
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $23=$1;
 var $24=$out;
 var $25=_errstop(0,0,$23,$24);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _executg($rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $tok;
 var $tokhdr=sp;
 var $toksave;
 var $out;
 var $i;
 $1=$rite;
 $out=0;
 $i=0;
 label=2;break;
 case 2: 
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 label=19;break;
 case 4: 
 var $7=$1;
 var $8=($7|0)==0;
 if($8){label=5;break;}else{label=6;break;}
 case 5: 
 $i=999;
 label=19;break;
 case 6: 
 var $11=$1;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)>1;
 if($14){label=7;break;}else{label=8;break;}
 case 7: 
 $i=56;
 label=19;break;
 case 8: 
 var $17=$1;
 var $18=(($17+4)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=$19&8;
 var $21=($20|0)!=0;
 if($21){label=10;break;}else{label=9;break;}
 case 9: 
 $i=57;
 label=19;break;
 case 10: 
 var $24=$1;
 var $25=(($24)|0);
 var $26=$25;
 var $27=SAFE_HEAP_LOAD($26, "i8*", 0, 0);
 var $28=$1;
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=_execpars($27,$30);
 SAFE_HEAP_STORE($tokhdr, $31, "%struct.apltoken*", 0);
 label=11;break;
 case 11: 
 var $33=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $34=($33|0)!=0;
 if($34){label=12;break;}else{var $41=0;label=13;break;}
 case 12: 
 var $36=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $37=(($36+4)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=($38|0)==2;
 var $41=$39;label=13;break;
 case 13: 
 var $41;
 if($41){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=$tokhdr;
 var $44=_pop($43);
 var $45=$44;
 _execfree($45);
 label=11;break;
 case 15: 
 var $47=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $48=(($47+44)|0);
 var $49=SAFE_HEAP_LOAD($48, "%struct.apltoken*", 0, 0);
 $toksave=$49;
 var $50=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $51=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $52=(($51+44)|0);
 SAFE_HEAP_STORE($52, $50, "%struct.apltoken*", 0);
 var $53=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $54=($53|0)!=0;
 if($54){label=17;break;}else{label=16;break;}
 case 16: 
 var $56=SAFE_HEAP_LOAD($tokhdr, "%struct.apltoken*", 0, 0);
 var $57=($56|0)==0;
 if($57){label=17;break;}else{label=18;break;}
 case 17: 
 label=19;break;
 case 18: 
 var $60=_execexec();
 var $61=_execgetp($60);
 $out=$61;
 var $62=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $63=(($62+44)|0);
 _execpop($63);
 var $64=$toksave;
 var $65=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $66=(($65+44)|0);
 SAFE_HEAP_STORE($66, $64, "%struct.apltoken*", 0);
 label=19;break;
 case 19: 
 var $68=$i;
 var $69=$out;
 var $70=_errstop($68,0,0,$69);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $70;
  default: assert(0, "bad label: " + label);
 }

}


function _expand($left,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $axicnt=(sp)+(8);
 var $botcnt=(sp)+(16);
 var $datatyp=(sp)+(24);
 var $i;
 var $identity=(sp)+(32);
 var $topcnt=(sp)+(40);
 var $out;
 var $oldrite;
 $2=$left;
 $3=$rite;
 SAFE_HEAP_STORE($4, $axis, "i32", 0);
 SAFE_HEAP_STORE($identity, 0, "i32", 0);
 $out=0;
 var $5=$3;
 var $6=(($5+12)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=0==($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$3;
 var $11=_ravel($10);
 var $12=_temp($11);
 $3=$12;
 var $13=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 SAFE_HEAP_STORE($4, $13, "i32", 0);
 label=3;break;
 case 3: 
 var $15=$2;
 var $16=$3;
 var $17=_comexpa($15,$16,$4,$axicnt,$botcnt,$topcnt);
 $2=$17;
 var $18=$2;
 var $19=0!=($18|0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=$2;
 var $22=_temp($21);
 var $23=_iscalar(0);
 var $24=_idyadic((52),$22,$23);
 var $25=_perm($24);
 $2=$25;
 label=5;break;
 case 5: 
 var $27=$2;
 var $28=0==($27|0);
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 var $30=$2;
 var $31=$3;
 var $32=_errstop(0,$30,$31,0);
 $1=$32;
 label=24;break;
 case 7: 
 var $34=$2;
 var $35=(($34+8)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=($36|0)==0;
 if($37){label=8;break;}else{label=12;break;}
 case 8: 
 SAFE_HEAP_STORE($axicnt, 0, "i32", 0);
 var $39=$3;
 var $40=(($39+12)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=($41|0)!=0;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 var $44=$3;
 var $45=(($44+12)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $49=$46;label=11;break;
 case 10: 
 var $49=1;label=11;break;
 case 11: 
 var $49;
 SAFE_HEAP_STORE($4, $49, "i32", 0);
 label=19;break;
 case 12: 
 var $51=$2;
 var $52=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $53=_ireduce((344),$identity,$51,$52);
 var $54=_ivalue($53);
 $i=$54;
 var $55=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $56=$i;
 var $57=($55|0)!=($56|0);
 if($57){label=13;break;}else{label=18;break;}
 case 13: 
 var $59=$3;
 var $60=(($59+8)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=($61|0)>1;
 if($62){label=14;break;}else{label=18;break;}
 case 14: 
 var $64=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $65=($64|0)==1;
 if($65){label=15;break;}else{label=16;break;}
 case 15: 
 var $67=$i;
 var $68=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $69=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $70=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $71=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $72=$3;
 var $73=_expanf($67,$68,$69,$70,$71,$72);
 $3=$73;
 label=17;break;
 case 16: 
 var $75=$2;
 var $76=_temp($75);
 var $77=$3;
 var $78=$out;
 var $79=_errstop(30,$76,$77,$78);
 $1=$79;
 label=24;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $83=$3;
 var $84=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $85=$2;
 var $86=(($85+8)|0);
 var $87=SAFE_HEAP_LOAD($86, "i32", 0, 0);
 SAFE_HEAP_STORE($axicnt, $87, "i32", 0);
 var $88=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $89=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $90=_comexpb($83,$84,$87,$88,$89,$datatyp);
 $out=$90;
 var $91=0==($90|0);
 if($91){label=20;break;}else{label=21;break;}
 case 20: 
 var $93=$2;
 var $94=_temp($93);
 var $95=$3;
 var $96=$out;
 var $97=_errstop(0,$94,$95,$96);
 $1=$97;
 label=24;break;
 case 21: 
 var $99=$out;
 var $100=(($99+8)|0);
 var $101=SAFE_HEAP_LOAD($100, "i32", 0, 0);
 var $102=($101|0)!=0;
 if($102){label=22;break;}else{label=23;break;}
 case 22: 
 var $104=$2;
 var $105=$3;
 var $106=$out;
 var $107=SAFE_HEAP_LOAD($datatyp, "i32", 0, 0);
 var $108=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $109=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $110=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $111=_expane($104,$105,$106,$107,$108,$109,$110);
 label=23;break;
 case 23: 
 var $113=$2;
 var $114=_temp($113);
 var $115=$3;
 var $116=$out;
 var $117=_errstop(0,$114,$115,$116);
 $1=$117;
 label=24;break;
 case 24: 
 var $119=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $119;
  default: assert(0, "bad label: " + label);
 }

}


function _expane($left,$rite,$out,$datatyp,$axicnt,$botcnt,$topcnt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $dimptr;
 var $hit;
 var $i;
 var $incr;
 var $j;
 var $k;
 var $m;
 var $n;
 var $fillptr;
 var $from;
 var $icp;
 var $ocp;
 var $fillcb=sp;
 var $fillsave;
 var $fillwk=(sp)+(8);
 $2=$left;
 $3=$rite;
 $4=$out;
 $5=$datatyp;
 $6=$axicnt;
 $7=$botcnt;
 $8=$topcnt;
 $hit=0;
 SAFE_HEAP_STORE($fillcb, 0, "%struct.aplcb*", 0);
 $fillsave=0;
 SAFE_HEAP_STORE($fillwk, 0, "%struct.aplcb*", 0);
 var $9=$5;
 var $10=($9|0)==32;
 if($10){label=2;break;}else{label=10;break;}
 case 2: 
 var $12=$3;
 var $13=(($12+12)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=($14|0)>1;
 if($15){label=3;break;}else{label=6;break;}
 case 3: 
 $hit=1;
 var $17=$7;
 var $18=_getcb(0,$17,32,1,0);
 SAFE_HEAP_STORE($fillcb, $18, "%struct.aplcb*", 0);
 var $19=0==($18|0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=35;break;
 case 5: 
 var $22=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "%struct.aplcb**", 0, 0);
 $fillsave=$25;
 var $26=$fillwk;
 $fillptr=$26;
 label=9;break;
 case 6: 
 var $28=$3;
 var $29=_aplfill($28);
 var $30=$29;
 SAFE_HEAP_STORE($fillcb, $30, "%struct.aplcb*", 0);
 var $31=0==($30|0);
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=35;break;
 case 8: 
 var $34=$fillcb;
 $fillptr=$34;
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 var $37=$3;
 var $38=_aplfill($37);
 $fillptr=$38;
 label=11;break;
 case 11: 
 var $40=$7;
 var $41=$4;
 var $42=(($41+20)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 var $44=(Math_imul($40,$43)|0);
 $k=$44;
 var $45=$3;
 var $46=(($45+8)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=1>=($47|0);
 if($48){label=12;break;}else{label=13;break;}
 case 12: 
 $incr=0;
 label=14;break;
 case 13: 
 var $51=$k;
 $incr=$51;
 label=14;break;
 case 14: 
 var $53=$3;
 var $54=(($53)|0);
 var $55=$54;
 var $56=SAFE_HEAP_LOAD($55, "i8*", 0, 0);
 $icp=$56;
 var $57=$4;
 var $58=(($57)|0);
 var $59=$58;
 var $60=SAFE_HEAP_LOAD($59, "i8*", 0, 0);
 $ocp=$60;
 var $61=$8;
 $i=$61;
 label=15;break;
 case 15: 
 var $63=$i;
 var $64=($63|0)>0;
 if($64){label=16;break;}else{label=31;break;}
 case 16: 
 var $66=$2;
 var $67=(($66)|0);
 var $68=$67;
 var $69=SAFE_HEAP_LOAD($68, "i32*", 0, 0);
 $dimptr=$69;
 var $70=$hit;
 var $71=($70|0)!=0;
 if($71){label=17;break;}else{label=18;break;}
 case 17: 
 var $73=$icp;
 var $74=$73;
 var $75=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $76=(($75)|0);
 var $77=$76;
 SAFE_HEAP_STORE($77, $74, "%struct.aplcb**", 0);
 var $78=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $79=_aplfill($78);
 var $80=$79;
 SAFE_HEAP_STORE($fillwk, $80, "%struct.aplcb*", 0);
 label=18;break;
 case 18: 
 var $82=$6;
 $j=$82;
 label=19;break;
 case 19: 
 var $84=$j;
 var $85=($84|0)>0;
 if($85){label=20;break;}else{label=27;break;}
 case 20: 
 var $87=$dimptr;
 var $88=(($87+4)|0);
 $dimptr=$88;
 var $89=SAFE_HEAP_LOAD($87, "i32", 0, 0);
 var $90=($89|0)!=0;
 if($90){label=21;break;}else{label=24;break;}
 case 21: 
 var $92=$ocp;
 var $93=$icp;
 var $94=$7;
 var $95=$5;
 var $96=_dtacopy($92,$93,$94,1,$95);
 $ocp=$96;
 var $97=$incr;
 var $98=($97|0)!=0;
 if($98){label=22;break;}else{label=23;break;}
 case 22: 
 var $100=$k;
 var $101=$icp;
 var $102=(($101+$100)|0);
 $icp=$102;
 label=23;break;
 case 23: 
 label=25;break;
 case 24: 
 var $105=$ocp;
 var $106=$fillptr;
 var $107=$7;
 var $108=$5;
 var $109=_dtacopy($105,$106,$107,0,$108);
 $ocp=$109;
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $112=$j;
 var $113=((($112)-(1))|0);
 $j=$113;
 label=19;break;
 case 27: 
 var $115=$hit;
 var $116=($115|0)!=0;
 if($116){label=28;break;}else{label=29;break;}
 case 28: 
 var $118=SAFE_HEAP_LOAD($fillwk, "%struct.aplcb*", 0, 0);
 var $119=_temp($118);
 _endoper($119);
 SAFE_HEAP_STORE($fillwk, 0, "%struct.aplcb*", 0);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $122=$i;
 var $123=((($122)-(1))|0);
 $i=$123;
 label=15;break;
 case 31: 
 var $125=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $126=($125|0)!=0;
 if($126){label=32;break;}else{label=35;break;}
 case 32: 
 var $128=$fillsave;
 var $129=($128|0)!=0;
 if($129){label=33;break;}else{label=34;break;}
 case 33: 
 var $131=$fillsave;
 var $132=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $133=(($132)|0);
 var $134=$133;
 SAFE_HEAP_STORE($134, $131, "%struct.aplcb**", 0);
 label=34;break;
 case 34: 
 var $136=SAFE_HEAP_LOAD($fillcb, "%struct.aplcb*", 0, 0);
 var $137=_temp($136);
 _endoper($137);
 label=35;break;
 case 35: 
 var $139=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $139;
  default: assert(0, "bad label: " + label);
 }

}


function _expanf($naxicnt,$oaxicnt,$axis,$botcnt,$topcnt,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 var $datacnt;
 var $datatyp;
 var $i;
 var $j;
 var $k;
 var $vp;
 var $wp;
 $1=$naxicnt;
 $2=$oaxicnt;
 $3=$axis;
 $4=$botcnt;
 $5=$topcnt;
 $6=$rite;
 $out=0;
 label=2;break;
 case 2: 
 var $8=$1;
 var $9=$4;
 var $10=(Math_imul($8,$9)|0);
 var $11=$5;
 var $12=(Math_imul($10,$11)|0);
 $datacnt=$12;
 var $13=$6;
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=$15&110;
 $datatyp=$16;
 var $17=$datacnt;
 var $18=$datatyp;
 var $19=((($18)+(1))|0);
 var $20=$6;
 var $21=(($20+12)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=_getcb(0,$17,$19,$22,0);
 $out=$23;
 var $24=$out;
 var $25=($24|0)==0;
 if($25){label=3;break;}else{label=4;break;}
 case 3: 
 label=13;break;
 case 4: 
 var $28=$out;
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$30;
 var $32=$6;
 var $33=(($32+16)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32*", 0, 0);
 var $35=$34;
 var $36=$6;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=_intcopy($31,$35,$38,1);
 var $40=$1;
 var $41=$out;
 var $42=(($41+16)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32*", 0, 0);
 var $44=$3;
 var $45=(($43+($44<<2))|0);
 var $46=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $47=(((-$46))|0);
 var $48=(($45+($47<<2))|0);
 SAFE_HEAP_STORE($48, $40, "i32", 0);
 var $49=$out;
 var $50=(($49)|0);
 var $51=$50;
 var $52=SAFE_HEAP_LOAD($51, "i8*", 0, 0);
 $vp=$52;
 var $53=$6;
 var $54=(($53)|0);
 var $55=$54;
 var $56=SAFE_HEAP_LOAD($55, "i8*", 0, 0);
 $wp=$56;
 var $57=$5;
 $i=$57;
 label=5;break;
 case 5: 
 var $59=$i;
 var $60=($59|0)!=0;
 if($60){label=6;break;}else{label=12;break;}
 case 6: 
 var $62=$1;
 $j=$62;
 label=7;break;
 case 7: 
 var $64=$j;
 var $65=($64|0)!=0;
 if($65){label=8;break;}else{label=10;break;}
 case 8: 
 var $67=$vp;
 var $68=$wp;
 var $69=$4;
 var $70=$datatyp;
 var $71=_dtacopy($67,$68,$69,1,$70);
 $vp=$71;
 label=9;break;
 case 9: 
 var $73=$j;
 var $74=((($73)-(1))|0);
 $j=$74;
 label=7;break;
 case 10: 
 var $76=$4;
 var $77=$out;
 var $78=(($77+20)|0);
 var $79=SAFE_HEAP_LOAD($78, "i32", 0, 0);
 var $80=(Math_imul($76,$79)|0);
 var $81=$wp;
 var $82=(($81+$80)|0);
 $wp=$82;
 label=11;break;
 case 11: 
 var $84=$i;
 var $85=((($84)-(1))|0);
 $i=$85;
 label=5;break;
 case 12: 
 label=13;break;
 case 13: 
 var $88=$6;
 var $89=$out;
 var $90=_errstop(0,0,$88,$89);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }

}


function _expp($num,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$num;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=Math_exp($4);
 var $6=$2;
 SAFE_HEAP_STORE($6, $5, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _expunge($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tok;
 var $cb;
 var $i;
 $2=$fp;
 var $3=$2;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $7=$2;
 var $8=(($7+24)|0);
 var $9=SAFE_HEAP_LOAD($8, "%struct.aplcb*", 0, 0);
 var $10=0!=($9|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$2;
 var $13=(($12+24)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.aplcb*", 0, 0);
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$16|1;
 SAFE_HEAP_STORE($15, $17, "i32", 0);
 var $18=$2;
 var $19=(($18+24)|0);
 var $20=SAFE_HEAP_LOAD($19, "%struct.aplcb*", 0, 0);
 _endoper($20);
 label=5;break;
 case 5: 
 var $22=$2;
 var $23=(($22+32)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.apltoken**", 0, 0);
 var $25=$24;
 _aplfree($25);
 var $26=$2;
 var $27=(($26+20)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32*", 0, 0);
 var $29=$28;
 _aplfree($29);
 var $30=$2;
 var $31=(($30+36)|0);
 var $32=SAFE_HEAP_LOAD($31, "%struct.apltoken*", 0, 0);
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=_expungf($32,$35);
 var $37=$2;
 var $38=$37;
 _aplfree($38);
 $1=0;
 label=6;break;
 case 6: 
 var $40=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $40;
  default: assert(0, "bad label: " + label);
 }

}


function _expungf($tokary,$tokcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tok;
 var $cb;
 $2=$tokary;
 $3=$tokcnt;
 var $4=$2;
 $tok=$4;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=((($6)-(1))|0);
 $3=$7;
 var $8=($6|0)!=0;
 if($8){label=3;break;}else{label=9;break;}
 case 3: 
 var $10=$tok;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 if(($12|0)==7|($12|0)==-3){ label=4;break;}else if(($12|0)==-4){ label=7;break;}else{label=8;break;}
 case 4: 
 var $14=$tok;
 var $15=(($14+12)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "%struct.aplcb*", 0, 0);
 $cb=$17;
 var $18=0!=($17|0);
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=$cb;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$22|1;
 SAFE_HEAP_STORE($21, $23, "i32", 0);
 var $24=$cb;
 _endoper($24);
 label=6;break;
 case 6: 
 label=8;break;
 case 7: 
 var $27=$tok;
 var $28=(($27+12)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 _aplfree($30);
 label=8;break;
 case 8: 
 var $32=$tok;
 var $33=(($32+24)|0);
 $tok=$33;
 label=2;break;
 case 9: 
 var $35=$2;
 var $36=$35;
 _aplfree($36);
 var $37=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _expx($num,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $a;
 var $b;
 var $z;
 var $wa=sp;
 var $wb=(sp)+(16);
 $1=$num;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $a=$4;
 var $5=$1;
 var $6=(($5+8)|0);
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 $b=$7;
 var $8=$b;
 var $9=Math_sin($8);
 var $10=(($wa)|0);
 SAFE_HEAP_STORE($10, $9, "double", 0);
 var $11=(($wa)|0);
 var $12=(($11+8)|0);
 SAFE_HEAP_STORE($12, 0, "double", 0);
 var $13=(($wa)|0);
 var $14=(($wb)|0);
 _timesx(3048,$13,$14);
 var $15=$b;
 var $16=Math_cos($15);
 var $17=(($wb)|0);
 var $18=SAFE_HEAP_LOAD($17, "double", 0, 0);
 var $19=($18)+($16);
 SAFE_HEAP_STORE($17, $19, "double", 0);
 var $20=$a;
 var $21=Math_exp($20);
 var $22=(($wa)|0);
 SAFE_HEAP_STORE($22, $21, "double", 0);
 var $23=(($wa)|0);
 var $24=(($wb)|0);
 var $25=$2;
 _timesx($23,$24,$25);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _factorl($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $a;
 var $b;
 var $c;
 var $d;
 var $i;
 $2=$n;
 var $3=$2;
 $d=$3;
 $c=1;
 $b=1;
 var $4=$d;
 var $5=$4==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$d;
 var $8=$7==1;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $1=1;
 label=23;break;
 case 4: 
 var $11=$d;
 var $12=$11<0;
 if($12){label=5;break;}else{label=11;break;}
 case 5: 
 label=6;break;
 case 6: 
 var $15=$d;
 var $16=$15<0;
 if($16){label=7;break;}else{label=8;break;}
 case 7: 
 var $18=$d;
 var $19=($18)+(1);
 $d=$19;
 var $20=$d;
 var $21=$c;
 var $22=($21)*($20);
 $c=$22;
 label=6;break;
 case 8: 
 var $24=$d;
 var $25=$24==0;
 if($25){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 36, "i32", 0);
 $1=-.0;
 label=23;break;
 case 10: 
 var $28=$c;
 var $29=$b;
 var $30=($29)/($28);
 $b=$30;
 label=18;break;
 case 11: 
 var $32=$d;
 $c=$32;
 label=12;break;
 case 12: 
 var $34=$d;
 var $35=($34)-(1);
 $d=$35;
 var $36=$d;
 var $37=$36<=1;
 if($37){label=13;break;}else{label=14;break;}
 case 13: 
 label=15;break;
 case 14: 
 var $40=$d;
 var $41=$c;
 var $42=($41)*($40);
 $c=$42;
 label=12;break;
 case 15: 
 var $44=$d;
 var $45=$44==1;
 if($45){label=16;break;}else{label=17;break;}
 case 16: 
 var $47=$c;
 $1=$47;
 label=23;break;
 case 17: 
 var $49=$c;
 $b=$49;
 label=18;break;
 case 18: 
 var $51=$d;
 var $52=($51)-((0.5));
 $d=$52;
 var $53=SAFE_HEAP_LOAD(3040, "double", 0, 0);
 var $54=$d;
 var $55=($53)*($54);
 $c=$55;
 var $56=SAFE_HEAP_LOAD(2984, "double", 0, 0);
 var $57=$d;
 var $58=($56)+($57);
 $a=$58;
 $i=0;
 label=19;break;
 case 19: 
 var $60=$i;
 var $61=($60|0)<6;
 if($61){label=20;break;}else{label=22;break;}
 case 20: 
 var $63=$c;
 var $64=$i;
 var $65=((2992+($64<<3))|0);
 var $66=SAFE_HEAP_LOAD($65, "double", 0, 0);
 var $67=($63)+($66);
 var $68=$d;
 var $69=($67)*($68);
 $c=$69;
 var $70=$a;
 var $71=$d;
 var $72=($70)*($71);
 var $73=$i;
 var $74=((2936+($73<<3))|0);
 var $75=SAFE_HEAP_LOAD($74, "double", 0, 0);
 var $76=($72)+($75);
 $a=$76;
 label=21;break;
 case 21: 
 var $78=$i;
 var $79=((($78)+(1))|0);
 $i=$79;
 label=19;break;
 case 22: 
 var $81=$c;
 var $82=$a;
 var $83=($81)/($82);
 var $84=SAFE_HEAP_LOAD(2928, "double", 0, 0);
 var $85=($83)+($84);
 var $86=$b;
 var $87=($85)*($86);
 $c=$87;
 var $88=$c;
 $1=$88;
 label=23;break;
 case 23: 
 var $90=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }

}


function _factorlp($n,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $a;
 var $b;
 var $c;
 var $d;
 var $i;
 $1=$n;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $d=$4;
 $c=1;
 $b=1;
 var $5=$d;
 var $6=$5==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=$d;
 var $9=$8==1;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 SAFE_HEAP_STORE($11, 1, "double", 0);
 label=23;break;
 case 4: 
 var $13=$d;
 var $14=$13<0;
 if($14){label=5;break;}else{label=11;break;}
 case 5: 
 label=6;break;
 case 6: 
 var $17=$d;
 var $18=$17<0;
 if($18){label=7;break;}else{label=8;break;}
 case 7: 
 var $20=$d;
 var $21=($20)+(1);
 $d=$21;
 var $22=$d;
 var $23=$c;
 var $24=($23)*($22);
 $c=$24;
 label=6;break;
 case 8: 
 var $26=$d;
 var $27=$26==0;
 if($27){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 36, "i32", 0);
 var $29=$2;
 SAFE_HEAP_STORE($29, -.0, "double", 0);
 label=23;break;
 case 10: 
 var $31=$c;
 var $32=$b;
 var $33=($32)/($31);
 $b=$33;
 label=18;break;
 case 11: 
 var $35=$d;
 $c=$35;
 label=12;break;
 case 12: 
 var $37=$d;
 var $38=($37)-(1);
 $d=$38;
 var $39=$d;
 var $40=$39<=1;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 label=15;break;
 case 14: 
 var $43=$d;
 var $44=$c;
 var $45=($44)*($43);
 $c=$45;
 label=12;break;
 case 15: 
 var $47=$d;
 var $48=$47==1;
 if($48){label=16;break;}else{label=17;break;}
 case 16: 
 var $50=$c;
 var $51=$2;
 SAFE_HEAP_STORE($51, $50, "double", 0);
 label=23;break;
 case 17: 
 var $53=$c;
 $b=$53;
 label=18;break;
 case 18: 
 var $55=$d;
 var $56=($55)-((0.5));
 $d=$56;
 var $57=SAFE_HEAP_LOAD(2920, "double", 0, 0);
 var $58=$d;
 var $59=($57)*($58);
 $c=$59;
 var $60=SAFE_HEAP_LOAD(2864, "double", 0, 0);
 var $61=$d;
 var $62=($60)+($61);
 $a=$62;
 $i=0;
 label=19;break;
 case 19: 
 var $64=$i;
 var $65=($64|0)<6;
 if($65){label=20;break;}else{label=22;break;}
 case 20: 
 var $67=$c;
 var $68=$i;
 var $69=((2872+($68<<3))|0);
 var $70=SAFE_HEAP_LOAD($69, "double", 0, 0);
 var $71=($67)+($70);
 var $72=$d;
 var $73=($71)*($72);
 $c=$73;
 var $74=$a;
 var $75=$d;
 var $76=($74)*($75);
 var $77=$i;
 var $78=((2816+($77<<3))|0);
 var $79=SAFE_HEAP_LOAD($78, "double", 0, 0);
 var $80=($76)+($79);
 $a=$80;
 label=21;break;
 case 21: 
 var $82=$i;
 var $83=((($82)+(1))|0);
 $i=$83;
 label=19;break;
 case 22: 
 var $85=$c;
 var $86=$a;
 var $87=($85)/($86);
 var $88=SAFE_HEAP_LOAD(2808, "double", 0, 0);
 var $89=($87)+($88);
 var $90=$b;
 var $91=($89)*($90);
 $c=$91;
 var $92=$c;
 var $93=$2;
 SAFE_HEAP_STORE($93, $92, "double", 0);
 label=23;break;
 case 23: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _factorlx($carg,$cans){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$carg;
 $2=$cans;
 var $3=$1;
 var $4=$2;
 _gammax($3,$4,1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _fifo($hdr,$cur,$nxt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$hdr;
 $2=$cur;
 $3=$nxt;
 var $4=$3;
 var $5=$4;
 var $6=(($5)|0);
 SAFE_HEAP_STORE($6, 0, "%struct.el.1396*", 0);
 var $7=$2;
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$3;
 var $11=$10;
 var $12=$1;
 var $13=$12;
 var $14=(($13)|0);
 SAFE_HEAP_STORE($14, $11, "%struct.el.1396*", 0);
 label=4;break;
 case 3: 
 var $16=$3;
 var $17=$16;
 var $18=$2;
 var $19=$18;
 var $20=(($19)|0);
 SAFE_HEAP_STORE($20, $17, "%struct.el.1396*", 0);
 label=4;break;
 case 4: 
 var $22=$3;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _finda($left,$rite,$out,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $dimcb;
 var $ixcb;
 var $lccb;
 var $rccb;
 var $datatyp;
 var $i=sp;
 var $j;
 var $k;
 var $iip;
 var $jip;
 var $oip;
 $1=$left;
 $2=$rite;
 $3=$out;
 $4=$d;
 $dimcb=0;
 $ixcb=0;
 $lccb=0;
 $rccb=0;
 label=2;break;
 case 2: 
 var $6=$1;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=$8&110;
 $datatyp=$9;
 var $10=$3;
 var $11=(($10+12)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=_getcb(0,$12,5,1,0);
 $dimcb=$13;
 var $14=$3;
 var $15=(($14+12)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=_getcb(0,$16,5,1,0);
 $ixcb=$17;
 var $18=$1;
 var $19=(($18+12)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=_getcb(0,$20,5,1,0);
 $lccb=$21;
 var $22=$2;
 var $23=(($22+12)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=_getcb(0,$24,5,1,0);
 $rccb=$25;
 var $26=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $27=($26|0)!=0;
 if($27){label=3;break;}else{label=4;break;}
 case 3: 
 label=17;break;
 case 4: 
 SAFE_HEAP_STORE($i, -1, "i32", 0);
 var $30=$ixcb;
 var $31=(($30)|0);
 var $32=$31;
 var $33=SAFE_HEAP_LOAD($32, "i32*", 0, 0);
 var $34=$33;
 var $35=$i;
 var $36=$ixcb;
 var $37=(($36+8)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=_intcopy($34,$35,$38,0);
 var $40=$39;
 $oip=$40;
 $k=1;
 var $41=$4;
 SAFE_HEAP_STORE($i, $41, "i32", 0);
 var $42=$dimcb;
 var $43=(($42)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "i32*", 0, 0);
 $oip=$45;
 var $46=$3;
 var $47=(($46+16)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32*", 0, 0);
 $iip=$48;
 label=5;break;
 case 5: 
 var $50=SAFE_HEAP_LOAD($i, "i32", 0, 0);
 var $51=($50|0)!=0;
 if($51){label=6;break;}else{label=8;break;}
 case 6: 
 var $53=$iip;
 var $54=(($53+4)|0);
 $iip=$54;
 var $55=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 var $56=$oip;
 var $57=(($56+4)|0);
 $oip=$57;
 SAFE_HEAP_STORE($56, $55, "i32", 0);
 var $58=$k;
 var $59=(Math_imul($58,$55)|0);
 $k=$59;
 label=7;break;
 case 7: 
 var $61=SAFE_HEAP_LOAD($i, "i32", 0, 0);
 var $62=((($61)-(1))|0);
 SAFE_HEAP_STORE($i, $62, "i32", 0);
 label=5;break;
 case 8: 
 var $64=$3;
 var $65=(($64+12)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=$4;
 var $68=((($66)-($67))|0);
 $j=$68;
 SAFE_HEAP_STORE($i, $68, "i32", 0);
 var $69=$3;
 var $70=(($69+16)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32*", 0, 0);
 var $72=$4;
 var $73=(($71+($72<<2))|0);
 $iip=$73;
 var $74=$1;
 var $75=(($74+16)|0);
 var $76=SAFE_HEAP_LOAD($75, "i32*", 0, 0);
 $jip=$76;
 label=9;break;
 case 9: 
 var $78=SAFE_HEAP_LOAD($i, "i32", 0, 0);
 var $79=($78|0)!=0;
 if($79){label=10;break;}else{var $84=0;label=11;break;}
 case 10: 
 var $81=$j;
 var $82=($81|0)>-1;
 var $84=$82;label=11;break;
 case 11: 
 var $84;
 if($84){label=12;break;}else{label=14;break;}
 case 12: 
 var $86=$iip;
 var $87=(($86+4)|0);
 $iip=$87;
 var $88=SAFE_HEAP_LOAD($86, "i32", 0, 0);
 var $89=$jip;
 var $90=(($89+4)|0);
 $jip=$90;
 var $91=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $92=((($88)-($91))|0);
 $j=$92;
 var $93=((($92)+(1))|0);
 var $94=$oip;
 var $95=(($94+4)|0);
 $oip=$95;
 SAFE_HEAP_STORE($94, $93, "i32", 0);
 var $96=$k;
 var $97=(Math_imul($96,$93)|0);
 $k=$97;
 label=13;break;
 case 13: 
 var $99=SAFE_HEAP_LOAD($i, "i32", 0, 0);
 var $100=((($99)-(1))|0);
 SAFE_HEAP_STORE($i, $100, "i32", 0);
 label=9;break;
 case 14: 
 var $102=$j;
 var $103=($102|0)<0;
 if($103){label=15;break;}else{label=16;break;}
 case 15: 
 label=17;break;
 case 16: 
 var $106=$1;
 var $107=$2;
 var $108=$3;
 var $109=$dimcb;
 var $110=$ixcb;
 var $111=$lccb;
 var $112=$rccb;
 var $113=$k;
 var $114=$datatyp;
 var $115=$4;
 _findb($106,$107,$108,$109,$110,$111,$112,$113,$114,$115);
 label=17;break;
 case 17: 
 var $117=$dimcb;
 _endoper($117);
 var $118=$ixcb;
 _endoper($118);
 var $119=$lccb;
 _endoper($119);
 var $120=$rccb;
 _endoper($120);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _findb($left,$rite,$out,$dimcb,$ixcb,$lccb,$rccb,$k,$datatyp,$d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $i=sp;
 var $j=(sp)+(8);
 var $m;
 var $n;
 var $p=(sp)+(16);
 var $r;
 var $s;
 var $t;
 var $u;
 var $v;
 var $lip;
 var $oip;
 var $pip;
 var $rip;
 var $lcp;
 var $rcp;
 $1=$left;
 $2=$rite;
 $3=$out;
 $4=$dimcb;
 $5=$ixcb;
 $6=$lccb;
 $7=$rccb;
 $8=$k;
 $9=$datatyp;
 $10=$d;
 SAFE_HEAP_STORE($j, 1, "i32", 0);
 label=2;break;
 case 2: 
 var $12=$8;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=15;break;}
 case 3: 
 var $15=$5;
 var $16=(($15)|0);
 var $17=$16;
 var $18=SAFE_HEAP_LOAD($17, "i32*", 0, 0);
 var $19=$4;
 var $20=(($19)|0);
 var $21=$20;
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 var $23=$5;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=_indices($18,$22,$j,$25,0);
 var $27=$5;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=$5;
 var $31=(($30)|0);
 var $32=$31;
 var $33=SAFE_HEAP_LOAD($32, "i32*", 0, 0);
 var $34=$3;
 var $35=(($34+16)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32*", 0, 0);
 var $37=_indexno($29,0,$33,$36,0);
 $m=$37;
 var $38=$3;
 var $39=(($38)|0);
 var $40=$39;
 var $41=SAFE_HEAP_LOAD($40, "i32*", 0, 0);
 var $42=$m;
 var $43=(($41+($42<<2))|0);
 $oip=$43;
 $t=1;
 SAFE_HEAP_STORE($i, -1, "i32", 0);
 var $44=$6;
 var $45=(($44)|0);
 var $46=$45;
 var $47=SAFE_HEAP_LOAD($46, "i32*", 0, 0);
 var $48=$47;
 var $49=$i;
 var $50=$6;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=_intcopy($48,$49,$52,0);
 var $54=$53;
 $pip=$54;
 var $55=$7;
 var $56=(($55)|0);
 var $57=$56;
 var $58=SAFE_HEAP_LOAD($57, "i32*", 0, 0);
 var $59=$58;
 var $60=$5;
 var $61=(($60)|0);
 var $62=$61;
 var $63=SAFE_HEAP_LOAD($62, "i32*", 0, 0);
 var $64=$63;
 var $65=$10;
 var $66=_intcopy($59,$64,$65,1);
 var $67=$66;
 $pip=$67;
 var $68=$1;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 $n=$70;
 SAFE_HEAP_STORE($p, 1, "i32", 0);
 label=4;break;
 case 4: 
 var $72=$n;
 var $73=($72|0)!=0;
 if($73){label=5;break;}else{var $78=0;label=6;break;}
 case 5: 
 var $75=$t;
 var $76=($75|0)!=0;
 var $78=$76;label=6;break;
 case 6: 
 var $78;
 if($78){label=7;break;}else{label=13;break;}
 case 7: 
 var $80=$6;
 var $81=(($80)|0);
 var $82=$81;
 var $83=SAFE_HEAP_LOAD($82, "i32*", 0, 0);
 var $84=$1;
 var $85=(($84+16)|0);
 var $86=SAFE_HEAP_LOAD($85, "i32*", 0, 0);
 var $87=$6;
 var $88=(($87+8)|0);
 var $89=SAFE_HEAP_LOAD($88, "i32", 0, 0);
 var $90=_indices($83,$86,$p,$89,0);
 var $91=$6;
 var $92=(($91+8)|0);
 var $93=SAFE_HEAP_LOAD($92, "i32", 0, 0);
 var $94=$6;
 var $95=(($94)|0);
 var $96=$95;
 var $97=SAFE_HEAP_LOAD($96, "i32*", 0, 0);
 var $98=$1;
 var $99=(($98+16)|0);
 var $100=SAFE_HEAP_LOAD($99, "i32*", 0, 0);
 var $101=_indexno($93,0,$97,$100,0);
 $m=$101;
 var $102=$1;
 var $103=(($102)|0);
 var $104=$103;
 var $105=SAFE_HEAP_LOAD($104, "i8*", 0, 0);
 var $106=$m;
 var $107=$1;
 var $108=(($107+20)|0);
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 var $110=(Math_imul($106,$109)|0);
 var $111=(($105+$110)|0);
 $lcp=$111;
 var $112=$7;
 var $113=(($112+8)|0);
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 var $115=$10;
 var $116=((($114)-($115))|0);
 $v=$116;
 var $117=$6;
 var $118=(($117)|0);
 var $119=$118;
 var $120=SAFE_HEAP_LOAD($119, "i32*", 0, 0);
 $lip=$120;
 var $121=$7;
 var $122=(($121)|0);
 var $123=$122;
 var $124=SAFE_HEAP_LOAD($123, "i32*", 0, 0);
 var $125=$10;
 var $126=(($124+($125<<2))|0);
 $rip=$126;
 var $127=$5;
 var $128=(($127)|0);
 var $129=$128;
 var $130=SAFE_HEAP_LOAD($129, "i32*", 0, 0);
 var $131=$10;
 var $132=(($130+($131<<2))|0);
 $pip=$132;
 label=8;break;
 case 8: 
 var $134=$v;
 var $135=($134|0)!=0;
 if($135){label=9;break;}else{label=11;break;}
 case 9: 
 var $137=$lip;
 var $138=(($137+4)|0);
 $lip=$138;
 var $139=SAFE_HEAP_LOAD($137, "i32", 0, 0);
 var $140=$pip;
 var $141=(($140+4)|0);
 $pip=$141;
 var $142=SAFE_HEAP_LOAD($140, "i32", 0, 0);
 var $143=((($139)+($142))|0);
 var $144=$rip;
 var $145=(($144+4)|0);
 $rip=$145;
 SAFE_HEAP_STORE($144, $143, "i32", 0);
 label=10;break;
 case 10: 
 var $147=$v;
 var $148=((($147)-(1))|0);
 $v=$148;
 label=8;break;
 case 11: 
 var $150=$2;
 var $151=(($150+12)|0);
 var $152=SAFE_HEAP_LOAD($151, "i32", 0, 0);
 var $153=$7;
 var $154=(($153)|0);
 var $155=$154;
 var $156=SAFE_HEAP_LOAD($155, "i32*", 0, 0);
 var $157=$2;
 var $158=(($157+16)|0);
 var $159=SAFE_HEAP_LOAD($158, "i32*", 0, 0);
 var $160=_indexno($152,0,$156,$159,0);
 $r=$160;
 var $161=$2;
 var $162=(($161)|0);
 var $163=$162;
 var $164=SAFE_HEAP_LOAD($163, "i8*", 0, 0);
 var $165=$r;
 var $166=$2;
 var $167=(($166+20)|0);
 var $168=SAFE_HEAP_LOAD($167, "i32", 0, 0);
 var $169=(Math_imul($165,$168)|0);
 var $170=(($164+$169)|0);
 $rcp=$170;
 var $171=$9;
 var $172=$lcp;
 var $173=$rcp;
 var $174=_matchsub($171,$172,$173);
 $t=$174;
 label=12;break;
 case 12: 
 var $176=$n;
 var $177=((($176)-(1))|0);
 $n=$177;
 label=4;break;
 case 13: 
 var $179=$t;
 var $180=$oip;
 SAFE_HEAP_STORE($180, $179, "i32", 0);
 label=14;break;
 case 14: 
 var $182=$8;
 var $183=((($182)-(1))|0);
 $8=$183;
 label=2;break;
 case 15: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _find($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $out;
 var $d;
 var $i=(sp)+(16);
 var $oip;
 SAFE_HEAP_STORE($1, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($2, $rite, "%struct.aplcb*", 0);
 $out=0;
 label=2;break;
 case 2: 
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 label=15;break;
 case 4: 
 var $8=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=_getcb(0,$10,5,$13,0);
 $out=$14;
 var $15=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 label=15;break;
 case 6: 
 var $19=$out;
 var $20=(($19+12)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)>1;
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 var $24=$out;
 var $25=(($24+16)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32*", 0, 0);
 var $27=$26;
 var $28=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$30;
 var $32=$out;
 var $33=(($32+12)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=_intcopy($27,$31,$34,1);
 var $36=$35;
 $oip=$36;
 label=8;break;
 case 8: 
 var $38=$out;
 var $39=(($38+8)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=($40|0)==0;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 label=15;break;
 case 10: 
 SAFE_HEAP_STORE($i, 0, "i32", 0);
 var $44=$out;
 var $45=(($44)|0);
 var $46=$45;
 var $47=SAFE_HEAP_LOAD($46, "i32*", 0, 0);
 var $48=$47;
 var $49=$i;
 var $50=$out;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=_intcopy($48,$49,$52,0);
 var $54=$53;
 $oip=$54;
 var $55=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $56=(($55+12)|0);
 var $57=SAFE_HEAP_LOAD($56, "i32", 0, 0);
 var $58=SAFE_HEAP_LOAD($1, "%struct.aplcb*", 0, 0);
 var $59=(($58+12)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=((($57)-($60))|0);
 $d=$61;
 var $62=0>($61|0);
 if($62){label=11;break;}else{label=12;break;}
 case 11: 
 label=15;break;
 case 12: 
 var $65=_matchok($1,$2,110);
 var $66=($65|0)!=0;
 if($66){label=14;break;}else{label=13;break;}
 case 13: 
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 label=15;break;
 case 14: 
 var $69=SAFE_HEAP_LOAD($1, "%struct.aplcb*", 0, 0);
 var $70=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $71=$out;
 var $72=$d;
 _finda($69,$70,$71,$72);
 label=15;break;
 case 15: 
 var $74=SAFE_HEAP_LOAD($1, "%struct.aplcb*", 0, 0);
 var $75=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $76=$out;
 var $77=_errstop(0,$74,$75,$76);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $77;
  default: assert(0, "bad label: " + label);
 }

}


function _first($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 $1=$rite;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=$1;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&32;
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=$1;
 var $14=(($13)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "%struct.aplcb**", 0, 0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.aplcb*", 0, 0);
 var $18=_aplcopy($17);
 $out=$18;
 var $19=$out;
 var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$out;
 var $23=(($22+4)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=$24|1;
 SAFE_HEAP_STORE($23, $25, "i32", 0);
 label=5;break;
 case 5: 
 label=7;break;
 case 6: 
 var $28=_iscalar(1);
 var $29=$1;
 var $30=_take($28,$29);
 $out=$30;
 $1=0;
 label=7;break;
 case 7: 
 label=16;break;
 case 8: 
 var $33=$1;
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$35&110;
 if(($36|0)==4|($36|0)==2){ label=10;break;}else if(($36|0)==8){ label=11;break;}else if(($36|0)==32){ label=9;break;}else{label=14;break;}
 case 9: 
 var $38=$1;
 var $39=(($38)|0);
 var $40=$39;
 var $41=SAFE_HEAP_LOAD($40, "%struct.aplcb**", 0, 0);
 var $42=SAFE_HEAP_LOAD($41, "%struct.aplcb*", 0, 0);
 var $43=_first($42);
 $out=$43;
 label=15;break;
 case 10: 
 var $45=_iscalar(0);
 $out=$45;
 label=15;break;
 case 11: 
 var $47=_getcb(0,1,9,1,0);
 $out=$47;
 var $48=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $49=($48|0)==0;
 if($49){label=12;break;}else{label=13;break;}
 case 12: 
 var $51=$out;
 var $52=(($51)|0);
 var $53=$52;
 var $54=SAFE_HEAP_LOAD($53, "i8*", 0, 0);
 var $55=_strcpy($54,10280);
 label=13;break;
 case 13: 
 label=15;break;
 case 14: 
 $out=0;
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $60=$1;
 var $61=$out;
 var $62=_errstop(0,0,$60,$61);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }

}


function _floorp($num,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $nw;
 var $rw;
 $1=$num;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $nw=$4;
 var $5=$nw;
 var $6=Math_floor($5);
 $rw=$6;
 var $7=$rw;
 var $8=$nw;
 var $9=$7!=$8;
 if($9){label=2;break;}else{label=5;break;}
 case 2: 
 var $11=$rw;
 var $12=($11)+(1);
 var $13=$nw;
 var $14=($12)-($13);
 var $15=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $16=$14<$15;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=$rw;
 var $19=($18)+(1);
 $rw=$19;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $22=$rw;
 var $23=$2;
 SAFE_HEAP_STORE($23, $22, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _floorx($num,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $a;
 var $b;
 var $c;
 var $dfa;
 var $dfb;
 var $fla;
 var $flb;
 $1=$num;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $a=$4;
 var $5=$a;
 var $6=Math_floor($5);
 $fla=$6;
 var $7=$a;
 var $8=$fla;
 var $9=($7)-($8);
 $dfa=$9;
 var $10=$1;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "double", 0, 0);
 $b=$12;
 var $13=$b;
 var $14=Math_floor($13);
 $flb=$14;
 var $15=$b;
 var $16=$flb;
 var $17=($15)-($16);
 $dfb=$17;
 var $18=$dfa;
 var $19=$dfb;
 var $20=($18)+($19);
 $c=$20;
 var $21=$c;
 var $22=1>$21;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=$fla;
 var $25=$2;
 SAFE_HEAP_STORE($25, $24, "double", 0);
 var $26=$flb;
 var $27=$2;
 var $28=(($27+8)|0);
 SAFE_HEAP_STORE($28, $26, "double", 0);
 label=7;break;
 case 3: 
 var $30=$dfa;
 var $31=$dfb;
 var $32=$30>=$31;
 if($32){label=4;break;}else{label=5;break;}
 case 4: 
 var $34=$fla;
 var $35=($34)+(1);
 var $36=$2;
 SAFE_HEAP_STORE($36, $35, "double", 0);
 var $37=$flb;
 var $38=$2;
 var $39=(($38+8)|0);
 SAFE_HEAP_STORE($39, $37, "double", 0);
 label=6;break;
 case 5: 
 var $41=$fla;
 var $42=$2;
 SAFE_HEAP_STORE($42, $41, "double", 0);
 var $43=$flb;
 var $44=($43)+(1);
 var $45=$2;
 var $46=(($45+8)|0);
 SAFE_HEAP_STORE($46, $44, "double", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formata($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ip;
 var $out;
 $1=$left;
 $2=$rite;
 var $3=$2;
 var $4=(($3+12)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=_imin(1,$5);
 var $7=_getcb(0,0,9,$6,0);
 $out=$7;
 var $8=$out;
 var $9=(($8+12)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=($10|0)>1;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$out;
 var $14=(($13+16)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32*", 0, 0);
 var $16=$15;
 var $17=$2;
 var $18=(($17+16)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32*", 0, 0);
 var $20=$19;
 var $21=$out;
 var $22=(($21+12)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=_intcopy($16,$20,$23,1);
 var $25=$24;
 $ip=$25;
 label=3;break;
 case 3: 
 var $27=$1;
 var $28=$2;
 var $29=$out;
 var $30=_errstop(0,$27,$28,$29);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function _formatb($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ip;
 var $cp;
 var $out;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=_errstop(14,$7,$8,0);
 $1=$9;
 label=4;break;
 case 3: 
 var $11=$3;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$3;
 var $15=(($14+12)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=_getcb(0,$13,9,$16,0);
 $out=$17;
 var $18=$out;
 var $19=(($18+16)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32*", 0, 0);
 var $21=$20;
 var $22=$3;
 var $23=(($22+16)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32*", 0, 0);
 var $25=$24;
 var $26=$3;
 var $27=(($26+12)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=_intcopy($21,$25,$28,1);
 var $30=$29;
 $ip=$30;
 var $31=$out;
 var $32=(($31)|0);
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "i8*", 0, 0);
 var $35=$3;
 var $36=(($35)|0);
 var $37=$36;
 var $38=SAFE_HEAP_LOAD($37, "i8*", 0, 0);
 var $39=$out;
 var $40=(($39+8)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=_chrcopy($34,$38,$41,1);
 $cp=$42;
 var $43=$2;
 var $44=$3;
 var $45=$out;
 var $46=_errstop(0,$43,$44,$45);
 $1=$46;
 label=4;break;
 case 4: 
 var $48=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }

}


function _formatc($cba){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $col;
 var $cols;
 var $d;
 var $dp;
 var $e;
 var $f;
 var $fp;
 var $i;
 var $maxw;
 var $mypp;
 var $p;
 var $sp;
 var $w;
 var $wp;
 $1=$cba;
 $maxw=15;
 var $2=SAFE_HEAP_LOAD(2576, "double", 0, 0);
 var $3=(($2)&-1);
 $mypp=$3;
 var $4=$mypp;
 var $5=($4|0)<0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$mypp;
 var $8=($7|0)>10;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $mypp=10;
 label=4;break;
 case 4: 
 var $11=$1;
 var $12=(($11+16)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32*", 0, 0);
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 $cols=$15;
 var $16=$1;
 var $17=(($16)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "i32*", 0, 0);
 var $20=$1;
 var $21=(($20+16)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 var $23=(($22+4)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=$24;
 var $26=(($19+($25<<2))|0);
 $dp=$26;
 var $27=$1;
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$1;
 var $32=(($31+16)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32*", 0, 0);
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=($35<<1);
 var $37=(($30+($36<<2))|0);
 $fp=$37;
 var $38=$1;
 var $39=(($38)|0);
 var $40=$39;
 var $41=SAFE_HEAP_LOAD($40, "i32*", 0, 0);
 var $42=$1;
 var $43=(($42+16)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32*", 0, 0);
 var $45=(($44+4)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=0;
 var $48=(($41+($47<<2))|0);
 $sp=$48;
 var $49=$1;
 var $50=(($49)|0);
 var $51=$50;
 var $52=SAFE_HEAP_LOAD($51, "i32*", 0, 0);
 var $53=$1;
 var $54=(($53+16)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32*", 0, 0);
 var $56=(($55+4)|0);
 var $57=SAFE_HEAP_LOAD($56, "i32", 0, 0);
 var $58=($57<<2);
 var $59=(($52+($58<<2))|0);
 $wp=$59;
 $i=0;
 $col=0;
 label=5;break;
 case 5: 
 var $61=$col;
 var $62=$cols;
 var $63=($61|0)<($62|0);
 if($63){label=6;break;}else{label=22;break;}
 case 6: 
 var $65=$fp;
 var $66=(($65+4)|0);
 $fp=$66;
 var $67=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 $f=$67;
 var $68=$f;
 var $69=($68|0)!=0;
 var $70=($69?1:0);
 $p=$70;
 var $71=$dp;
 var $72=(($71+4)|0);
 $dp=$72;
 var $73=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 $d=$73;
 $e=0;
 var $74=$f;
 var $75=$d;
 var $76=((($74)+($75))|0);
 var $77=$mypp;
 var $78=($76|0)>($77|0);
 if($78){label=7;break;}else{label=15;break;}
 case 7: 
 var $80=$d;
 var $81=$mypp;
 var $82=($80|0)>=($81|0);
 if($82){label=8;break;}else{label=9;break;}
 case 8: 
 var $84=$1;
 var $85=(($84)|0);
 var $86=$85;
 var $87=SAFE_HEAP_LOAD($86, "i32*", 0, 0);
 var $88=$1;
 var $89=(($88+16)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32*", 0, 0);
 var $91=(($90+4)|0);
 var $92=SAFE_HEAP_LOAD($91, "i32", 0, 0);
 var $93=((($92)*(3))&-1);
 var $94=(($87+($93<<2))|0);
 var $95=$col;
 var $96=(($94+($95<<2))|0);
 SAFE_HEAP_STORE($96, 0, "i32", 0);
 $f=0;
 $p=0;
 label=10;break;
 case 9: 
 var $98=$mypp;
 var $99=$d;
 var $100=((($98)-($99))|0);
 $f=$100;
 var $101=$1;
 var $102=(($101)|0);
 var $103=$102;
 var $104=SAFE_HEAP_LOAD($103, "i32*", 0, 0);
 var $105=$1;
 var $106=(($105+16)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32*", 0, 0);
 var $108=(($107+4)|0);
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 var $110=((($109)*(3))&-1);
 var $111=(($104+($110<<2))|0);
 var $112=$col;
 var $113=(($111+($112<<2))|0);
 SAFE_HEAP_STORE($113, $100, "i32", 0);
 label=10;break;
 case 10: 
 var $115=$d;
 var $116=($115|0)==0;
 if($116){label=11;break;}else{label=14;break;}
 case 11: 
 var $118=$p;
 var $119=($118|0)!=0;
 if($119){label=12;break;}else{label=14;break;}
 case 12: 
 var $121=$wp;
 var $122=SAFE_HEAP_LOAD($121, "i32", 0, 0);
 var $123=$mypp;
 var $124=($122|0)>=($123|0);
 if($124){label=13;break;}else{label=14;break;}
 case 13: 
 $e=1;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $128=$e;
 var $129=($128|0)!=0;
 if($129){label=17;break;}else{label=16;break;}
 case 16: 
 var $131=$f;
 var $132=$p;
 var $133=((($131)+($132))|0);
 var $134=$d;
 var $135=((($133)+($134))|0);
 var $136=$d;
 var $137=($136|0)==0;
 var $138=($137&1);
 var $139=((($135)+($138))|0);
 var $140=$sp;
 var $141=(($140+4)|0);
 $sp=$141;
 var $142=SAFE_HEAP_LOAD($140, "i32", 0, 0);
 var $143=((($139)+($142))|0);
 $w=$143;
 label=17;break;
 case 17: 
 var $145=$e;
 var $146=($145|0)!=0;
 if($146){label=19;break;}else{label=18;break;}
 case 18: 
 var $148=$w;
 var $149=$maxw;
 var $150=($148|0)>($149|0);
 if($150){label=19;break;}else{label=20;break;}
 case 19: 
 var $152=$maxw;
 var $153=((($152)-(1))|0);
 $w=$153;
 var $154=$1;
 var $155=(($154)|0);
 var $156=$155;
 var $157=SAFE_HEAP_LOAD($156, "i32*", 0, 0);
 var $158=$1;
 var $159=(($158+16)|0);
 var $160=SAFE_HEAP_LOAD($159, "i32*", 0, 0);
 var $161=(($160+4)|0);
 var $162=SAFE_HEAP_LOAD($161, "i32", 0, 0);
 var $163=((($162)*(3))&-1);
 var $164=(($157+($163<<2))|0);
 var $165=$col;
 var $166=(($164+($165<<2))|0);
 SAFE_HEAP_STORE($166, -6, "i32", 0);
 label=20;break;
 case 20: 
 var $168=$w;
 var $169=$i;
 var $170=((($168)+($169))|0);
 var $171=$wp;
 var $172=(($171+4)|0);
 $wp=$172;
 SAFE_HEAP_STORE($171, $170, "i32", 0);
 $i=1;
 label=21;break;
 case 21: 
 var $174=$col;
 var $175=((($174)+(1))|0);
 $col=$175;
 label=5;break;
 case 22: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formatd($left,$rite,$cba){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $leftlen;
 $1=$left;
 $2=$rite;
 $3=$cba;
 var $4=$1;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&8;
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 SAFE_HEAP_STORE(4592, 14, "i32", 0);
 label=3;break;
 case 3: 
 var $11=$1;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)>1;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 25, "i32", 0);
 label=5;break;
 case 5: 
 var $17=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $18=($17|0)!=0;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 label=22;break;
 case 7: 
 var $21=$2;
 var $22=(($21+16)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32*", 0, 0);
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25<<1);
 $leftlen=$26;
 var $27=$1;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=($29|0)<1;
 if($30){label=10;break;}else{label=8;break;}
 case 8: 
 var $32=$1;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=($34|0)>2;
 if($35){label=9;break;}else{label=11;break;}
 case 9: 
 var $37=$1;
 var $38=(($37+8)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=$leftlen;
 var $41=($39|0)!=($40|0);
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 SAFE_HEAP_STORE(4592, 26, "i32", 0);
 label=22;break;
 case 11: 
 var $44=$1;
 var $45=(($44+8)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=$leftlen;
 var $48=($46|0)==($47|0);
 if($48){label=12;break;}else{label=13;break;}
 case 12: 
 var $50=$1;
 var $51=_integer($50);
 $1=$51;
 label=21;break;
 case 13: 
 var $53=$1;
 var $54=(($53+4)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=$55&4;
 var $57=($56|0)!=0;
 if($57){label=15;break;}else{label=14;break;}
 case 14: 
 var $59=$1;
 var $60=_integer($59);
 $1=$60;
 label=15;break;
 case 15: 
 var $62=$1;
 var $63=(($62+8)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=($64|0)==1;
 if($65){label=16;break;}else{label=17;break;}
 case 16: 
 var $67=$leftlen;
 var $68=_iscalar($67);
 var $69=_iscalar(0);
 var $70=$1;
 var $71=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $72=_cat($69,$70,$71);
 var $73=_reshape($68,$72);
 $1=$73;
 label=18;break;
 case 17: 
 var $75=$leftlen;
 var $76=_iscalar($75);
 var $77=$1;
 var $78=_reshape($76,$77);
 $1=$78;
 label=18;break;
 case 18: 
 var $80=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $81=($80|0)!=0;
 if($81){label=19;break;}else{label=20;break;}
 case 19: 
 label=22;break;
 case 20: 
 label=21;break;
 case 21: 
 var $85=$1;
 var $86=_perm($85);
 var $87=$2;
 var $88=$3;
 _formatm($86,$87,$88);
 label=22;break;
 case 22: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formate($rite,$cba){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cp;
 var $i;
 var $pp;
 var $sp;
 var $wp;
 var $wc;
 var $wn;
 $2=$rite;
 $3=$cba;
 var $4=$3;
 var $5=(($4)|0);
 var $6=$5;
 var $7=SAFE_HEAP_LOAD($6, "i32*", 0, 0);
 var $8=$3;
 var $9=(($8+16)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32*", 0, 0);
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=((($12)*(5))&-1);
 var $14=(($7+($13<<2))|0);
 $cp=$14;
 var $15=$3;
 var $16=(($15)|0);
 var $17=$16;
 var $18=SAFE_HEAP_LOAD($17, "i32*", 0, 0);
 var $19=$3;
 var $20=(($19+16)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32*", 0, 0);
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=((($23)*(3))&-1);
 var $25=(($18+($24<<2))|0);
 $pp=$25;
 var $26=$3;
 var $27=(($26)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "i32*", 0, 0);
 var $30=$3;
 var $31=(($30+16)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=(($32+4)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=($34<<2);
 var $36=(($29+($35<<2))|0);
 $wp=$36;
 var $37=$3;
 var $38=(($37)|0);
 var $39=$38;
 var $40=SAFE_HEAP_LOAD($39, "i32*", 0, 0);
 var $41=$3;
 var $42=(($41+16)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32*", 0, 0);
 var $44=(($43+4)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=0;
 var $47=(($40+($46<<2))|0);
 $sp=$47;
 var $48=$3;
 var $49=(($48+16)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32*", 0, 0);
 var $51=(($50+4)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=((($52)-(1))|0);
 $i=$53;
 label=2;break;
 case 2: 
 var $55=$i;
 var $56=($55|0)>-1;
 if($56){label=3;break;}else{label=11;break;}
 case 3: 
 var $58=$wp;
 var $59=$i;
 var $60=(($58+($59<<2))|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=($61|0)==0;
 if($62){label=4;break;}else{label=9;break;}
 case 4: 
 var $64=$pp;
 var $65=$i;
 var $66=(($64+($65<<2))|0);
 var $67=SAFE_HEAP_LOAD($66, "i32", 0, 0);
 var $68=0>($67|0);
 if($68){label=5;break;}else{label=9;break;}
 case 5: 
 var $70=$sp;
 var $71=$i;
 var $72=(($70+($71<<2))|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $74=((($73)+(6))|0);
 var $75=$pp;
 var $76=$i;
 var $77=(($75+($76<<2))|0);
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 var $79=((($74)-($78))|0);
 $wn=$79;
 var $80=$cp;
 var $81=$i;
 var $82=(($80+($81<<2))|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=((($83)+(1))|0);
 $wc=$84;
 var $85=$wc;
 var $86=$wn;
 var $87=($85|0)>($86|0);
 if($87){label=6;break;}else{label=7;break;}
 case 6: 
 var $89=$wc;
 var $93=$89;label=8;break;
 case 7: 
 var $91=$wn;
 var $93=$91;label=8;break;
 case 8: 
 var $93;
 var $94=$wp;
 var $95=$i;
 var $96=(($94+($95<<2))|0);
 SAFE_HEAP_STORE($96, $93, "i32", 0);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $99=$i;
 var $100=((($99)-(1))|0);
 $i=$100;
 label=2;break;
 case 11: 
 var $102=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $102;
  default: assert(0, "bad label: " + label);
 }

}


function _formatf($rite,$cba){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cp;
 var $d;
 var $dp;
 var $i;
 var $j;
 var $pp;
 var $sp;
 var $wp;
 var $u;
 var $wc;
 var $wn;
 $2=$rite;
 $3=$cba;
 var $4=$3;
 var $5=(($4)|0);
 var $6=$5;
 var $7=SAFE_HEAP_LOAD($6, "i32*", 0, 0);
 var $8=$3;
 var $9=(($8+16)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32*", 0, 0);
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=((($12)*(5))&-1);
 var $14=(($7+($13<<2))|0);
 $cp=$14;
 var $15=$3;
 var $16=(($15)|0);
 var $17=$16;
 var $18=SAFE_HEAP_LOAD($17, "i32*", 0, 0);
 var $19=$3;
 var $20=(($19+16)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32*", 0, 0);
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=$23;
 var $25=(($18+($24<<2))|0);
 $dp=$25;
 var $26=$3;
 var $27=(($26)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "i32*", 0, 0);
 var $30=$3;
 var $31=(($30+16)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=(($32+4)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=((($34)*(3))&-1);
 var $36=(($29+($35<<2))|0);
 $pp=$36;
 var $37=$3;
 var $38=(($37)|0);
 var $39=$38;
 var $40=SAFE_HEAP_LOAD($39, "i32*", 0, 0);
 var $41=$3;
 var $42=(($41+16)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32*", 0, 0);
 var $44=(($43+4)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=($45<<2);
 var $47=(($40+($46<<2))|0);
 $wp=$47;
 var $48=$3;
 var $49=(($48)|0);
 var $50=$49;
 var $51=SAFE_HEAP_LOAD($50, "i32*", 0, 0);
 var $52=$3;
 var $53=(($52+16)|0);
 var $54=SAFE_HEAP_LOAD($53, "i32*", 0, 0);
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=0;
 var $58=(($51+($57<<2))|0);
 $sp=$58;
 var $59=$3;
 var $60=(($59+16)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32*", 0, 0);
 var $62=(($61+4)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=((($63)-(1))|0);
 $i=$64;
 label=2;break;
 case 2: 
 var $66=$i;
 var $67=($66|0)>-1;
 if($67){label=3;break;}else{label=13;break;}
 case 3: 
 var $69=$wp;
 var $70=$i;
 var $71=(($69+($70<<2))|0);
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=($72|0)==0;
 if($73){label=4;break;}else{label=11;break;}
 case 4: 
 var $75=$pp;
 var $76=$i;
 var $77=(($75+($76<<2))|0);
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 $j=$78;
 var $79=0<=($78|0);
 if($79){label=5;break;}else{label=11;break;}
 case 5: 
 var $81=$dp;
 var $82=$i;
 var $83=(($81+($82<<2))|0);
 var $84=SAFE_HEAP_LOAD($83, "i32", 0, 0);
 $d=$84;
 var $85=$sp;
 var $86=$i;
 var $87=(($85+($86<<2))|0);
 var $88=SAFE_HEAP_LOAD($87, "i32", 0, 0);
 var $89=((($88)+(1))|0);
 var $90=$d;
 var $91=((($89)+($90))|0);
 var $92=$d;
 var $93=0==($92|0);
 if($93){label=6;break;}else{var $98=0;label=7;break;}
 case 6: 
 var $95=$j;
 var $96=($95|0)>0;
 var $98=$96;label=7;break;
 case 7: 
 var $98;
 var $99=($98&1);
 var $100=((($91)+($99))|0);
 var $101=$j;
 var $102=($101|0)>0;
 var $103=($102&1);
 var $104=((($100)+($103))|0);
 var $105=$j;
 var $106=((($104)+($105))|0);
 $wn=$106;
 var $107=$cp;
 var $108=$i;
 var $109=(($107+($108<<2))|0);
 var $110=SAFE_HEAP_LOAD($109, "i32", 0, 0);
 var $111=((($110)+(1))|0);
 $wc=$111;
 var $112=$wc;
 var $113=$wn;
 var $114=($112|0)>($113|0);
 if($114){label=8;break;}else{label=9;break;}
 case 8: 
 var $116=$wc;
 var $120=$116;label=10;break;
 case 9: 
 var $118=$wn;
 var $120=$118;label=10;break;
 case 10: 
 var $120;
 var $121=$wp;
 var $122=$i;
 var $123=(($121+($122<<2))|0);
 SAFE_HEAP_STORE($123, $120, "i32", 0);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $126=$i;
 var $127=((($126)-(1))|0);
 $i=$127;
 label=2;break;
 case 13: 
 var $129=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $129;
  default: assert(0, "bad label: " + label);
 }

}


function _formatg($rite,$cba,$dimcb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bp;
 var $newdim;
 var $out;
 var $col;
 var $cols;
 var $datacnt;
 var $i;
 var $lastdim;
 var $rank;
 var $row;
 var $rows;
 var $type;
 var $width;
 var $dip;
 var $ip;
 var $pp;
 var $sp;
 var $wp;
 var $cp;
 var $fch;
 var $dp;
 $1=$rite;
 $2=$cba;
 $3=$dimcb;
 var $4=_formaty();
 $fch=$4;
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&110;
 $type=$8;
 $datacnt=0;
 var $9=$2;
 var $10=(($9+16)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32*", 0, 0);
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=((($13)-(1))|0);
 $i=$14;
 label=2;break;
 case 2: 
 var $16=$i;
 var $17=($16|0)>=0;
 if($17){label=3;break;}else{label=5;break;}
 case 3: 
 var $19=$2;
 var $20=(($19)|0);
 var $21=$20;
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 var $23=$2;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($27<<2);
 var $29=(($22+($28<<2))|0);
 var $30=$i;
 var $31=(($29+($30<<2))|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=$datacnt;
 var $34=((($33)+($32))|0);
 $datacnt=$34;
 label=4;break;
 case 4: 
 var $36=$i;
 var $37=((($36)-(1))|0);
 $i=$37;
 label=2;break;
 case 5: 
 var $39=$datacnt;
 $lastdim=$39;
 var $40=$3;
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=((($42)-(2))|0);
 $i=$43;
 label=6;break;
 case 6: 
 var $45=$i;
 var $46=($45|0)>=0;
 if($46){label=7;break;}else{label=9;break;}
 case 7: 
 var $48=$3;
 var $49=(($48)|0);
 var $50=$49;
 var $51=SAFE_HEAP_LOAD($50, "i32*", 0, 0);
 var $52=$i;
 var $53=(($51+($52<<2))|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 var $55=$datacnt;
 var $56=(Math_imul($55,$54)|0);
 $datacnt=$56;
 label=8;break;
 case 8: 
 var $58=$i;
 var $59=((($58)-(1))|0);
 $i=$59;
 label=6;break;
 case 9: 
 var $61=$3;
 var $62=(($61+8)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=($63|0)!=0;
 if($64){label=10;break;}else{label=11;break;}
 case 10: 
 var $66=$3;
 var $67=(($66+8)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $71=$68;label=12;break;
 case 11: 
 var $71=1;label=12;break;
 case 12: 
 var $71;
 $rank=$71;
 var $72=$datacnt;
 var $73=$rank;
 var $74=_getcb(0,$72,9,$73,0);
 $out=$74;
 label=13;break;
 case 13: 
 var $76=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $77=($76|0)!=0;
 if($77){label=14;break;}else{label=15;break;}
 case 14: 
 label=29;break;
 case 15: 
 var $80=$3;
 var $81=(($80+8)|0);
 var $82=SAFE_HEAP_LOAD($81, "i32", 0, 0);
 var $83=($82|0)!=0;
 if($83){label=16;break;}else{label=17;break;}
 case 16: 
 var $85=$out;
 var $86=(($85+16)|0);
 var $87=SAFE_HEAP_LOAD($86, "i32*", 0, 0);
 var $88=$87;
 var $89=$3;
 var $90=(($89)|0);
 var $91=$90;
 var $92=SAFE_HEAP_LOAD($91, "i32*", 0, 0);
 var $93=$92;
 var $94=$out;
 var $95=(($94+12)|0);
 var $96=SAFE_HEAP_LOAD($95, "i32", 0, 0);
 var $97=((($96)-(1))|0);
 var $98=_intcopy($88,$93,$97,1);
 var $99=$98;
 $ip=$99;
 label=17;break;
 case 17: 
 var $101=$lastdim;
 var $102=$out;
 var $103=(($102+16)|0);
 var $104=SAFE_HEAP_LOAD($103, "i32*", 0, 0);
 var $105=$rank;
 var $106=(($104+($105<<2))|0);
 var $107=((($106)-(4))|0);
 SAFE_HEAP_STORE($107, $101, "i32", 0);
 var $108=$1;
 var $109=(($108)|0);
 var $110=$109;
 var $111=SAFE_HEAP_LOAD($110, "double*", 0, 0);
 $dp=$111;
 var $112=$1;
 var $113=(($112)|0);
 var $114=$113;
 var $115=SAFE_HEAP_LOAD($114, "%struct.aplcb**", 0, 0);
 $bp=$115;
 var $116=$out;
 var $117=(($116)|0);
 var $118=$117;
 var $119=SAFE_HEAP_LOAD($118, "i8*", 0, 0);
 $cp=$119;
 var $120=$1;
 var $121=(($120+16)|0);
 var $122=SAFE_HEAP_LOAD($121, "i32*", 0, 0);
 var $123=SAFE_HEAP_LOAD($122, "i32", 0, 0);
 $rows=$123;
 var $124=$1;
 var $125=(($124+16)|0);
 var $126=SAFE_HEAP_LOAD($125, "i32*", 0, 0);
 var $127=(($126+4)|0);
 var $128=SAFE_HEAP_LOAD($127, "i32", 0, 0);
 $cols=$128;
 $row=0;
 label=18;break;
 case 18: 
 var $130=$row;
 var $131=$rows;
 var $132=($130|0)<($131|0);
 if($132){label=19;break;}else{label=28;break;}
 case 19: 
 var $134=$2;
 var $135=(($134)|0);
 var $136=$135;
 var $137=SAFE_HEAP_LOAD($136, "i32*", 0, 0);
 var $138=$2;
 var $139=(($138+16)|0);
 var $140=SAFE_HEAP_LOAD($139, "i32*", 0, 0);
 var $141=(($140+4)|0);
 var $142=SAFE_HEAP_LOAD($141, "i32", 0, 0);
 var $143=($142<<2);
 var $144=(($137+($143<<2))|0);
 $wp=$144;
 var $145=$2;
 var $146=(($145)|0);
 var $147=$146;
 var $148=SAFE_HEAP_LOAD($147, "i32*", 0, 0);
 var $149=$2;
 var $150=(($149+16)|0);
 var $151=SAFE_HEAP_LOAD($150, "i32*", 0, 0);
 var $152=(($151+4)|0);
 var $153=SAFE_HEAP_LOAD($152, "i32", 0, 0);
 var $154=$153;
 var $155=(($148+($154<<2))|0);
 $dip=$155;
 var $156=$2;
 var $157=(($156)|0);
 var $158=$157;
 var $159=SAFE_HEAP_LOAD($158, "i32*", 0, 0);
 var $160=$2;
 var $161=(($160+16)|0);
 var $162=SAFE_HEAP_LOAD($161, "i32*", 0, 0);
 var $163=(($162+4)|0);
 var $164=SAFE_HEAP_LOAD($163, "i32", 0, 0);
 var $165=((($164)*(3))&-1);
 var $166=(($159+($165<<2))|0);
 $pp=$166;
 var $167=$2;
 var $168=(($167)|0);
 var $169=$168;
 var $170=SAFE_HEAP_LOAD($169, "i32*", 0, 0);
 var $171=$2;
 var $172=(($171+16)|0);
 var $173=SAFE_HEAP_LOAD($172, "i32*", 0, 0);
 var $174=(($173+4)|0);
 var $175=SAFE_HEAP_LOAD($174, "i32", 0, 0);
 var $176=($175<<3);
 var $177=(($170+($176<<2))|0);
 $sp=$177;
 $col=0;
 label=20;break;
 case 20: 
 var $179=$col;
 var $180=$cols;
 var $181=($179|0)<($180|0);
 if($181){label=21;break;}else{label=26;break;}
 case 21: 
 var $183=$type;
 var $184=($183|0)==2;
 if($184){label=22;break;}else{label=23;break;}
 case 22: 
 var $186=$dp;
 var $187=(($186+8)|0);
 $dp=$187;
 var $188=SAFE_HEAP_LOAD($186, "double", 0, 0);
 var $189=$cp;
 var $190=$wp;
 var $191=(($190+4)|0);
 $wp=$191;
 var $192=SAFE_HEAP_LOAD($190, "i32", 0, 0);
 $width=$192;
 var $193=$pp;
 var $194=(($193+4)|0);
 $pp=$194;
 var $195=SAFE_HEAP_LOAD($193, "i32", 0, 0);
 var $196=$dip;
 var $197=(($196+4)|0);
 $dip=$197;
 var $198=SAFE_HEAP_LOAD($196, "i32", 0, 0);
 var $199=$fch;
 _formath($188,$189,$192,$195,$198,$199);
 label=24;break;
 case 23: 
 var $201=$bp;
 var $202=(($201+4)|0);
 $bp=$202;
 var $203=SAFE_HEAP_LOAD($201, "%struct.aplcb*", 0, 0);
 var $204=$cp;
 var $205=$wp;
 var $206=(($205+4)|0);
 $wp=$206;
 var $207=SAFE_HEAP_LOAD($205, "i32", 0, 0);
 $width=$207;
 var $208=$pp;
 var $209=(($208+4)|0);
 $pp=$209;
 var $210=SAFE_HEAP_LOAD($208, "i32", 0, 0);
 var $211=$dip;
 var $212=(($211+4)|0);
 $dip=$212;
 var $213=SAFE_HEAP_LOAD($211, "i32", 0, 0);
 var $214=$fch;
 var $215=$sp;
 var $216=SAFE_HEAP_LOAD($215, "i32", 0, 0);
 _formatz($203,$204,$207,$210,$213,$214,$216);
 label=24;break;
 case 24: 
 var $218=$sp;
 var $219=(($218+4)|0);
 $sp=$219;
 var $220=$width;
 var $221=$cp;
 var $222=(($221+$220)|0);
 $cp=$222;
 label=25;break;
 case 25: 
 var $224=$col;
 var $225=((($224)+(1))|0);
 $col=$225;
 label=20;break;
 case 26: 
 label=27;break;
 case 27: 
 var $228=$row;
 var $229=((($228)+(1))|0);
 $row=$229;
 label=18;break;
 case 28: 
 label=29;break;
 case 29: 
 var $232=$1;
 var $233=$out;
 var $234=_errstop(0,0,$232,$233);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $234;
  default: assert(0, "bad label: " + label);
 }

}


function _formath($d,$cp,$width,$precisn,$digits,$fch){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $ch;
 var $dh;
 var $format=sp;
 var $ip;
 var $jp;
 var $kp;
 var $op;
 var $output=(sp)+(80);
 var $i;
 var $j;
 var $k;
 var $m;
 var $ovflo;
 $1=$d;
 $2=$cp;
 $3=$width;
 $4=$precisn;
 $5=$digits;
 $6=$fch;
 var $7=(($output)|0);
 SAFE_HEAP_STORE($7, 0, "i8", 0);
 var $8=$4;
 var $9=($8|0)>=0;
 if($9){label=2;break;}else{label=5;break;}
 case 2: 
 var $11=$1;
 var $12=$2;
 var $13=$3;
 var $14=$4;
 var $15=$5;
 var $16=$6;
 var $17=(($output)|0);
 var $18=_formbfn($11,$12,$13,$14,$15,$16,$17);
 $ovflo=$18;
 var $19=$ovflo;
 var $20=($19|0)!=0;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 label=22;break;
 case 4: 
 label=6;break;
 case 5: 
 var $24=$1;
 var $25=$2;
 var $26=$3;
 var $27=$4;
 var $28=$5;
 var $29=$6;
 var $30=(($output)|0);
 var $31=_formben($24,$25,$26,$27,$28,$29,$30);
 $ovflo=$31;
 label=6;break;
 case 6: 
 var $33=(($output)|0);
 $ip=$33;
 var $34=(($output)|0);
 var $35=_strlen($34);
 var $36=$3;
 var $37=_imin($35,$36);
 $j=$37;
 $i=$37;
 var $38=$3;
 var $39=$j;
 var $40=((($38)-($39))|0);
 $k=$40;
 label=7;break;
 case 7: 
 var $42=$k;
 var $43=($42|0)>0;
 if($43){label=8;break;}else{label=10;break;}
 case 8: 
 var $45=$2;
 var $46=(($45+1)|0);
 $2=$46;
 SAFE_HEAP_STORE($45, 32, "i8", 0);
 label=9;break;
 case 9: 
 var $48=$k;
 var $49=((($48)-(1))|0);
 $k=$49;
 label=7;break;
 case 10: 
 var $51=$6;
 var $52=SAFE_HEAP_LOAD($51, "i8", 0, 0);
 $ch=$52;
 var $53=(($52<<24)>>24);
 var $54=46==($53|0);
 if($54){label=11;break;}else{label=15;break;}
 case 11: 
 label=12;break;
 case 12: 
 var $57=$i;
 var $58=((($57)-(1))|0);
 $i=$58;
 var $59=($57|0)!=0;
 if($59){label=13;break;}else{label=14;break;}
 case 13: 
 var $61=$ip;
 var $62=(($61+1)|0);
 $ip=$62;
 var $63=SAFE_HEAP_LOAD($61, "i8", 0, 0);
 var $64=$2;
 var $65=(($64+1)|0);
 $2=$65;
 SAFE_HEAP_STORE($64, $63, "i8", 0);
 label=12;break;
 case 14: 
 label=22;break;
 case 15: 
 label=16;break;
 case 16: 
 var $69=$i;
 var $70=((($69)-(1))|0);
 $i=$70;
 var $71=($69|0)!=0;
 if($71){label=17;break;}else{label=21;break;}
 case 17: 
 var $73=$ip;
 var $74=(($73+1)|0);
 $ip=$74;
 var $75=SAFE_HEAP_LOAD($73, "i8", 0, 0);
 $dh=$75;
 var $76=(($75<<24)>>24);
 var $77=46==($76|0);
 if($77){label=18;break;}else{label=19;break;}
 case 18: 
 var $79=$ch;
 var $80=(($79<<24)>>24);
 var $85=$80;label=20;break;
 case 19: 
 var $82=$dh;
 var $83=(($82<<24)>>24);
 var $85=$83;label=20;break;
 case 20: 
 var $85;
 var $86=(($85)&255);
 var $87=$2;
 var $88=(($87+1)|0);
 $2=$88;
 SAFE_HEAP_STORE($87, $86, "i8", 0);
 label=16;break;
 case 21: 
 label=22;break;
 case 22: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formati($rite,$dimcb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 var $dimptr=sp;
 var $i;
 var $ip;
 var $tempsave;
 var $type;
 var $dp;
 $1=$rite;
 $2=$dimcb;
 $out=0;
 label=2;break;
 case 2: 
 var $4=$2;
 SAFE_HEAP_STORE($4, 0, "%struct.aplcb*", 0);
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&110;
 $type=$8;
 var $9=$1;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$11&1;
 $tempsave=$12;
 var $13=$tempsave;
 var $14=($13|0)!=0;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$1;
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=((($18)-(1))|0);
 SAFE_HEAP_STORE($17, $19, "i32", 0);
 label=4;break;
 case 4: 
 var $21=$1;
 var $22=_shape($21);
 var $23=_perm($22);
 var $24=$2;
 SAFE_HEAP_STORE($24, $23, "%struct.aplcb*", 0);
 var $25=$tempsave;
 var $26=$1;
 var $27=(($26+4)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=((($28)+($25))|0);
 SAFE_HEAP_STORE($27, $29, "i32", 0);
 var $30=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $31=($30|0)!=0;
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 label=17;break;
 case 6: 
 var $34=$1;
 var $35=(($34+12)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 if(($36|0)==0){ label=7;break;}else if(($36|0)==1){ label=8;break;}else if(($36|0)==2){ label=9;break;}else{label=10;break;}
 case 7: 
 var $38=(($dimptr)|0);
 var $39=(($38+4)|0);
 SAFE_HEAP_STORE($39, 1, "i32", 0);
 var $40=(($dimptr)|0);
 SAFE_HEAP_STORE($40, 1, "i32", 0);
 label=14;break;
 case 8: 
 var $42=(($dimptr)|0);
 SAFE_HEAP_STORE($42, 1, "i32", 0);
 var $43=$1;
 var $44=(($43+8)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=(($dimptr)|0);
 var $47=(($46+4)|0);
 SAFE_HEAP_STORE($47, $45, "i32", 0);
 label=14;break;
 case 9: 
 var $49=$1;
 var $50=(($49+16)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32*", 0, 0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=(($dimptr)|0);
 SAFE_HEAP_STORE($53, $52, "i32", 0);
 var $54=$1;
 var $55=(($54+16)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32*", 0, 0);
 var $57=(($56+4)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=(($dimptr)|0);
 var $60=(($59+4)|0);
 SAFE_HEAP_STORE($60, $58, "i32", 0);
 label=14;break;
 case 10: 
 var $62=$1;
 var $63=(($62+12)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=((($64)-(1))|0);
 $i=$65;
 var $66=$1;
 var $67=(($66+16)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32*", 0, 0);
 $ip=$68;
 var $69=(($dimptr)|0);
 SAFE_HEAP_STORE($69, 1, "i32", 0);
 label=11;break;
 case 11: 
 var $71=$i;
 var $72=((($71)-(1))|0);
 $i=$72;
 var $73=($71|0)!=0;
 if($73){label=12;break;}else{label=13;break;}
 case 12: 
 var $75=$ip;
 var $76=(($75+4)|0);
 $ip=$76;
 var $77=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $78=(($dimptr)|0);
 var $79=SAFE_HEAP_LOAD($78, "i32", 0, 0);
 var $80=(Math_imul($79,$77)|0);
 SAFE_HEAP_STORE($78, $80, "i32", 0);
 label=11;break;
 case 13: 
 var $82=$ip;
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=(($dimptr)|0);
 var $85=(($84+4)|0);
 SAFE_HEAP_STORE($85, $83, "i32", 0);
 label=14;break;
 case 14: 
 var $87=$1;
 var $88=(($87+8)|0);
 var $89=SAFE_HEAP_LOAD($88, "i32", 0, 0);
 var $90=$type;
 var $91=_getcb(0,$89,$90,2,0);
 $out=$91;
 var $92=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $93=($92|0)!=0;
 if($93){label=15;break;}else{label=16;break;}
 case 15: 
 label=17;break;
 case 16: 
 var $96=$out;
 var $97=(($96+16)|0);
 var $98=SAFE_HEAP_LOAD($97, "i32*", 0, 0);
 var $99=$98;
 var $100=(($dimptr)|0);
 var $101=$100;
 var $102=_intcopy($99,$101,2,1);
 var $103=$102;
 $ip=$103;
 var $104=$out;
 var $105=(($104)|0);
 var $106=$105;
 var $107=SAFE_HEAP_LOAD($106, "double*", 0, 0);
 var $108=$107;
 var $109=$1;
 var $110=(($109)|0);
 var $111=$110;
 var $112=SAFE_HEAP_LOAD($111, "double*", 0, 0);
 var $113=$112;
 var $114=$out;
 var $115=(($114+8)|0);
 var $116=SAFE_HEAP_LOAD($115, "i32", 0, 0);
 var $117=$type;
 var $118=_dtacopy($108,$113,$116,1,$117);
 var $119=$118;
 $dp=$119;
 label=17;break;
 case 17: 
 var $121=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $122=($121|0)!=0;
 if($122){label=18;break;}else{label=20;break;}
 case 18: 
 var $124=$2;
 var $125=SAFE_HEAP_LOAD($124, "%struct.aplcb*", 0, 0);
 var $126=($125|0)!=0;
 if($126){label=19;break;}else{label=20;break;}
 case 19: 
 var $128=$2;
 var $129=SAFE_HEAP_LOAD($128, "%struct.aplcb*", 0, 0);
 var $130=_temp($129);
 _endoper($130);
 var $131=$2;
 SAFE_HEAP_STORE($131, 0, "%struct.aplcb*", 0);
 label=20;break;
 case 20: 
 var $133=$1;
 var $134=$out;
 var $135=_errstop(0,0,$133,$134);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $135;
  default: assert(0, "bad label: " + label);
 }

}


function _formatj($rite,$cba){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $charcnt;
 var $charlen;
 var $charnew=sp;
 var $col;
 var $cols;
 var $dig;
 var $i;
 var $m=(sp)+(8);
 var $n;
 var $row;
 var $rows;
 var $s=(sp)+(16);
 var $log10;
 var $myfuzz;
 var $rp;
 var $val;
 var $valmax;
 var $valmin;
 var $wrk;
 $2=$rite;
 $3=$cba;
 $myfuzz=1e-11;
 var $4=$2;
 var $5=(($4+16)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32*", 0, 0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 $rows=$7;
 var $8=$2;
 var $9=(($8+16)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32*", 0, 0);
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 $cols=$12;
 var $13=Math_log(10);
 $log10=$13;
 $col=0;
 label=2;break;
 case 2: 
 var $15=$col;
 var $16=$cols;
 var $17=($15|0)<($16|0);
 if($17){label=3;break;}else{label=23;break;}
 case 3: 
 SAFE_HEAP_STORE($s, 0, "i32", 0);
 $n=0;
 $valmax=0;
 $valmin=1;
 $charlen=0;
 $charcnt=0;
 $row=0;
 label=4;break;
 case 4: 
 var $20=$row;
 var $21=$rows;
 var $22=($20|0)<($21|0);
 if($22){label=5;break;}else{label=21;break;}
 case 5: 
 var $24=$2;
 var $25=$row;
 var $26=$col;
 var $27=$cols;
 var $28=_formatx($24,$25,$26,$27,$charnew,$s,$m);
 $val=$28;
 var $29=SAFE_HEAP_LOAD($charnew, "i32", 0, 0);
 var $30=($29|0)!=0;
 if($30){label=7;break;}else{label=6;break;}
 case 6: 
 var $32=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $33=($32|0)!=0;
 if($33){label=7;break;}else{label=10;break;}
 case 7: 
 var $35=SAFE_HEAP_LOAD($charnew, "i32", 0, 0);
 var $36=$charlen;
 var $37=($35|0)>($36|0);
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=SAFE_HEAP_LOAD($charnew, "i32", 0, 0);
 $charlen=$39;
 label=9;break;
 case 9: 
 var $41=$charcnt;
 var $42=((($41)+(1))|0);
 $charcnt=$42;
 label=19;break;
 case 10: 
 var $44=SAFE_HEAP_LOAD($m, "i32", 0, 0);
 var $45=$n;
 var $46=($44|0)>($45|0);
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $48=SAFE_HEAP_LOAD($m, "i32", 0, 0);
 var $52=$48;label=13;break;
 case 12: 
 var $50=$n;
 var $52=$50;label=13;break;
 case 13: 
 var $52;
 $n=$52;
 var $53=$val;
 var $54=$valmax;
 var $55=$53>$54;
 if($55){label=14;break;}else{label=15;break;}
 case 14: 
 var $57=$val;
 $valmax=$57;
 label=15;break;
 case 15: 
 var $59=$val;
 var $60=$valmin;
 var $61=$59<$60;
 if($61){label=16;break;}else{label=18;break;}
 case 16: 
 var $63=$val;
 var $64=$myfuzz;
 var $65=$63>$64;
 if($65){label=17;break;}else{label=18;break;}
 case 17: 
 var $67=$val;
 $valmin=$67;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $71=$row;
 var $72=((($71)+(1))|0);
 $row=$72;
 label=4;break;
 case 21: 
 var $74=$valmax;
 var $75=_digits($74);
 SAFE_HEAP_STORE($m, $75, "i32", 0);
 var $76=$n;
 var $77=$3;
 var $78=(($77)|0);
 var $79=$78;
 var $80=SAFE_HEAP_LOAD($79, "i32*", 0, 0);
 var $81=$3;
 var $82=(($81+16)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32*", 0, 0);
 var $84=(($83+4)|0);
 var $85=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 var $86=((($85)*(3))&-1);
 var $87=(($80+($86<<2))|0);
 var $88=$col;
 var $89=(($87+($88<<2))|0);
 SAFE_HEAP_STORE($89, $76, "i32", 0);
 var $90=$n;
 var $91=$3;
 var $92=(($91)|0);
 var $93=$92;
 var $94=SAFE_HEAP_LOAD($93, "i32*", 0, 0);
 var $95=$3;
 var $96=(($95+16)|0);
 var $97=SAFE_HEAP_LOAD($96, "i32*", 0, 0);
 var $98=(($97+4)|0);
 var $99=SAFE_HEAP_LOAD($98, "i32", 0, 0);
 var $100=($99<<1);
 var $101=(($94+($100<<2))|0);
 var $102=$col;
 var $103=(($101+($102<<2))|0);
 SAFE_HEAP_STORE($103, $90, "i32", 0);
 var $104=SAFE_HEAP_LOAD($s, "i32", 0, 0);
 var $105=$3;
 var $106=(($105)|0);
 var $107=$106;
 var $108=SAFE_HEAP_LOAD($107, "i32*", 0, 0);
 var $109=$3;
 var $110=(($109+16)|0);
 var $111=SAFE_HEAP_LOAD($110, "i32*", 0, 0);
 var $112=(($111+4)|0);
 var $113=SAFE_HEAP_LOAD($112, "i32", 0, 0);
 var $114=0;
 var $115=(($108+($114<<2))|0);
 var $116=$col;
 var $117=(($115+($116<<2))|0);
 SAFE_HEAP_STORE($117, $104, "i32", 0);
 var $118=SAFE_HEAP_LOAD($m, "i32", 0, 0);
 var $119=$3;
 var $120=(($119)|0);
 var $121=$120;
 var $122=SAFE_HEAP_LOAD($121, "i32*", 0, 0);
 var $123=$3;
 var $124=(($123+16)|0);
 var $125=SAFE_HEAP_LOAD($124, "i32*", 0, 0);
 var $126=(($125+4)|0);
 var $127=SAFE_HEAP_LOAD($126, "i32", 0, 0);
 var $128=$127;
 var $129=(($122+($128<<2))|0);
 var $130=$col;
 var $131=(($129+($130<<2))|0);
 SAFE_HEAP_STORE($131, $118, "i32", 0);
 var $132=$valmin;
 var $133=$myfuzz;
 var $134=($132)+($133);
 var $135=Math_log($134);
 var $136=$log10;
 var $137=($135)/($136);
 var $138=((-.0))-($137);
 var $139=(($138)&-1);
 var $140=$3;
 var $141=(($140)|0);
 var $142=$141;
 var $143=SAFE_HEAP_LOAD($142, "i32*", 0, 0);
 var $144=$3;
 var $145=(($144+16)|0);
 var $146=SAFE_HEAP_LOAD($145, "i32*", 0, 0);
 var $147=(($146+4)|0);
 var $148=SAFE_HEAP_LOAD($147, "i32", 0, 0);
 var $149=($148<<2);
 var $150=(($143+($149<<2))|0);
 var $151=$col;
 var $152=(($150+($151<<2))|0);
 SAFE_HEAP_STORE($152, $139, "i32", 0);
 var $153=$charlen;
 var $154=$3;
 var $155=(($154)|0);
 var $156=$155;
 var $157=SAFE_HEAP_LOAD($156, "i32*", 0, 0);
 var $158=$3;
 var $159=(($158+16)|0);
 var $160=SAFE_HEAP_LOAD($159, "i32*", 0, 0);
 var $161=(($160+4)|0);
 var $162=SAFE_HEAP_LOAD($161, "i32", 0, 0);
 var $163=((($162)*(5))&-1);
 var $164=(($157+($163<<2))|0);
 var $165=$col;
 var $166=(($164+($165<<2))|0);
 SAFE_HEAP_STORE($166, $153, "i32", 0);
 var $167=$charcnt;
 var $168=$rows;
 var $169=($167|0)==($168|0);
 var $170=($169&1);
 var $171=$3;
 var $172=(($171)|0);
 var $173=$172;
 var $174=SAFE_HEAP_LOAD($173, "i32*", 0, 0);
 var $175=$3;
 var $176=(($175+16)|0);
 var $177=SAFE_HEAP_LOAD($176, "i32*", 0, 0);
 var $178=(($177+4)|0);
 var $179=SAFE_HEAP_LOAD($178, "i32", 0, 0);
 var $180=($179<<3);
 var $181=(($174+($180<<2))|0);
 var $182=$col;
 var $183=(($181+($182<<2))|0);
 SAFE_HEAP_STORE($183, $170, "i32", 0);
 label=22;break;
 case 22: 
 var $185=$col;
 var $186=((($185)+(1))|0);
 $col=$186;
 label=2;break;
 case 23: 
 var $188=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $188;
  default: assert(0, "bad label: " + label);
 }

}


function _formatk($left,$rite,$dimcb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $colcb;
 var $out;
 var $rowcb;
 var $cols;
 var $datacnt;
 var $dimptr;
 var $lastdim;
 var $rank;
 var $rows;
 $1=$left;
 $2=$rite;
 $3=$dimcb;
 $colcb=0;
 $out=0;
 $rowcb=0;
 var $4=$2;
 var $5=(($4+16)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32*", 0, 0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 $rows=$7;
 var $8=$2;
 var $9=(($8+16)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32*", 0, 0);
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 $cols=$12;
 var $13=$cols;
 var $14=($13<<1);
 var $15=_getcb(0,$14,33,1,0);
 $colcb=$15;
 var $16=$rows;
 var $17=_getcb(0,$16,2,2,0);
 $rowcb=$17;
 var $18=$rowcb;
 var $19=($18|0)!=0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 var $21=$rows;
 var $22=$rowcb;
 var $23=(($22+16)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32*", 0, 0);
 SAFE_HEAP_STORE($24, $21, "i32", 0);
 var $25=$rowcb;
 var $26=(($25+16)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32*", 0, 0);
 var $28=(($27+4)|0);
 SAFE_HEAP_STORE($28, 1, "i32", 0);
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $31=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $32=($31|0)!=0;
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 label=16;break;
 case 6: 
 var $35=$2;
 _formspp($35);
 var $36=$rowcb;
 var $37=$colcb;
 var $38=$2;
 var $39=_formldm($36,$37,$38);
 $lastdim=$39;
 var $40=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $41=($40|0)!=0;
 if($41){label=7;break;}else{label=8;break;}
 case 7: 
 label=16;break;
 case 8: 
 var $44=$rows;
 var $45=$lastdim;
 var $46=(Math_imul($44,$45)|0);
 $datacnt=$46;
 var $47=$3;
 var $48=(($47+8)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 var $50=($49|0)!=0;
 if($50){label=9;break;}else{label=10;break;}
 case 9: 
 var $52=$3;
 var $53=(($52+8)|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 var $57=$54;label=11;break;
 case 10: 
 var $57=1;label=11;break;
 case 11: 
 var $57;
 $rank=$57;
 var $58=$datacnt;
 var $59=$rank;
 var $60=_getcb(0,$58,9,$59,0);
 $out=$60;
 var $61=$out;
 var $62=($61|0)==0;
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 label=16;break;
 case 13: 
 var $65=$rank;
 var $66=($65|0)>1;
 if($66){label=14;break;}else{label=15;break;}
 case 14: 
 var $68=$out;
 var $69=(($68+16)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32*", 0, 0);
 var $71=$70;
 var $72=$3;
 var $73=(($72)|0);
 var $74=$73;
 var $75=SAFE_HEAP_LOAD($74, "i32*", 0, 0);
 var $76=$75;
 var $77=$out;
 var $78=(($77+12)|0);
 var $79=SAFE_HEAP_LOAD($78, "i32", 0, 0);
 var $80=((($79)-(1))|0);
 var $81=_intcopy($71,$76,$80,1);
 var $82=$81;
 $dimptr=$82;
 var $83=$lastdim;
 var $84=$dimptr;
 SAFE_HEAP_STORE($84, $83, "i32", 0);
 label=15;break;
 case 15: 
 var $86=$2;
 var $87=$out;
 var $88=$colcb;
 _formbtk($86,$87,$88);
 label=16;break;
 case 16: 
 var $90=$colcb;
 _endoper($90);
 var $91=$rowcb;
 var $92=_temp($91);
 _endoper($92);
 var $93=$3;
 var $94=_temp($93);
 _endoper($94);
 var $95=$2;
 var $96=_temp($95);
 _endoper($96);
 var $97=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $97;
  default: assert(0, "bad label: " + label);
 }

}


function _formatl($to,$from,$start){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $divider;
 var $offset;
 var $cp;
 var $orgto;
 var $orgfrom;
 var $orgstart;
 $2=$to;
 $3=$from;
 $4=$start;
 $divider=0;
 $offset=-1;
 var $5=$2;
 $orgto=$5;
 var $6=$3;
 $orgfrom=$6;
 var $7=$4;
 var $8=SAFE_HEAP_LOAD($7, "i8*", 0, 0);
 $orgstart=$8;
 var $9=$4;
 SAFE_HEAP_STORE($9, 0, "i8*", 0);
 var $10=$orgstart;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=4;break;}
 case 2: 
 var $13=$3;
 var $14=SAFE_HEAP_LOAD($13, "i8", 0, 0);
 var $15=(($14<<24)>>24);
 var $16=($15|0)!=32;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 $divider=2;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $20=$3;
 var $21=(($20+1)|0);
 $3=$21;
 var $22=SAFE_HEAP_LOAD($20, "i8", 0, 0);
 var $23=$2;
 var $24=(($23+1)|0);
 $2=$24;
 $cp=$23;
 SAFE_HEAP_STORE($23, $22, "i8", 0);
 var $25=(($22<<24)>>24);
 var $26=0!=($25|0);
 if($26){label=6;break;}else{label=24;break;}
 case 6: 
 var $28=$cp;
 var $29=SAFE_HEAP_LOAD($28, "i8", 0, 0);
 var $30=(($29<<24)>>24);
 var $31=($30|0)==32;
 if($31){label=7;break;}else{label=10;break;}
 case 7: 
 var $33=$4;
 var $34=SAFE_HEAP_LOAD($33, "i8*", 0, 0);
 var $35=($34|0)!=0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 label=24;break;
 case 9: 
 $divider=1;
 $offset=-1;
 label=23;break;
 case 10: 
 var $39=$offset;
 var $40=($39|0)==-1;
 if($40){label=12;break;}else{label=11;break;}
 case 11: 
 var $42=$divider;
 var $43=($42|0)==2;
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 var $45=$cp;
 var $46=$orgto;
 var $47=$45;
 var $48=$46;
 var $49=((($47)-($48))|0);
 $offset=$49;
 label=13;break;
 case 13: 
 var $51=$cp;
 var $52=SAFE_HEAP_LOAD($51, "i8", 0, 0);
 var $53=(($52<<24)>>24);
 var $54=($53|0)>=48;
 if($54){label=14;break;}else{label=22;break;}
 case 14: 
 var $56=$cp;
 var $57=SAFE_HEAP_LOAD($56, "i8", 0, 0);
 var $58=(($57<<24)>>24);
 var $59=($58|0)<=57;
 if($59){label=15;break;}else{label=22;break;}
 case 15: 
 var $61=$divider;
 var $62=($61|0)!=0;
 if($62){label=16;break;}else{label=17;break;}
 case 16: 
 var $64=$orgto;
 var $65=$offset;
 var $66=(($64+$65)|0);
 SAFE_HEAP_STORE($66, 0, "i8", 0);
 var $67=$orgfrom;
 var $68=$offset;
 var $69=(($67+$68)|0);
 $1=$69;
 label=25;break;
 case 17: 
 var $71=$cp;
 var $72=SAFE_HEAP_LOAD($71, "i8", 0, 0);
 var $73=(($72<<24)>>24);
 var $74=($73|0)==54;
 if($74){label=18;break;}else{label=19;break;}
 case 18: 
 var $76=$cp;
 var $77=(($76+1)|0);
 SAFE_HEAP_STORE($77, 0, "i8", 0);
 var $78=$3;
 $1=$78;
 label=25;break;
 case 19: 
 var $80=$4;
 var $81=SAFE_HEAP_LOAD($80, "i8*", 0, 0);
 var $82=($81|0)==0;
 if($82){label=20;break;}else{label=21;break;}
 case 20: 
 var $84=$cp;
 var $85=$4;
 SAFE_HEAP_STORE($85, $84, "i8*", 0);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=5;break;
 case 24: 
 var $90=$cp;
 SAFE_HEAP_STORE($90, 0, "i8", 0);
 var $91=$3;
 var $92=((($91)-(1))|0);
 $1=$92;
 label=25;break;
 case 25: 
 var $94=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }

}


function _formatm($left,$rite,$cba){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bp;
 var $i;
 var $j;
 var $k;
 var $lp;
 var $pp;
 var $w;
 var $wp;
 var $zp;
 $1=$left;
 $2=$rite;
 $3=$cba;
 var $4=$3;
 var $5=(($4+16)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32*", 0, 0);
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $i=$8;
 label=2;break;
 case 2: 
 var $10=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 label=16;break;
 case 4: 
 var $14=$1;
 var $15=(($14)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "i32*", 0, 0);
 $lp=$17;
 var $18=$3;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "i32*", 0, 0);
 var $22=$3;
 var $23=(($22+16)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32*", 0, 0);
 var $25=(($24+4)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=((($26)*(6))&-1);
 var $28=(($21+($27<<2))|0);
 $bp=$28;
 var $29=$3;
 var $30=(($29)|0);
 var $31=$30;
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=$3;
 var $34=(($33+16)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32*", 0, 0);
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=((($37)*(3))&-1);
 var $39=(($32+($38<<2))|0);
 $pp=$39;
 var $40=$3;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "i32*", 0, 0);
 var $44=$3;
 var $45=(($44+16)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32*", 0, 0);
 var $47=(($46+4)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=($48<<2);
 var $50=(($43+($49<<2))|0);
 $wp=$50;
 var $51=$3;
 var $52=(($51)|0);
 var $53=$52;
 var $54=SAFE_HEAP_LOAD($53, "i32*", 0, 0);
 var $55=$3;
 var $56=(($55+16)|0);
 var $57=SAFE_HEAP_LOAD($56, "i32*", 0, 0);
 var $58=(($57+4)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=((($59)*(7))&-1);
 var $61=(($54+($60<<2))|0);
 $zp=$61;
 var $62=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 $j=$62;
 $k=0;
 label=5;break;
 case 5: 
 var $64=$i;
 var $65=((($64)-(1))|0);
 $i=$65;
 var $66=($64|0)!=0;
 if($66){label=6;break;}else{label=11;break;}
 case 6: 
 var $68=$j;
 var $69=((($68)+(1))|0);
 $j=$69;
 var $70=$bp;
 var $71=(($70+4)|0);
 $bp=$71;
 SAFE_HEAP_STORE($70, $68, "i32", 0);
 var $72=$lp;
 var $73=(($72+4)|0);
 $lp=$73;
 var $74=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $75=$wp;
 var $76=(($75+4)|0);
 $wp=$76;
 SAFE_HEAP_STORE($75, $74, "i32", 0);
 $w=$74;
 var $77=SAFE_HEAP_LOAD(5656, "i32", 0, 0);
 var $78=$w;
 var $79=($77|0)<($78|0);
 if($79){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 28, "i32", 0);
 label=8;break;
 case 8: 
 var $82=$w;
 var $83=0>($82|0);
 if($83){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 29, "i32", 0);
 label=10;break;
 case 10: 
 var $86=$lp;
 var $87=(($86+4)|0);
 $lp=$87;
 var $88=SAFE_HEAP_LOAD($86, "i32", 0, 0);
 var $89=$pp;
 var $90=(($89+4)|0);
 $pp=$90;
 SAFE_HEAP_STORE($89, $88, "i32", 0);
 var $91=$w;
 var $92=($91|0)==0;
 var $93=($92&1);
 var $94=$zp;
 var $95=(($94+4)|0);
 $zp=$95;
 SAFE_HEAP_STORE($94, $93, "i32", 0);
 var $96=$w;
 var $97=($96|0)==0;
 var $98=($97&1);
 var $99=$k;
 var $100=$99|$98;
 $k=$100;
 label=5;break;
 case 11: 
 var $102=$1;
 var $103=_temp($102);
 _endoper($103);
 var $104=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $105=($104|0)!=0;
 if($105){label=12;break;}else{label=13;break;}
 case 12: 
 label=16;break;
 case 13: 
 var $108=$k;
 var $109=($108|0)!=0;
 if($109){label=14;break;}else{label=15;break;}
 case 14: 
 var $111=$2;
 var $112=$3;
 var $113=_formate($111,$112);
 var $114=$2;
 var $115=$3;
 var $116=_formatf($114,$115);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formato($cc,$0,$bca,$bia,$four_switch,$seven_switch,$fcc_local){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 $2=$cc;
 var $ch=(($0)&255);
 $3=$ch;
 $4=$bca;
 $5=$bia;
 $6=$four_switch;
 $7=$seven_switch;
 $8=$fcc_local;
 var $9=$3;
 var $10=(($9<<24)>>24);
 var $11=($10|0)>=48;
 if($11){label=2;break;}else{label=9;break;}
 case 2: 
 var $13=$3;
 var $14=(($13<<24)>>24);
 var $15=($14|0)<=57;
 if($15){label=3;break;}else{label=9;break;}
 case 3: 
 var $17=$2;
 var $18=$4;
 var $19=(($18+28)|0);
 SAFE_HEAP_STORE($19, $17, "i8*", 0);
 var $20=$4;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i8*", 0, 0);
 var $23=($22|0)==0;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=$2;
 var $26=$4;
 var $27=(($26+8)|0);
 SAFE_HEAP_STORE($27, $25, "i8*", 0);
 label=5;break;
 case 5: 
 var $29=$4;
 var $30=(($29+12)|0);
 var $31=SAFE_HEAP_LOAD($30, "i8*", 0, 0);
 var $32=($31|0)==0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$5;
 var $35=(($34+4)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=((($36)+(1))|0);
 SAFE_HEAP_STORE($35, $37, "i32", 0);
 label=8;break;
 case 7: 
 var $39=$5;
 var $40=(($39+8)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=((($41)+(1))|0);
 SAFE_HEAP_STORE($40, $42, "i32", 0);
 label=8;break;
 case 8: 
 var $44=$2;
 var $45=$3;
 var $46=$4;
 var $47=$5;
 var $48=$6;
 var $49=$7;
 var $50=$8;
 _formota($44,$45,$46,$47,$48,$49,$50);
 label=10;break;
 case 9: 
 var $52=$2;
 var $53=$3;
 var $54=$4;
 var $55=$5;
 var $56=$6;
 var $57=$7;
 var $58=$8;
 _formotb($52,$53,$54,$55,$56,$57,$58);
 label=10;break;
 case 10: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formatp($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cnt;
 var $cols;
 var $i;
 var $ip;
 var $ritetype;
 var $rows;
 var $width;
 var $ce;
 var $cf;
 var $cp;
 var $field=sp;
 var $start=(sp)+(80);
 var $out;
 $2=$left;
 $3=$rite;
 SAFE_HEAP_STORE($start, 0, "i8*", 0);
 $out=0;
 var $4=$3;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&6;
 $ritetype=$7;
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$2;
 var $11=$3;
 var $12=_errstop(132,$10,0,$11);
 $1=$12;
 label=31;break;
 case 3: 
 label=4;break;
 case 4: 
 var $15=$ritetype;
 var $16=($15|0)==4;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 var $18=$3;
 var $19=_real($18);
 $3=$19;
 label=6;break;
 case 6: 
 var $21=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $22=($21|0)!=0;
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 label=30;break;
 case 8: 
 var $25=$2;
 var $26=(($25+8)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=$2;
 var $29=(($28)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "i8*", 0, 0);
 $cp=$31;
 var $32=(($31+$27)|0);
 $ce=$32;
 $cnt=0;
 label=9;break;
 case 9: 
 var $34=(($field)|0);
 var $35=$cp;
 var $36=_formatl($34,$35,$start);
 $cp=$36;
 var $37=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $38=($37|0)!=0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 label=16;break;
 case 11: 
 var $41=SAFE_HEAP_LOAD($start, "i8*", 0, 0);
 var $42=($41|0)!=0;
 if($42){label=12;break;}else{label=13;break;}
 case 12: 
 var $44=$cnt;
 var $45=((($44)+(1))|0);
 $cnt=$45;
 label=13;break;
 case 13: 
 var $47=$cp;
 var $48=$ce;
 var $49=($47|0)==($48|0);
 if($49){label=14;break;}else{label=15;break;}
 case 14: 
 label=16;break;
 case 15: 
 label=9;break;
 case 16: 
 var $53=$3;
 var $54=(($53+12)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=($55|0)!=0;
 if($56){label=17;break;}else{label=18;break;}
 case 17: 
 var $58=$3;
 var $59=(($58+16)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32*", 0, 0);
 var $61=$3;
 var $62=(($61+12)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=(($60+($63<<2))|0);
 var $65=((($64)-(4))|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 $cols=$66;
 var $67=$3;
 var $68=(($67+12)|0);
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 var $70=((($69)-(1))|0);
 $i=$70;
 label=19;break;
 case 18: 
 $cols=1;
 $i=0;
 label=19;break;
 case 19: 
 var $73=$2;
 var $74=(($73+8)|0);
 var $75=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 $width=$75;
 var $76=$cnt;
 var $77=$cols;
 var $78=($76|0)!=($77|0);
 if($78){label=20;break;}else{label=24;break;}
 case 20: 
 var $80=$cnt;
 var $81=($80|0)!=1;
 if($81){label=21;break;}else{label=22;break;}
 case 21: 
 var $83=$2;
 var $84=$3;
 var $85=_errstop(132,$83,$84,0);
 $1=$85;
 label=31;break;
 case 22: 
 var $87=$cols;
 var $88=$width;
 var $89=(Math_imul($88,$87)|0);
 $width=$89;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 $rows=1;
 label=25;break;
 case 25: 
 var $93=$i;
 var $94=((($93)-(1))|0);
 $i=$94;
 var $95=($93|0)!=0;
 if($95){label=26;break;}else{label=27;break;}
 case 26: 
 var $97=$3;
 var $98=(($97+16)|0);
 var $99=SAFE_HEAP_LOAD($98, "i32*", 0, 0);
 var $100=$i;
 var $101=(($99+($100<<2))|0);
 var $102=SAFE_HEAP_LOAD($101, "i32", 0, 0);
 var $103=$rows;
 var $104=(Math_imul($103,$102)|0);
 $rows=$104;
 label=25;break;
 case 27: 
 var $106=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $107=($106|0)!=0;
 if($107){label=28;break;}else{label=29;break;}
 case 28: 
 label=30;break;
 case 29: 
 var $110=$2;
 var $111=$3;
 var $112=$cols;
 var $113=$rows;
 var $114=$width;
 var $115=$cnt;
 var $116=(($field)|0);
 var $117=_formatq($110,$111,$112,$113,$114,$115,$116);
 $out=$117;
 label=30;break;
 case 30: 
 var $119=$2;
 var $120=$3;
 var $121=$out;
 var $122=_errstop(0,$119,$120,$121);
 $1=$122;
 label=31;break;
 case 31: 
 var $124=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $124;
  default: assert(0, "bad label: " + label);
 }

}


function _formatq($left,$rite,$cols,$rows,$width,$cnt,$field){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $colt;
 var $i;
 var $ip;
 var $rank;
 var $fc;
 var $out;
 var $bp;
 var $buf=sp;
 var $ce;
 var $ch;
 var $cp;
 var $fch;
 var $op;
 var $oq;
 var $start=(sp)+(80);
 var $dp;
 $2=$left;
 $3=$rite;
 $4=$cols;
 $5=$rows;
 $6=$width;
 $7=$cnt;
 $8=$field;
 $fch=0;
 SAFE_HEAP_STORE($start, 0, "i8*", 0);
 var $9=$3;
 var $10=(($9+12)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 $rank=$11;
 var $12=0==($11|0);
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $rank=1;
 label=3;break;
 case 3: 
 var $15=$5;
 var $16=$6;
 var $17=(Math_imul($15,$16)|0);
 var $18=$rank;
 var $19=_getcb(0,$17,9,$18,0);
 $out=$19;
 var $20=$out;
 var $21=($20|0)==0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=31;break;
 case 5: 
 var $24=$rank;
 var $25=($24|0)>1;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$out;
 var $28=(($27+16)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32*", 0, 0);
 var $30=$29;
 var $31=$3;
 var $32=(($31+16)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32*", 0, 0);
 var $34=$33;
 var $35=$rank;
 var $36=((($35)-(1))|0);
 var $37=_intcopy($30,$34,$36,1);
 var $38=$37;
 $ip=$38;
 var $39=$6;
 var $40=$ip;
 SAFE_HEAP_STORE($40, $39, "i32", 0);
 label=7;break;
 case 7: 
 $i=0;
 label=8;break;
 case 8: 
 var $43=$i;
 var $44=$out;
 var $45=(($44+8)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=($43|0)<($46|0);
 if($47){label=9;break;}else{label=11;break;}
 case 9: 
 var $49=$out;
 var $50=(($49)|0);
 var $51=$50;
 var $52=SAFE_HEAP_LOAD($51, "i8*", 0, 0);
 var $53=$i;
 var $54=(($52+$53)|0);
 SAFE_HEAP_STORE($54, 32, "i8", 0);
 label=10;break;
 case 10: 
 var $56=$i;
 var $57=((($56)+(1))|0);
 $i=$57;
 label=8;break;
 case 11: 
 var $59=_formaty();
 $fch=$59;
 var $60=$out;
 var $61=(($60)|0);
 var $62=$61;
 var $63=SAFE_HEAP_LOAD($62, "i8*", 0, 0);
 $op=$63;
 var $64=$3;
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "double*", 0, 0);
 $dp=$67;
 label=12;break;
 case 12: 
 var $69=$5;
 var $70=((($69)-(1))|0);
 $5=$70;
 var $71=($69|0)!=0;
 if($71){label=13;break;}else{var $76=0;label=14;break;}
 case 13: 
 var $73=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $74=($73|0)==0;
 var $76=$74;label=14;break;
 case 14: 
 var $76;
 if($76){label=15;break;}else{label=30;break;}
 case 15: 
 var $78=$2;
 var $79=(($78)|0);
 var $80=$79;
 var $81=SAFE_HEAP_LOAD($80, "i8*", 0, 0);
 $cp=$81;
 var $82=$2;
 var $83=(($82+8)|0);
 var $84=SAFE_HEAP_LOAD($83, "i32", 0, 0);
 var $85=$cp;
 var $86=(($85+$84)|0);
 $ce=$86;
 var $87=$4;
 $colt=$87;
 label=16;break;
 case 16: 
 var $89=$colt;
 var $90=((($89)-(1))|0);
 $colt=$90;
 var $91=($89|0)!=0;
 if($91){label=17;break;}else{var $96=0;label=18;break;}
 case 17: 
 var $93=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $94=($93|0)==0;
 var $96=$94;label=18;break;
 case 18: 
 var $96;
 if($96){label=19;break;}else{label=26;break;}
 case 19: 
 var $98=$7;
 var $99=($98|0)==1;
 if($99){label=20;break;}else{label=21;break;}
 case 20: 
 var $101=$2;
 var $102=(($101)|0);
 var $103=$102;
 var $104=SAFE_HEAP_LOAD($103, "i8*", 0, 0);
 $cp=$104;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $107=$8;
 var $108=$cp;
 var $109=_formatl($107,$108,$start);
 $cp=$109;
 var $110=SAFE_HEAP_LOAD($start, "i8*", 0, 0);
 var $111=($110|0)!=0;
 if($111){label=23;break;}else{label=24;break;}
 case 23: 
 label=25;break;
 case 24: 
 var $114=$op;
 var $115=$8;
 var $116=$8;
 var $117=_strlen($116);
 var $118=_chrcopy($114,$115,$117,1);
 $op=$118;
 label=22;break;
 case 25: 
 var $120=$op;
 var $121=$8;
 var $122=$dp;
 var $123=(($122+8)|0);
 $dp=$123;
 var $124=SAFE_HEAP_LOAD($122, "double", 0, 0);
 var $125=$fch;
 var $126=_formatr($120,$121,$124,$125);
 $op=$126;
 label=16;break;
 case 26: 
 var $128=$cp;
 var $129=$ce;
 var $130=($128>>>0)<($129>>>0);
 if($130){label=27;break;}else{label=29;break;}
 case 27: 
 var $132=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $133=($132|0)==0;
 if($133){label=28;break;}else{label=29;break;}
 case 28: 
 var $135=$8;
 var $136=$cp;
 var $137=_formatl($135,$136,$start);
 $cp=$137;
 var $138=$op;
 var $139=$8;
 var $140=$8;
 var $141=_strlen($140);
 var $142=_chrcopy($138,$139,$141,1);
 $op=$142;
 label=29;break;
 case 29: 
 label=12;break;
 case 30: 
 var $145=$out;
 $1=$145;
 label=31;break;
 case 31: 
 var $147=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $147;
  default: assert(0, "bad label: " + label);
 }

}



function _formatr($op,$field,$value,$gch){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $bufint=sp;
 var $fldint=(sp)+(16);
 var $bufptr=(sp)+(32);
 var $fldptr=(sp)+(64);
 var $i;
 var $neg;
 var $buffer=(sp)+(96);
 var $bufp;
 var $ch=(sp)+(176);
 $2=$op;
 $3=$field;
 $4=$value;
 $5=$gch;
 var $6=$4;
 var $7=$6<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $neg=1;
 var $9=$4;
 var $10=((-.0))-($9);
 $4=$10;
 label=4;break;
 case 3: 
 $neg=0;
 label=4;break;
 case 4: 
 var $13=$3;
 var $14=(($fldptr)|0);
 var $15=(($fldint)|0);
 _formats($13,$14,$15);
 var $16=(($fldptr)|0);
 var $17=(($16+16)|0);
 var $18=SAFE_HEAP_LOAD($17, "i8*", 0, 0);
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$2;
 var $22=$5;
 var $23=(($bufptr)|0);
 var $24=(($bufint)|0);
 var $25=(($fldptr)|0);
 var $26=(($fldint)|0);
 var $27=$neg;
 var $28=$4;
 var $29=(($buffer)|0);
 var $30=_formsci($21,$22,$23,$24,$25,$26,$27,$28,$29);
 $1=$30;
 label=14;break;
 case 6: 
 var $32=$4;
 var $33=_eq($32,0);
 var $34=($33|0)!=0;
 if($34){label=7;break;}else{label=13;break;}
 case 7: 
 var $36=(($fldint)|0);
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=$38&1;
 var $40=($39|0)!=0;
 if($40){label=12;break;}else{label=8;break;}
 case 8: 
 var $42=(($fldint)|0);
 var $43=(($42+12)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=$44&512;
 var $46=($45|0)!=0;
 if($46){label=9;break;}else{label=10;break;}
 case 9: 
 var $48=$5;
 var $49=(($48+2)|0);
 var $50=SAFE_HEAP_LOAD($49, "i8", 0, 0);
 var $51=(($50<<24)>>24);
 var $54=$51;label=11;break;
 case 10: 
 var $54=32;label=11;break;
 case 11: 
 var $54;
 var $55=(($54)&255);
 SAFE_HEAP_STORE($ch, $55, "i8", 0);
 var $56=$2;
 var $57=(($fldint)|0);
 var $58=(($57)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=_chrcopy($56,$ch,$59,0);
 $2=$60;
 var $61=$2;
 $1=$61;
 label=14;break;
 case 12: 
 label=13;break;
 case 13: 
 var $64=(($buffer)|0);
 var $65=$4;
 var $66=(($fldint)|0);
 var $67=(($66+8)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=_formatt($64,$65,$68);
 $bufp=$69;
 var $70=$bufp;
 var $71=(($bufptr)|0);
 var $72=(($bufint)|0);
 _formats($70,$71,$72);
 var $73=$2;
 var $74=$5;
 var $75=(($bufptr)|0);
 var $76=(($bufint)|0);
 var $77=(($fldptr)|0);
 var $78=(($fldint)|0);
 var $79=$neg;
 var $80=_formatv($73,$74,$75,$76,$77,$78,$79);
 $1=$80;
 label=14;break;
 case 14: 
 var $82=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }

}


function _formats($buf,$bca,$bia){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $fcc_local=sp;
 var $four_switch=(sp)+(8);
 var $i;
 var $seven_switch=(sp)+(16);
 var $cc;
 var $ch;
 var $cp;
 var $ip;
 $1=$buf;
 $2=$bca;
 $3=$bia;
 SAFE_HEAP_STORE($fcc_local, 0, "i32", 0);
 SAFE_HEAP_STORE($four_switch, 0, "i32", 0);
 $i=0;
 SAFE_HEAP_STORE($seven_switch, 0, "i32", 0);
 var $4=$3;
 var $5=(($4+12)|0);
 SAFE_HEAP_STORE($5, 384, "i32", 0);
 $i=8;
 var $6=$2;
 $ip=$6;
 label=2;break;
 case 2: 
 var $8=$i;
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=5;break;}
 case 3: 
 var $11=$ip;
 var $12=(($11+4)|0);
 $ip=$12;
 SAFE_HEAP_STORE($11, 0, "i8*", 0);
 label=4;break;
 case 4: 
 var $14=$i;
 var $15=((($14)-(1))|0);
 $i=$15;
 label=2;break;
 case 5: 
 var $17=$3;
 var $18=(($17+4)|0);
 SAFE_HEAP_STORE($18, 0, "i32", 0);
 var $19=$3;
 var $20=(($19+8)|0);
 SAFE_HEAP_STORE($20, 0, "i32", 0);
 var $21=$1;
 $cp=$21;
 var $22=$2;
 var $23=(($22)|0);
 SAFE_HEAP_STORE($23, $21, "i8*", 0);
 label=6;break;
 case 6: 
 var $25=$cp;
 var $26=(($25+1)|0);
 $cp=$26;
 var $27=SAFE_HEAP_LOAD($25, "i8", 0, 0);
 $ch=$27;
 var $28=(($27<<24)>>24);
 var $29=0!=($28|0);
 if($29){label=7;break;}else{label=11;break;}
 case 7: 
 var $31=$cp;
 var $32=((($31)-(1))|0);
 $cc=$32;
 var $33=SAFE_HEAP_LOAD($seven_switch, "i32", 0, 0);
 var $34=($33|0)!=0;
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=$2;
 var $37=(($36+16)|0);
 var $38=SAFE_HEAP_LOAD($37, "i8*", 0, 0);
 var $39=($38|0)!=0;
 if($39){label=10;break;}else{label=9;break;}
 case 9: 
 var $41=$cc;
 var $42=$ch;
 var $43=$2;
 var $44=$3;
 _formato($41,$42,$43,$44,$four_switch,$seven_switch,$fcc_local);
 label=10;break;
 case 10: 
 label=6;break;
 case 11: 
 var $47=$cp;
 var $48=((($47)-(1))|0);
 $cp=$48;
 var $49=$2;
 var $50=(($49+4)|0);
 SAFE_HEAP_STORE($50, $48, "i8*", 0);
 var $51=$2;
 var $52=(($51+4)|0);
 var $53=SAFE_HEAP_LOAD($52, "i8*", 0, 0);
 var $54=$2;
 var $55=(($54)|0);
 var $56=SAFE_HEAP_LOAD($55, "i8*", 0, 0);
 var $57=$53;
 var $58=$56;
 var $59=((($57)-($58))|0);
 var $60=$3;
 var $61=(($60)|0);
 SAFE_HEAP_STORE($61, $59, "i32", 0);
 var $62=$2;
 var $63=(($62+12)|0);
 var $64=SAFE_HEAP_LOAD($63, "i8*", 0, 0);
 var $65=($64|0)==0;
 if($65){label=12;break;}else{label=13;break;}
 case 12: 
 var $67=$2;
 var $68=(($67+4)|0);
 var $69=SAFE_HEAP_LOAD($68, "i8*", 0, 0);
 var $70=$2;
 var $71=(($70+12)|0);
 SAFE_HEAP_STORE($71, $69, "i8*", 0);
 label=13;break;
 case 13: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formatt($buffer,$value,$places){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bd;
 var $be;
 var $bp;
 var $bq;
 var $ch;
 var $dw;
 var $i;
 $1=$buffer;
 $2=$value;
 $3=$places;
 var $4=$3;
 $i=$4;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=7;break;}
 case 2: 
 $dw=10;
 label=3;break;
 case 3: 
 var $8=$i;
 var $9=($8|0)>1;
 if($9){label=4;break;}else{label=6;break;}
 case 4: 
 var $11=$dw;
 var $12=($11)*(10);
 $dw=$12;
 label=5;break;
 case 5: 
 var $14=$i;
 var $15=((($14)-(1))|0);
 $i=$15;
 label=3;break;
 case 6: 
 label=8;break;
 case 7: 
 $dw=1;
 label=8;break;
 case 8: 
 var $19=$dw;
 var $20=($19)*(2);
 var $21=(1)/($20);
 var $22=$2;
 var $23=($22)+($21);
 $2=$23;
 var $24=$1;
 var $25=$2;
 var $26=_sprintf($24,10224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $25, "double", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $27=$1;
 $bp=$27;
 label=9;break;
 case 9: 
 var $29=$bp;
 var $30=SAFE_HEAP_LOAD($29, "i8", 0, 0);
 var $31=(($30<<24)>>24);
 var $32=32==($31|0);
 if($32){label=10;break;}else{label=11;break;}
 case 10: 
 var $34=$bp;
 var $35=(($34+1)|0);
 $bp=$35;
 label=9;break;
 case 11: 
 label=12;break;
 case 12: 
 var $38=$bp;
 var $39=SAFE_HEAP_LOAD($38, "i8", 0, 0);
 var $40=(($39<<24)>>24);
 var $41=48==($40|0);
 if($41){label=13;break;}else{label=14;break;}
 case 13: 
 var $43=$bp;
 var $44=(($43+1)|0);
 $bp=$44;
 label=12;break;
 case 14: 
 var $46=$1;
 var $47=$1;
 var $48=_strlen($47);
 var $49=(($46+$48)|0);
 $be=$49;
 var $50=$bp;
 $bd=$50;
 label=15;break;
 case 15: 
 var $52=$bd;
 var $53=$be;
 var $54=($52>>>0)<($53>>>0);
 if($54){label=16;break;}else{label=20;break;}
 case 16: 
 var $56=$bd;
 var $57=SAFE_HEAP_LOAD($56, "i8", 0, 0);
 var $58=(($57<<24)>>24);
 var $59=($58|0)==46;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 label=20;break;
 case 18: 
 label=19;break;
 case 19: 
 var $63=$bd;
 var $64=(($63+1)|0);
 $bd=$64;
 label=15;break;
 case 20: 
 var $66=$bd;
 var $67=$3;
 var $68=(($66+$67)|0);
 var $69=(($68+1)|0);
 $bq=$69;
 label=21;break;
 case 21: 
 var $71=$be;
 var $72=$bq;
 var $73=($71>>>0)>($72>>>0);
 if($73){label=22;break;}else{label=23;break;}
 case 22: 
 var $75=$be;
 var $76=((($75)-(1))|0);
 $be=$76;
 SAFE_HEAP_STORE($76, 0, "i8", 0);
 label=21;break;
 case 23: 
 var $78=$be;
 var $79=((($78)-(1))|0);
 $bq=$79;
 label=24;break;
 case 24: 
 var $81=$bq;
 var $82=$bd;
 var $83=($81>>>0)>($82>>>0);
 if($83){label=25;break;}else{label=31;break;}
 case 25: 
 var $85=$bq;
 var $86=SAFE_HEAP_LOAD($85, "i8", 0, 0);
 $ch=$86;
 var $87=$ch;
 var $88=(($87<<24)>>24);
 var $89=($88|0)==32;
 if($89){label=27;break;}else{label=26;break;}
 case 26: 
 var $91=$ch;
 var $92=(($91<<24)>>24);
 var $93=($92|0)==48;
 if($93){label=27;break;}else{label=28;break;}
 case 27: 
 var $95=$bq;
 SAFE_HEAP_STORE($95, 0, "i8", 0);
 label=29;break;
 case 28: 
 label=31;break;
 case 29: 
 label=30;break;
 case 30: 
 var $99=$bq;
 var $100=((($99)-(1))|0);
 $bq=$100;
 label=24;break;
 case 31: 
 var $102=$bp;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $102;
  default: assert(0, "bad label: " + label);
 }

}


function _formatu($fcc_final,$fcc_explicit,$four_switch,$dpp,$0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $lsw;
 var $rsw;
 $2=$fcc_final;
 $3=$fcc_explicit;
 $4=$four_switch;
 $5=$dpp;
 var $ch=(($0)&255);
 $6=$ch;
 var $7=$6;
 var $8=(($7<<24)>>24);
 if(($8|0)==49){ label=2;break;}else if(($8|0)==50){ label=3;break;}else if(($8|0)==51){ label=4;break;}else{label=5;break;}
 case 2: 
 $lsw=2;
 $rsw=4;
 label=5;break;
 case 3: 
 $lsw=8;
 $rsw=16;
 label=5;break;
 case 4: 
 $lsw=32;
 $rsw=64;
 label=5;break;
 case 5: 
 var $13=$5;
 var $14=($13|0)==0;
 if($14){label=6;break;}else{label=9;break;}
 case 6: 
 var $16=SAFE_HEAP_LOAD(2800, "i32", 0, 0);
 var $17=$16^-1;
 var $18=$3;
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=$19&$17;
 SAFE_HEAP_STORE($18, $20, "i32", 0);
 var $21=$lsw;
 var $22=$3;
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=$23|$21;
 SAFE_HEAP_STORE($22, $24, "i32", 0);
 var $25=SAFE_HEAP_LOAD(2800, "i32", 0, 0);
 var $26=$25^-1;
 var $27=$2;
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=$28&$26;
 SAFE_HEAP_STORE($27, $29, "i32", 0);
 var $30=$lsw;
 var $31=$2;
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=$32|$30;
 SAFE_HEAP_STORE($31, $33, "i32", 0);
 var $34=$4;
 var $35=($34|0)!=0;
 if($35){label=8;break;}else{label=7;break;}
 case 7: 
 var $37=SAFE_HEAP_LOAD(2792, "i32", 0, 0);
 var $38=$37^-1;
 var $39=$2;
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=$40&$38;
 SAFE_HEAP_STORE($39, $41, "i32", 0);
 var $42=$rsw;
 var $43=$2;
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=$44|$42;
 SAFE_HEAP_STORE($43, $45, "i32", 0);
 label=8;break;
 case 8: 
 label=14;break;
 case 9: 
 var $48=SAFE_HEAP_LOAD(2792, "i32", 0, 0);
 var $49=$48^-1;
 var $50=$2;
 var $51=SAFE_HEAP_LOAD($50, "i32", 0, 0);
 var $52=$51&$49;
 SAFE_HEAP_STORE($50, $52, "i32", 0);
 var $53=$rsw;
 var $54=$2;
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 var $56=$55|$53;
 SAFE_HEAP_STORE($54, $56, "i32", 0);
 var $57=$4;
 var $58=($57|0)!=0;
 if($58){label=13;break;}else{label=10;break;}
 case 10: 
 var $60=$3;
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=SAFE_HEAP_LOAD(2800, "i32", 0, 0);
 var $63=$61&$62;
 var $64=($63|0)!=0;
 if($64){label=12;break;}else{label=11;break;}
 case 11: 
 var $66=SAFE_HEAP_LOAD(2800, "i32", 0, 0);
 var $67=$66^-1;
 var $68=$2;
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 var $70=$69&$67;
 SAFE_HEAP_STORE($68, $70, "i32", 0);
 var $71=$lsw;
 var $72=$2;
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $74=$73|$71;
 SAFE_HEAP_STORE($72, $74, "i32", 0);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formatv($op,$gch,$bufptr,$bufint,$fldptr,$fldint,$neg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $bdi;
 var $bpl;
 var $fdi;
 var $fln;
 var $fpl;
 var $i;
 var $sln;
 var $bs;
 var $ch=sp;
 var $cp;
 var $fch;
 var $fs;
 var $fct;
 var $ofd=(sp)+(8);
 var $old=(sp)+(16);
 var $oq;
 var $pz;
 var $sp;
 $2=$op;
 $3=$gch;
 $4=$bufptr;
 $5=$bufint;
 $6=$fldptr;
 $7=$fldint;
 $8=$neg;
 SAFE_HEAP_STORE($ofd, 0, "i8*", 0);
 SAFE_HEAP_STORE($old, 0, "i8*", 0);
 var $9=$7;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$5;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=($11|0)<($14|0);
 if($15){label=2;break;}else{label=6;break;}
 case 2: 
 var $17=$3;
 var $18=(($17+3)|0);
 var $19=SAFE_HEAP_LOAD($18, "i8", 0, 0);
 SAFE_HEAP_STORE($ch, $19, "i8", 0);
 var $20=(($19<<24)>>24);
 var $21=48==($20|0);
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4592, 29, "i32", 0);
 label=5;break;
 case 4: 
 var $24=$2;
 var $25=$7;
 var $26=(($25)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=_chrcopy($24,$ch,$27,0);
 $2=$28;
 label=5;break;
 case 5: 
 var $30=$2;
 $1=$30;
 label=14;break;
 case 6: 
 var $32=$2;
 $sp=$32;
 $oq=$32;
 var $33=$7;
 var $34=(($33)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 $sln=$35;
 $fln=$35;
 var $36=$2;
 var $37=(($36+$35)|0);
 $2=$37;
 var $38=$4;
 var $39=(($38)|0);
 var $40=SAFE_HEAP_LOAD($39, "i8*", 0, 0);
 $bs=$40;
 var $41=$6;
 var $42=(($41)|0);
 var $43=SAFE_HEAP_LOAD($42, "i8*", 0, 0);
 $fs=$43;
 var $44=$5;
 var $45=(($44+4)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 $bdi=$46;
 var $47=$7;
 var $48=(($47+4)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 $fdi=$49;
 var $50=$5;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 $bpl=$52;
 var $53=$7;
 var $54=(($53+8)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 $fpl=$55;
 var $56=$bs;
 var $57=$fs;
 var $58=$oq;
 var $59=$3;
 var $60=$6;
 var $61=$7;
 var $62=$bdi;
 var $63=$fdi;
 var $64=$bpl;
 var $65=$fpl;
 var $66=$fln;
 _formbfv($56,$57,$old,$ofd,$58,$59,$60,$61,$62,$63,$64,$65,$66);
 var $67=$6;
 var $68=$7;
 var $69=$8;
 var $70=SAFE_HEAP_LOAD($ofd, "i8*", 0, 0);
 var $71=SAFE_HEAP_LOAD($old, "i8*", 0, 0);
 _formatw($67,$68,$69,$70,$71);
 var $72=$7;
 var $73=(($72+12)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 var $75=$74&512;
 var $76=($75|0)!=0;
 if($76){label=7;break;}else{label=13;break;}
 case 7: 
 var $78=$3;
 var $79=(($78+2)|0);
 var $80=SAFE_HEAP_LOAD($79, "i8", 0, 0);
 SAFE_HEAP_STORE($ch, $80, "i8", 0);
 label=8;break;
 case 8: 
 var $82=$sln;
 var $83=((($82)-(1))|0);
 $sln=$83;
 var $84=($82|0)!=0;
 if($84){label=9;break;}else{label=12;break;}
 case 9: 
 var $86=$sp;
 var $87=SAFE_HEAP_LOAD($86, "i8", 0, 0);
 var $88=(($87<<24)>>24);
 var $89=32==($88|0);
 if($89){label=10;break;}else{label=11;break;}
 case 10: 
 var $91=SAFE_HEAP_LOAD($ch, "i8", 0, 0);
 var $92=$sp;
 SAFE_HEAP_STORE($92, $91, "i8", 0);
 label=11;break;
 case 11: 
 var $94=$sp;
 var $95=(($94+1)|0);
 $sp=$95;
 label=8;break;
 case 12: 
 label=13;break;
 case 13: 
 var $98=$2;
 $1=$98;
 label=14;break;
 case 14: 
 var $100=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $100;
  default: assert(0, "bad label: " + label);
 }

}


function _formatw($fldptr,$fldint,$neg,$ofd,$old){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $cp;
 $2=$fldptr;
 $3=$fldint;
 $4=$neg;
 $5=$ofd;
 $6=$old;
 var $7=$3;
 var $8=(($7+12)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&128;
 var $11=($10|0)!=0;
 if($11){label=14;break;}else{label=2;break;}
 case 2: 
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 $cp=$15;
 var $16=$2;
 var $17=(($16)|0);
 var $18=SAFE_HEAP_LOAD($17, "i8*", 0, 0);
 var $19=$15;
 var $20=$18;
 var $21=((($19)-($20))|0);
 $i=$21;
 var $22=0<($21|0);
 if($22){label=3;break;}else{label=13;break;}
 case 3: 
 var $24=$4;
 var $25=($24|0)!=0;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=$3;
 var $28=(($27+12)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=$29&2;
 var $31=($30|0)!=0;
 if($31){label=8;break;}else{label=5;break;}
 case 5: 
 var $33=$4;
 var $34=($33|0)!=0;
 if($34){label=7;break;}else{label=6;break;}
 case 6: 
 var $36=$3;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=$38&8;
 var $40=($39|0)!=0;
 if($40){label=8;break;}else{label=7;break;}
 case 7: 
 var $42=$3;
 var $43=(($42+12)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=$44&32;
 var $46=($45|0)!=0;
 if($46){label=8;break;}else{label=12;break;}
 case 8: 
 label=9;break;
 case 9: 
 var $49=$i;
 var $50=((($49)-(1))|0);
 $i=$50;
 var $51=($49|0)!=0;
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=$cp;
 var $54=((($53)-(1))|0);
 $cp=$54;
 var $55=SAFE_HEAP_LOAD($54, "i8", 0, 0);
 var $56=$5;
 var $57=((($56)-(1))|0);
 $5=$57;
 SAFE_HEAP_STORE($57, $55, "i8", 0);
 label=9;break;
 case 11: 
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $62=$3;
 var $63=(($62+12)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=$64&256;
 var $66=($65|0)!=0;
 if($66){label=27;break;}else{label=15;break;}
 case 15: 
 var $68=$2;
 var $69=(($68+4)|0);
 var $70=SAFE_HEAP_LOAD($69, "i8*", 0, 0);
 var $71=$2;
 var $72=(($71+28)|0);
 var $73=SAFE_HEAP_LOAD($72, "i8*", 0, 0);
 $cp=$73;
 var $74=$70;
 var $75=$73;
 var $76=((($74)-($75))|0);
 $i=$76;
 var $77=0<($76|0);
 if($77){label=16;break;}else{label=26;break;}
 case 16: 
 var $79=$4;
 var $80=($79|0)!=0;
 if($80){label=17;break;}else{label=18;break;}
 case 17: 
 var $82=$3;
 var $83=(($82+12)|0);
 var $84=SAFE_HEAP_LOAD($83, "i32", 0, 0);
 var $85=$84&4;
 var $86=($85|0)!=0;
 if($86){label=21;break;}else{label=18;break;}
 case 18: 
 var $88=$4;
 var $89=($88|0)!=0;
 if($89){label=20;break;}else{label=19;break;}
 case 19: 
 var $91=$3;
 var $92=(($91+12)|0);
 var $93=SAFE_HEAP_LOAD($92, "i32", 0, 0);
 var $94=$93&16;
 var $95=($94|0)!=0;
 if($95){label=21;break;}else{label=20;break;}
 case 20: 
 var $97=$3;
 var $98=(($97+12)|0);
 var $99=SAFE_HEAP_LOAD($98, "i32", 0, 0);
 var $100=$99&64;
 var $101=($100|0)!=0;
 if($101){label=21;break;}else{label=25;break;}
 case 21: 
 label=22;break;
 case 22: 
 var $104=$i;
 var $105=((($104)-(1))|0);
 $i=$105;
 var $106=($104|0)!=0;
 if($106){label=23;break;}else{label=24;break;}
 case 23: 
 var $108=$cp;
 var $109=(($108+1)|0);
 $cp=$109;
 var $110=SAFE_HEAP_LOAD($109, "i8", 0, 0);
 var $111=$6;
 var $112=(($111+1)|0);
 $6=$112;
 SAFE_HEAP_STORE($112, $110, "i8", 0);
 label=22;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $117=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $117;
  default: assert(0, "bad label: " + label);
 }

}


function _formatx($rite,$row,$col,$cols,$pcharlen,$ps,$pm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $rp;
 var $val;
 var $ap;
 var $bp;
 var $i;
 var $ip;
 var $n;
 var $precis=sp;
 $2=$rite;
 $3=$row;
 $4=$col;
 $5=$cols;
 $6=$pcharlen;
 $7=$ps;
 $8=$pm;
 $rp=0;
 $val=0;
 $ip=0;
 var $9=$6;
 SAFE_HEAP_STORE($9, 0, "i32", 0);
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&110;
 if(($13|0)==4){ label=2;break;}else if(($13|0)==2){ label=3;break;}else if(($13|0)==32){ label=4;break;}else{label=16;break;}
 case 2: 
 var $15=$2;
 var $16=(($15)|0);
 var $17=$16;
 var $18=SAFE_HEAP_LOAD($17, "i32*", 0, 0);
 var $19=$3;
 var $20=$5;
 var $21=(Math_imul($19,$20)|0);
 var $22=(($18+($21<<2))|0);
 var $23=$4;
 var $24=(($22+($23<<2))|0);
 $ip=$24;
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0);
 $val=$26;
 label=16;break;
 case 3: 
 var $28=$2;
 var $29=(($28)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "double*", 0, 0);
 var $32=$3;
 var $33=$5;
 var $34=(Math_imul($32,$33)|0);
 var $35=(($31+($34<<3))|0);
 var $36=$4;
 var $37=(($35+($36<<3))|0);
 $rp=$37;
 var $38=SAFE_HEAP_LOAD($37, "double", 0, 0);
 $val=$38;
 label=16;break;
 case 4: 
 var $40=$2;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "%struct.aplcb**", 0, 0);
 var $44=$4;
 var $45=(($43+($44<<2))|0);
 $ap=$45;
 var $46=$ap;
 var $47=$3;
 var $48=$5;
 var $49=(Math_imul($47,$48)|0);
 var $50=(($46+($49<<2))|0);
 var $51=SAFE_HEAP_LOAD($50, "%struct.aplcb*", 0, 0);
 $bp=$51;
 var $52=$bp;
 var $53=(($52+4)|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 var $55=$54&110;
 if(($55|0)==2){ label=11;break;}else if(($55|0)==8){ label=5;break;}else if(($55|0)==4){ label=8;break;}else{label=14;break;}
 case 5: 
 var $57=$bp;
 var $58=(($57+12)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=($59|0)>1;
 if($60){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 133, "i32", 0);
 label=7;break;
 case 7: 
 var $63=$bp;
 var $64=(($63+8)|0);
 var $65=SAFE_HEAP_LOAD($64, "i32", 0, 0);
 var $66=$6;
 SAFE_HEAP_STORE($66, $65, "i32", 0);
 $1=0;
 label=26;break;
 case 8: 
 var $68=$bp;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=($70|0)>1;
 if($71){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 133, "i32", 0);
 label=10;break;
 case 10: 
 var $74=$bp;
 var $75=(($74)|0);
 var $76=$75;
 var $77=SAFE_HEAP_LOAD($76, "i32*", 0, 0);
 $ip=$77;
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 var $79=($78|0);
 $val=$79;
 label=15;break;
 case 11: 
 var $81=$bp;
 var $82=(($81+8)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=($83|0)>1;
 if($84){label=12;break;}else{label=13;break;}
 case 12: 
 SAFE_HEAP_STORE(4592, 133, "i32", 0);
 label=13;break;
 case 13: 
 var $87=$bp;
 var $88=(($87)|0);
 var $89=$88;
 var $90=SAFE_HEAP_LOAD($89, "double*", 0, 0);
 $rp=$90;
 var $91=SAFE_HEAP_LOAD($90, "double", 0, 0);
 $val=$91;
 label=15;break;
 case 14: 
 SAFE_HEAP_STORE(4592, 133, "i32", 0);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $95=$val;
 var $96=(($precis)|0);
 _precisn($95,$96);
 var $97=(($precis+4)|0);
 var $98=SAFE_HEAP_LOAD($97, "i32", 0, 0);
 var $99=$8;
 SAFE_HEAP_STORE($99, $98, "i32", 0);
 $n=$98;
 var $100=$val;
 var $101=$100<0;
 if($101){label=17;break;}else{label=25;break;}
 case 17: 
 var $103=$val;
 var $104=((-.0))-($103);
 $val=$104;
 var $105=$n;
 var $106=($105|0)==0;
 if($106){label=18;break;}else{label=19;break;}
 case 18: 
 var $108=$val;
 var $109=$108<(0.5);
 if($109){label=20;break;}else{label=19;break;}
 case 19: 
 var $111=$7;
 SAFE_HEAP_STORE($111, 1, "i32", 0);
 label=24;break;
 case 20: 
 var $113=$rp;
 var $114=($113|0)!=0;
 if($114){label=21;break;}else{label=22;break;}
 case 21: 
 $val=0;
 var $116=$rp;
 SAFE_HEAP_STORE($116, 0, "double", 0);
 label=23;break;
 case 22: 
 $val=0;
 var $118=$ip;
 SAFE_HEAP_STORE($118, 0, "i32", 0);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $122=$val;
 $1=$122;
 label=26;break;
 case 26: 
 var $124=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $124;
  default: assert(0, "bad label: " + label);
 }

}


function _formaty(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fc;
 var $fch;
 $fch=0;
 var $1=_treesrch(2552);
 var $2=$1;
 $fc=$2;
 var $3=$fc;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=$fc;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=$8&8;
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 var $12=$fc;
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=($14|0)>=4;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$fc;
 var $18=(($17)|0);
 var $19=$18;
 var $20=SAFE_HEAP_LOAD($19, "i8*", 0, 0);
 $fch=$20;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $23=$fch;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }

}


function _formatz($rite,$cp,$width,$precisn,$digits,$fch,$colch){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $ch=sp;
 var $ip;
 var $jp;
 var $kp;
 var $op;
 var $i;
 var $j;
 var $k;
 var $m;
 var $type;
 var $d;
 $1=$rite;
 $2=$cp;
 $3=$width;
 $4=$precisn;
 $5=$digits;
 $6=$fch;
 $7=$colch;
 var $8=$1;
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=$10&70;
 $type=$11;
 var $12=$type;
 var $13=($12|0)!=0;
 if($13){label=2;break;}else{label=6;break;}
 case 2: 
 var $15=$type;
 var $16=($15|0)==4;
 if($16){label=3;break;}else{label=4;break;}
 case 3: 
 var $18=$1;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "i32*", 0, 0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=($22|0);
 $d=$23;
 label=5;break;
 case 4: 
 var $25=$1;
 var $26=(($25)|0);
 var $27=$26;
 var $28=SAFE_HEAP_LOAD($27, "double*", 0, 0);
 var $29=SAFE_HEAP_LOAD($28, "double", 0, 0);
 $d=$29;
 label=5;break;
 case 5: 
 var $31=$d;
 var $32=$2;
 var $33=$3;
 var $34=$4;
 var $35=$5;
 var $36=$6;
 _formath($31,$32,$33,$34,$35,$36);
 label=18;break;
 case 6: 
 var $38=$1;
 var $39=(($38+8)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=$3;
 var $42=($40|0)>($41|0);
 if($42){label=7;break;}else{label=11;break;}
 case 7: 
 var $44=$6;
 var $45=(($44+3)|0);
 var $46=SAFE_HEAP_LOAD($45, "i8", 0, 0);
 SAFE_HEAP_STORE($ch, $46, "i8", 0);
 var $47=(($46<<24)>>24);
 var $48=48==($47|0);
 if($48){label=8;break;}else{label=9;break;}
 case 8: 
 SAFE_HEAP_STORE(4592, 29, "i32", 0);
 label=10;break;
 case 9: 
 var $51=$2;
 var $52=$3;
 var $53=_chrcopy($51,$ch,$52,0);
 $2=$53;
 label=10;break;
 case 10: 
 label=18;break;
 case 11: 
 var $56=$3;
 var $57=$1;
 var $58=(($57+8)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=((($56)-($59))|0);
 $i=$60;
 var $61=$7;
 var $62=($61|0)!=0;
 if($62){label=12;break;}else{label=15;break;}
 case 12: 
 var $64=$2;
 var $65=$1;
 var $66=(($65)|0);
 var $67=$66;
 var $68=SAFE_HEAP_LOAD($67, "i8*", 0, 0);
 var $69=$1;
 var $70=(($69+8)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=_chrcopy($64,$68,$71,1);
 $2=$72;
 var $73=$i;
 var $74=($73|0)!=0;
 if($74){label=13;break;}else{label=14;break;}
 case 13: 
 SAFE_HEAP_STORE($ch, 32, "i8", 0);
 var $76=$2;
 var $77=$i;
 var $78=_chrcopy($76,$ch,$77,0);
 $2=$78;
 label=14;break;
 case 14: 
 label=18;break;
 case 15: 
 var $81=$i;
 var $82=($81|0)!=0;
 if($82){label=16;break;}else{label=17;break;}
 case 16: 
 SAFE_HEAP_STORE($ch, 32, "i8", 0);
 var $84=$2;
 var $85=$i;
 var $86=_chrcopy($84,$ch,$85,0);
 $2=$86;
 label=17;break;
 case 17: 
 var $88=$2;
 var $89=$1;
 var $90=(($89)|0);
 var $91=$90;
 var $92=SAFE_HEAP_LOAD($91, "i8*", 0, 0);
 var $93=$1;
 var $94=(($93+8)|0);
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $96=_chrcopy($88,$92,$95,1);
 $2=$96;
 label=18;break;
 case 18: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formben($d,$cp,$width,$precisn,$digits,$fch,$output){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $format=sp;
 var $ip;
 var $jp;
 var $kp;
 var $i;
 var $j;
 var $k;
 var $m;
 $1=$d;
 $2=$cp;
 $3=$width;
 $4=$precisn;
 $5=$digits;
 $6=$fch;
 $7=$output;
 var $8=(($format)|0);
 var $9=$3;
 var $10=$4;
 var $11=(((-$10))|0);
 var $12=((($11)-(1))|0);
 var $13=_sprintf($8,10128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $9, "i32", 0),SAFE_HEAP_STORE((tempVarArgs)+(8), $12, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $14=$7;
 var $15=(($format)|0);
 var $16=$1;
 var $17=_sprintf($14,$15,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $16, "double", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=$7;
 var $19=_strcspn($18,13152);
 $j=$19;
 var $20=$7;
 var $21=_strchr($20,46);
 $ip=$21;
 var $22=$ip;
 var $23=($22|0)!=0;
 if($23){label=2;break;}else{label=15;break;}
 case 2: 
 var $25=$ip;
 var $26=$7;
 var $27=$25;
 var $28=$26;
 var $29=((($27)-($28))|0);
 $i=$29;
 var $30=$i;
 var $31=$j;
 var $32=($30|0)<($31|0);
 if($32){label=3;break;}else{label=14;break;}
 case 3: 
 var $34=$7;
 var $35=$j;
 var $36=(($34+$35)|0);
 $jp=$36;
 var $37=((($36)-(1))|0);
 $ip=$37;
 label=4;break;
 case 4: 
 var $39=$ip;
 var $40=SAFE_HEAP_LOAD($39, "i8", 0, 0);
 var $41=(($40<<24)>>24);
 var $42=($41|0)==48;
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 var $44=$ip;
 var $45=((($44)-(1))|0);
 $ip=$45;
 label=4;break;
 case 6: 
 var $47=$ip;
 var $48=SAFE_HEAP_LOAD($47, "i8", 0, 0);
 var $49=(($48<<24)>>24);
 var $50=($49|0)!=46;
 if($50){label=7;break;}else{label=8;break;}
 case 7: 
 var $52=$ip;
 var $53=(($52+1)|0);
 $ip=$53;
 label=8;break;
 case 8: 
 var $55=$jp;
 var $56=$ip;
 var $57=$55;
 var $58=$56;
 var $59=((($57)-($58))|0);
 $k=$59;
 var $60=$k;
 var $61=($60|0)!=0;
 if($61){label=9;break;}else{label=13;break;}
 case 9: 
 label=10;break;
 case 10: 
 var $64=$jp;
 var $65=(($64+1)|0);
 $jp=$65;
 var $66=SAFE_HEAP_LOAD($64, "i8", 0, 0);
 var $67=$ip;
 var $68=(($67+1)|0);
 $ip=$68;
 SAFE_HEAP_STORE($67, $66, "i8", 0);
 var $69=(($66<<24)>>24);
 var $70=0!=($69|0);
 if($70){label=11;break;}else{label=12;break;}
 case 11: 
 label=10;break;
 case 12: 
 var $73=$k;
 var $74=$j;
 var $75=((($74)-($73))|0);
 $j=$75;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $79=$7;
 var $80=$j;
 var $81=(($79+$80)|0);
 var $82=(($81+1)|0);
 $kp=$82;
 $jp=$82;
 var $83=$jp;
 var $84=SAFE_HEAP_LOAD($83, "i8", 0, 0);
 var $85=(($84<<24)>>24);
 var $86=($85|0)==43;
 if($86){label=16;break;}else{label=20;break;}
 case 16: 
 label=17;break;
 case 17: 
 var $89=$jp;
 var $90=(($89+1)|0);
 var $91=SAFE_HEAP_LOAD($90, "i8", 0, 0);
 var $92=$jp;
 SAFE_HEAP_STORE($92, $91, "i8", 0);
 var $93=(($91<<24)>>24);
 var $94=0!=($93|0);
 if($94){label=18;break;}else{label=19;break;}
 case 18: 
 var $96=$jp;
 var $97=(($96+1)|0);
 $jp=$97;
 label=17;break;
 case 19: 
 label=24;break;
 case 20: 
 var $100=$jp;
 var $101=SAFE_HEAP_LOAD($100, "i8", 0, 0);
 var $102=(($101<<24)>>24);
 var $103=($102|0)==45;
 if($103){label=21;break;}else{label=22;break;}
 case 21: 
 var $105=$jp;
 var $106=(($105+1)|0);
 $kp=$106;
 label=23;break;
 case 22: 
 var $108=$jp;
 $kp=$108;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $111=$kp;
 $jp=$111;
 var $112=$kp;
 var $113=_strlen($112);
 var $114=(($111+$113)|0);
 var $115=((($114)-(1))|0);
 $ip=$115;
 label=25;break;
 case 25: 
 var $117=$kp;
 var $118=SAFE_HEAP_LOAD($117, "i8", 0, 0);
 var $119=(($118<<24)>>24);
 var $120=48==($119|0);
 if($120){label=26;break;}else{var $126=0;label=27;break;}
 case 26: 
 var $122=$kp;
 var $123=$ip;
 var $124=($122|0)!=($123|0);
 var $126=$124;label=27;break;
 case 27: 
 var $126;
 if($126){label=28;break;}else{label=29;break;}
 case 28: 
 var $128=$kp;
 var $129=(($128+1)|0);
 $kp=$129;
 label=25;break;
 case 29: 
 var $131=$jp;
 var $132=$kp;
 var $133=($131|0)!=($132|0);
 if($133){label=30;break;}else{label=34;break;}
 case 30: 
 label=31;break;
 case 31: 
 var $136=$kp;
 var $137=(($136+1)|0);
 $kp=$137;
 var $138=SAFE_HEAP_LOAD($136, "i8", 0, 0);
 var $139=$jp;
 var $140=(($139+1)|0);
 $jp=$140;
 SAFE_HEAP_STORE($139, $138, "i8", 0);
 var $141=(($138<<24)>>24);
 var $142=0!=($141|0);
 if($142){label=32;break;}else{label=33;break;}
 case 32: 
 label=31;break;
 case 33: 
 label=34;break;
 case 34: 
 var $146=$3;
 var $147=$7;
 var $148=_strlen($147);
 $i=$148;
 var $149=($146|0)<=($148|0);
 if($149){label=35;break;}else{label=43;break;}
 case 35: 
 var $151=$i;
 var $152=$7;
 var $153=_strcspn($152,13152);
 $j=$153;
 var $154=($151|0)>($153|0);
 if($154){label=36;break;}else{label=42;break;}
 case 36: 
 var $156=$7;
 var $157=$j;
 var $158=(($156+$157)|0);
 var $159=(($158+2)|0);
 $ip=$159;
 var $160=SAFE_HEAP_LOAD($159, "i8", 0, 0);
 var $161=(($160<<24)>>24);
 var $162=48==($161|0);
 if($162){label=37;break;}else{label=41;break;}
 case 37: 
 label=38;break;
 case 38: 
 var $165=$ip;
 var $166=((($165)-(1))|0);
 $ip=$166;
 var $167=$7;
 var $168=($166>>>0)>=($167>>>0);
 if($168){label=39;break;}else{label=40;break;}
 case 39: 
 var $170=$ip;
 var $171=SAFE_HEAP_LOAD($170, "i8", 0, 0);
 var $172=$ip;
 var $173=(($172+1)|0);
 SAFE_HEAP_STORE($173, $171, "i8", 0);
 label=38;break;
 case 40: 
 var $175=$7;
 var $176=(($175)|0);
 SAFE_HEAP_STORE($176, 32, "i8", 0);
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formbfn($d,$cp,$width,$precisn,$digits,$fch,$output){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $ch=sp;
 var $format=(sp)+(8);
 var $ii;
 var $jj;
 $2=$d;
 $3=$cp;
 $4=$width;
 $5=$precisn;
 $6=$digits;
 $7=$fch;
 $8=$output;
 var $9=$4;
 var $10=$5;
 var $11=((($9)-($10))|0);
 var $12=$5;
 var $13=($12|0)>0;
 var $14=($13?1:0);
 var $15=((($11)-($14))|0);
 var $16=$2;
 var $17=$16<0;
 var $18=($17?1:0);
 var $19=((($15)-($18))|0);
 $ii=$19;
 var $20=$ii;
 var $21=$6;
 var $22=($20|0)<($21|0);
 if($22){label=2;break;}else{label=6;break;}
 case 2: 
 var $24=$7;
 var $25=(($24+3)|0);
 var $26=SAFE_HEAP_LOAD($25, "i8", 0, 0);
 SAFE_HEAP_STORE($ch, $26, "i8", 0);
 var $27=(($26<<24)>>24);
 var $28=48==($27|0);
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4592, 29, "i32", 0);
 label=5;break;
 case 4: 
 var $31=$3;
 var $32=$4;
 var $33=_chrcopy($31,$ch,$32,0);
 $3=$33;
 label=5;break;
 case 5: 
 $1=1;
 label=31;break;
 case 6: 
 var $36=(($format)|0);
 var $37=$4;
 var $38=$5;
 var $39=_sprintf($36,10112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $37, "i32", 0),SAFE_HEAP_STORE((tempVarArgs)+(8), $38, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $40=$8;
 var $41=(($format)|0);
 var $42=$2;
 var $43=_sprintf($40,$41,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $42, "double", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $44=$8;
 var $45=_strlen($44);
 $ii=$45;
 var $46=$4;
 var $47=($46|0)>1;
 if($47){label=7;break;}else{label=10;break;}
 case 7: 
 var $49=$ii;
 var $50=$4;
 var $51=($49|0)==($50|0);
 if($51){label=8;break;}else{label=10;break;}
 case 8: 
 var $53=$8;
 var $54=(($53)|0);
 var $55=SAFE_HEAP_LOAD($54, "i8", 0, 0);
 var $56=(($55<<24)>>24);
 var $57=($56|0)==48;
 if($57){label=9;break;}else{label=10;break;}
 case 9: 
 var $59=$8;
 var $60=(($59)|0);
 SAFE_HEAP_STORE($60, 32, "i8", 0);
 label=10;break;
 case 10: 
 var $62=$ii;
 var $63=($62|0)>1;
 if($63){label=11;break;}else{label=30;break;}
 case 11: 
 var $65=$ii;
 var $66=((($65)-(1))|0);
 var $67=$8;
 var $68=(($67+$66)|0);
 var $69=SAFE_HEAP_LOAD($68, "i8", 0, 0);
 var $70=(($69<<24)>>24);
 var $71=($70|0)==48;
 if($71){label=12;break;}else{label=30;break;}
 case 12: 
 var $73=$ii;
 var $74=((($73)-(2))|0);
 $jj=$74;
 label=13;break;
 case 13: 
 var $76=$jj;
 var $77=($76|0)!=0;
 if($77){label=14;break;}else{label=19;break;}
 case 14: 
 var $79=$jj;
 var $80=$8;
 var $81=(($80+$79)|0);
 var $82=SAFE_HEAP_LOAD($81, "i8", 0, 0);
 var $83=(($82<<24)>>24);
 var $84=($83|0)==48;
 if($84){label=16;break;}else{label=15;break;}
 case 15: 
 var $86=$jj;
 var $87=$8;
 var $88=(($87+$86)|0);
 var $89=SAFE_HEAP_LOAD($88, "i8", 0, 0);
 var $90=(($89<<24)>>24);
 var $91=($90|0)==46;
 if($91){label=16;break;}else{label=17;break;}
 case 16: 
 label=18;break;
 case 17: 
 label=19;break;
 case 18: 
 var $95=$jj;
 var $96=((($95)-(1))|0);
 $jj=$96;
 label=13;break;
 case 19: 
 var $98=$jj;
 var $99=$8;
 var $100=(($99+$98)|0);
 var $101=SAFE_HEAP_LOAD($100, "i8", 0, 0);
 var $102=(($101<<24)>>24);
 var $103=($102|0)==45;
 if($103){label=20;break;}else{label=21;break;}
 case 20: 
 var $105=$jj;
 var $106=((($105)+(1))|0);
 $jj=$106;
 var $107=$8;
 var $108=(($107+$105)|0);
 SAFE_HEAP_STORE($108, 32, "i8", 0);
 label=24;break;
 case 21: 
 var $110=$jj;
 var $111=$8;
 var $112=(($111+$110)|0);
 var $113=SAFE_HEAP_LOAD($112, "i8", 0, 0);
 var $114=(($113<<24)>>24);
 var $115=($114|0)==32;
 if($115){label=22;break;}else{label=23;break;}
 case 22: 
 var $117=$jj;
 var $118=((($117)+(1))|0);
 $jj=$118;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $121=$jj;
 var $122=$8;
 var $123=(($122+$121)|0);
 var $124=SAFE_HEAP_LOAD($123, "i8", 0, 0);
 var $125=(($124<<24)>>24);
 var $126=($125|0)==48;
 if($126){label=25;break;}else{label=29;break;}
 case 25: 
 label=26;break;
 case 26: 
 var $129=$jj;
 var $130=$ii;
 var $131=((($130)-(1))|0);
 var $132=($129|0)<($131|0);
 if($132){label=27;break;}else{label=28;break;}
 case 27: 
 var $134=$jj;
 var $135=((($134)+(1))|0);
 $jj=$135;
 var $136=$8;
 var $137=(($136+$134)|0);
 SAFE_HEAP_STORE($137, 32, "i8", 0);
 label=26;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 $1=0;
 label=31;break;
 case 31: 
 var $142=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $142;
  default: assert(0, "bad label: " + label);
 }

}


function _formbfv($bs,$fs,$pold,$pofd,$oq,$gch,$fldptr,$fldint,$bdi,$fdi,$bpl,$fpl,$fln){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $ch;
 var $fch;
 var $fct;
 var $pz;
 $1=$bs;
 $2=$fs;
 $3=$pold;
 $4=$pofd;
 $5=$oq;
 $6=$gch;
 $7=$fldptr;
 $8=$fldint;
 $9=$bdi;
 $10=$fdi;
 $11=$bpl;
 $12=$fpl;
 $13=$fln;
 label=2;break;
 case 2: 
 var $15=$13;
 var $16=((($15)-(1))|0);
 $13=$16;
 var $17=($15|0)!=0;
 if($17){label=3;break;}else{label=39;break;}
 case 3: 
 var $19=$2;
 var $20=(($19+1)|0);
 $2=$20;
 $fct=$19;
 var $21=SAFE_HEAP_LOAD($19, "i8", 0, 0);
 $fch=$21;
 var $22=$fch;
 var $23=(($22<<24)>>24);
 var $24=($23|0)>=48;
 if($24){label=4;break;}else{label=24;break;}
 case 4: 
 var $26=$fch;
 var $27=(($26<<24)>>24);
 var $28=($27|0)<=57;
 if($28){label=5;break;}else{label=24;break;}
 case 5: 
 var $30=$5;
 var $31=$3;
 SAFE_HEAP_STORE($31, $30, "i8*", 0);
 var $32=$10;
 var $33=($32|0)!=0;
 if($33){label=6;break;}else{label=12;break;}
 case 6: 
 var $35=$10;
 var $36=((($35)-(1))|0);
 $10=$36;
 var $37=$9;
 var $38=($35|0)==($37|0);
 if($38){label=7;break;}else{label=10;break;}
 case 7: 
 var $40=$9;
 var $41=((($40)-(1))|0);
 $9=$41;
 var $42=$4;
 var $43=SAFE_HEAP_LOAD($42, "i8*", 0, 0);
 var $44=($43|0)==0;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=$5;
 var $47=$4;
 SAFE_HEAP_STORE($47, $46, "i8*", 0);
 label=9;break;
 case 9: 
 var $49=$1;
 var $50=(($49+1)|0);
 $1=$50;
 var $51=SAFE_HEAP_LOAD($49, "i8", 0, 0);
 var $52=$5;
 var $53=(($52+1)|0);
 $5=$53;
 SAFE_HEAP_STORE($52, $51, "i8", 0);
 label=11;break;
 case 10: 
 var $55=$7;
 var $56=$fct;
 var $57=$4;
 var $58=$5;
 var $59=_formbfx($55,$56,$57,$58);
 var $60=$5;
 var $61=(($60+1)|0);
 $5=$61;
 SAFE_HEAP_STORE($60, $59, "i8", 0);
 label=11;break;
 case 11: 
 label=23;break;
 case 12: 
 var $64=$12;
 var $65=((($64)-(1))|0);
 $12=$65;
 var $66=$11;
 var $67=((($66)-(1))|0);
 $11=$67;
 var $68=($64|0)==($66|0);
 if($68){label=13;break;}else{label=14;break;}
 case 13: 
 var $70=$1;
 var $71=(($70+1)|0);
 $1=$71;
 var $72=SAFE_HEAP_LOAD($70, "i8", 0, 0);
 var $73=$5;
 var $74=(($73+1)|0);
 $5=$74;
 SAFE_HEAP_STORE($73, $72, "i8", 0);
 label=22;break;
 case 14: 
 var $76=$11;
 var $77=($76|0)<0;
 if($77){label=15;break;}else{label=20;break;}
 case 15: 
 $ch=32;
 var $79=$7;
 var $80=(($79+24)|0);
 var $81=SAFE_HEAP_LOAD($80, "i8*", 0, 0);
 $pz=$81;
 var $82=0!=($81|0);
 if($82){label=16;break;}else{label=19;break;}
 case 16: 
 var $84=$pz;
 var $85=$fct;
 var $86=($84>>>0)>=($85>>>0);
 if($86){label=17;break;}else{label=18;break;}
 case 17: 
 $ch=48;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $90=$ch;
 var $91=$5;
 var $92=(($91+1)|0);
 $5=$92;
 SAFE_HEAP_STORE($91, $90, "i8", 0);
 label=21;break;
 case 20: 
 var $94=$1;
 var $95=(($94+1)|0);
 $1=$95;
 var $96=SAFE_HEAP_LOAD($94, "i8", 0, 0);
 var $97=$5;
 var $98=(($97+1)|0);
 $5=$98;
 SAFE_HEAP_STORE($97, $96, "i8", 0);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=38;break;
 case 24: 
 var $103=$fch;
 var $104=(($103<<24)>>24);
 var $105=($104|0)==46;
 if($105){label=25;break;}else{label=30;break;}
 case 25: 
 var $107=$12;
 var $108=($107|0)!=0;
 if($108){label=26;break;}else{label=29;break;}
 case 26: 
 var $110=$11;
 var $111=($110|0)!=0;
 if($111){label=28;break;}else{label=27;break;}
 case 27: 
 var $113=$7;
 var $114=(($113+24)|0);
 var $115=SAFE_HEAP_LOAD($114, "i8*", 0, 0);
 var $116=($115|0)!=0;
 if($116){label=28;break;}else{label=29;break;}
 case 28: 
 var $118=$6;
 var $119=(($118)|0);
 var $120=SAFE_HEAP_LOAD($119, "i8", 0, 0);
 var $121=$5;
 var $122=(($121+1)|0);
 $5=$122;
 SAFE_HEAP_STORE($121, $120, "i8", 0);
 label=29;break;
 case 29: 
 var $124=$1;
 var $125=(($124+1)|0);
 $1=$125;
 label=37;break;
 case 30: 
 var $127=$fch;
 var $128=(($127<<24)>>24);
 var $129=($128|0)==44;
 if($129){label=31;break;}else{label=32;break;}
 case 31: 
 var $131=$6;
 var $132=(($131+1)|0);
 var $133=SAFE_HEAP_LOAD($132, "i8", 0, 0);
 var $134=$5;
 var $135=(($134+1)|0);
 $5=$135;
 SAFE_HEAP_STORE($134, $133, "i8", 0);
 label=36;break;
 case 32: 
 var $137=$fch;
 var $138=(($137<<24)>>24);
 var $139=$6;
 var $140=(($139+4)|0);
 var $141=SAFE_HEAP_LOAD($140, "i8", 0, 0);
 var $142=(($141<<24)>>24);
 var $143=($138|0)==($142|0);
 if($143){label=33;break;}else{label=34;break;}
 case 33: 
 var $145=$5;
 var $146=(($145+1)|0);
 $5=$146;
 SAFE_HEAP_STORE($145, 32, "i8", 0);
 label=35;break;
 case 34: 
 var $148=$fch;
 var $149=$fct;
 var $150=$10;
 var $151=$7;
 var $152=$8;
 var $153=_formbfw($148,$149,$150,$151,$152);
 var $154=$5;
 var $155=(($154+1)|0);
 $5=$155;
 SAFE_HEAP_STORE($154, $153, "i8", 0);
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=2;break;
 case 39: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formbfw($0,$fct,$fdi,$fldptr,$fldint){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $ch=(($0)&255);
 $2=$ch;
 $3=$fct;
 $4=$fdi;
 $5=$fldptr;
 $6=$fldint;
 var $7=$4;
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=7;break;}
 case 2: 
 var $10=$3;
 var $11=$5;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i8*", 0, 0);
 var $14=($10>>>0)<($13>>>0);
 if($14){label=3;break;}else{label=5;break;}
 case 3: 
 var $16=$6;
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$18&128;
 var $20=($19|0)!=0;
 if($20){label=5;break;}else{label=4;break;}
 case 4: 
 $2=32;
 label=6;break;
 case 5: 
 label=6;break;
 case 6: 
 label=11;break;
 case 7: 
 var $25=$3;
 var $26=$5;
 var $27=(($26+28)|0);
 var $28=SAFE_HEAP_LOAD($27, "i8*", 0, 0);
 var $29=($25>>>0)>($28>>>0);
 if($29){label=8;break;}else{label=10;break;}
 case 8: 
 var $31=$6;
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=$33&256;
 var $35=($34|0)!=0;
 if($35){label=10;break;}else{label=9;break;}
 case 9: 
 $2=32;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $39=$2;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function _formbfx($fldptr,$fct,$pofd,$oq){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ch;
 var $pz;
 $1=$fldptr;
 $2=$fct;
 $3=$pofd;
 $4=$oq;
 $ch=32;
 var $5=$1;
 var $6=(($5+20)|0);
 var $7=SAFE_HEAP_LOAD($6, "i8*", 0, 0);
 $pz=$7;
 var $8=$pz;
 var $9=0!=($8|0);
 if($9){label=2;break;}else{label=7;break;}
 case 2: 
 var $11=$pz;
 var $12=$2;
 var $13=($11>>>0)<=($12>>>0);
 if($13){label=3;break;}else{label=6;break;}
 case 3: 
 $ch=48;
 var $15=$3;
 var $16=SAFE_HEAP_LOAD($15, "i8*", 0, 0);
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$4;
 var $20=$3;
 SAFE_HEAP_STORE($20, $19, "i8*", 0);
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $24=$ch;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _formbtk($rite,$out,$colcb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $cb;
 var $cc;
 var $col;
 var $cols;
 var $kw;
 var $mw;
 var $row;
 var $rows;
 var $ip;
 var $ich;
 var $och;
 var $pch;
 var $sch;
 $2=$rite;
 $3=$out;
 $4=$colcb;
 var $5=$2;
 var $6=(($5+16)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32*", 0, 0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $rows=$8;
 var $9=$2;
 var $10=(($9+16)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32*", 0, 0);
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 $cols=$13;
 var $14=$2;
 var $15=(($14)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "double*", 0, 0);
 $ip=$17;
 var $18=$3;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "i8*", 0, 0);
 $och=$21;
 $row=0;
 label=2;break;
 case 2: 
 var $23=$row;
 var $24=$rows;
 var $25=($23|0)<($24|0);
 if($25){label=3;break;}else{label=33;break;}
 case 3: 
 var $27=$4;
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "%struct.aplcb**", 0, 0);
 $cb=$30;
 $col=0;
 label=4;break;
 case 4: 
 var $32=$col;
 var $33=$cols;
 var $34=($32|0)<($33|0);
 if($34){label=5;break;}else{label=31;break;}
 case 5: 
 var $36=$och;
 $sch=$36;
 var $37=$cb;
 var $38=(($37+4)|0);
 $cb=$38;
 var $39=SAFE_HEAP_LOAD($37, "%struct.aplcb*", 0, 0);
 $cc=$39;
 var $40=$cc;
 var $41=(($40+16)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 var $43=(($42+4)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 $kw=$44;
 var $45=$ip;
 var $46=(($45+8)|0);
 $ip=$46;
 var $47=SAFE_HEAP_LOAD($45, "double", 0, 0);
 var $48=$47==0;
 if($48){label=6;break;}else{label=7;break;}
 case 6: 
 var $50=$och;
 var $51=(($50+1)|0);
 $och=$51;
 SAFE_HEAP_STORE($50, 48, "i8", 0);
 label=16;break;
 case 7: 
 var $53=$cc;
 var $54=(($53)|0);
 var $55=$54;
 var $56=SAFE_HEAP_LOAD($55, "i8*", 0, 0);
 var $57=$row;
 var $58=$kw;
 var $59=(Math_imul($57,$58)|0);
 var $60=(($56+$59)|0);
 $ich=$60;
 var $61=$ich;
 var $62=$kw;
 var $63=(($61+$62)|0);
 $pch=$63;
 label=8;break;
 case 8: 
 var $65=$ich;
 var $66=SAFE_HEAP_LOAD($65, "i8", 0, 0);
 var $67=(($66<<24)>>24);
 var $68=($67|0)==32;
 if($68){label=9;break;}else{label=10;break;}
 case 9: 
 var $70=$ich;
 var $71=(($70+1)|0);
 $ich=$71;
 label=8;break;
 case 10: 
 label=11;break;
 case 11: 
 var $74=$ich;
 var $75=SAFE_HEAP_LOAD($74, "i8", 0, 0);
 var $76=(($75<<24)>>24);
 var $77=32!=($76|0);
 if($77){label=12;break;}else{var $83=0;label=13;break;}
 case 12: 
 var $79=$ich;
 var $80=$pch;
 var $81=($79>>>0)<($80>>>0);
 var $83=$81;label=13;break;
 case 13: 
 var $83;
 if($83){label=14;break;}else{label=15;break;}
 case 14: 
 var $85=$ich;
 var $86=(($85+1)|0);
 $ich=$86;
 var $87=SAFE_HEAP_LOAD($85, "i8", 0, 0);
 var $88=$och;
 var $89=(($88+1)|0);
 $och=$89;
 SAFE_HEAP_STORE($88, $87, "i8", 0);
 label=11;break;
 case 15: 
 label=16;break;
 case 16: 
 var $92=$cb;
 var $93=(($92+4)|0);
 $cb=$93;
 var $94=SAFE_HEAP_LOAD($92, "%struct.aplcb*", 0, 0);
 $cc=$94;
 var $95=$cc;
 var $96=(($95+16)|0);
 var $97=SAFE_HEAP_LOAD($96, "i32*", 0, 0);
 var $98=(($97+4)|0);
 var $99=SAFE_HEAP_LOAD($98, "i32", 0, 0);
 $mw=$99;
 var $100=$ip;
 var $101=(($100+8)|0);
 $ip=$101;
 var $102=SAFE_HEAP_LOAD($100, "double", 0, 0);
 var $103=$102!=0;
 if($103){label=17;break;}else{label=26;break;}
 case 17: 
 var $105=((((SAFE_HEAP_LOAD(6688, "i8", 1, 0))|(SAFE_HEAP_LOAD(6689, "i8", 1, 0)<<8)|(SAFE_HEAP_LOAD(6690, "i8", 1, 0)<<16)|(SAFE_HEAP_LOAD(6691, "i8", 1, 0)<<24))|0));
 var $106=SAFE_HEAP_LOAD($105, "i8", 0, 0);
 var $107=$och;
 var $108=(($107+1)|0);
 $och=$108;
 SAFE_HEAP_STORE($107, $106, "i8", 0);
 var $109=$cc;
 var $110=(($109)|0);
 var $111=$110;
 var $112=SAFE_HEAP_LOAD($111, "i8*", 0, 0);
 var $113=$row;
 var $114=$mw;
 var $115=(Math_imul($113,$114)|0);
 var $116=(($112+$115)|0);
 $ich=$116;
 var $117=$ich;
 var $118=$mw;
 var $119=(($117+$118)|0);
 $pch=$119;
 label=18;break;
 case 18: 
 var $121=$ich;
 var $122=SAFE_HEAP_LOAD($121, "i8", 0, 0);
 var $123=(($122<<24)>>24);
 var $124=($123|0)==32;
 if($124){label=19;break;}else{label=20;break;}
 case 19: 
 var $126=$ich;
 var $127=(($126+1)|0);
 $ich=$127;
 label=18;break;
 case 20: 
 label=21;break;
 case 21: 
 var $130=$ich;
 var $131=SAFE_HEAP_LOAD($130, "i8", 0, 0);
 var $132=(($131<<24)>>24);
 var $133=32!=($132|0);
 if($133){label=22;break;}else{var $139=0;label=23;break;}
 case 22: 
 var $135=$ich;
 var $136=$pch;
 var $137=($135>>>0)<($136>>>0);
 var $139=$137;label=23;break;
 case 23: 
 var $139;
 if($139){label=24;break;}else{label=25;break;}
 case 24: 
 var $141=$ich;
 var $142=(($141+1)|0);
 $ich=$142;
 var $143=SAFE_HEAP_LOAD($141, "i8", 0, 0);
 var $144=$och;
 var $145=(($144+1)|0);
 $och=$145;
 SAFE_HEAP_STORE($144, $143, "i8", 0);
 label=21;break;
 case 25: 
 label=26;break;
 case 26: 
 var $148=$kw;
 var $149=$mw;
 var $150=((($148)+($149))|0);
 var $151=((($150)+(1))|0);
 var $152=$col;
 var $153=$cols;
 var $154=((($153)-(1))|0);
 var $155=($152|0)<($154|0);
 var $156=($155&1);
 var $157=((($151)+($156))|0);
 var $158=$sch;
 var $159=(($158+$157)|0);
 $sch=$159;
 label=27;break;
 case 27: 
 var $161=$och;
 var $162=$sch;
 var $163=($161>>>0)<($162>>>0);
 if($163){label=28;break;}else{label=29;break;}
 case 28: 
 var $165=$och;
 var $166=(($165+1)|0);
 $och=$166;
 SAFE_HEAP_STORE($165, 32, "i8", 0);
 label=27;break;
 case 29: 
 label=30;break;
 case 30: 
 var $169=$col;
 var $170=((($169)+(1))|0);
 $col=$170;
 label=4;break;
 case 31: 
 label=32;break;
 case 32: 
 var $173=$row;
 var $174=((($173)+(1))|0);
 $row=$174;
 label=2;break;
 case 33: 
 var $176=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $176;
  default: assert(0, "bad label: " + label);
 }

}


function _form($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cba;
 var $dimcb=sp;
 var $out;
 var $cols;
 var $i;
 var $ip;
 var $tempsave;
 var $cp;
 $2=$left;
 $3=$rite;
 SAFE_HEAP_STORE($dimcb, 0, "%struct.aplcb*", 0);
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=33;break;
 case 3: 
 var $11=$3;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=0==($13|0);
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$3;
 var $18=_formata($16,$17);
 $1=$18;
 label=33;break;
 case 5: 
 var $20=$3;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$22&8;
 var $24=($23|0)!=0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$2;
 var $27=$3;
 var $28=_formatb($26,$27);
 $1=$28;
 label=33;break;
 case 7: 
 var $30=$2;
 var $31=($30|0)!=0;
 if($31){label=8;break;}else{label=11;break;}
 case 8: 
 var $33=$2;
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$35&8;
 var $37=($36|0)!=0;
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 var $39=$2;
 var $40=$3;
 var $41=_formatp($39,$40);
 $1=$41;
 label=33;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $45=$3;
 var $46=(($45+4)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=$47&4;
 var $49=($48|0)!=0;
 if($49){label=13;break;}else{label=14;break;}
 case 13: 
 var $51=$3;
 var $52=_real($51);
 $3=$52;
 label=14;break;
 case 14: 
 var $54=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $55=($54|0)!=0;
 if($55){label=15;break;}else{label=16;break;}
 case 15: 
 label=17;break;
 case 16: 
 var $58=$3;
 var $59=_formati($58,$dimcb);
 $3=$59;
 label=17;break;
 case 17: 
 var $61=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $62=($61|0)!=0;
 if($62){label=18;break;}else{label=19;break;}
 case 18: 
 var $64=$2;
 var $65=$3;
 var $66=_errstop(0,$64,$65,0);
 $1=$66;
 label=33;break;
 case 19: 
 var $68=$3;
 var $69=(($68+4)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=$70&64;
 var $72=($71|0)!=0;
 if($72){label=20;break;}else{label=21;break;}
 case 20: 
 var $74=$2;
 var $75=$3;
 var $76=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $77=_formatk($74,$75,$76);
 $1=$77;
 label=33;break;
 case 21: 
 var $79=$3;
 var $80=(($79+16)|0);
 var $81=SAFE_HEAP_LOAD($80, "i32*", 0, 0);
 var $82=(($81+4)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 $cols=$83;
 var $84=$cols;
 var $85=((($84)*(9))&-1);
 var $86=_getcb(0,$85,4,2,0);
 $cba=$86;
 var $87=$cba;
 var $88=($87|0)==0;
 if($88){label=22;break;}else{label=23;break;}
 case 22: 
 var $90=$2;
 var $91=$3;
 var $92=_errstop(0,$90,$91,0);
 $1=$92;
 label=33;break;
 case 23: 
 var $94=$cba;
 var $95=(($94+16)|0);
 var $96=SAFE_HEAP_LOAD($95, "i32*", 0, 0);
 SAFE_HEAP_STORE($96, 9, "i32", 0);
 var $97=$cols;
 var $98=$cba;
 var $99=(($98+16)|0);
 var $100=SAFE_HEAP_LOAD($99, "i32*", 0, 0);
 var $101=(($100+4)|0);
 SAFE_HEAP_STORE($101, $97, "i32", 0);
 var $102=$3;
 var $103=$cba;
 _formatj($102,$103);
 var $104=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $105=($104|0)!=0;
 if($105){label=24;break;}else{label=25;break;}
 case 24: 
 $out=0;
 label=29;break;
 case 25: 
 var $108=$2;
 var $109=($108|0)==0;
 if($109){label=26;break;}else{label=27;break;}
 case 26: 
 var $111=$cba;
 _formatc($111);
 label=28;break;
 case 27: 
 var $113=$2;
 var $114=(($113+4)|0);
 var $115=SAFE_HEAP_LOAD($114, "i32", 0, 0);
 var $116=$115&1;
 $tempsave=$116;
 var $117=$2;
 var $118=_perm($117);
 var $119=$3;
 var $120=$cba;
 _formatd($118,$119,$120);
 var $121=$tempsave;
 var $122=$2;
 var $123=(($122+4)|0);
 var $124=SAFE_HEAP_LOAD($123, "i32", 0, 0);
 var $125=((($124)+($121))|0);
 SAFE_HEAP_STORE($123, $125, "i32", 0);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $128=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $129=($128|0)!=0;
 if($129){label=30;break;}else{label=31;break;}
 case 30: 
 $out=0;
 label=32;break;
 case 31: 
 var $132=$3;
 var $133=$cba;
 var $134=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $135=_formatg($132,$133,$134);
 $out=$135;
 label=32;break;
 case 32: 
 var $137=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $138=_temp($137);
 _endoper($138);
 var $139=$cba;
 var $140=_temp($139);
 _endoper($140);
 var $141=$2;
 var $142=$3;
 var $143=_temp($142);
 var $144=$out;
 var $145=_errstop(0,$141,$143,$144);
 $1=$145;
 label=33;break;
 case 33: 
 var $147=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $147;
  default: assert(0, "bad label: " + label);
 }

}


function _formdfs($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $chrcb;
 var $cntcb;
 var $colbl;
 var $colwi;
 var $frmcb;
 var $numcb;
 var $rowbl;
 var $rowhi;
 var $cols;
 var $rows;
 var $dimcnt;
 var $icb;
 var $ocb;
 var $rcb;
 var $out;
 var $dimcb;
 var $ip;
 var $rowblp;
 var $rowhip;
 var $v;
 $2=$rite;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$5&32;
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=$2;
 var $10=_formdfw($9);
 $1=$10;
 label=14;break;
 case 3: 
 var $12=$2;
 var $13=_formdfy($12);
 $dimcb=$13;
 var $14=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $15=($14|0)!=0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$dimcb;
 var $18=_errstop(0,0,0,$17);
 $1=$18;
 label=14;break;
 case 5: 
 var $20=$2;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=_getcb(0,$22,33,2,0);
 $frmcb=$23;
 var $24=$frmcb;
 var $25=(($24+16)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32*", 0, 0);
 var $27=$26;
 var $28=$dimcb;
 var $29=(($28)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "i32*", 0, 0);
 var $32=$31;
 var $33=_intcopy($27,$32,2,1);
 var $34=$33;
 $ip=$34;
 var $35=$dimcb;
 var $36=_endoper($35);
 var $37=$frmcb;
 var $38=(($37+16)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32*", 0, 0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 $rows=$40;
 var $41=$frmcb;
 var $42=(($41+16)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32*", 0, 0);
 var $44=(($43+4)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 $cols=$45;
 var $46=$2;
 var $47=(($46+12)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 $dimcnt=$48;
 var $49=2<($48|0);
 if($49){label=6;break;}else{label=7;break;}
 case 6: 
 var $51=$2;
 var $52=(($51+12)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=((($53)-(1))|0);
 var $55=_iscalar($54);
 var $56=_iscalar(0);
 var $57=_reshape($55,$56);
 $cntcb=$57;
 label=8;break;
 case 7: 
 $cntcb=0;
 label=8;break;
 case 8: 
 var $60=$cols;
 var $61=_iscalar($60);
 var $62=_iscalar(0);
 var $63=_reshape($61,$62);
 var $64=_perm($63);
 $colwi=$64;
 var $65=$cols;
 var $66=((($65)-(1))|0);
 var $67=_iscalar($66);
 var $68=_iscalar(0);
 var $69=_reshape($67,$68);
 var $70=_perm($69);
 $colbl=$70;
 var $71=$rows;
 var $72=_iscalar($71);
 var $73=_iscalar(0);
 var $74=_reshape($72,$73);
 $rowhi=$74;
 var $75=$rows;
 var $76=((($75)-(1))|0);
 var $77=_iscalar($76);
 var $78=_iscalar(0);
 var $79=_reshape($77,$78);
 $rowbl=$79;
 var $80=$cols;
 var $81=_iscalar($80);
 var $82=_iscalar(1);
 var $83=_reshape($81,$82);
 $numcb=$83;
 var $84=$cols;
 var $85=_iscalar($84);
 var $86=_iscalar(1);
 var $87=_reshape($85,$86);
 $chrcb=$87;
 var $88=$2;
 var $89=(($88)|0);
 var $90=$89;
 var $91=SAFE_HEAP_LOAD($90, "%struct.aplcb**", 0, 0);
 $rcb=$91;
 $icb=$91;
 var $92=$frmcb;
 var $93=(($92)|0);
 var $94=$93;
 var $95=SAFE_HEAP_LOAD($94, "%struct.aplcb**", 0, 0);
 $ocb=$95;
 var $96=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $97=($96|0)==0;
 if($97){label=9;break;}else{label=13;break;}
 case 9: 
 var $99=$frmcb;
 var $100=(($99+8)|0);
 var $101=SAFE_HEAP_LOAD($100, "i32", 0, 0);
 var $102=($101|0)!=0;
 if($102){label=10;break;}else{label=11;break;}
 case 10: 
 var $104=$dimcnt;
 var $105=($104|0)<2;
 var $106=($105&1);
 $v=$106;
 var $107=$rowbl;
 var $108=(($107)|0);
 var $109=$108;
 var $110=SAFE_HEAP_LOAD($109, "i32*", 0, 0);
 $rowblp=$110;
 var $111=$rowhi;
 var $112=(($111)|0);
 var $113=$112;
 var $114=SAFE_HEAP_LOAD($113, "i32*", 0, 0);
 $rowhip=$114;
 var $115=$cols;
 var $116=$rows;
 var $117=$dimcnt;
 var $118=$v;
 var $119=$rowblp;
 var $120=$rowhip;
 var $121=$icb;
 var $122=$ocb;
 var $123=$rcb;
 var $124=$chrcb;
 var $125=$cntcb;
 var $126=$colbl;
 var $127=$colwi;
 var $128=$frmcb;
 var $129=$numcb;
 var $130=$2;
 var $131=$rowbl;
 var $132=$rowhi;
 var $133=_formdfu($115,$116,$117,$118,$119,$120,$121,$122,$123,$124,$125,$126,$127,$128,$129,$130,$131,$132);
 $out=$133;
 label=12;break;
 case 11: 
 var $135=$frmcb;
 $out=$135;
 $frmcb=0;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $138=$colbl;
 var $139=_temp($138);
 var $140=_endoper($139);
 var $141=$colwi;
 var $142=_temp($141);
 var $143=_endoper($142);
 var $144=$chrcb;
 var $145=_endoper($144);
 var $146=$cntcb;
 var $147=_endoper($146);
 var $148=$frmcb;
 var $149=_endoper($148);
 var $150=$rowbl;
 var $151=_endoper($150);
 var $152=$rowhi;
 var $153=_endoper($152);
 var $154=$numcb;
 var $155=$2;
 var $156=$out;
 var $157=_errstop(0,$154,$155,$156);
 $1=$157;
 label=14;break;
 case 14: 
 var $159=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $159;
  default: assert(0, "bad label: " + label);
 }

}


function _formdft($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 var $tempsave;
 $2=$rite;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$5&32;
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=$2;
 var $10=_form(0,$9);
 $1=$10;
 label=6;break;
 case 3: 
 var $12=$2;
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=0==($14|0);
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$2;
 var $18=_formata(0,$17);
 $1=$18;
 label=6;break;
 case 5: 
 var $20=$2;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$22&1;
 $tempsave=$23;
 var $24=$2;
 var $25=_perm($24);
 var $26=_formdfs($25);
 $out=$26;
 var $27=$tempsave;
 var $28=$2;
 var $29=(($28+4)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=((($30)+($27))|0);
 SAFE_HEAP_STORE($29, $31, "i32", 0);
 var $32=$2;
 var $33=$out;
 var $34=_errstop(0,0,$32,$33);
 $1=$34;
 label=6;break;
 case 6: 
 var $36=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }

}


function _formdfu($cols,$rows,$dimcnt,$v,$rowblp,$rowhip,$icb,$ocb,$rcb,$chrcb,$cntcb,$colbl,$colwi,$frmcb,$numcb,$rite,$rowbl,$rowhi){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $18;
 var $19;
 var $ip;
 var $lastip;
 var $op;
 var $chrp;
 var $colblp;
 var $colwip;
 var $hitot;
 var $i;
 var $j;
 var $k;
 var $m;
 var $mxl;
 var $mxr;
 var $notchara;
 var $nump;
 var $n;
 var $notcharb;
 var $ranka;
 var $rankb;
 var $rowheight;
 var $rowspaces;
 var $sptot;
 var $wip;
 $2=$cols;
 $3=$rows;
 $4=$dimcnt;
 $5=$v;
 $6=$rowblp;
 $7=$rowhip;
 $8=$icb;
 $9=$ocb;
 $10=$rcb;
 $11=$chrcb;
 $12=$cntcb;
 $13=$colbl;
 $14=$colwi;
 $15=$frmcb;
 $16=$numcb;
 $17=$rite;
 $18=$rowbl;
 $19=$rowhi;
 $hitot=0;
 $sptot=0;
 var $20=$3;
 $i=$20;
 label=2;break;
 case 2: 
 var $22=$i;
 var $23=($22|0)>0;
 if($23){label=3;break;}else{var $28=0;label=4;break;}
 case 3: 
 var $25=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $26=($25|0)==0;
 var $28=$26;label=4;break;
 case 4: 
 var $28;
 if($28){label=5;break;}else{label=46;break;}
 case 5: 
 $lastip=0;
 var $30=$13;
 var $31=(($30)|0);
 var $32=$31;
 var $33=SAFE_HEAP_LOAD($32, "i32*", 0, 0);
 $colblp=$33;
 var $34=$14;
 var $35=(($34)|0);
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "i32*", 0, 0);
 $colwip=$37;
 var $38=$16;
 var $39=(($38)|0);
 var $40=$39;
 var $41=SAFE_HEAP_LOAD($40, "i32*", 0, 0);
 $nump=$41;
 var $42=$11;
 var $43=(($42)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "i32*", 0, 0);
 $chrp=$45;
 $rowspaces=0;
 $rowheight=0;
 var $46=$2;
 $j=$46;
 label=6;break;
 case 6: 
 var $48=$j;
 var $49=($48|0)>0;
 if($49){label=7;break;}else{var $54=0;label=8;break;}
 case 7: 
 var $51=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $52=($51|0)==0;
 var $54=$52;label=8;break;
 case 8: 
 var $54;
 if($54){label=9;break;}else{label=40;break;}
 case 9: 
 var $56=$8;
 var $57=(($56+4)|0);
 $8=$57;
 var $58=SAFE_HEAP_LOAD($56, "%struct.aplcb*", 0, 0);
 $ip=$58;
 var $59=$ip;
 var $60=(($59+4)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=$61&8;
 var $63=($62|0)!=0;
 var $64=$63^1;
 var $65=($64&1);
 $notcharb=$65;
 var $66=$nump;
 var $67=(($66+4)|0);
 $nump=$67;
 var $68=SAFE_HEAP_LOAD($66, "i32", 0, 0);
 var $69=$68&$65;
 SAFE_HEAP_STORE($66, $69, "i32", 0);
 var $70=$notcharb;
 var $71=($70|0)!=0;
 var $72=$71^1;
 var $73=($72&1);
 var $74=$chrp;
 var $75=(($74+4)|0);
 $chrp=$75;
 var $76=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $77=$76&$73;
 SAFE_HEAP_STORE($74, $77, "i32", 0);
 var $78=$ip;
 var $79=(($78+12)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 $rankb=$80;
 var $81=$ip;
 var $82=_formdfs($81);
 $op=$82;
 var $83=$9;
 var $84=(($83+4)|0);
 $9=$84;
 SAFE_HEAP_STORE($83, $82, "%struct.aplcb*", 0);
 var $85=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $86=($85|0)!=0;
 if($86){label=10;break;}else{label=11;break;}
 case 10: 
 $1=0;
 label=47;break;
 case 11: 
 var $89=$op;
 var $90=(($89+12)|0);
 var $91=SAFE_HEAP_LOAD($90, "i32", 0, 0);
 var $92=($91|0)<2;
 var $93=($92&1);
 $k=$93;
 var $94=$k;
 var $95=$5;
 var $96=$95&$94;
 $5=$96;
 var $97=$op;
 var $98=(($97+12)|0);
 var $99=SAFE_HEAP_LOAD($98, "i32", 0, 0);
 var $100=($99|0)!=0;
 if($100){label=12;break;}else{label=13;break;}
 case 12: 
 var $102=$op;
 var $103=(($102+16)|0);
 var $104=SAFE_HEAP_LOAD($103, "i32*", 0, 0);
 var $105=$k;
 var $106=($105|0)==0;
 var $107=($106&1);
 var $108=(($104+($107<<2))|0);
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 var $112=$109;label=14;break;
 case 13: 
 var $112=1;label=14;break;
 case 14: 
 var $112;
 $wip=$112;
 var $113=$wip;
 $mxl=$113;
 var $114=$colwip;
 var $115=SAFE_HEAP_LOAD($114, "i32", 0, 0);
 $mxr=$115;
 var $116=($113|0)>($115|0);
 if($116){label=15;break;}else{label=16;break;}
 case 15: 
 var $118=$mxl;
 var $122=$118;label=17;break;
 case 16: 
 var $120=$mxr;
 var $122=$120;label=17;break;
 case 17: 
 var $122;
 $wip=$122;
 var $123=$wip;
 var $124=$colwip;
 var $125=(($124+4)|0);
 $colwip=$125;
 SAFE_HEAP_STORE($124, $123, "i32", 0);
 var $126=$lastip;
 var $127=($126|0)!=0;
 if($127){label=18;break;}else{label=26;break;}
 case 18: 
 var $129=$colblp;
 var $130=($129|0)!=0;
 if($130){label=19;break;}else{label=26;break;}
 case 19: 
 var $132=$ranka;
 var $133=$notchara;
 var $134=((($132)+($133))|0);
 $mxl=$134;
 var $135=$rankb;
 var $136=$notcharb;
 var $137=((($135)+($136))|0);
 $mxr=$137;
 var $138=($134|0)>($137|0);
 if($138){label=20;break;}else{label=21;break;}
 case 20: 
 var $140=$mxl;
 var $144=$140;label=22;break;
 case 21: 
 var $142=$mxr;
 var $144=$142;label=22;break;
 case 22: 
 var $144;
 $m=$144;
 var $145=$m;
 $mxl=$145;
 var $146=$colblp;
 var $147=SAFE_HEAP_LOAD($146, "i32", 0, 0);
 $mxr=$147;
 var $148=($145|0)>($147|0);
 if($148){label=23;break;}else{label=24;break;}
 case 23: 
 var $150=$mxl;
 var $154=$150;label=25;break;
 case 24: 
 var $152=$mxr;
 var $154=$152;label=25;break;
 case 25: 
 var $154;
 $m=$154;
 var $155=$m;
 var $156=$colblp;
 var $157=(($156+4)|0);
 $colblp=$157;
 SAFE_HEAP_STORE($156, $155, "i32", 0);
 label=26;break;
 case 26: 
 var $159=$ip;
 $lastip=$159;
 var $160=$notcharb;
 $notchara=$160;
 var $161=$rankb;
 $ranka=$161;
 var $162=$k;
 var $163=($162|0)!=0;
 if($163){label=27;break;}else{label=28;break;}
 case 27: 
 var $171=1;label=29;break;
 case 28: 
 var $166=$op;
 var $167=(($166+16)|0);
 var $168=SAFE_HEAP_LOAD($167, "i32*", 0, 0);
 var $169=SAFE_HEAP_LOAD($168, "i32", 0, 0);
 var $171=$169;label=29;break;
 case 29: 
 var $171;
 $m=$171;
 var $172=$m;
 var $173=$rowheight;
 var $174=($172|0)>($173|0);
 if($174){label=30;break;}else{label=31;break;}
 case 30: 
 var $176=$m;
 $rowheight=$176;
 label=31;break;
 case 31: 
 var $178=$i;
 var $179=$3;
 var $180=($178|0)<($179|0);
 if($180){label=32;break;}else{label=38;break;}
 case 32: 
 var $182=$ranka;
 $mxl=$182;
 var $183=$10;
 var $184=(($183+4)|0);
 $10=$184;
 var $185=SAFE_HEAP_LOAD($183, "%struct.aplcb*", 0, 0);
 var $186=(($185+12)|0);
 var $187=SAFE_HEAP_LOAD($186, "i32", 0, 0);
 $mxr=$187;
 var $188=($182|0)>($187|0);
 if($188){label=33;break;}else{label=34;break;}
 case 33: 
 var $190=$mxl;
 var $194=$190;label=35;break;
 case 34: 
 var $192=$mxr;
 var $194=$192;label=35;break;
 case 35: 
 var $194;
 var $195=((($194)-(1))|0);
 $m=$195;
 var $196=$m;
 var $197=$rowspaces;
 var $198=($196|0)>($197|0);
 if($198){label=36;break;}else{label=37;break;}
 case 36: 
 var $200=$m;
 $rowspaces=$200;
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $204=$j;
 var $205=((($204)-(1))|0);
 $j=$205;
 label=6;break;
 case 40: 
 var $207=$4;
 var $208=($207|0)>2;
 if($208){label=41;break;}else{label=42;break;}
 case 41: 
 var $210=$17;
 var $211=$12;
 var $212=_formdfv($210,$211);
 var $213=$rowspaces;
 var $214=((($213)+($212))|0);
 $rowspaces=$214;
 label=42;break;
 case 42: 
 var $216=$rowheight;
 var $217=$7;
 var $218=(($217+4)|0);
 $7=$218;
 SAFE_HEAP_STORE($217, $216, "i32", 0);
 var $219=$hitot;
 var $220=((($219)+($216))|0);
 $hitot=$220;
 var $221=$i;
 var $222=($221|0)>1;
 if($222){label=43;break;}else{label=44;break;}
 case 43: 
 var $224=$rowspaces;
 var $225=$6;
 var $226=(($225+4)|0);
 $6=$226;
 SAFE_HEAP_STORE($225, $224, "i32", 0);
 var $227=$sptot;
 var $228=((($227)+($224))|0);
 $sptot=$228;
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $231=$i;
 var $232=((($231)-(1))|0);
 $i=$232;
 label=2;break;
 case 46: 
 var $234=$5;
 var $235=$2;
 var $236=$3;
 var $237=$hitot;
 var $238=$sptot;
 var $239=((($237)+($238))|0);
 var $240=$15;
 var $241=$13;
 var $242=$14;
 var $243=$18;
 var $244=$19;
 var $245=$16;
 var $246=$11;
 var $247=_formdfx($234,$235,$236,$239,$240,$241,$242,$243,$244,$245,$246);
 $1=$247;
 label=47;break;
 case 47: 
 var $249=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $249;
  default: assert(0, "bad label: " + label);
 }

}


function _formdfv($rite,$cntcb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cntp;
 var $dimp;
 var $dims;
 var $rowspaces;
 $1=$rite;
 $2=$cntcb;
 $rowspaces=0;
 var $3=$1;
 var $4=(($3+16)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32*", 0, 0);
 $dims=$5;
 var $6=$dims;
 var $7=$1;
 var $8=(($7+12)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=(($6+($9<<2))|0);
 var $11=((($10)-(8))|0);
 $dimp=$11;
 var $12=$2;
 var $13=(($12)|0);
 var $14=$13;
 var $15=SAFE_HEAP_LOAD($14, "i32*", 0, 0);
 $cntp=$15;
 label=2;break;
 case 2: 
 var $17=$cntp;
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=((($18)+(1))|0);
 SAFE_HEAP_STORE($17, $19, "i32", 0);
 var $20=$dimp;
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($19|0)==($21|0);
 if($22){label=3;break;}else{label=6;break;}
 case 3: 
 var $24=$rowspaces;
 var $25=((($24)+(1))|0);
 $rowspaces=$25;
 var $26=$cntp;
 SAFE_HEAP_STORE($26, 0, "i32", 0);
 var $27=$dimp;
 var $28=$dims;
 var $29=($27|0)==($28|0);
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $32=$dimp;
 var $33=((($32)-(4))|0);
 $dimp=$33;
 var $34=$cntp;
 var $35=(($34+4)|0);
 $cntp=$35;
 label=2;break;
 case 6: 
 var $37=$rowspaces;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _formdfw($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cntcb;
 var $dimcb;
 var $frmcb;
 var $out;
 var $rowbl;
 var $blanks;
 var $cols;
 var $i;
 var $j;
 var $k;
 var $rows;
 var $rowblp;
 var $ip;
 var $op;
 $2=$rite;
 $blanks=0;
 var $3=$2;
 var $4=_form(0,$3);
 var $5=_perm($4);
 $frmcb=$5;
 var $6=$frmcb;
 var $7=(($6+12)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=($8|0)<3;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$frmcb;
 var $12=_errstop(0,0,0,$11);
 $1=$12;
 label=30;break;
 case 3: 
 var $14=$frmcb;
 var $15=_formdfy($14);
 $dimcb=$15;
 var $16=$dimcb;
 var $17=(($16)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "i32*", 0, 0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 $rows=$20;
 var $21=$dimcb;
 var $22=(($21)|0);
 var $23=$22;
 var $24=SAFE_HEAP_LOAD($23, "i32*", 0, 0);
 var $25=(($24+4)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 $cols=$26;
 var $27=$dimcb;
 _endoper($27);
 var $28=$frmcb;
 var $29=(($28+12)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=((($30)-(1))|0);
 var $32=_iscalar($31);
 var $33=_iscalar(0);
 var $34=_reshape($32,$33);
 $cntcb=$34;
 var $35=$rows;
 var $36=((($35)-(1))|0);
 var $37=_iscalar($36);
 var $38=_iscalar(0);
 var $39=_reshape($37,$38);
 $rowbl=$39;
 var $40=$rowbl;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "i32*", 0, 0);
 $rowblp=$43;
 var $44=$rowbl;
 var $45=(($44+8)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 $i=$46;
 label=4;break;
 case 4: 
 var $48=$i;
 var $49=($48|0)>0;
 if($49){label=5;break;}else{var $54=0;label=6;break;}
 case 5: 
 var $51=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $52=($51|0)==0;
 var $54=$52;label=6;break;
 case 6: 
 var $54;
 if($54){label=7;break;}else{label=9;break;}
 case 7: 
 var $56=$frmcb;
 var $57=$cntcb;
 var $58=_formdfv($56,$57);
 var $59=$rowblp;
 var $60=(($59+4)|0);
 $rowblp=$60;
 SAFE_HEAP_STORE($59, $58, "i32", 0);
 var $61=$blanks;
 var $62=((($61)+($58))|0);
 $blanks=$62;
 label=8;break;
 case 8: 
 var $64=$i;
 var $65=((($64)-(1))|0);
 $i=$65;
 label=4;break;
 case 9: 
 var $67=$cntcb;
 _endoper($67);
 var $68=$rows;
 var $69=$blanks;
 var $70=((($68)+($69))|0);
 var $71=$cols;
 var $72=(Math_imul($70,$71)|0);
 var $73=_getcb(0,$72,9,2,0);
 $out=$73;
 var $74=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $75=($74|0)==0;
 if($75){label=10;break;}else{label=29;break;}
 case 10: 
 var $77=$rows;
 var $78=$blanks;
 var $79=((($77)+($78))|0);
 var $80=$out;
 var $81=(($80+16)|0);
 var $82=SAFE_HEAP_LOAD($81, "i32*", 0, 0);
 SAFE_HEAP_STORE($82, $79, "i32", 0);
 var $83=$cols;
 var $84=$out;
 var $85=(($84+16)|0);
 var $86=SAFE_HEAP_LOAD($85, "i32*", 0, 0);
 var $87=(($86+4)|0);
 SAFE_HEAP_STORE($87, $83, "i32", 0);
 var $88=$frmcb;
 var $89=(($88)|0);
 var $90=$89;
 var $91=SAFE_HEAP_LOAD($90, "i8*", 0, 0);
 $ip=$91;
 var $92=$out;
 var $93=(($92)|0);
 var $94=$93;
 var $95=SAFE_HEAP_LOAD($94, "i8*", 0, 0);
 $op=$95;
 var $96=$rowbl;
 var $97=(($96)|0);
 var $98=$97;
 var $99=SAFE_HEAP_LOAD($98, "i32*", 0, 0);
 $rowblp=$99;
 var $100=$rows;
 $i=$100;
 label=11;break;
 case 11: 
 var $102=$i;
 var $103=($102|0)>0;
 if($103){label=12;break;}else{label=28;break;}
 case 12: 
 var $105=$cols;
 $j=$105;
 label=13;break;
 case 13: 
 var $107=$j;
 var $108=($107|0)>0;
 if($108){label=14;break;}else{label=16;break;}
 case 14: 
 var $110=$ip;
 var $111=(($110+1)|0);
 $ip=$111;
 var $112=SAFE_HEAP_LOAD($110, "i8", 0, 0);
 var $113=$op;
 var $114=(($113+1)|0);
 $op=$114;
 SAFE_HEAP_STORE($113, $112, "i8", 0);
 label=15;break;
 case 15: 
 var $116=$j;
 var $117=((($116)-(1))|0);
 $j=$117;
 label=13;break;
 case 16: 
 var $119=$i;
 var $120=($119|0)>1;
 if($120){label=17;break;}else{label=26;break;}
 case 17: 
 var $122=$rowblp;
 var $123=(($122+4)|0);
 $rowblp=$123;
 var $124=SAFE_HEAP_LOAD($122, "i32", 0, 0);
 $k=$124;
 label=18;break;
 case 18: 
 var $126=$k;
 var $127=($126|0)>0;
 if($127){label=19;break;}else{label=25;break;}
 case 19: 
 var $129=$cols;
 $j=$129;
 label=20;break;
 case 20: 
 var $131=$j;
 var $132=($131|0)>0;
 if($132){label=21;break;}else{label=23;break;}
 case 21: 
 var $134=$op;
 var $135=(($134+1)|0);
 $op=$135;
 SAFE_HEAP_STORE($134, 32, "i8", 0);
 label=22;break;
 case 22: 
 var $137=$j;
 var $138=((($137)-(1))|0);
 $j=$138;
 label=20;break;
 case 23: 
 label=24;break;
 case 24: 
 var $141=$k;
 var $142=((($141)-(1))|0);
 $k=$142;
 label=18;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $146=$i;
 var $147=((($146)-(1))|0);
 $i=$147;
 label=11;break;
 case 28: 
 label=29;break;
 case 29: 
 var $150=$rowbl;
 var $151=$frmcb;
 var $152=_temp($151);
 var $153=$out;
 var $154=_errstop(0,$150,$152,$153);
 $1=$154;
 label=30;break;
 case 30: 
 var $156=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $156;
  default: assert(0, "bad label: " + label);
 }

}


function _formdfx($v,$cols,$rows,$rowso,$frmcb,$colbl,$colwi,$rowbl,$rowhi,$numcb,$chrcb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $fcb;
 var $frmp;
 var $out;
 var $chrp;
 var $colblp;
 var $colso;
 var $colspaces;
 var $colwip;
 var $colwidth;
 var $i;
 var $icols;
 var $iplusid=sp;
 var $irows;
 var $j;
 var $k;
 var $m;
 var $nump;
 var $rank;
 var $rowblp;
 var $rowheight;
 var $rowhip;
 var $rowspaces;
 var $fch;
 var $opcol;
 var $opout;
 var $oprow;
 var $opstart;
 $2=$v;
 $3=$cols;
 $4=$rows;
 $5=$rowso;
 $6=$frmcb;
 $7=$colbl;
 $8=$colwi;
 $9=$rowbl;
 $10=$rowhi;
 $11=$numcb;
 $12=$chrcb;
 SAFE_HEAP_STORE($iplusid, 0, "i32", 0);
 var $13=$7;
 var $14=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $15=_ireduce((344),$iplusid,$13,$14);
 var $16=_ivalue($15);
 var $17=$8;
 var $18=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $19=_ireduce((344),$iplusid,$17,$18);
 var $20=_ivalue($19);
 var $21=((($16)+($20))|0);
 var $22=((($21)+(2))|0);
 $colso=$22;
 var $23=$2;
 var $24=$colso;
 var $25=$5;
 var $26=_formdfz($23,$24,$25);
 $out=$26;
 var $27=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $28=($27|0)!=0;
 if($28){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=33;break;
 case 3: 
 var $31=$6;
 var $32=(($31)|0);
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "%struct.aplcb**", 0, 0);
 $frmp=$34;
 var $35=$9;
 var $36=(($35)|0);
 var $37=$36;
 var $38=SAFE_HEAP_LOAD($37, "i32*", 0, 0);
 $rowblp=$38;
 var $39=$10;
 var $40=(($39)|0);
 var $41=$40;
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 $rowhip=$42;
 var $43=$out;
 var $44=(($43)|0);
 var $45=$44;
 var $46=SAFE_HEAP_LOAD($45, "i8*", 0, 0);
 var $47=(($46+1)|0);
 $oprow=$47;
 var $48=$4;
 $i=$48;
 label=4;break;
 case 4: 
 var $50=$i;
 var $51=($50|0)>0;
 if($51){label=5;break;}else{label=32;break;}
 case 5: 
 var $53=$7;
 var $54=(($53)|0);
 var $55=$54;
 var $56=SAFE_HEAP_LOAD($55, "i32*", 0, 0);
 $colblp=$56;
 var $57=$8;
 var $58=(($57)|0);
 var $59=$58;
 var $60=SAFE_HEAP_LOAD($59, "i32*", 0, 0);
 $colwip=$60;
 var $61=$11;
 var $62=(($61)|0);
 var $63=$62;
 var $64=SAFE_HEAP_LOAD($63, "i32*", 0, 0);
 $nump=$64;
 var $65=$12;
 var $66=(($65)|0);
 var $67=$66;
 var $68=SAFE_HEAP_LOAD($67, "i32*", 0, 0);
 $chrp=$68;
 var $69=$rowhip;
 var $70=(($69+4)|0);
 $rowhip=$70;
 var $71=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 $rowheight=$71;
 var $72=$4;
 var $73=($72|0)>1;
 if($73){label=6;break;}else{label=7;break;}
 case 6: 
 var $75=$rowblp;
 var $76=(($75+4)|0);
 $rowblp=$76;
 var $77=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $80=$77;label=8;break;
 case 7: 
 var $80=0;label=8;break;
 case 8: 
 var $80;
 $rowspaces=$80;
 var $81=$oprow;
 $opcol=$81;
 var $82=$3;
 $j=$82;
 label=9;break;
 case 9: 
 var $84=$j;
 var $85=($84|0)>0;
 if($85){label=10;break;}else{label=30;break;}
 case 10: 
 var $87=$colwip;
 var $88=(($87+4)|0);
 $colwip=$88;
 var $89=SAFE_HEAP_LOAD($87, "i32", 0, 0);
 $colwidth=$89;
 var $90=$colblp;
 var $91=($90|0)!=0;
 if($91){label=11;break;}else{label=12;break;}
 case 11: 
 var $93=$colblp;
 var $94=(($93+4)|0);
 $colblp=$94;
 var $95=SAFE_HEAP_LOAD($93, "i32", 0, 0);
 var $98=$95;label=13;break;
 case 12: 
 var $98=0;label=13;break;
 case 13: 
 var $98;
 $colspaces=$98;
 var $99=$frmp;
 var $100=(($99+4)|0);
 $frmp=$100;
 var $101=SAFE_HEAP_LOAD($99, "%struct.aplcb*", 0, 0);
 $fcb=$101;
 var $102=$fcb;
 var $103=(($102+12)|0);
 var $104=SAFE_HEAP_LOAD($103, "i32", 0, 0);
 var $105=($104|0)<2;
 if($105){label=14;break;}else{label=15;break;}
 case 14: 
 $irows=1;
 var $107=$fcb;
 var $108=(($107+8)|0);
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 $icols=$109;
 label=16;break;
 case 15: 
 var $111=$fcb;
 var $112=(($111+16)|0);
 var $113=SAFE_HEAP_LOAD($112, "i32*", 0, 0);
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 $irows=$114;
 var $115=$fcb;
 var $116=(($115+16)|0);
 var $117=SAFE_HEAP_LOAD($116, "i32*", 0, 0);
 var $118=(($117+4)|0);
 var $119=SAFE_HEAP_LOAD($118, "i32", 0, 0);
 $icols=$119;
 label=16;break;
 case 16: 
 var $121=$fcb;
 var $122=(($121)|0);
 var $123=$122;
 var $124=SAFE_HEAP_LOAD($123, "i8*", 0, 0);
 $fch=$124;
 var $125=$nump;
 var $126=(($125+4)|0);
 $nump=$126;
 var $127=SAFE_HEAP_LOAD($125, "i32", 0, 0);
 var $128=($127|0)!=0;
 if($128){label=18;break;}else{label=17;break;}
 case 17: 
 var $130=$chrp;
 var $131=(($130+4)|0);
 $chrp=$131;
 var $132=SAFE_HEAP_LOAD($130, "i32", 0, 0);
 var $133=($132|0)!=0;
 if($133){label=19;break;}else{label=18;break;}
 case 18: 
 var $135=$opcol;
 var $136=$colwidth;
 var $137=(($135+$136)|0);
 var $138=$icols;
 var $139=(((-$138))|0);
 var $140=(($137+$139)|0);
 $opout=$140;
 label=20;break;
 case 19: 
 var $142=$opcol;
 $opout=$142;
 label=20;break;
 case 20: 
 var $144=$opout;
 $opstart=$144;
 var $145=$irows;
 $k=$145;
 label=21;break;
 case 21: 
 var $147=$k;
 var $148=($147|0)>0;
 if($148){label=22;break;}else{label=28;break;}
 case 22: 
 var $150=$icols;
 $m=$150;
 label=23;break;
 case 23: 
 var $152=$m;
 var $153=($152|0)>0;
 if($153){label=24;break;}else{label=26;break;}
 case 24: 
 var $155=$fch;
 var $156=(($155+1)|0);
 $fch=$156;
 var $157=SAFE_HEAP_LOAD($155, "i8", 0, 0);
 var $158=$opout;
 var $159=(($158+1)|0);
 $opout=$159;
 SAFE_HEAP_STORE($158, $157, "i8", 0);
 label=25;break;
 case 25: 
 var $161=$m;
 var $162=((($161)-(1))|0);
 $m=$162;
 label=23;break;
 case 26: 
 var $164=$colso;
 var $165=$opstart;
 var $166=(($165+$164)|0);
 $opstart=$166;
 $opout=$166;
 label=27;break;
 case 27: 
 var $168=$k;
 var $169=((($168)-(1))|0);
 $k=$169;
 label=21;break;
 case 28: 
 var $171=$colwidth;
 var $172=$colspaces;
 var $173=((($171)+($172))|0);
 var $174=$opcol;
 var $175=(($174+$173)|0);
 $opcol=$175;
 label=29;break;
 case 29: 
 var $177=$j;
 var $178=((($177)-(1))|0);
 $j=$178;
 label=9;break;
 case 30: 
 var $180=$colso;
 var $181=$rowheight;
 var $182=$rowspaces;
 var $183=((($181)+($182))|0);
 var $184=(Math_imul($180,$183)|0);
 var $185=$oprow;
 var $186=(($185+$184)|0);
 $oprow=$186;
 label=31;break;
 case 31: 
 var $188=$i;
 var $189=((($188)-(1))|0);
 $i=$189;
 label=4;break;
 case 32: 
 var $191=$out;
 var $192=_errstop(0,0,0,$191);
 $1=$192;
 label=33;break;
 case 33: 
 var $194=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $194;
  default: assert(0, "bad label: " + label);
 }

}


function _formdfy($rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $dimcb;
 var $frmcb;
 var $identity=sp;
 $2=$rite;
 SAFE_HEAP_STORE($identity, 1, "i32", 0);
 var $3=_iscalar(2);
 var $4=_iscalar(1);
 var $5=_reshape($3,$4);
 var $6=$2;
 var $7=_shape($6);
 var $8=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $9=_cat($5,$7,$8);
 var $10=_perm($9);
 $frmcb=$10;
 var $11=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$frmcb;
 var $15=_errstop(0,0,0,$14);
 $1=$15;
 label=4;break;
 case 3: 
 var $17=_iscalar(-1);
 var $18=$frmcb;
 var $19=_drop($17,$18);
 var $20=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $21=_ireduce((72),$identity,$19,$20);
 var $22=_iscalar(-1);
 var $23=$frmcb;
 var $24=_take($22,$23);
 var $25=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $26=_cat($21,$24,$25);
 $dimcb=$26;
 var $27=$frmcb;
 var $28=_temp($27);
 _endoper($28);
 var $29=$dimcb;
 var $30=_errstop(0,0,0,$29);
 $1=$30;
 label=4;break;
 case 4: 
 var $32=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _formdfz($v,$colso,$rowso){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $out;
 var $i;
 var $rank;
 var $chp;
 $2=$v;
 $3=$colso;
 $4=$rowso;
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=13;break;
 case 3: 
 var $9=$2;
 var $10=($9|0)!=0;
 var $11=($10?1:2);
 $rank=$11;
 var $12=$4;
 var $13=$3;
 var $14=(Math_imul($12,$13)|0);
 var $15=$rank;
 var $16=_getcb(0,$14,9,$15,0);
 $out=$16;
 var $17=$out;
 var $18=($17|0)==0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=13;break;
 case 5: 
 var $21=$2;
 var $22=($21|0)!=0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$3;
 var $25=$out;
 var $26=(($25+16)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32*", 0, 0);
 SAFE_HEAP_STORE($27, $24, "i32", 0);
 label=8;break;
 case 7: 
 var $29=$4;
 var $30=$out;
 var $31=(($30+16)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 SAFE_HEAP_STORE($32, $29, "i32", 0);
 var $33=$3;
 var $34=$out;
 var $35=(($34+16)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32*", 0, 0);
 var $37=(($36+4)|0);
 SAFE_HEAP_STORE($37, $33, "i32", 0);
 label=8;break;
 case 8: 
 var $39=$out;
 var $40=(($39+8)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 $i=$41;
 var $42=$out;
 var $43=(($42)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "i8*", 0, 0);
 $chp=$45;
 label=9;break;
 case 9: 
 var $47=$i;
 var $48=($47|0)!=0;
 if($48){label=10;break;}else{label=12;break;}
 case 10: 
 var $50=$chp;
 var $51=(($50+1)|0);
 $chp=$51;
 SAFE_HEAP_STORE($50, 32, "i8", 0);
 label=11;break;
 case 11: 
 var $53=$i;
 var $54=((($53)-(1))|0);
 $i=$54;
 label=9;break;
 case 12: 
 var $56=$out;
 var $57=_errstop(0,0,0,$56);
 $1=$57;
 label=13;break;
 case 13: 
 var $59=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $59;
  default: assert(0, "bad label: " + label);
 }

}


function _formldm($rowcb,$colcb,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cb;
 var $cc;
 var $col;
 var $cols;
 var $lastdim;
 var $row;
 var $rows;
 var $ip;
 var $op;
 $1=$rowcb;
 $2=$colcb;
 $3=$rite;
 var $4=$3;
 var $5=(($4+16)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32*", 0, 0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 $rows=$7;
 var $8=$3;
 var $9=(($8+16)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32*", 0, 0);
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 $cols=$12;
 var $13=$cols;
 var $14=($13<<1);
 var $15=((($14)-(1))|0);
 $lastdim=$15;
 var $16=$2;
 var $17=(($16)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "%struct.aplcb**", 0, 0);
 $cb=$19;
 var $20=$1;
 var $21=(($20)|0);
 var $22=$21;
 var $23=SAFE_HEAP_LOAD($22, "double*", 0, 0);
 $op=$23;
 $col=0;
 label=2;break;
 case 2: 
 var $25=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $26=($25|0)==0;
 if($26){label=3;break;}else{var $32=0;label=4;break;}
 case 3: 
 var $28=$col;
 var $29=$cols;
 var $30=($28|0)<($29|0);
 var $32=$30;label=4;break;
 case 4: 
 var $32;
 if($32){label=5;break;}else{label=19;break;}
 case 5: 
 var $34=$3;
 var $35=(($34)|0);
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "double*", 0, 0);
 var $38=$col;
 var $39=($38<<1);
 var $40=(($37+($39<<3))|0);
 $ip=$40;
 $row=0;
 label=6;break;
 case 6: 
 var $42=$row;
 var $43=$rows;
 var $44=($42|0)<($43|0);
 if($44){label=7;break;}else{label=9;break;}
 case 7: 
 var $46=$ip;
 var $47=$row;
 var $48=$cols;
 var $49=(Math_imul($47,$48)|0);
 var $50=($49<<1);
 var $51=(($46+($50<<3))|0);
 var $52=SAFE_HEAP_LOAD($51, "double", 0, 0);
 var $53=$op;
 var $54=$row;
 var $55=(($53+($54<<3))|0);
 SAFE_HEAP_STORE($55, $52, "double", 0);
 label=8;break;
 case 8: 
 var $57=$row;
 var $58=((($57)+(1))|0);
 $row=$58;
 label=6;break;
 case 9: 
 var $60=$1;
 var $61=_form(0,$60);
 $cc=$61;
 var $62=$cb;
 var $63=(($62+4)|0);
 $cb=$63;
 SAFE_HEAP_STORE($62, $61, "%struct.aplcb*", 0);
 var $64=$cc;
 var $65=($64|0)==0;
 if($65){label=10;break;}else{label=11;break;}
 case 10: 
 label=19;break;
 case 11: 
 var $68=$cc;
 var $69=(($68+4)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=((($70)-(1))|0);
 SAFE_HEAP_STORE($69, $71, "i32", 0);
 var $72=$cc;
 var $73=(($72+16)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32*", 0, 0);
 var $75=(($74+4)|0);
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $77=$lastdim;
 var $78=((($77)+($76))|0);
 $lastdim=$78;
 $row=0;
 label=12;break;
 case 12: 
 var $80=$row;
 var $81=$rows;
 var $82=($80|0)<($81|0);
 if($82){label=13;break;}else{label=15;break;}
 case 13: 
 var $84=$ip;
 var $85=$row;
 var $86=$cols;
 var $87=(Math_imul($85,$86)|0);
 var $88=($87<<1);
 var $89=(($84+($88<<3))|0);
 var $90=(($89+8)|0);
 var $91=SAFE_HEAP_LOAD($90, "double", 0, 0);
 var $92=$op;
 var $93=$row;
 var $94=(($92+($93<<3))|0);
 SAFE_HEAP_STORE($94, $91, "double", 0);
 label=14;break;
 case 14: 
 var $96=$row;
 var $97=((($96)+(1))|0);
 $row=$97;
 label=12;break;
 case 15: 
 var $99=$1;
 var $100=_form(0,$99);
 $cc=$100;
 var $101=$cb;
 var $102=(($101+4)|0);
 $cb=$102;
 SAFE_HEAP_STORE($101, $100, "%struct.aplcb*", 0);
 var $103=$cc;
 var $104=($103|0)==0;
 if($104){label=16;break;}else{label=17;break;}
 case 16: 
 label=19;break;
 case 17: 
 var $107=$cc;
 var $108=(($107+4)|0);
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 var $110=((($109)-(1))|0);
 SAFE_HEAP_STORE($108, $110, "i32", 0);
 var $111=$cc;
 var $112=(($111+16)|0);
 var $113=SAFE_HEAP_LOAD($112, "i32*", 0, 0);
 var $114=(($113+4)|0);
 var $115=SAFE_HEAP_LOAD($114, "i32", 0, 0);
 var $116=$lastdim;
 var $117=((($116)+($115))|0);
 $lastdim=$117;
 label=18;break;
 case 18: 
 var $119=$col;
 var $120=((($119)+(1))|0);
 $col=$120;
 label=2;break;
 case 19: 
 var $122=$lastdim;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $122;
  default: assert(0, "bad label: " + label);
 }

}


function _formota($cc,$0,$bca,$bia,$four_switch,$seven_switch,$fcc_local){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $i;
 $2=$cc;
 var $ch=(($0)&255);
 $3=$ch;
 $4=$bca;
 $5=$bia;
 $6=$four_switch;
 $7=$seven_switch;
 $8=$fcc_local;
 $i=0;
 var $9=$3;
 var $10=(($9<<24)>>24);
 switch(($10|0)){case 49:case 50:case 51:{ label=2;break;}case 53:case 54:{ label=22;break;}case 55:{ label=23;break;}case 56:{ label=24;break;}case 57:case 48:{ label=25;break;}case 52:{ label=3;break;}default:{label=34;break;}}break;
 case 2: 
 var $12=$5;
 var $13=(($12+12)|0);
 var $14=$8;
 var $15=$6;
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$4;
 var $18=(($17+12)|0);
 var $19=SAFE_HEAP_LOAD($18, "i8*", 0, 0);
 var $20=$3;
 _formatu($13,$14,$16,$19,$20);
 label=34;break;
 case 3: 
 var $22=$6;
 SAFE_HEAP_STORE($22, 1, "i32", 0);
 var $23=$4;
 var $24=(($23+12)|0);
 var $25=SAFE_HEAP_LOAD($24, "i8*", 0, 0);
 var $26=($25|0)==0;
 if($26){label=4;break;}else{label=11;break;}
 case 4: 
 var $28=$5;
 var $29=(($28+12)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=$30&4;
 var $32=($31|0)!=0;
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 var $34=$5;
 var $35=(($34+12)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=$36&-5;
 SAFE_HEAP_STORE($35, $37, "i32", 0);
 label=6;break;
 case 6: 
 var $39=$5;
 var $40=(($39+12)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$41&16;
 var $43=($42|0)!=0;
 if($43){label=7;break;}else{label=8;break;}
 case 7: 
 var $45=$5;
 var $46=(($45+12)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=$47&-17;
 SAFE_HEAP_STORE($46, $48, "i32", 0);
 label=8;break;
 case 8: 
 var $50=$5;
 var $51=(($50+12)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=$52&64;
 var $54=($53|0)!=0;
 if($54){label=9;break;}else{label=10;break;}
 case 9: 
 var $56=$5;
 var $57=(($56+12)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=$58&-65;
 SAFE_HEAP_STORE($57, $59, "i32", 0);
 label=10;break;
 case 10: 
 label=21;break;
 case 11: 
 var $62=$8;
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=$63&2;
 var $65=($64|0)!=0;
 if($65){label=14;break;}else{label=12;break;}
 case 12: 
 var $67=$5;
 var $68=(($67+12)|0);
 var $69=SAFE_HEAP_LOAD($68, "i32", 0, 0);
 var $70=$69&2;
 var $71=($70|0)!=0;
 if($71){label=13;break;}else{label=14;break;}
 case 13: 
 var $73=$5;
 var $74=(($73+12)|0);
 var $75=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $76=$75&-3;
 SAFE_HEAP_STORE($74, $76, "i32", 0);
 label=14;break;
 case 14: 
 var $78=$8;
 var $79=SAFE_HEAP_LOAD($78, "i32", 0, 0);
 var $80=$79&8;
 var $81=($80|0)!=0;
 if($81){label=17;break;}else{label=15;break;}
 case 15: 
 var $83=$5;
 var $84=(($83+12)|0);
 var $85=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 var $86=$85&8;
 var $87=($86|0)!=0;
 if($87){label=16;break;}else{label=17;break;}
 case 16: 
 var $89=$5;
 var $90=(($89+12)|0);
 var $91=SAFE_HEAP_LOAD($90, "i32", 0, 0);
 var $92=$91&-9;
 SAFE_HEAP_STORE($90, $92, "i32", 0);
 label=17;break;
 case 17: 
 var $94=$8;
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $96=$95&32;
 var $97=($96|0)!=0;
 if($97){label=20;break;}else{label=18;break;}
 case 18: 
 var $99=$5;
 var $100=(($99+12)|0);
 var $101=SAFE_HEAP_LOAD($100, "i32", 0, 0);
 var $102=$101&32;
 var $103=($102|0)!=0;
 if($103){label=19;break;}else{label=20;break;}
 case 19: 
 var $105=$5;
 var $106=(($105+12)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32", 0, 0);
 var $108=$107&-33;
 SAFE_HEAP_STORE($106, $108, "i32", 0);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=34;break;
 case 22: 
 label=34;break;
 case 23: 
 var $113=$7;
 SAFE_HEAP_STORE($113, 1, "i32", 0);
 label=34;break;
 case 24: 
 var $115=$5;
 var $116=(($115+12)|0);
 var $117=SAFE_HEAP_LOAD($116, "i32", 0, 0);
 var $118=$117|512;
 SAFE_HEAP_STORE($116, $118, "i32", 0);
 label=34;break;
 case 25: 
 var $120=$3;
 var $121=(($120<<24)>>24);
 var $122=($121|0)==48;
 if($122){label=26;break;}else{label=27;break;}
 case 26: 
 var $124=$5;
 var $125=(($124+12)|0);
 var $126=SAFE_HEAP_LOAD($125, "i32", 0, 0);
 var $127=$126|1;
 SAFE_HEAP_STORE($125, $127, "i32", 0);
 label=28;break;
 case 27: 
 var $129=$5;
 var $130=(($129+12)|0);
 var $131=SAFE_HEAP_LOAD($130, "i32", 0, 0);
 var $132=$131|1024;
 SAFE_HEAP_STORE($130, $132, "i32", 0);
 label=28;break;
 case 28: 
 var $134=$4;
 var $135=(($134+12)|0);
 var $136=SAFE_HEAP_LOAD($135, "i8*", 0, 0);
 var $137=($136|0)!=0;
 if($137){label=29;break;}else{label=30;break;}
 case 29: 
 var $139=$2;
 var $140=$4;
 var $141=(($140+24)|0);
 SAFE_HEAP_STORE($141, $139, "i8*", 0);
 label=33;break;
 case 30: 
 var $143=$4;
 var $144=(($143+20)|0);
 var $145=SAFE_HEAP_LOAD($144, "i8*", 0, 0);
 var $146=($145|0)==0;
 if($146){label=31;break;}else{label=32;break;}
 case 31: 
 var $148=$2;
 var $149=$4;
 var $150=(($149+20)|0);
 SAFE_HEAP_STORE($150, $148, "i8*", 0);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formotb($cc,$0,$bca,$bia,$four_switch,$seven_switch,$fcc_local){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 $2=$cc;
 var $ch=(($0)&255);
 $3=$ch;
 $4=$bca;
 $5=$bia;
 $6=$four_switch;
 $7=$seven_switch;
 $8=$fcc_local;
 var $9=$3;
 var $10=(($9<<24)>>24);
 if(($10|0)==46){ label=2;break;}else if(($10|0)==44){ label=5;break;}else{label=6;break;}
 case 2: 
 var $12=$4;
 var $13=(($12+12)|0);
 var $14=SAFE_HEAP_LOAD($13, "i8*", 0, 0);
 var $15=($14|0)==0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$2;
 var $18=$4;
 var $19=(($18+12)|0);
 SAFE_HEAP_STORE($19, $17, "i8*", 0);
 label=4;break;
 case 4: 
 label=10;break;
 case 5: 
 label=10;break;
 case 6: 
 var $23=$7;
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=7;break;}else{label=9;break;}
 case 7: 
 var $27=$4;
 var $28=(($27+16)|0);
 var $29=SAFE_HEAP_LOAD($28, "i8*", 0, 0);
 var $30=($29|0)==0;
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 var $32=$2;
 var $33=$4;
 var $34=(($33+16)|0);
 SAFE_HEAP_STORE($34, $32, "i8*", 0);
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formsci($op,$gch,$bufptr,$bufint,$fldptr,$fldint,$neg,$value,$buffer){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $bdigits;
 var $blen;
 var $expadj;
 var $expneg;
 var $fdigits;
 var $fplaces;
 var $eptr;
 var $fb=sp;
 var $fptr;
 var $wp;
 var $expint=(sp)+(80);
 var $fxpint=(sp)+(96);
 var $expptr=(sp)+(112);
 var $fxpptr=(sp)+(144);
 $1=$op;
 $2=$gch;
 $3=$bufptr;
 $4=$bufint;
 $5=$fldptr;
 $6=$fldint;
 $7=$neg;
 $8=$value;
 $9=$buffer;
 label=2;break;
 case 2: 
 var $11=$6;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 $fplaces=$13;
 var $14=(($fb)|0);
 var $15=$fplaces;
 var $16=_sprintf($14,9952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $15, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=$9;
 var $18=(($fb)|0);
 var $19=$8;
 var $20=_sprintf($17,$18,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $19, "double", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $21=$9;
 var $22=_strchr($21,101);
 $eptr=$22;
 var $23=$eptr;
 var $24=($23|0)==0;
 if($24){label=3;break;}else{label=4;break;}
 case 3: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=15;break;
 case 4: 
 var $27=$eptr;
 SAFE_HEAP_STORE($27, 0, "i8", 0);
 var $28=$9;
 var $29=$3;
 var $30=$4;
 _formats($28,$29,$30);
 var $31=$6;
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 $fdigits=$33;
 var $34=$4;
 var $35=(($34+4)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 $bdigits=$36;
 var $37=$bdigits;
 var $38=$fdigits;
 var $39=((($37)-($38))|0);
 $expadj=$39;
 var $40=$expadj;
 var $41=($40|0)!=0;
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=$3;
 var $44=$4;
 var $45=$9;
 var $46=$expadj;
 var $47=$eptr;
 _formscj($43,$44,$45,$46,$47);
 label=6;break;
 case 6: 
 var $49=$5;
 var $50=(($49+16)|0);
 var $51=SAFE_HEAP_LOAD($50, "i8*", 0, 0);
 $fptr=$51;
 var $52=$5;
 var $53=(($52+16)|0);
 SAFE_HEAP_STORE($53, 0, "i8*", 0);
 var $54=$fptr;
 var $55=$5;
 var $56=(($55)|0);
 var $57=SAFE_HEAP_LOAD($56, "i8*", 0, 0);
 var $58=$54;
 var $59=$57;
 var $60=((($58)-($59))|0);
 var $61=$6;
 var $62=(($61)|0);
 SAFE_HEAP_STORE($62, $60, "i32", 0);
 var $63=$fptr;
 var $64=$5;
 var $65=(($64+4)|0);
 SAFE_HEAP_STORE($65, $63, "i8*", 0);
 var $66=$1;
 var $67=$2;
 var $68=$3;
 var $69=$4;
 var $70=$5;
 var $71=$6;
 var $72=$7;
 var $73=_formatv($66,$67,$68,$69,$70,$71,$72);
 $1=$73;
 var $74=$fptr;
 var $75=SAFE_HEAP_LOAD($74, "i8", 0, 0);
 var $76=$1;
 var $77=(($76+1)|0);
 $1=$77;
 SAFE_HEAP_STORE($76, $75, "i8", 0);
 var $78=$fptr;
 var $79=(($78+1)|0);
 var $80=(($fxpptr)|0);
 var $81=(($fxpint)|0);
 _formats($79,$80,$81);
 var $82=$eptr;
 var $83=(($82+1)|0);
 var $84=SAFE_HEAP_LOAD($83, "i8", 0, 0);
 var $85=(($84<<24)>>24);
 var $86=($85|0)==45;
 var $87=($86?1:0);
 $expneg=$87;
 var $88=$eptr;
 var $89=(($88+2)|0);
 $eptr=$89;
 label=7;break;
 case 7: 
 var $91=$eptr;
 var $92=SAFE_HEAP_LOAD($91, "i8", 0, 0);
 var $93=(($92<<24)>>24);
 var $94=($93|0)!=0;
 if($94){label=8;break;}else{var $101=0;label=9;break;}
 case 8: 
 var $96=$eptr;
 var $97=SAFE_HEAP_LOAD($96, "i8", 0, 0);
 var $98=(($97<<24)>>24);
 var $99=($98|0)==48;
 var $101=$99;label=9;break;
 case 9: 
 var $101;
 if($101){label=10;break;}else{label=12;break;}
 case 10: 
 label=11;break;
 case 11: 
 var $104=$eptr;
 var $105=(($104+1)|0);
 $eptr=$105;
 label=7;break;
 case 12: 
 var $107=$eptr;
 var $108=SAFE_HEAP_LOAD($107, "i8", 0, 0);
 var $109=(($108<<24)>>24);
 var $110=($109|0)==0;
 if($110){label=13;break;}else{label=14;break;}
 case 13: 
 var $112=$eptr;
 var $113=((($112)-(1))|0);
 $eptr=$113;
 label=14;break;
 case 14: 
 var $115=$eptr;
 var $116=(($expptr)|0);
 var $117=(($expint)|0);
 _formats($115,$116,$117);
 var $118=$1;
 var $119=$2;
 var $120=(($expptr)|0);
 var $121=(($expint)|0);
 var $122=(($fxpptr)|0);
 var $123=(($fxpint)|0);
 var $124=$expneg;
 var $125=_formatv($118,$119,$120,$121,$122,$123,$124);
 $1=$125;
 label=15;break;
 case 15: 
 var $127=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $127;
  default: assert(0, "bad label: " + label);
 }

}


function _formscj($bufptr,$bufint,$buffer,$expadj,$eptr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $expwrk=sp;
 var $incr;
 var $dp;
 $1=$bufptr;
 $2=$bufint;
 $3=$buffer;
 $4=$expadj;
 $5=$eptr;
 var $6=$1;
 var $7=(($6+12)|0);
 var $8=SAFE_HEAP_LOAD($7, "i8*", 0, 0);
 $dp=$8;
 var $9=$4;
 SAFE_HEAP_STORE($expwrk, $9, "i32", 0);
 var $10=SAFE_HEAP_LOAD($expwrk, "i32", 0, 0);
 var $11=($10|0)>0;
 var $12=($11?1:-1);
 $incr=$12;
 label=2;break;
 case 2: 
 var $14=SAFE_HEAP_LOAD($expwrk, "i32", 0, 0);
 var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$dp;
 var $18=$incr;
 var $19=(((-$18))|0);
 var $20=(($17+$19)|0);
 var $21=SAFE_HEAP_LOAD($20, "i8", 0, 0);
 var $22=$dp;
 SAFE_HEAP_STORE($22, $21, "i8", 0);
 var $23=$incr;
 var $24=$dp;
 var $25=(((-$23))|0);
 var $26=(($24+$25)|0);
 $dp=$26;
 SAFE_HEAP_STORE($26, 46, "i8", 0);
 var $27=$incr;
 var $28=SAFE_HEAP_LOAD($expwrk, "i32", 0, 0);
 var $29=((($28)-($27))|0);
 SAFE_HEAP_STORE($expwrk, $29, "i32", 0);
 label=2;break;
 case 4: 
 var $31=$3;
 var $32=$1;
 var $33=$2;
 _formats($31,$32,$33);
 var $34=$5;
 var $35=(($34+1)|0);
 var $36=_sscanf($35,9944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $expwrk, "i32*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=$4;
 var $38=SAFE_HEAP_LOAD($expwrk, "i32", 0, 0);
 var $39=((($38)+($37))|0);
 SAFE_HEAP_STORE($expwrk, $39, "i32", 0);
 var $40=SAFE_HEAP_LOAD($expwrk, "i32", 0, 0);
 var $41=($40|0)>=0;
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=$5;
 var $44=(($43+1)|0);
 SAFE_HEAP_STORE($44, 43, "i8", 0);
 label=7;break;
 case 6: 
 var $46=$5;
 var $47=(($46+1)|0);
 SAFE_HEAP_STORE($47, 45, "i8", 0);
 var $48=SAFE_HEAP_LOAD($expwrk, "i32", 0, 0);
 var $49=(((-$48))|0);
 SAFE_HEAP_STORE($expwrk, $49, "i32", 0);
 label=7;break;
 case 7: 
 var $51=$5;
 var $52=(($51+2)|0);
 var $53=SAFE_HEAP_LOAD($expwrk, "i32", 0, 0);
 var $54=_sprintf($52,9944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $53, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _formspp($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $iw;
 var $mypp;
 var $absdif;
 var $dif;
 var $dw;
 var $ip;
 var $logimag;
 var $log10;
 var $logreal;
 $2=$rite;
 var $3=SAFE_HEAP_LOAD(2576, "double", 0, 0);
 var $4=(($3)&-1);
 $mypp=$4;
 var $5=$mypp;
 var $6=($5|0)<0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=$mypp;
 var $9=($8|0)>10;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 $mypp=10;
 label=4;break;
 case 4: 
 var $12=$mypp;
 var $13=($12|0)<10;
 if($13){label=5;break;}else{label=26;break;}
 case 5: 
 var $15=Math_log(10);
 $log10=$15;
 var $16=$2;
 var $17=(($16)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "double*", 0, 0);
 $ip=$19;
 var $20=$2;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 $iw=$22;
 label=6;break;
 case 6: 
 var $24=$iw;
 var $25=((($24)-(1))|0);
 $iw=$25;
 var $26=($24|0)!=0;
 if($26){label=7;break;}else{label=25;break;}
 case 7: 
 var $28=$ip;
 var $29=SAFE_HEAP_LOAD($28, "double", 0, 0);
 var $30=$29!=0;
 if($30){label=8;break;}else{label=24;break;}
 case 8: 
 var $32=$ip;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "double", 0, 0);
 var $35=$34!=0;
 if($35){label=9;break;}else{label=24;break;}
 case 9: 
 var $37=$ip;
 var $38=SAFE_HEAP_LOAD($37, "double", 0, 0);
 var $39=$38>0;
 if($39){label=10;break;}else{label=11;break;}
 case 10: 
 var $41=$ip;
 var $42=SAFE_HEAP_LOAD($41, "double", 0, 0);
 var $48=$42;label=12;break;
 case 11: 
 var $44=$ip;
 var $45=SAFE_HEAP_LOAD($44, "double", 0, 0);
 var $46=((-.0))-($45);
 var $48=$46;label=12;break;
 case 12: 
 var $48;
 $dw=$48;
 var $49=$dw;
 var $50=Math_log($49);
 $logreal=$50;
 var $51=$ip;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "double", 0, 0);
 var $54=$53>0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$ip;
 var $57=(($56+8)|0);
 var $58=SAFE_HEAP_LOAD($57, "double", 0, 0);
 var $65=$58;label=15;break;
 case 14: 
 var $60=$ip;
 var $61=(($60+8)|0);
 var $62=SAFE_HEAP_LOAD($61, "double", 0, 0);
 var $63=((-.0))-($62);
 var $65=$63;label=15;break;
 case 15: 
 var $65;
 $dw=$65;
 var $66=$dw;
 var $67=Math_log($66);
 $logimag=$67;
 var $68=$logreal;
 var $69=$logimag;
 var $70=($68)-($69);
 var $71=$log10;
 var $72=($70)/($71);
 $dif=$72;
 var $73=$dif;
 var $74=$73<0;
 if($74){label=16;break;}else{label=17;break;}
 case 16: 
 var $76=$dif;
 var $77=((-.0))-($76);
 var $81=$77;label=18;break;
 case 17: 
 var $79=$dif;
 var $81=$79;label=18;break;
 case 18: 
 var $81;
 $absdif=$81;
 var $82=$absdif;
 var $83=$mypp;
 var $84=($83|0);
 var $85=$82>$84;
 if($85){label=19;break;}else{label=23;break;}
 case 19: 
 var $87=$logreal;
 var $88=$logimag;
 var $89=$87<$88;
 if($89){label=20;break;}else{label=21;break;}
 case 20: 
 var $91=$ip;
 SAFE_HEAP_STORE($91, 0, "double", 0);
 label=22;break;
 case 21: 
 var $93=$ip;
 var $94=(($93+8)|0);
 SAFE_HEAP_STORE($94, 0, "double", 0);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $98=$ip;
 var $99=(($98+16)|0);
 $ip=$99;
 label=6;break;
 case 25: 
 label=26;break;
 case 26: 
 var $102=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $102;
  default: assert(0, "bad label: " + label);
 }

}


function _funcexec($stmtstrt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $stop;
 var $trace;
 var $stmtno;
 var $fp;
 var $nameptr;
 $1=$stmtstrt;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "%struct.aplfunc*", 0, 0);
 $fp=$4;
 var $5=$fp;
 var $6=(($5+28)|0);
 var $7=SAFE_HEAP_LOAD($6, "%struct.apltoken*", 0, 0);
 var $8=(($7+12)|0);
 var $9=$8;
 var $10=SAFE_HEAP_LOAD($9, "i8*", 0, 0);
 $nameptr=$10;
 var $11=_codechar(123);
 var $12=$nameptr;
 var $13=_functrst($11,$12);
 $stop=$13;
 var $14=_codechar(124);
 var $15=$nameptr;
 var $16=_functrst($14,$15);
 $trace=$16;
 var $17=$1;
 $stmtno=$17;
 label=2;break;
 case 2: 
 var $19=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $20=($19|0)==0;
 if($20){label=3;break;}else{var $28=0;label=4;break;}
 case 3: 
 var $22=$stmtno;
 var $23=$fp;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($22|0)<($25|0);
 var $28=$26;label=4;break;
 case 4: 
 var $28;
 if($28){label=5;break;}else{label=13;break;}
 case 5: 
 var $30=$stmtno;
 var $31=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $32=(($31+16)|0);
 SAFE_HEAP_STORE($32, $30, "i32", 0);
 var $33=$stop;
 var $34=($33|0)!=0;
 if($34){label=6;break;}else{label=11;break;}
 case 6: 
 var $36=$stop;
 var $37=$stmtno;
 var $38=_funcstop($36,$37);
 var $39=($38|0)!=0;
 if($39){label=7;break;}else{label=11;break;}
 case 7: 
 var $41=_funcsusp();
 $stmtno=$41;
 var $42=$stmtno;
 var $43=($42|0)<=0;
 if($43){label=9;break;}else{label=8;break;}
 case 8: 
 var $45=$stmtno;
 var $46=$fp;
 var $47=(($46+16)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=($45|0)>($48|0);
 if($49){label=9;break;}else{label=10;break;}
 case 9: 
 label=13;break;
 case 10: 
 label=11;break;
 case 11: 
 var $53=$trace;
 var $54=$stmtno;
 var $55=_funcexee($53,$54);
 $stmtno=$55;
 label=12;break;
 case 12: 
 var $57=$stmtno;
 var $58=((($57)+(1))|0);
 $stmtno=$58;
 var $59=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $60=(($59+8)|0);
 var $61=SAFE_HEAP_LOAD($60, "%struct.aplfunc*", 0, 0);
 $fp=$61;
 label=2;break;
 case 13: 
 var $63=$stop;
 _endoper($63);
 var $64=$trace;
 _endoper($64);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _funcexed($curtok,$tokcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $prevtok;
 var $out;
 $1=$curtok;
 $2=$tokcnt;
 $prevtok=0;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=((($4)-(1))|0);
 $2=$5;
 var $6=($4|0)!=0;
 if($6){label=3;break;}else{label=6;break;}
 case 3: 
 var $8=$1;
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=($10|0)==2;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $14=$prevtok;
 var $15=$1;
 var $16=(($15)|0);
 var $17=$16;
 SAFE_HEAP_STORE($17, $14, "%struct.apltoken*", 0);
 var $18=$1;
 var $19=((($18)-(24))|0);
 $1=$19;
 $prevtok=$18;
 label=2;break;
 case 6: 
 var $21=$1;
 var $22=(($21+24)|0);
 $1=$22;
 var $23=$1;
 var $24=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $25=(($24+44)|0);
 SAFE_HEAP_STORE($25, $23, "%struct.apltoken*", 0);
 var $26=_execexec();
 var $27=_execgetp($26);
 $out=$27;
 var $28=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }

}


function _funcexee($trace,$stmtno){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 var $curtok;
 var $gotok;
 var $fp;
 var $tokcnt;
 $1=$trace;
 $2=$stmtno;
 var $3=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $4=(($3+8)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.aplfunc*", 0, 0);
 $fp=$5;
 var $6=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $7=(($6+52)|0);
 SAFE_HEAP_STORE($7, 0, "i32", 0);
 var $8=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $9=(($8+48)|0);
 SAFE_HEAP_STORE($9, 0, "i32", 0);
 var $10=$fp;
 var $11=(($10+20)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32*", 0, 0);
 var $13=$2;
 var $14=(($12+($13<<2))|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 $tokcnt=$15;
 var $16=$fp;
 var $17=(($16+32)|0);
 var $18=SAFE_HEAP_LOAD($17, "%struct.apltoken**", 0, 0);
 var $19=$2;
 var $20=(($18+($19<<2))|0);
 var $21=SAFE_HEAP_LOAD($20, "%struct.apltoken*", 0, 0);
 var $22=$tokcnt;
 var $23=(($21+((($22)*(24))&-1))|0);
 var $24=((($23)-(24))|0);
 $curtok=$24;
 var $25=$curtok;
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($27|0)==4;
 if($28){label=2;break;}else{label=3;break;}
 case 2: 
 var $30=$curtok;
 var $31=((($30)-(24))|0);
 $curtok=$31;
 $gotok=$30;
 var $32=$tokcnt;
 var $33=((($32)-(1))|0);
 $tokcnt=$33;
 label=4;break;
 case 3: 
 $gotok=0;
 label=4;break;
 case 4: 
 var $36=$curtok;
 var $37=(($36+4)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=($38|0)==2;
 if($39){label=5;break;}else{label=8;break;}
 case 5: 
 $out=0;
 var $41=$gotok;
 var $42=($41|0)!=0;
 if($42){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 95, "i32", 0);
 var $44=$curtok;
 var $45=(($44+8)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $48=(($47+52)|0);
 SAFE_HEAP_STORE($48, $46, "i32", 0);
 label=7;break;
 case 7: 
 label=9;break;
 case 8: 
 var $51=$curtok;
 var $52=$tokcnt;
 var $53=_funcexed($51,$52);
 $out=$53;
 label=9;break;
 case 9: 
 var $55=$1;
 var $56=$2;
 var $57=$fp;
 var $58=$out;
 var $59=$gotok;
 var $60=_funcexef($55,$56,$57,$58,$59);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $60;
  default: assert(0, "bad label: " + label);
 }

}


function _funcexef($trace,$stmtno,$fp,$out,$gotok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $brstmt;
 $1=$trace;
 $2=$stmtno;
 $3=$fp;
 $4=$out;
 $5=$gotok;
 var $6=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=6;break;}
 case 2: 
 var $9=$5;
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=6;break;}
 case 3: 
 var $12=$2;
 $brstmt=$12;
 var $13=$3;
 var $14=$4;
 var $15=$2;
 var $16=_funcgoto($13,$14,$15);
 $2=$16;
 $4=0;
 var $17=$1;
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$3;
 var $21=$1;
 var $22=$2;
 var $23=$brstmt;
 _functrgo($20,$21,$22,$23);
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $26=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $27=($26|0)!=0;
 if($27){label=7;break;}else{label=15;break;}
 case 7: 
 var $29=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 if(($29|0)==998){ label=12;break;}else if(($29|0)==997){ label=8;break;}else{label=13;break;}
 case 8: 
 var $31=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $32=(($31+56)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=$33&1;
 var $35=($34|0)!=0;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 var $37=_funcsusp();
 $2=$37;
 label=11;break;
 case 10: 
 var $39=$3;
 var $40=(($39+16)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 $2=$41;
 label=11;break;
 case 11: 
 label=14;break;
 case 12: 
 var $44=$3;
 var $45=(($44+16)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 $2=$46;
 label=14;break;
 case 13: 
 var $48=$3;
 var $49=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $50=(($49+52)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32", 0, 0);
 var $52=$2;
 _funcmsg($48,$51,$52);
 var $53=_funcsusp();
 $2=$53;
 label=14;break;
 case 14: 
 label=23;break;
 case 15: 
 var $56=$5;
 var $57=($56|0)==0;
 if($57){label=16;break;}else{label=22;break;}
 case 16: 
 var $59=$4;
 var $60=($59|0)!=0;
 if($60){label=17;break;}else{label=19;break;}
 case 17: 
 var $62=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $63=(($62+48)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=($64|0)!=3;
 if($65){label=18;break;}else{label=19;break;}
 case 18: 
 var $67=$4;
 var $68=_quadout($67);
 $4=$68;
 label=19;break;
 case 19: 
 var $70=$1;
 var $71=($70|0)!=0;
 if($71){label=20;break;}else{label=21;break;}
 case 20: 
 var $73=$3;
 var $74=$1;
 var $75=$2;
 var $76=$4;
 _functrac($73,$74,$75,$76);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $80=$4;
 var $81=_endoper($80);
 var $82=$2;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }

}


function _funcgoto($fp,$rite,$stmtno){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ret;
 var $term;
 $1=$fp;
 $2=$rite;
 $3=$stmtno;
 var $4=$1;
 var $5=(($4+16)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 $term=$6;
 $ret=$6;
 var $7=$2;
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=8;break;}
 case 2: 
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=($12|0)==0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$3;
 var $16=((($15)+(1))|0);
 $ret=$16;
 var $17=$2;
 var $18=_endoper($17);
 label=7;break;
 case 4: 
 var $20=$2;
 var $21=_ivalue($20);
 $ret=$21;
 var $22=$ret;
 var $23=($22|0)<1;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $25=$term;
 $ret=$25;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $29=$ret;
 var $30=((($29)-(1))|0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function _funcinit($fp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tok;
 var $pav;
 var $phd;
 var $out;
 var $nameptr;
 $1=$fp;
 $2=$left;
 $3=$rite;
 var $4=$1;
 var $5=(($4+40)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 $tok=$6;
 var $7=$1;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&2048;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $14=(($13+4)|0);
 $phd=$14;
 var $15=$phd;
 var $16=$tok;
 var $17=(($16+12)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "i8*", 0, 0);
 var $20=_avladd($15,$19,0);
 $pav=$20;
 var $21=$tok;
 var $22=(($21)|0);
 var $23=$22;
 var $24=SAFE_HEAP_LOAD($23, "%struct.apltoken*", 0, 0);
 $tok=$24;
 label=3;break;
 case 3: 
 var $26=$1;
 var $27=(($26+8)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=$28&1024;
 var $30=($29|0)!=0;
 if($30){label=4;break;}else{label=10;break;}
 case 4: 
 var $32=$2;
 var $33=($32|0)!=0;
 if($33){label=5;break;}else{label=9;break;}
 case 5: 
 var $35=$2;
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=$37&1;
 var $39=($38|0)!=0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $41=$2;
 var $42=(($41+4)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 var $44=((($43)-(1))|0);
 SAFE_HEAP_STORE($42, $44, "i32", 0);
 label=8;break;
 case 7: 
 var $46=$2;
 var $47=_aplcopy($46);
 var $48=_perm($47);
 $2=$48;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $51=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $52=(($51+4)|0);
 $phd=$52;
 var $53=$phd;
 var $54=$tok;
 var $55=(($54+12)|0);
 var $56=$55;
 var $57=SAFE_HEAP_LOAD($56, "i8*", 0, 0);
 var $58=$2;
 var $59=$58;
 var $60=_avladd($53,$57,$59);
 $pav=$60;
 var $61=$tok;
 var $62=(($61)|0);
 var $63=$62;
 var $64=SAFE_HEAP_LOAD($63, "%struct.apltoken*", 0, 0);
 $tok=$64;
 label=10;break;
 case 10: 
 var $66=$1;
 var $67=(($66+8)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=$68&1536;
 var $70=($69|0)!=0;
 if($70){label=11;break;}else{label=17;break;}
 case 11: 
 var $72=$3;
 var $73=($72|0)!=0;
 if($73){label=12;break;}else{label=16;break;}
 case 12: 
 var $75=$3;
 var $76=(($75+4)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=$77&1;
 var $79=($78|0)!=0;
 if($79){label=13;break;}else{label=14;break;}
 case 13: 
 var $81=$3;
 var $82=(($81+4)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=((($83)-(1))|0);
 SAFE_HEAP_STORE($82, $84, "i32", 0);
 label=15;break;
 case 14: 
 var $86=$3;
 var $87=_aplcopy($86);
 var $88=_perm($87);
 $3=$88;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $91=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $92=(($91+4)|0);
 $phd=$92;
 var $93=$phd;
 var $94=$tok;
 var $95=(($94+12)|0);
 var $96=$95;
 var $97=SAFE_HEAP_LOAD($96, "i8*", 0, 0);
 var $98=$3;
 var $99=$98;
 var $100=_avladd($93,$97,$99);
 $pav=$100;
 var $101=$tok;
 var $102=(($101)|0);
 var $103=$102;
 var $104=SAFE_HEAP_LOAD($103, "%struct.apltoken*", 0, 0);
 $tok=$104;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $107=$tok;
 var $108=($107|0)!=0;
 if($108){label=19;break;}else{label=24;break;}
 case 19: 
 var $110=$tok;
 var $111=(($110+4)|0);
 var $112=SAFE_HEAP_LOAD($111, "i32", 0, 0);
 if(($112|0)==-14){ label=20;break;}else if(($112|0)==-19){ label=21;break;}else{label=22;break;}
 case 20: 
 $nameptr=2560;
 var $114=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $115=(($114+28)|0);
 SAFE_HEAP_STORE($115, 1, "i32", 0);
 label=23;break;
 case 21: 
 $nameptr=2544;
 var $117=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $118=(($117+20)|0);
 SAFE_HEAP_STORE($118, 1, "i32", 0);
 label=23;break;
 case 22: 
 var $120=$tok;
 var $121=(($120+12)|0);
 var $122=$121;
 var $123=SAFE_HEAP_LOAD($122, "i8*", 0, 0);
 $nameptr=$123;
 label=23;break;
 case 23: 
 var $125=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $126=(($125+4)|0);
 $phd=$126;
 var $127=$phd;
 var $128=$nameptr;
 var $129=_avladd($127,$128,0);
 $pav=$129;
 var $130=$tok;
 var $131=(($130)|0);
 var $132=$131;
 var $133=SAFE_HEAP_LOAD($132, "%struct.apltoken*", 0, 0);
 $tok=$133;
 label=18;break;
 case 24: 
 var $135=$1;
 var $136=(($135+44)|0);
 var $137=SAFE_HEAP_LOAD($136, "%struct.apltoken*", 0, 0);
 $tok=$137;
 label=25;break;
 case 25: 
 var $139=$tok;
 var $140=($139|0)!=0;
 if($140){label=26;break;}else{label=30;break;}
 case 26: 
 var $142=_getcb(0,1,132,0,0);
 $out=$142;
 var $143=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $144=($143|0)!=0;
 if($144){label=27;break;}else{label=28;break;}
 case 27: 
 label=30;break;
 case 28: 
 var $147=$tok;
 var $148=(($147+8)|0);
 var $149=SAFE_HEAP_LOAD($148, "i32", 0, 0);
 var $150=$out;
 var $151=(($150)|0);
 var $152=$151;
 var $153=SAFE_HEAP_LOAD($152, "i32*", 0, 0);
 SAFE_HEAP_STORE($153, $149, "i32", 0);
 var $154=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $155=(($154+4)|0);
 $phd=$155;
 var $156=$phd;
 var $157=$tok;
 var $158=(($157+12)|0);
 var $159=$158;
 var $160=SAFE_HEAP_LOAD($159, "i8*", 0, 0);
 var $161=$out;
 var $162=$161;
 var $163=_avladd($156,$160,$162);
 $pav=$163;
 label=29;break;
 case 29: 
 var $165=$tok;
 var $166=(($165)|0);
 var $167=$166;
 var $168=SAFE_HEAP_LOAD($167, "%struct.apltoken*", 0, 0);
 $tok=$168;
 label=25;break;
 case 30: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _funcmain($fp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $root;
 var $p;
 var $out;
 var $flagsave;
 $2=$fp;
 $3=$left;
 $4=$rite;
 $out=0;
 var $5=$2;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&2048;
 $flagsave=$8;
 var $9=$flagsave;
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$2;
 var $13=_funcopy($12);
 $2=$13;
 label=4;break;
 case 3: 
 var $15=$2;
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$17|2048;
 SAFE_HEAP_STORE($16, $18, "i32", 0);
 label=4;break;
 case 4: 
 var $20=$2;
 var $21=_treeroot($20);
 $root=$21;
 var $22=$root;
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=27;break;
 case 6: 
 var $26=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $27=$root;
 var $28=(($27+32)|0);
 SAFE_HEAP_STORE($28, $26, "double", 0);
 var $29=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $30=$root;
 var $31=(($30+24)|0);
 SAFE_HEAP_STORE($31, $29, "i32", 0);
 var $32=$2;
 var $33=$3;
 var $34=$4;
 _funcinit($32,$33,$34);
 var $35=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $36=($35|0)==0;
 if($36){label=7;break;}else{label=8;break;}
 case 7: 
 _funcexec(1);
 label=8;break;
 case 8: 
 var $39=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $40=(($39+8)|0);
 var $41=SAFE_HEAP_LOAD($40, "%struct.aplfunc*", 0, 0);
 $2=$41;
 var $42=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $43=($42|0)==0;
 if($43){label=9;break;}else{label=14;break;}
 case 9: 
 var $45=$2;
 var $46=(($45+8)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=$47&2048;
 var $49=($48|0)!=0;
 if($49){label=10;break;}else{label=14;break;}
 case 10: 
 var $51=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $52=(($51+4)|0);
 var $53=SAFE_HEAP_LOAD($52, "%struct.avlnode*", 0, 0);
 var $54=$2;
 var $55=(($54+40)|0);
 var $56=SAFE_HEAP_LOAD($55, "%struct.apltoken*", 0, 0);
 var $57=(($56+12)|0);
 var $58=$57;
 var $59=SAFE_HEAP_LOAD($58, "i8*", 0, 0);
 var $60=_avlsrch($53,$59);
 $p=$60;
 var $61=$p;
 var $62=(($61+8)|0);
 var $63=SAFE_HEAP_LOAD($62, "i8*", 0, 0);
 var $64=$63;
 $out=$64;
 var $65=$p;
 var $66=(($65+8)|0);
 SAFE_HEAP_STORE($66, 0, "i8*", 0);
 var $67=$out;
 var $68=($67|0)==0;
 if($68){label=11;break;}else{label=12;break;}
 case 11: 
 SAFE_HEAP_STORE(4592, 98, "i32", 0);
 label=13;break;
 case 12: 
 var $71=$out;
 var $72=(($71+4)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $74=$73|1;
 SAFE_HEAP_STORE($72, $74, "i32", 0);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $78=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $79=(($78+40)|0);
 var $80=SAFE_HEAP_LOAD($79, "%struct.execstk*", 0, 0);
 var $81=0!=($80|0);
 if($81){label=16;break;}else{label=17;break;}
 case 16: 
 _execterm();
 label=15;break;
 case 17: 
 var $84=_pop(2376);
 var $85=$84;
 $root=$85;
 var $86=$root;
 var $87=(($86+4)|0);
 var $88=SAFE_HEAP_LOAD($87, "%struct.avlnode*", 0, 0);
 _aplclsub($88);
 var $89=$root;
 var $90=(($89+12)|0);
 var $91=SAFE_HEAP_LOAD($90, "i8*", 0, 0);
 var $92=0!=($91|0);
 if($92){label=18;break;}else{label=19;break;}
 case 18: 
 var $94=$root;
 var $95=(($94+12)|0);
 var $96=SAFE_HEAP_LOAD($95, "i8*", 0, 0);
 _aplfree($96);
 label=19;break;
 case 19: 
 var $98=$root;
 var $99=(($98+28)|0);
 var $100=SAFE_HEAP_LOAD($99, "i32", 0, 0);
 var $101=($100|0)!=0;
 if($101){label=20;break;}else{label=21;break;}
 case 20: 
 var $103=$root;
 var $104=(($103+32)|0);
 var $105=SAFE_HEAP_LOAD($104, "double", 0, 0);
 SAFE_HEAP_STORE(2784, $105, "double", 0);
 label=21;break;
 case 21: 
 var $107=$root;
 var $108=(($107+20)|0);
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 var $110=($109|0)!=0;
 if($110){label=22;break;}else{label=23;break;}
 case 22: 
 var $112=$root;
 var $113=(($112+24)|0);
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 SAFE_HEAP_STORE(2648, $114, "i32", 0);
 label=23;break;
 case 23: 
 var $116=$root;
 var $117=$116;
 _aplfree($117);
 var $118=$flagsave;
 var $119=($118|0)!=0;
 if($119){label=24;break;}else{label=25;break;}
 case 24: 
 var $121=$2;
 var $122=_expunge($121);
 label=26;break;
 case 25: 
 var $124=$2;
 var $125=(($124+4)|0);
 var $126=SAFE_HEAP_LOAD($125, "i32", 0, 0);
 var $127=((($126)-(2048))|0);
 SAFE_HEAP_STORE($125, $127, "i32", 0);
 label=26;break;
 case 26: 
 var $129=$out;
 $1=$129;
 label=27;break;
 case 27: 
 var $131=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $131;
  default: assert(0, "bad label: " + label);
 }

}


function _funcmsg($fp,$offset,$stmtno){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $stmtlen;
 var $cb;
 $1=$fp;
 $2=$offset;
 $3=$stmtno;
 var $4=$1;
 var $5=(($4+24)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $7=(($6+16)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32*", 0, 0);
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 $stmtlen=$10;
 var $11=$1;
 var $12=(($11+24)|0);
 var $13=SAFE_HEAP_LOAD($12, "%struct.aplcb*", 0, 0);
 $cb=$13;
 var $14=$cb;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$16&32;
 var $18=($17|0)!=0;
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 var $20=$cb;
 var $21=(($20)|0);
 var $22=$21;
 var $23=SAFE_HEAP_LOAD($22, "%struct.aplcb**", 0, 0);
 var $24=$3;
 var $25=(($23+($24<<2))|0);
 var $26=SAFE_HEAP_LOAD($25, "%struct.aplcb*", 0, 0);
 $cb=$26;
 var $27=$cb;
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 var $31=$cb;
 var $32=(($31+8)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=$2;
 _execmsg($30,$33,$34,0);
 label=4;break;
 case 3: 
 var $36=$cb;
 var $37=(($36)|0);
 var $38=$37;
 var $39=SAFE_HEAP_LOAD($38, "i8*", 0, 0);
 var $40=$3;
 var $41=$stmtlen;
 var $42=(Math_imul($40,$41)|0);
 var $43=(($39+$42)|0);
 var $44=$stmtlen;
 var $45=$2;
 _execmsg($43,$44,$45,0);
 label=4;break;
 case 4: 
 var $47=$1;
 var $48=(($47+28)|0);
 var $49=SAFE_HEAP_LOAD($48, "%struct.apltoken*", 0, 0);
 var $50=(($49+12)|0);
 var $51=$50;
 var $52=SAFE_HEAP_LOAD($51, "i8*", 0, 0);
 var $53=_printf(9784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $52, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 _aplnewl();
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _funcopy($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $np;
 var $i;
 var $ip;
 var $stmtno;
 var $newtok;
 var $oldtok;
 $1=$fp;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=(($3+24)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $6=_execqfxa($5);
 $np=$6;
 var $7=$np;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 label=26;break;
 case 4: 
 var $11=$1;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$np;
 var $15=(($14+8)|0);
 SAFE_HEAP_STORE($15, $13, "i32", 0);
 var $16=$1;
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$np;
 var $20=(($19+12)|0);
 SAFE_HEAP_STORE($20, $18, "i32", 0);
 var $21=$1;
 var $22=(($21+16)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=$np;
 var $25=(($24+16)|0);
 SAFE_HEAP_STORE($25, $23, "i32", 0);
 var $26=$1;
 var $27=(($26+28)|0);
 var $28=SAFE_HEAP_LOAD($27, "%struct.apltoken*", 0, 0);
 var $29=$np;
 var $30=(($29+28)|0);
 SAFE_HEAP_STORE($30, $28, "%struct.apltoken*", 0);
 var $31=$1;
 var $32=(($31+40)|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.apltoken*", 0, 0);
 var $34=$np;
 var $35=(($34+40)|0);
 SAFE_HEAP_STORE($35, $33, "%struct.apltoken*", 0);
 var $36=$np;
 _execqfxj($36);
 var $37=$np;
 var $38=(($37+20)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32*", 0, 0);
 var $40=$39;
 var $41=$1;
 var $42=(($41+20)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32*", 0, 0);
 var $44=$43;
 var $45=$np;
 var $46=(($45+16)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=_intcopy($40,$44,$47,1);
 var $49=$48;
 $ip=$49;
 var $50=$np;
 var $51=(($50+12)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=((($52)*(24))&-1);
 var $54=_aplmall($53);
 var $55=$54;
 var $56=$np;
 var $57=(($56+36)|0);
 SAFE_HEAP_STORE($57, $55, "%struct.apltoken*", 0);
 var $58=$np;
 var $59=(($58+36)|0);
 var $60=SAFE_HEAP_LOAD($59, "%struct.apltoken*", 0, 0);
 var $61=($60|0)==0;
 if($61){label=5;break;}else{label=6;break;}
 case 5: 
 label=26;break;
 case 6: 
 $i=0;
 label=7;break;
 case 7: 
 var $65=$i;
 var $66=$np;
 var $67=(($66+12)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=($65|0)<($68|0);
 if($69){label=8;break;}else{label=10;break;}
 case 8: 
 var $71=$np;
 var $72=(($71+36)|0);
 var $73=SAFE_HEAP_LOAD($72, "%struct.apltoken*", 0, 0);
 var $74=$i;
 var $75=(($73+((($74)*(24))&-1))|0);
 var $76=$1;
 var $77=(($76+36)|0);
 var $78=SAFE_HEAP_LOAD($77, "%struct.apltoken*", 0, 0);
 var $79=$i;
 var $80=(($78+((($79)*(24))&-1))|0);
 _tokcopy($75,$80);
 label=9;break;
 case 9: 
 var $82=$i;
 var $83=((($82)+(1))|0);
 $i=$83;
 label=7;break;
 case 10: 
 var $85=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $86=($85|0)!=0;
 if($86){label=11;break;}else{label=12;break;}
 case 11: 
 label=26;break;
 case 12: 
 $stmtno=0;
 label=13;break;
 case 13: 
 var $90=$stmtno;
 var $91=$np;
 var $92=(($91+16)|0);
 var $93=SAFE_HEAP_LOAD($92, "i32", 0, 0);
 var $94=($90|0)<($93|0);
 if($94){label=14;break;}else{label=16;break;}
 case 14: 
 var $96=$np;
 var $97=(($96+36)|0);
 var $98=SAFE_HEAP_LOAD($97, "%struct.apltoken*", 0, 0);
 var $99=$1;
 var $100=(($99+32)|0);
 var $101=SAFE_HEAP_LOAD($100, "%struct.apltoken**", 0, 0);
 var $102=$stmtno;
 var $103=(($101+($102<<2))|0);
 var $104=SAFE_HEAP_LOAD($103, "%struct.apltoken*", 0, 0);
 var $105=$1;
 var $106=(($105+36)|0);
 var $107=SAFE_HEAP_LOAD($106, "%struct.apltoken*", 0, 0);
 var $108=$104;
 var $109=$107;
 var $110=((($108)-($109))|0);
 var $111=(((($110|0))/(24))&-1);
 var $112=(($98+((($111)*(24))&-1))|0);
 var $113=$np;
 var $114=(($113+32)|0);
 var $115=SAFE_HEAP_LOAD($114, "%struct.apltoken**", 0, 0);
 var $116=$stmtno;
 var $117=(($115+($116<<2))|0);
 SAFE_HEAP_STORE($117, $112, "%struct.apltoken*", 0);
 label=15;break;
 case 15: 
 var $119=$stmtno;
 var $120=((($119)+(1))|0);
 $stmtno=$120;
 label=13;break;
 case 16: 
 var $122=$1;
 var $123=(($122+44)|0);
 var $124=SAFE_HEAP_LOAD($123, "%struct.apltoken*", 0, 0);
 $oldtok=$124;
 var $125=$oldtok;
 var $126=($125|0)==0;
 if($126){label=17;break;}else{label=18;break;}
 case 17: 
 var $128=$np;
 var $129=(($128+44)|0);
 SAFE_HEAP_STORE($129, 0, "%struct.apltoken*", 0);
 label=25;break;
 case 18: 
 var $131=$oldtok;
 var $132=$1;
 var $133=(($132+36)|0);
 var $134=SAFE_HEAP_LOAD($133, "%struct.apltoken*", 0, 0);
 var $135=$131;
 var $136=$134;
 var $137=((($135)-($136))|0);
 var $138=(((($137|0))/(24))&-1);
 var $139=$np;
 var $140=(($139+36)|0);
 var $141=SAFE_HEAP_LOAD($140, "%struct.apltoken*", 0, 0);
 var $142=(($141+((($138)*(24))&-1))|0);
 var $143=$np;
 var $144=(($143+44)|0);
 SAFE_HEAP_STORE($144, $142, "%struct.apltoken*", 0);
 $newtok=$142;
 label=19;break;
 case 19: 
 var $146=$oldtok;
 var $147=($146|0)!=0;
 if($147){label=20;break;}else{label=24;break;}
 case 20: 
 var $149=$oldtok;
 var $150=(($149+8)|0);
 var $151=SAFE_HEAP_LOAD($150, "i32", 0, 0);
 var $152=$newtok;
 var $153=(($152+8)|0);
 SAFE_HEAP_STORE($153, $151, "i32", 0);
 var $154=$oldtok;
 var $155=(($154)|0);
 var $156=$155;
 var $157=SAFE_HEAP_LOAD($156, "%struct.apltoken*", 0, 0);
 $oldtok=$157;
 var $158=$oldtok;
 var $159=0==($158|0);
 if($159){label=21;break;}else{label=22;break;}
 case 21: 
 var $161=$newtok;
 var $162=(($161)|0);
 var $163=$162;
 SAFE_HEAP_STORE($163, 0, "%struct.apltoken*", 0);
 label=23;break;
 case 22: 
 var $165=$oldtok;
 var $166=$1;
 var $167=(($166+36)|0);
 var $168=SAFE_HEAP_LOAD($167, "%struct.apltoken*", 0, 0);
 var $169=$165;
 var $170=$168;
 var $171=((($169)-($170))|0);
 var $172=(((($171|0))/(24))&-1);
 var $173=$np;
 var $174=(($173+36)|0);
 var $175=SAFE_HEAP_LOAD($174, "%struct.apltoken*", 0, 0);
 var $176=(($175+((($172)*(24))&-1))|0);
 var $177=$newtok;
 var $178=(($177)|0);
 var $179=$178;
 SAFE_HEAP_STORE($179, $176, "%struct.apltoken*", 0);
 label=23;break;
 case 23: 
 var $181=$newtok;
 var $182=(($181)|0);
 var $183=$182;
 var $184=SAFE_HEAP_LOAD($183, "%struct.apltoken*", 0, 0);
 $newtok=$184;
 label=19;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $188=$np;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $188;
  default: assert(0, "bad label: " + label);
 }

}


function _funcstop($stop,$stmtno){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $ip;
 $2=$stop;
 $3=$stmtno;
 var $4=$2;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=9;break;}
 case 2: 
 var $7=$2;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $i=$9;
 var $10=0!=($9|0);
 if($10){label=3;break;}else{label=9;break;}
 case 3: 
 var $12=$2;
 var $13=(($12)|0);
 var $14=$13;
 var $15=SAFE_HEAP_LOAD($14, "i32*", 0, 0);
 $ip=$15;
 label=4;break;
 case 4: 
 var $17=$i;
 var $18=((($17)-(1))|0);
 $i=$18;
 var $19=($17|0)!=0;
 if($19){label=5;break;}else{label=8;break;}
 case 5: 
 var $21=$3;
 var $22=$ip;
 var $23=(($22+4)|0);
 $ip=$23;
 var $24=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $25=($21|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 $1=1;
 label=10;break;
 case 7: 
 label=4;break;
 case 8: 
 label=9;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $31=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }

}


function _funcsusp(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $out;
 var $i;
 var $loop;
 var $stmtno=sp;
 $loop=1;
 SAFE_HEAP_STORE($stmtno, 0, "i32", 0);
 var $1=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $2=(($1+8)|0);
 var $3=SAFE_HEAP_LOAD($2, "%struct.aplfunc*", 0, 0);
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $7=(($6+56)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=$8|1;
 SAFE_HEAP_STORE($7, $9, "i32", 0);
 var $10=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $11=(($10+12)|0);
 var $12=SAFE_HEAP_LOAD($11, "i8*", 0, 0);
 var $13=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $14=(($13+16)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=_printf(9736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $12, "i8*", 0),SAFE_HEAP_STORE((tempVarArgs)+(8), $15, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 _aplnewl();
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $19=$loop;
 var $20=($19|0)!=0;
 if($20){label=5;break;}else{var $38=0;label=9;break;}
 case 5: 
 var $22=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $23=($22|0)!=998;
 if($23){label=6;break;}else{var $38=0;label=9;break;}
 case 6: 
 var $25=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $26=($25|0)==997;
 if($26){label=7;break;}else{var $35=0;label=8;break;}
 case 7: 
 var $28=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $29=(($28+56)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=$30&1;
 var $32=($31|0)!=0;
 var $33=$32^1;
 var $35=$33;label=8;break;
 case 8: 
 var $35;
 var $36=$35^1;
 var $38=$36;label=9;break;
 case 9: 
 var $38;
 if($38){label=10;break;}else{label=16;break;}
 case 10: 
 var $40=___errno_location();
 SAFE_HEAP_STORE($40, 0, "i32", 0);
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 var $41=_getchrv(13104);
 $out=$41;
 var $42=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $43=($42|0)!=0;
 if($43){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=SAFE_HEAP_LOAD(_stderr, "%struct._IO_FILE*", 0, 0);
 var $46=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $47=_aplmsg($46);
 var $48=_fprintf($45,12024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $47, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $49=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 _exit($49);
 throw "Reached an unreachable!";
 case 12: 
 var $51=$out;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 SAFE_HEAP_STORE(4592, 998, "i32", 0);
 var $56=$out;
 SAFE_HEAP_STORE(4064, $56, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE(4056, 11, "i32", 0);
 $loop=0;
 label=15;break;
 case 14: 
 var $58=$out;
 var $59=_funcsusq($58,$stmtno);
 $loop=$59;
 label=15;break;
 case 15: 
 label=4;break;
 case 16: 
 var $62=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $63=(($62+56)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=$64&1;
 var $66=($65|0)!=0;
 if($66){label=17;break;}else{label=18;break;}
 case 17: 
 var $68=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $69=(($68+56)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=((($70)-(1))|0);
 SAFE_HEAP_STORE($69, $71, "i32", 0);
 label=18;break;
 case 18: 
 var $73=SAFE_HEAP_LOAD($stmtno, "i32", 0, 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $73;
  default: assert(0, "bad label: " + label);
 }

}


function _funcsusq($out,$pstmtno){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cp=sp;
 var $cpend;
 var $cs;
 var $i;
 var $loop;
 var $stmtno;
 var $tempsave;
 $1=$out;
 $2=$pstmtno;
 $loop=1;
 $stmtno=0;
 var $3=$1;
 var $4=(($3)|0);
 var $5=$4;
 var $6=SAFE_HEAP_LOAD($5, "i8*", 0, 0);
 SAFE_HEAP_STORE($cp, $6, "i8*", 0);
 var $7=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $8=$1;
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=(($7+$10)|0);
 $cpend=$11;
 var $12=$cpend;
 var $13=_aplscan($cp,$12);
 $i=$13;
 var $14=$i;
 if(($14|0)==9){ label=13;break;}else if(($14|0)==39){ label=16;break;}else if(($14|0)==4){ label=2;break;}else{label=17;break;}
 case 2: 
 var $16=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $17=(($16+56)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$18&1;
 var $20=($19|0)!=0;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 var $22=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $23=(($22+56)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=((($24)-(1))|0);
 SAFE_HEAP_STORE($23, $25, "i32", 0);
 label=4;break;
 case 4: 
 $loop=0;
 var $27=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $28=$cpend;
 var $29=($27|0)==($28|0);
 if($29){label=5;break;}else{label=6;break;}
 case 5: 
 var $31=$1;
 _endoper($31);
 SAFE_HEAP_STORE(4592, 997, "i32", 0);
 var $32=$2;
 SAFE_HEAP_STORE($32, 0, "i32", 0);
 label=12;break;
 case 6: 
 var $34=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $35=(($34+8)|0);
 var $36=SAFE_HEAP_LOAD($35, "%struct.aplfunc*", 0, 0);
 var $37=0!=($36|0);
 if($37){label=7;break;}else{label=10;break;}
 case 7: 
 var $39=$1;
 var $40=(($39+4)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$41&1;
 $tempsave=$42;
 var $43=$1;
 var $44=(($43)|0);
 var $45=$44;
 var $46=SAFE_HEAP_LOAD($45, "i8*", 0, 0);
 var $47=(($46+1)|0);
 SAFE_HEAP_STORE($45, $47, "i8*", 0);
 $cs=$46;
 var $48=$1;
 var $49=(($48+8)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=((($50)-(1))|0);
 SAFE_HEAP_STORE($49, $51, "i32", 0);
 var $52=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $53=(($52+8)|0);
 var $54=SAFE_HEAP_LOAD($53, "%struct.aplfunc*", 0, 0);
 var $55=$1;
 var $56=_executf($55);
 var $57=$2;
 var $58=SAFE_HEAP_LOAD($57, "i32", 0, 0);
 var $59=_funcgoto($54,$56,$58);
 var $60=((($59)+(1))|0);
 var $61=$2;
 SAFE_HEAP_STORE($61, $60, "i32", 0);
 var $62=$tempsave;
 var $63=($62|0)==0;
 if($63){label=8;break;}else{label=9;break;}
 case 8: 
 var $65=$cs;
 var $66=$1;
 var $67=(($66)|0);
 var $68=$67;
 SAFE_HEAP_STORE($68, $65, "i8*", 0);
 var $69=$1;
 var $70=(($69+8)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=((($71)+(1))|0);
 SAFE_HEAP_STORE($70, $72, "i32", 0);
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 SAFE_HEAP_STORE(4592, 120, "i32", 0);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 label=18;break;
 case 13: 
 var $78=$1;
 var $79=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $80=$cpend;
 var $81=_aplwksp($78,$79,$80);
 $loop=$81;
 var $82=$loop;
 var $83=($82|0)!=0;
 if($83){label=15;break;}else{label=14;break;}
 case 14: 
 SAFE_HEAP_STORE(4592, 998, "i32", 0);
 label=15;break;
 case 15: 
 label=18;break;
 case 16: 
 var $87=$1;
 var $88=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $89=$cpend;
 var $90=_apledit($87,$88,$89);
 label=18;break;
 case 17: 
 var $92=$1;
 var $93=_execute($92);
 _endoper($93);
 label=18;break;
 case 18: 
 var $95=$loop;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $95;
  default: assert(0, "bad label: " + label);
 }

}


function _functrac($fp,$trace,$stmtno,$out){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$fp;
 $2=$trace;
 $3=$stmtno;
 $4=$out;
 var $5=$2;
 var $6=$3;
 var $7=_funcstop($5,$6);
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=6;break;}
 case 2: 
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=SAFE_HEAP_LOAD($11, "%struct.apltoken*", 0, 0);
 var $13=(($12+12)|0);
 var $14=$13;
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=$3;
 var $17=_printf(9664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $15, "i8*", 0),SAFE_HEAP_STORE((tempVarArgs)+(8), $16, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 _aplnewl();
 var $18=$4;
 var $19=($18|0)!=0;
 if($19){label=3;break;}else{label=5;break;}
 case 3: 
 var $21=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $22=(($21+48)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=($23|0)!=3;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=$4;
 var $27=_quadout($26);
 $4=$27;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _functrgo($fp,$trace,$brto,$brfrom){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$fp;
 $2=$trace;
 $3=$brto;
 $4=$brfrom;
 var $5=$2;
 var $6=$4;
 var $7=_funcstop($5,$6);
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=8;break;}
 case 2: 
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=SAFE_HEAP_LOAD($11, "%struct.apltoken*", 0, 0);
 var $13=(($12+12)|0);
 var $14=$13;
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 var $16=$4;
 var $17=_printf(9656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $15, "i8*", 0),SAFE_HEAP_STORE((tempVarArgs)+(8), $16, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=$3;
 var $19=$4;
 var $20=($18|0)!=($19|0);
 if($20){label=3;break;}else{label=7;break;}
 case 3: 
 var $22=$3;
 var $23=((($22)+(1))|0);
 $3=$23;
 var $24=$3;
 var $25=$1;
 var $26=(($25+16)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($24|0)>=($27|0);
 if($28){label=5;break;}else{label=4;break;}
 case 4: 
 var $30=$3;
 var $31=($30|0)<1;
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 $3=0;
 label=6;break;
 case 6: 
 var $34=_codechar(4);
 var $35=$3;
 var $36=_printf(13056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $34, "i8*", 0),SAFE_HEAP_STORE((tempVarArgs)+(8), $35, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 _aplnewl();
 label=8;break;
 case 8: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _functrst($ch,$name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $control=sp;
 var $p;
 var $cb;
 $2=$ch;
 $3=$name;
 var $4=$2;
 var $5=SAFE_HEAP_LOAD($4, "i8", 0, 0);
 var $6=(($control)|0);
 SAFE_HEAP_STORE($6, $5, "i8", 0);
 var $7=_codechar(40);
 var $8=SAFE_HEAP_LOAD($7, "i8", 0, 0);
 var $9=(($control+1)|0);
 SAFE_HEAP_STORE($9, $8, "i8", 0);
 var $10=(($control+2)|0);
 var $11=$3;
 var $12=_strcpy($10,$11);
 var $13=(($control)|0);
 var $14=_treenode($13);
 $p=$14;
 var $15=0==($14|0);
 if($15){label=6;break;}else{label=2;break;}
 case 2: 
 var $17=$p;
 var $18=(($17+8)|0);
 var $19=SAFE_HEAP_LOAD($18, "i8*", 0, 0);
 var $20=$19;
 $cb=$20;
 var $21=0==($20|0);
 if($21){label=6;break;}else{label=3;break;}
 case 3: 
 var $23=$cb;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=4;break;}
 case 4: 
 var $28=$cb;
 var $29=(($28+12)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=($30|0)>1;
 if($31){label=6;break;}else{label=5;break;}
 case 5: 
 var $33=$cb;
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=0==($35|0);
 var $37=($36&1);
 var $38=$37&6;
 var $39=($38|0)!=0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=10;break;
 case 7: 
 var $42=$cb;
 var $43=(($42+4)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=$44&4;
 var $46=($45|0)!=0;
 if($46){label=9;break;}else{label=8;break;}
 case 8: 
 var $48=$cb;
 var $49=_vectin($48);
 var $50=_temp($49);
 $cb=$50;
 label=9;break;
 case 9: 
 var $52=$cb;
 $1=$52;
 label=10;break;
 case 10: 
 var $54=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }

}


function _funinit(){
 var label=0;


 SAFE_HEAP_STORE(984, 410, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(256, 326, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(128, 380, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(112, 366, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1544, 190, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1288, 202, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1816, 88, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1820, 106, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1824, 206, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1792, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1796, 94, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1800, 176, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1804, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1808, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1812, 168, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1832, (154), "i32 (i8, i8)*", 0);
 SAFE_HEAP_STORE(1836, 324, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1840, 270, "void (i8*, i8*, double*)*", 0);
 SAFE_HEAP_STORE(1844, 136, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(688, 52, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(692, 2, "double (double, double)*", 0);
 SAFE_HEAP_STORE(696, 272, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(664, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(668, 216, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(672, 178, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(676, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(680, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(684, 186, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(704, (378), "i32 (i8, i8)*", 0);
 SAFE_HEAP_STORE(708, 336, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(712, 298, "void (i8*, i8*, double*)*", 0);
 SAFE_HEAP_STORE(716, 58, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1416, 246, "%struct.aplcb* (%struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1420, 416, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1400, 412, "%struct.aplcb* (%struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1404, 342, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1384, 22, "%struct.aplcb* (%struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1388, 288, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1304, 268, "%struct.aplcb* (%struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1308, 84, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1112, 244, "%struct.aplcb* (%struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1116, 330, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(792, 28, "%struct.aplcb* (%struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(796, 372, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(536, 220, "%struct.aplcb* (%struct.aplcb*, i32)*", 0);
 SAFE_HEAP_STORE(540, 46, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0);
 SAFE_HEAP_STORE(520, 220, "%struct.aplcb* (%struct.aplcb*, i32)*", 0);
 SAFE_HEAP_STORE(524, 46, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0);
 SAFE_HEAP_STORE(440, 174, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(444, 130, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(424, 214, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(428, 368, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(272, 238, "%struct.aplcb* (%struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(276, 38, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1920, 222, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1924, 362, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0);
 SAFE_HEAP_STORE(1688, 312, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(1692, 112, "double (double)*", 0);
 SAFE_HEAP_STORE(1696, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(1672, 252, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1676, 360, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1680, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(1684, 0, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1700, 158, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(304, 138, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(308, 250, "double (double)*", 0);
 SAFE_HEAP_STORE(312, 296, "i32 (double)*", 0);
 SAFE_HEAP_STORE(288, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(292, 310, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(296, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(300, 0, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(316, 226, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1528, 42, "%struct.aplcb* (%struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1532, 0, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1560, 114, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(1000, 280, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(904, 266, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 SAFE_HEAP_STORE(240, 76, "i32 (%struct.apltoken*)*", 0);
 SAFE_HEAP_STORE(224, 76, "i32 (%struct.apltoken*)*", 0);
 SAFE_HEAP_STORE(208, 76, "i32 (%struct.apltoken*)*", 0);
 SAFE_HEAP_STORE(192, 76, "i32 (%struct.apltoken*)*", 0);
 SAFE_HEAP_STORE(176, 218, "i32 (%struct.apltoken*)*", 0);
 SAFE_HEAP_STORE(160, 388, "i32 (%struct.apltoken*)*", 0);
 SAFE_HEAP_STORE(144, 0, "i32 (%struct.apltoken*)*", 0);
 SAFE_HEAP_STORE(2168, 234, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(2172, 278, "double (double, double)*", 0);
 SAFE_HEAP_STORE(2176, 104, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(2144, 56, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(2148, 60, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(2152, 262, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(2156, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(2160, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1168, 118, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1172, 152, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1176, 204, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1144, 170, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1148, 430, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1152, 406, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1156, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1160, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(960, 352, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(964, 100, "double (double, double)*", 0);
 SAFE_HEAP_STORE(968, 404, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(936, 432, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(940, 48, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(944, 304, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(948, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(952, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(496, 142, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(500, 418, "double (double, double)*", 0);
 SAFE_HEAP_STORE(504, 300, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(472, 116, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(476, 428, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(480, 254, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(484, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(488, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1896, 276, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1900, 370, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1904, 150, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1872, 348, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1876, 86, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1880, 392, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1884, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1888, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1752, 424, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1756, 108, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1760, 306, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1728, 436, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1732, 394, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1736, 230, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1740, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1744, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1360, 382, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1364, 386, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1368, 212, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1336, 258, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1340, 196, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1344, 408, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1348, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1352, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(768, 200, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(772, 96, "double (double, double)*", 0);
 SAFE_HEAP_STORE(776, 284, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(744, 242, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(748, 356, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(752, 236, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(756, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(760, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(2360, 292, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(2364, 354, "double (double)*", 0);
 SAFE_HEAP_STORE(2368, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(2344, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(2348, 294, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(2352, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(2356, 282, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(2328, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(2332, 210, "double (double, double)*", 0);
 SAFE_HEAP_STORE(2336, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(2304, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(2308, 68, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(2312, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(2316, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(2320, 74, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(2324, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(2264, 0, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(2268, 24, "double (double)*", 0);
 SAFE_HEAP_STORE(2272, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(2248, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(2252, 62, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(2256, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(2260, 290, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(2232, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(2236, 70, "double (double, double)*", 0);
 SAFE_HEAP_STORE(2240, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(2208, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(2212, 92, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(2216, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(2220, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(2224, 98, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(2228, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(2008, 132, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(2012, 82, "double (double)*", 0);
 SAFE_HEAP_STORE(2016, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(1992, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1996, 44, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(2000, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(2004, 32, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1976, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1980, 328, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1984, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1952, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1956, 334, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1960, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1964, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1968, 162, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1972, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1504, 132, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(1508, 256, "double (double)*", 0);
 SAFE_HEAP_STORE(1512, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(1488, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1492, 274, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1496, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(1500, 390, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1472, 338, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1476, 208, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1480, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1448, 228, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1452, 198, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1456, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1460, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1464, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1468, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1088, 0, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(1092, 346, "double (double)*", 0);
 SAFE_HEAP_STORE(1096, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(1072, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1076, 30, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1080, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(1084, 248, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1056, 398, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1060, 78, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1064, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1032, 232, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1036, 402, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1040, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1044, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1048, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1052, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(880, 286, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(884, 240, "double (double)*", 0);
 SAFE_HEAP_STORE(888, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(864, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(868, 146, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(872, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(876, 134, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(848, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(852, 434, "double (double, double)*", 0);
 SAFE_HEAP_STORE(856, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(824, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(828, 172, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(832, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(836, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(840, 160, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(844, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(624, 260, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(628, 340, "double (double)*", 0);
 SAFE_HEAP_STORE(632, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(608, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(612, 400, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(616, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(620, 320, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(592, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(596, 140, "double (double, double)*", 0);
 SAFE_HEAP_STORE(600, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(568, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(572, 308, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(576, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(580, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(584, 316, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(588, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(400, 384, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(404, 10, "double (double)*", 0);
 SAFE_HEAP_STORE(408, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(384, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(388, 364, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(392, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(396, 374, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(368, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(372, 16, "double (double, double)*", 0);
 SAFE_HEAP_STORE(376, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(344, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(348, 8, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(352, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(356, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(360, 4, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(364, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(2104, 0, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(2108, 6, "double (double)*", 0);
 SAFE_HEAP_STORE(2112, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(2088, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(2092, 110, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(2096, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(2100, 224, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(2072, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(2076, 318, "double (double, double)*", 0);
 SAFE_HEAP_STORE(2080, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(2048, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(2052, 188, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(2056, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(2060, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(2064, 14, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(2068, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1648, 0, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(1652, 302, "double (double)*", 0);
 SAFE_HEAP_STORE(1656, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(1632, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1636, 194, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1640, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(1644, 184, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1616, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1620, 26, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1624, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1592, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1596, 66, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1600, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1604, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1608, 50, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1612, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1264, 0, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(1268, 156, "double (double)*", 0);
 SAFE_HEAP_STORE(1272, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(1248, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1252, 166, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1256, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(1260, 80, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(1232, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(1236, 314, "double (double, double)*", 0);
 SAFE_HEAP_STORE(1240, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(1208, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(1212, 182, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1216, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(1220, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(1224, 192, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(1228, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(88, 0, "i32 (i32)*", 0);
 SAFE_HEAP_STORE(92, 0, "double (double)*", 0);
 SAFE_HEAP_STORE(96, 0, "i32 (double)*", 0);
 SAFE_HEAP_STORE(72, 0, "void (i32*, i32*)*", 0);
 SAFE_HEAP_STORE(76, 0, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(80, 0, "void (double*, i32*)*", 0);
 SAFE_HEAP_STORE(84, 322, "void (double*, double*)*", 0);
 SAFE_HEAP_STORE(56, 0, "i32 (i32, i32)*", 0);
 SAFE_HEAP_STORE(60, 0, "double (double, double)*", 0);
 SAFE_HEAP_STORE(64, 0, "i32 (double, double)*", 0);
 SAFE_HEAP_STORE(32, 0, "void (i32*, i32*, i32*)*", 0);
 SAFE_HEAP_STORE(36, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(40, 0, "void (double*, double*, i32*)*", 0);
 SAFE_HEAP_STORE(44, 0, "void (i8*, i8*, i32*)*", 0);
 SAFE_HEAP_STORE(48, 0, "void (double*, double*, double*)*", 0);
 SAFE_HEAP_STORE(52, 0, "void (double*, double*, i32*)*", 0);
 return;
}


function _funexec($tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $func;
 $2=$tok;
 $func=0;
 var $3=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$2;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$2;
 $1=$9;
 label=62;break;
 case 4: 
 var $11=$2;
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 switch(($13|0)){case 12:{ label=10;break;}case 28:{ label=11;break;}case 29:{ label=12;break;}case 30:{ label=13;break;}case 31:{ label=14;break;}case 32:{ label=15;break;}case 33:{ label=16;break;}case 34:{ label=17;break;}case 35:{ label=18;break;}case 36:{ label=19;break;}case 37:{ label=20;break;}case 38:{ label=21;break;}case 41:{ label=22;break;}case 43:{ label=23;break;}case 45:{ label=24;break;}case 46:{ label=25;break;}case 47:{ label=26;break;}case 48:{ label=27;break;}case 50:{ label=28;break;}case 51:{ label=29;break;}case 52:{ label=30;break;}case 53:{ label=31;break;}case 54:{ label=32;break;}case 55:{ label=33;break;}case 56:{ label=34;break;}case 57:{ label=35;break;}case 58:{ label=36;break;}case 62:{ label=37;break;}case 63:{ label=38;break;}case 70:{ label=39;break;}case 71:{ label=40;break;}case 73:{ label=41;break;}case 75:{ label=42;break;}case 76:{ label=43;break;}case 131:{ label=44;break;}case 132:{ label=45;break;}case 133:{ label=46;break;}case 134:{ label=47;break;}case 15:{ label=48;break;}case 64:{ label=49;break;}case 1:{ label=5;break;}case 60:{ label=50;break;}case 77:{ label=51;break;}case 65:{ label=52;break;}case 14:{ label=53;break;}case 42:{ label=54;break;}case 135:{ label=55;break;}case -32:{ label=56;break;}case 136:{ label=57;break;}case 5:{ label=6;break;}case 6:{ label=7;break;}case 10:{ label=8;break;}case 11:{ label=9;break;}default:{label=58;break;}}break;
 case 5: 
 $func=2280;
 label=59;break;
 case 6: 
 $func=2184;
 label=59;break;
 case 7: 
 $func=2120;
 label=59;break;
 case 8: 
 $func=2024;
 label=59;break;
 case 9: 
 $func=1928;
 label=59;break;
 case 10: 
 $func=1912;
 label=59;break;
 case 11: 
 $func=1848;
 label=59;break;
 case 12: 
 $func=1768;
 label=59;break;
 case 13: 
 $func=1704;
 label=59;break;
 case 14: 
 $func=1664;
 label=59;break;
 case 15: 
 $func=1568;
 label=59;break;
 case 16: 
 $func=1552;
 label=59;break;
 case 17: 
 $func=1536;
 label=59;break;
 case 18: 
 $func=1520;
 label=59;break;
 case 19: 
 $func=1424;
 label=59;break;
 case 20: 
 $func=1408;
 label=59;break;
 case 21: 
 $func=1392;
 label=59;break;
 case 22: 
 $func=1376;
 label=59;break;
 case 23: 
 $func=1312;
 label=59;break;
 case 24: 
 $func=1296;
 label=59;break;
 case 25: 
 $func=1280;
 label=59;break;
 case 26: 
 $func=1184;
 label=59;break;
 case 27: 
 $func=1120;
 label=59;break;
 case 28: 
 $func=1104;
 label=59;break;
 case 29: 
 $func=1008;
 label=59;break;
 case 30: 
 $func=992;
 label=59;break;
 case 31: 
 $func=976;
 label=59;break;
 case 32: 
 $func=912;
 label=59;break;
 case 33: 
 $func=896;
 label=59;break;
 case 34: 
 $func=800;
 label=59;break;
 case 35: 
 $func=784;
 label=59;break;
 case 36: 
 $func=720;
 label=59;break;
 case 37: 
 $func=640;
 label=59;break;
 case 38: 
 $func=544;
 label=59;break;
 case 39: 
 $func=528;
 label=59;break;
 case 40: 
 $func=512;
 label=59;break;
 case 41: 
 $func=448;
 label=59;break;
 case 42: 
 $func=432;
 label=59;break;
 case 43: 
 $func=416;
 label=59;break;
 case 44: 
 $func=320;
 label=59;break;
 case 45: 
 $func=280;
 label=59;break;
 case 46: 
 $func=264;
 label=59;break;
 case 47: 
 $func=248;
 label=59;break;
 case 48: 
 $func=232;
 label=59;break;
 case 49: 
 $func=216;
 label=59;break;
 case 50: 
 $func=200;
 label=59;break;
 case 51: 
 $func=184;
 label=59;break;
 case 52: 
 $func=168;
 label=59;break;
 case 53: 
 $func=152;
 label=59;break;
 case 54: 
 $func=136;
 label=59;break;
 case 55: 
 $func=120;
 label=59;break;
 case 56: 
 $func=104;
 label=59;break;
 case 57: 
 $func=8;
 label=59;break;
 case 58: 
 var $68=$2;
 $1=$68;
 label=62;break;
 case 59: 
 var $70=$2;
 var $71=(($70+16)|0);
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=$72&1;
 var $74=($73|0)!=0;
 if($74){label=60;break;}else{label=61;break;}
 case 60: 
 var $76=$2;
 var $77=(($76+8)|0);
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 var $79=_newtok(-10,0,$78,0,0);
 $2=$79;
 label=61;break;
 case 61: 
 var $81=$2;
 var $82=(($81+4)|0);
 SAFE_HEAP_STORE($82, -10, "i32", 0);
 var $83=$func;
 var $84=$2;
 var $85=(($84+12)|0);
 var $86=$85;
 SAFE_HEAP_STORE($86, $83, "i8*", 0);
 var $87=$2;
 $1=$87;
 label=62;break;
 case 62: 
 var $89=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $89;
  default: assert(0, "bad label: " + label);
 }

}


function _gammax($carg,$cans,$lf0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $a;
 var $al1;
 var $al2;
 var $b;
 var $delta;
 var $de0;
 var $de1;
 var $dn;
 var $h;
 var $h1;
 var $h2;
 var $t1;
 var $t2;
 var $u;
 var $uuu1;
 var $uuu2;
 var $uu1;
 var $uu2;
 var $u1;
 var $u2;
 var $vv1;
 var $vv2;
 var $v1;
 var $v2;
 var $w1;
 var $w2;
 var $y1;
 var $zz1;
 var $z1;
 var $z2;
 var $j;
 var $k;
 var $lf1;
 var $lf2;
 var $lf3;
 var $n;
 $1=$carg;
 $2=$cans;
 $3=$lf0;
 var $4=$2;
 var $5=(($4+8)|0);
 SAFE_HEAP_STORE($5, 0, "double", 0);
 var $6=$2;
 SAFE_HEAP_STORE($6, 0, "double", 0);
 var $7=$1;
 var $8=SAFE_HEAP_LOAD($7, "double", 0, 0);
 $z1=$8;
 var $9=$1;
 var $10=(($9+8)|0);
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 $z2=$11;
 var $12=$z2;
 var $13=$12>=0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$z2;
 var $20=$15;label=4;break;
 case 3: 
 var $17=$z2;
 var $18=((-.0))-($17);
 var $20=$18;label=4;break;
 case 4: 
 var $20;
 var $21=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $22=$20<$21;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=$1;
 var $25=$2;
 _factorlp($24,$25);
 label=93;break;
 case 6: 
 var $27=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 $delta=$27;
 $de0=2;
 $de1=0;
 $lf1=0;
 var $28=$z2;
 var $29=$28>=0;
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 $lf1=1;
 var $31=$z2;
 var $32=((-.0))-($31);
 $z2=$32;
 label=8;break;
 case 8: 
 $lf2=0;
 var $34=$z1;
 var $35=$34>=0;
 if($35){label=23;break;}else{label=9;break;}
 case 9: 
 $lf2=1;
 var $37=$lf1;
 var $38=((($37)-(1))|0);
 $lf1=$38;
 var $39=SAFE_HEAP_LOAD(2776, "double", 0, 0);
 var $40=SAFE_HEAP_LOAD(2656, "double", 0, 0);
 var $41=$z2;
 var $42=($40)*($41);
 var $43=($39)-($42);
 $t1=$43;
 var $44=SAFE_HEAP_LOAD(2656, "double", 0, 0);
 var $45=$z1;
 var $46=((0.5))-($45);
 var $47=($44)*($46);
 $t2=$47;
 var $48=SAFE_HEAP_LOAD(2712, "double", 0, 0);
 var $49=((-.0))-($48);
 var $50=$z2;
 var $51=($49)*($50);
 $u=$51;
 var $52=$u;
 var $53=$52>=(-0.1054);
 if($53){label=13;break;}else{label=10;break;}
 case 10: 
 $a=0;
 var $55=$u;
 var $56=$55<=(-39.15);
 if($56){label=12;break;}else{label=11;break;}
 case 11: 
 var $58=$u;
 var $59=Math_exp($58);
 $a=$59;
 label=12;break;
 case 12: 
 var $61=$a;
 var $62=(1)-($61);
 $h1=$62;
 label=14;break;
 case 13: 
 var $64=$u;
 var $65=$u;
 var $66=($64)*($65);
 $u2=$66;
 var $67=$u;
 var $68=((-.0))-($67);
 var $69=SAFE_HEAP_LOAD(2688, "double", 0, 0);
 var $70=$u2;
 var $71=($69)*($70);
 var $72=SAFE_HEAP_LOAD(2696, "double", 0, 0);
 var $73=($71)+($72);
 var $74=($68)*($73);
 $a=$74;
 var $75=$a;
 var $76=$a;
 var $77=($75)+($76);
 var $78=$u2;
 var $79=SAFE_HEAP_LOAD(2672, "double", 0, 0);
 var $80=($78)+($79);
 var $81=$u2;
 var $82=($80)*($81);
 var $83=SAFE_HEAP_LOAD(2680, "double", 0, 0);
 var $84=($82)+($83);
 var $85=$a;
 var $86=($84)+($85);
 var $87=($77)/($86);
 $h1=$87;
 var $88=$h1;
 var $89=(1)-($88);
 $a=$89;
 label=14;break;
 case 14: 
 var $91=$z1;
 var $92=$z1;
 var $93=($92)-((0.5));
 var $94=(($93)&-1);
 var $95=($94|0);
 var $96=($91)-($95);
 $b=$96;
 var $97=$a;
 var $98=SAFE_HEAP_LOAD(2712, "double", 0, 0);
 var $99=$b;
 var $100=($98)*($99);
 var $101=Math_sin($100);
 var $102=($97)*($101);
 $h2=$102;
 var $103=SAFE_HEAP_LOAD(2656, "double", 0, 0);
 var $104=$b;
 var $105=($103)*($104);
 var $106=Math_sin($105);
 $b=$106;
 var $107=$h1;
 var $108=$b;
 var $109=$b;
 var $110=($108)+($109);
 var $111=$b;
 var $112=($110)*($111);
 var $113=$a;
 var $114=($112)*($113);
 var $115=($107)+($114);
 $h1=$115;
 var $116=$h2;
 var $117=$116>0;
 if($117){label=15;break;}else{label=16;break;}
 case 15: 
 var $119=$h2;
 var $124=$119;label=17;break;
 case 16: 
 var $121=$h2;
 var $122=((-.0))-($121);
 var $124=$122;label=17;break;
 case 17: 
 var $124;
 var $125=$h1;
 var $126=($124)+($125);
 var $127=SAFE_HEAP_LOAD(2712, "double", 0, 0);
 var $128=$a;
 var $129=($127)*($128);
 var $130=$delta;
 var $131=($129)*($130);
 var $132=($126)-($131);
 $h=$132;
 var $133=$h;
 var $134=$133<=0;
 if($134){label=18;break;}else{label=19;break;}
 case 18: 
 SAFE_HEAP_STORE(4592, 130, "i32", 0);
 label=93;break;
 case 19: 
 var $137=$t1;
 var $138=$137>0;
 if($138){label=20;break;}else{label=21;break;}
 case 20: 
 var $140=$t1;
 var $145=$140;label=22;break;
 case 21: 
 var $142=$t1;
 var $143=((-.0))-($142);
 var $145=$143;label=22;break;
 case 22: 
 var $145;
 var $146=$t2;
 var $147=($145)+($146);
 var $148=$de0;
 var $149=($148)+($147);
 $de0=$149;
 var $150=SAFE_HEAP_LOAD(2656, "double", 0, 0);
 var $151=SAFE_HEAP_LOAD(2712, "double", 0, 0);
 var $152=$a;
 var $153=($151)*($152);
 var $154=$h;
 var $155=($153)/($154);
 var $156=($150)+($155);
 $de1=$156;
 var $157=$z1;
 var $158=(1)-($157);
 $z1=$158;
 label=23;break;
 case 23: 
 $lf3=0;
 var $160=$z1;
 var $161=($160)-((0.5));
 $y1=$161;
 $w1=0;
 $w2=0;
 $k=0;
 var $162=$z2;
 var $163=((14.142))-($162);
 $b=$163;
 var $164=$b;
 var $165=$164>10;
 if($165){label=24;break;}else{label=25;break;}
 case 24: 
 $b=10;
 label=28;break;
 case 25: 
 var $168=$b;
 var $169=$168<(0.1);
 if($169){label=26;break;}else{label=27;break;}
 case 26: 
 $b=0.1;
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $173=$z1;
 var $174=$b;
 var $175=($174)-($173);
 $b=$175;
 label=29;break;
 case 29: 
 var $177=$b;
 var $178=$177<=0;
 if($178){label=30;break;}else{label=31;break;}
 case 30: 
 label=57;break;
 case 31: 
 $lf3=1;
 var $181=$z1;
 $zz1=$181;
 var $182=$b;
 var $183=($182)+(1);
 var $184=(($183)&-1);
 $n=$184;
 var $185=$n;
 var $186=($185|0);
 $dn=$186;
 var $187=$dn;
 var $188=$z1;
 var $189=($188)+($187);
 $z1=$189;
 var $190=$z1;
 var $191=$z1;
 var $192=($190)*($191);
 var $193=$z2;
 var $194=$z2;
 var $195=($193)*($194);
 var $196=($192)+($195);
 $a=$196;
 var $197=$z1;
 var $198=$a;
 var $199=($197)/($198);
 $v1=$199;
 var $200=$z2;
 var $201=((-.0))-($200);
 var $202=$a;
 var $203=($201)/($202);
 $v2=$203;
 var $204=$v1;
 var $205=(1)-($204);
 $u1=$205;
 var $206=$v2;
 var $207=((-.0))-($206);
 $u2=$207;
 var $208=$z2;
 var $209=($208)*((0.6));
 var $210=(6)-($209);
 var $211=$zz1;
 var $212=($210)-($211);
 var $213=(($212)&-1);
 $k=$213;
 var $214=$k;
 var $215=($214|0)<=0;
 if($215){label=37;break;}else{label=32;break;}
 case 32: 
 var $217=$k;
 var $218=$n;
 var $219=((($218)-($217))|0);
 $n=$219;
 var $220=$zz1;
 var $221=$z1;
 var $222=($220)*($221);
 var $223=$z2;
 var $224=$z2;
 var $225=($223)*($224);
 var $226=($222)+($225);
 var $227=$a;
 var $228=($226)/($227);
 $uu1=$228;
 var $229=$dn;
 var $230=$z2;
 var $231=($229)*($230);
 var $232=$a;
 var $233=($231)/($232);
 $uu2=$233;
 $vv1=0;
 $vv2=0;
 $j=1;
 label=33;break;
 case 33: 
 var $235=$j;
 var $236=$k;
 var $237=($235|0)<=($236|0);
 if($237){label=34;break;}else{label=36;break;}
 case 34: 
 var $239=$u1;
 var $240=$uu1;
 var $241=$vv1;
 var $242=($240)+($241);
 var $243=($239)*($242);
 var $244=$u2;
 var $245=$uu2;
 var $246=$vv2;
 var $247=($245)+($246);
 var $248=($244)*($247);
 var $249=($243)-($248);
 $b=$249;
 var $250=$u1;
 var $251=$uu2;
 var $252=$vv2;
 var $253=($251)+($252);
 var $254=($250)*($253);
 var $255=$u2;
 var $256=$uu1;
 var $257=$vv1;
 var $258=($256)+($257);
 var $259=($255)*($258);
 var $260=($254)+($259);
 $u2=$260;
 var $261=$b;
 $u1=$261;
 var $262=$v1;
 var $263=$vv1;
 var $264=($263)+($262);
 $vv1=$264;
 var $265=$v2;
 var $266=$vv2;
 var $267=($266)+($265);
 $vv2=$267;
 label=35;break;
 case 35: 
 var $269=$j;
 var $270=((($269)+(1))|0);
 $j=$270;
 label=33;break;
 case 36: 
 label=37;break;
 case 37: 
 var $273=$n;
 var $274=($273|0)<=1;
 if($274){label=43;break;}else{label=38;break;}
 case 38: 
 var $276=$v1;
 $vv1=$276;
 var $277=$v2;
 $vv2=$277;
 $j=2;
 label=39;break;
 case 39: 
 var $279=$j;
 var $280=$n;
 var $281=($279|0)<=($280|0);
 if($281){label=40;break;}else{label=42;break;}
 case 40: 
 var $283=$v1;
 var $284=$vv1;
 var $285=($284)+($283);
 $vv1=$285;
 var $286=$v2;
 var $287=$vv2;
 var $288=($287)+($286);
 $vv2=$288;
 var $289=$u1;
 var $290=$vv1;
 var $291=(1)-($290);
 var $292=($289)*($291);
 var $293=$u2;
 var $294=$vv2;
 var $295=($293)*($294);
 var $296=($292)+($295);
 $b=$296;
 var $297=$u1;
 var $298=((-.0))-($297);
 var $299=$vv2;
 var $300=($298)*($299);
 var $301=$u2;
 var $302=$vv1;
 var $303=(1)-($302);
 var $304=($301)*($303);
 var $305=($300)+($304);
 $u2=$305;
 var $306=$b;
 $u1=$306;
 label=41;break;
 case 41: 
 var $308=$j;
 var $309=((($308)+(1))|0);
 $j=$309;
 label=39;break;
 case 42: 
 label=43;break;
 case 43: 
 var $312=$u1;
 var $313=$u1;
 var $314=($312)*($313);
 var $315=$u2;
 var $316=$u2;
 var $317=($315)*($316);
 var $318=($314)+($317);
 $u=$318;
 var $319=$u;
 var $320=$319==0;
 if($320){label=44;break;}else{label=45;break;}
 case 44: 
 SAFE_HEAP_STORE(4592, 130, "i32", 0);
 label=93;break;
 case 45: 
 var $323=$3;
 var $324=($323|0)==0;
 if($324){label=48;break;}else{label=46;break;}
 case 46: 
 var $326=$k;
 var $327=($326|0)<=0;
 if($327){label=47;break;}else{label=48;break;}
 case 47: 
 label=57;break;
 case 48: 
 var $330=$u;
 var $331=Math_log($330);
 var $332=($331)*((0.5));
 $al1=$332;
 var $333=$3;
 var $334=($333|0)!=0;
 if($334){label=54;break;}else{label=49;break;}
 case 49: 
 var $336=$al1;
 $w1=$336;
 var $337=$u2;
 var $338=$u1;
 var $339=Math_atan2($337,$338);
 $w2=$339;
 var $340=$w2;
 var $341=$340<0;
 if($341){label=50;break;}else{label=51;break;}
 case 50: 
 var $343=SAFE_HEAP_LOAD(2712, "double", 0, 0);
 var $344=$w2;
 var $345=($344)+($343);
 $w2=$345;
 label=51;break;
 case 51: 
 var $347=$k;
 var $348=($347|0)<=0;
 if($348){label=52;break;}else{label=53;break;}
 case 52: 
 label=57;break;
 case 53: 
 label=54;break;
 case 54: 
 var $352=$zz1;
 var $353=$z2;
 var $354=($352)+($353);
 var $355=$delta;
 var $356=($354)-($355);
 $a=$356;
 var $357=$a;
 var $358=$357<=0;
 if($358){label=55;break;}else{label=56;break;}
 case 55: 
 SAFE_HEAP_STORE(4592, 130, "i32", 0);
 label=93;break;
 case 56: 
 var $361=$al1;
 var $362=$de0;
 var $363=($362)-($361);
 $de0=$363;
 var $364=$a;
 var $365=(1)/($364);
 var $366=($365)+(2);
 var $367=$de1;
 var $368=($367)+($366);
 $de1=$368;
 label=57;break;
 case 57: 
 var $370=$z1;
 var $371=$z1;
 var $372=($370)*($371);
 var $373=$z2;
 var $374=$z2;
 var $375=($373)*($374);
 var $376=($372)+($375);
 $a=$376;
 var $377=$a;
 var $378=Math_log($377);
 var $379=($378)*((0.5));
 $al1=$379;
 var $380=$z2;
 var $381=$z1;
 var $382=Math_atan2($380,$381);
 $al2=$382;
 var $383=$y1;
 var $384=$al1;
 var $385=($383)*($384);
 var $386=$z2;
 var $387=$al2;
 var $388=($386)*($387);
 var $389=($385)-($388);
 $v1=$389;
 var $390=$y1;
 var $391=$al2;
 var $392=($390)*($391);
 var $393=$z2;
 var $394=$al1;
 var $395=($393)*($394);
 var $396=($392)+($395);
 $v2=$396;
 $vv1=0;
 $vv2=0;
 var $397=$a;
 var $398=$397>1000000000000000000;
 if($398){label=63;break;}else{label=58;break;}
 case 58: 
 var $400=$z1;
 var $401=$a;
 var $402=($400)/($401);
 $uu1=$402;
 var $403=$z2;
 var $404=((-.0))-($403);
 var $405=$a;
 var $406=($404)/($405);
 $uu2=$406;
 var $407=$uu1;
 var $408=$uu1;
 var $409=($407)*($408);
 var $410=$uu2;
 var $411=$uu2;
 var $412=($410)*($411);
 var $413=($409)-($412);
 $uuu1=$413;
 var $414=$uu1;
 var $415=$uu2;
 var $416=($414)*($415);
 var $417=($416)*(2);
 $uuu2=$417;
 var $418=SAFE_HEAP_LOAD(2720, "double", 0, 0);
 $vv1=$418;
 $j=2;
 label=59;break;
 case 59: 
 var $420=$j;
 var $421=($420|0)<8;
 if($421){label=60;break;}else{label=62;break;}
 case 60: 
 var $423=$vv1;
 var $424=$uuu1;
 var $425=($423)*($424);
 var $426=$vv2;
 var $427=$uuu2;
 var $428=($426)*($427);
 var $429=($425)-($428);
 $b=$429;
 var $430=$vv1;
 var $431=$uuu2;
 var $432=($430)*($431);
 var $433=$vv2;
 var $434=$uuu1;
 var $435=($433)*($434);
 var $436=($432)+($435);
 $vv2=$436;
 var $437=$b;
 var $438=$j;
 var $439=((2720+($438<<3))|0);
 var $440=((($439)-(8))|0);
 var $441=SAFE_HEAP_LOAD($440, "double", 0, 0);
 var $442=($437)+($441);
 $vv1=$442;
 label=61;break;
 case 61: 
 var $444=$j;
 var $445=((($444)+(1))|0);
 $j=$445;
 label=59;break;
 case 62: 
 var $447=$vv1;
 var $448=$uu1;
 var $449=($447)*($448);
 var $450=$vv2;
 var $451=$uu2;
 var $452=($450)*($451);
 var $453=($449)-($452);
 $b=$453;
 var $454=$vv1;
 var $455=$uu2;
 var $456=($454)*($455);
 var $457=$vv2;
 var $458=$uu1;
 var $459=($457)*($458);
 var $460=($456)+($459);
 $vv2=$460;
 var $461=$b;
 $vv1=$461;
 label=63;break;
 case 63: 
 var $463=$vv1;
 var $464=SAFE_HEAP_LOAD(2664, "double", 0, 0);
 var $465=($463)+($464);
 var $466=$w1;
 var $467=($465)-($466);
 var $468=$z1;
 var $469=($467)-($468);
 var $470=$v1;
 var $471=($469)+($470);
 $w1=$471;
 var $472=$vv2;
 var $473=$w2;
 var $474=($472)-($473);
 var $475=$z2;
 var $476=($474)-($475);
 var $477=$v2;
 var $478=($476)+($477);
 $w2=$478;
 var $479=$v1;
 var $480=$479>0;
 if($480){label=64;break;}else{label=65;break;}
 case 64: 
 var $482=$v1;
 var $487=$482;label=66;break;
 case 65: 
 var $484=$v1;
 var $485=((-.0))-($484);
 var $487=$485;label=66;break;
 case 66: 
 var $487;
 var $488=$v2;
 var $489=$488>0;
 if($489){label=67;break;}else{label=68;break;}
 case 67: 
 var $491=$v2;
 var $496=$491;label=69;break;
 case 68: 
 var $493=$v2;
 var $494=((-.0))-($493);
 var $496=$494;label=69;break;
 case 69: 
 var $496;
 var $497=($487)+($496);
 var $498=$de0;
 var $499=($498)+($497);
 $de0=$499;
 var $500=$k;
 var $501=($500|0)<=0;
 if($501){label=70;break;}else{label=71;break;}
 case 70: 
 var $503=$al1;
 var $504=$de1;
 var $505=($504)+($503);
 $de1=$505;
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 var $508=$lf2;
 var $509=($508|0)!=0;
 if($509){label=78;break;}else{label=73;break;}
 case 73: 
 var $511=$3;
 var $512=($511|0)==0;
 if($512){label=74;break;}else{label=75;break;}
 case 74: 
 label=90;break;
 case 75: 
 var $515=$w1;
 var $516=Math_exp($515);
 $a=$516;
 var $517=$a;
 var $518=$w2;
 var $519=Math_cos($518);
 var $520=($517)*($519);
 $w1=$520;
 var $521=$a;
 var $522=$w2;
 var $523=Math_sin($522);
 var $524=($521)*($523);
 $w2=$524;
 var $525=$lf3;
 var $526=($525|0)==0;
 if($526){label=76;break;}else{label=77;break;}
 case 76: 
 label=90;break;
 case 77: 
 var $529=$w1;
 var $530=$u1;
 var $531=($529)*($530);
 var $532=$w2;
 var $533=$u2;
 var $534=($532)*($533);
 var $535=($531)+($534);
 var $536=$u;
 var $537=($535)/($536);
 $b=$537;
 var $538=$w2;
 var $539=$u1;
 var $540=($538)*($539);
 var $541=$w1;
 var $542=$u2;
 var $543=($541)*($542);
 var $544=($540)-($543);
 var $545=$u;
 var $546=($544)/($545);
 $w2=$546;
 var $547=$b;
 $w1=$547;
 label=90;break;
 case 78: 
 var $549=$h1;
 var $550=$h1;
 var $551=($549)*($550);
 var $552=$h2;
 var $553=$h2;
 var $554=($552)*($553);
 var $555=($551)+($554);
 $h=$555;
 var $556=$h;
 var $557=$556==0;
 if($557){label=79;break;}else{label=80;break;}
 case 79: 
 SAFE_HEAP_STORE(4592, 130, "i32", 0);
 label=93;break;
 case 80: 
 var $560=$3;
 var $561=($560|0)==0;
 if($561){label=82;break;}else{label=81;break;}
 case 81: 
 var $563=$h;
 var $564=$563>(0.01);
 if($564){label=87;break;}else{label=82;break;}
 case 82: 
 var $566=$h;
 var $567=Math_log($566);
 var $568=($567)*((0.5));
 $a=$568;
 var $569=$h;
 var $570=$569<=(0.01);
 if($570){label=83;break;}else{label=84;break;}
 case 83: 
 var $572=$a;
 var $573=$de0;
 var $574=($573)-($572);
 $de0=$574;
 label=84;break;
 case 84: 
 var $576=$3;
 var $577=($576|0)!=0;
 if($577){label=86;break;}else{label=85;break;}
 case 85: 
 var $579=$t1;
 var $580=$a;
 var $581=($579)-($580);
 var $582=$w1;
 var $583=($581)-($582);
 $w1=$583;
 var $584=$t2;
 var $585=$h2;
 var $586=$h1;
 var $587=Math_atan2($585,$586);
 var $588=($584)-($587);
 var $589=$w2;
 var $590=($588)-($589);
 $w2=$590;
 label=90;break;
 case 86: 
 label=87;break;
 case 87: 
 var $593=$w1;
 var $594=$t1;
 var $595=($594)-($593);
 $t1=$595;
 var $596=$w2;
 var $597=$t2;
 var $598=($597)-($596);
 $t2=$598;
 var $599=$t1;
 var $600=Math_exp($599);
 $a=$600;
 var $601=$a;
 var $602=$t2;
 var $603=Math_cos($602);
 var $604=($601)*($603);
 $t1=$604;
 var $605=$a;
 var $606=$t2;
 var $607=Math_sin($606);
 var $608=($605)*($607);
 $t2=$608;
 var $609=$t1;
 var $610=$h1;
 var $611=($609)*($610);
 var $612=$t1;
 var $613=$h2;
 var $614=($612)*($613);
 var $615=($611)-($614);
 var $616=$h;
 var $617=($615)/($616);
 $w1=$617;
 var $618=$t2;
 var $619=$h1;
 var $620=($618)*($619);
 var $621=$t1;
 var $622=$h2;
 var $623=($621)*($622);
 var $624=($620)-($623);
 var $625=$h;
 var $626=($624)/($625);
 $w2=$626;
 var $627=$lf3;
 var $628=($627|0)==0;
 if($628){label=88;break;}else{label=89;break;}
 case 88: 
 label=90;break;
 case 89: 
 var $631=$w1;
 var $632=$u1;
 var $633=($631)*($632);
 var $634=$w2;
 var $635=$u2;
 var $636=($634)*($635);
 var $637=($633)-($636);
 $b=$637;
 var $638=$w1;
 var $639=$u2;
 var $640=($638)*($639);
 var $641=$w2;
 var $642=$u1;
 var $643=($641)*($642);
 var $644=($640)+($643);
 $w2=$644;
 var $645=$b;
 $w1=$645;
 label=90;break;
 case 90: 
 var $647=$lf1;
 var $648=($647|0)!=0;
 if($648){label=91;break;}else{label=92;break;}
 case 91: 
 var $650=$w2;
 var $651=((-.0))-($650);
 $w2=$651;
 label=92;break;
 case 92: 
 var $653=$de0;
 var $654=SAFE_HEAP_LOAD(2704, "double", 0, 0);
 var $655=($653)*($654);
 var $656=($655)+((3e-17));
 var $657=$de1;
 var $658=$delta;
 var $659=($657)*($658);
 var $660=($656)+($659);
 $de1=$660;
 var $661=$w1;
 var $662=$2;
 SAFE_HEAP_STORE($662, $661, "double", 0);
 var $663=$w2;
 var $664=$2;
 var $665=(($664+8)|0);
 SAFE_HEAP_STORE($665, $663, "double", 0);
 label=93;break;
 case 93: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _ge($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=($4)-($5);
 $diff=$6;
 var $7=$6>=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=6;break;
 case 3: 
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$diff;
 var $12=((-.0))-($11);
 var $13=$10>=$12;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $17=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function _genint($big,$iv){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $ip;
 var $out;
 $2=$big;
 SAFE_HEAP_STORE($3, $iv, "i32", 0);
 var $4=$2;
 var $5=(($4+8)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$2;
 var $8=(($7+12)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=_getcb(0,$6,5,$9,0);
 $out=$10;
 var $11=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 var $15=$out;
 var $16=(($15+12)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=($17|0)>1;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$out;
 var $21=(($20+16)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 var $23=$22;
 var $24=$2;
 var $25=(($24+16)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32*", 0, 0);
 var $27=$26;
 var $28=$out;
 var $29=(($28+12)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=_intcopy($23,$27,$30,1);
 var $32=$31;
 $ip=$32;
 label=5;break;
 case 5: 
 var $34=$out;
 var $35=(($34+8)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $37=($36|0)!=0;
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 var $39=$out;
 var $40=(($39)|0);
 var $41=$40;
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 var $43=$42;
 var $44=$3;
 var $45=$out;
 var $46=(($45+8)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=_intcopy($43,$44,$47,0);
 var $49=$48;
 $ip=$49;
 label=7;break;
 case 7: 
 var $51=$out;
 $1=$51;
 label=8;break;
 case 8: 
 var $53=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $53;
  default: assert(0, "bad label: " + label);
 }

}


function _gep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)-($7);
 $diff=$8;
 var $9=$8>=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$3;
 SAFE_HEAP_STORE($11, 1, "i32", 0);
 label=3;break;
 case 3: 
 var $13=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $14=$diff;
 var $15=((-.0))-($14);
 var $16=$13>=$15;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$3;
 SAFE_HEAP_STORE($18, 1, "i32", 0);
 label=6;break;
 case 5: 
 var $20=$3;
 SAFE_HEAP_STORE($20, 0, "i32", 0);
 label=6;break;
 case 6: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _getcb($dataptr,$datacnt,$datatyp,$rank,$dimptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 var $ilong;
 var $jlong;
 var $bump;
 var $datasize;
 var $i;
 var $ip;
 var $protocnt;
 var $typ;
 var $unitsize;
 var $cp;
 var $vp;
 $2=$dataptr;
 $3=$datacnt;
 $4=$datatyp;
 $5=$rank;
 $6=$dimptr;
 $bump=0;
 $protocnt=0;
 var $7=$3;
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 SAFE_HEAP_STORE(4592, 92, "i32", 0);
 $1=0;
 label=50;break;
 case 3: 
 var $11=$4;
 var $12=$11&110;
 $typ=$12;
 switch(($12|0)){case 64:{ label=4;break;}case 2:{ label=5;break;}case 4:{ label=6;break;}case 8:{ label=7;break;}case 32:{ label=8;break;}default:{label=11;break;}}break;
 case 4: 
 $unitsize=8;
 var $14=$unitsize;
 var $15=($14<<1);
 $datasize=$15;
 label=12;break;
 case 5: 
 $datasize=8;
 $unitsize=8;
 label=12;break;
 case 6: 
 $datasize=4;
 $unitsize=4;
 label=12;break;
 case 7: 
 $datasize=1;
 $unitsize=1;
 $bump=1;
 label=12;break;
 case 8: 
 $datasize=4;
 $unitsize=4;
 var $20=$3;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=10;break;}
 case 9: 
 $protocnt=1;
 label=10;break;
 case 10: 
 label=12;break;
 case 11: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 $1=0;
 label=50;break;
 case 12: 
 var $26=$5;
 var $27=($26<<2);
 var $28=((($27)+(24))|0);
 $jlong=$28;
 var $29=$jlong;
 var $30=$unitsize;
 var $31=(((($29|0))%(($30|0)))&-1);
 var $32=($31|0)!=0;
 if($32){label=13;break;}else{label=14;break;}
 case 13: 
 var $34=$jlong;
 var $35=$datasize;
 var $36=(((($34|0))/(($35|0)))&-1);
 var $37=((($36)+(1))|0);
 var $38=$datasize;
 var $39=(Math_imul($37,$38)|0);
 $jlong=$39;
 label=14;break;
 case 14: 
 var $41=$datasize;
 var $42=$3;
 var $43=$protocnt;
 var $44=((($42)+($43))|0);
 var $45=(Math_imul($41,$44)|0);
 var $46=$jlong;
 var $47=((($45)+($46))|0);
 var $48=$bump;
 var $49=((($47)+($48))|0);
 $ilong=$49;
 var $50=$ilong;
 var $51=($50|0)>2147483647;
 if($51){label=15;break;}else{label=16;break;}
 case 15: 
 SAFE_HEAP_STORE(4592, 92, "i32", 0);
 $1=0;
 label=50;break;
 case 16: 
 var $54=$ilong;
 var $55=_aplmall($54);
 var $56=$55;
 $out=$56;
 var $57=0==($56|0);
 if($57){label=17;break;}else{label=18;break;}
 case 17: 
 $1=0;
 label=50;break;
 case 18: 
 var $60=$jlong;
 var $61=$out;
 var $62=$61;
 var $63=(($62+$60)|0);
 $cp=$63;
 var $64=$datasize;
 var $65=$out;
 var $66=(($65+20)|0);
 SAFE_HEAP_STORE($66, $64, "i32", 0);
 var $67=$3;
 var $68=$out;
 var $69=(($68+8)|0);
 SAFE_HEAP_STORE($69, $67, "i32", 0);
 var $70=$4;
 var $71=$out;
 var $72=(($71+4)|0);
 SAFE_HEAP_STORE($72, $70, "i32", 0);
 var $73=$5;
 var $74=$out;
 var $75=(($74+12)|0);
 SAFE_HEAP_STORE($75, $73, "i32", 0);
 var $76=$3;
 var $77=$protocnt;
 var $78=((($76)+($77))|0);
 var $79=($78|0)!=0;
 if($79){label=19;break;}else{label=20;break;}
 case 19: 
 var $81=$cp;
 var $84=$81;label=21;break;
 case 20: 
 var $84=0;label=21;break;
 case 21: 
 var $84;
 var $85=$out;
 var $86=(($85)|0);
 var $87=$86;
 SAFE_HEAP_STORE($87, $84, "i8*", 0);
 var $88=$5;
 var $89=($88|0)!=0;
 if($89){label=22;break;}else{label=23;break;}
 case 22: 
 var $91=$out;
 var $92=(($91+24)|0);
 var $93=$92;
 var $96=$93;label=24;break;
 case 23: 
 var $96=0;label=24;break;
 case 24: 
 var $96;
 var $97=$out;
 var $98=(($97+16)|0);
 SAFE_HEAP_STORE($98, $96, "i32*", 0);
 var $99=$bump;
 var $100=($99|0)!=0;
 if($100){label=25;break;}else{label=26;break;}
 case 25: 
 var $102=$cp;
 var $103=$3;
 var $104=(($102+$103)|0);
 SAFE_HEAP_STORE($104, 0, "i8", 0);
 label=26;break;
 case 26: 
 var $106=$2;
 var $107=($106|0)!=0;
 if($107){label=27;break;}else{label=29;break;}
 case 27: 
 var $109=$3;
 var $110=$protocnt;
 var $111=((($109)+($110))|0);
 var $112=($111|0)!=0;
 if($112){label=28;break;}else{label=29;break;}
 case 28: 
 var $114=$out;
 var $115=(($114)|0);
 var $116=$115;
 var $117=SAFE_HEAP_LOAD($116, "i8*", 0, 0);
 var $118=$2;
 var $119=$datasize;
 var $120=$3;
 var $121=(Math_imul($119,$120)|0);
 var $122=_chrcopy($117,$118,$121,1);
 $cp=$122;
 var $123=$2;
 _aplfree($123);
 label=40;break;
 case 29: 
 var $125=$protocnt;
 var $126=($125|0)!=0;
 if($126){label=30;break;}else{label=31;break;}
 case 30: 
 var $128=$out;
 var $129=(($128)|0);
 var $130=$129;
 var $131=SAFE_HEAP_LOAD($130, "i8*", 0, 0);
 var $132=$131;
 SAFE_HEAP_STORE($132, 0, "i8*", 0);
 label=39;break;
 case 31: 
 var $134=$typ;
 var $135=($134|0)==32;
 if($135){label=32;break;}else{label=38;break;}
 case 32: 
 var $137=$3;
 var $138=($137|0)!=0;
 if($138){label=33;break;}else{label=38;break;}
 case 33: 
 var $140=$3;
 $i=$140;
 var $141=$cp;
 var $142=$141;
 $vp=$142;
 label=34;break;
 case 34: 
 var $144=$i;
 var $145=($144|0)!=0;
 if($145){label=35;break;}else{label=37;break;}
 case 35: 
 var $147=$vp;
 var $148=(($147+4)|0);
 $vp=$148;
 SAFE_HEAP_STORE($147, 0, "i8*", 0);
 label=36;break;
 case 36: 
 var $150=$i;
 var $151=((($150)-(1))|0);
 $i=$151;
 label=34;break;
 case 37: 
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $156=$5;
 var $157=($156|0)!=0;
 if($157){label=41;break;}else{label=47;break;}
 case 41: 
 var $159=$6;
 var $160=($159|0)!=0;
 if($160){label=42;break;}else{label=43;break;}
 case 42: 
 var $162=$out;
 var $163=(($162+16)|0);
 var $164=SAFE_HEAP_LOAD($163, "i32*", 0, 0);
 var $165=$164;
 var $166=$6;
 var $167=$166;
 var $168=$5;
 var $169=_intcopy($165,$167,$168,1);
 var $170=$169;
 $ip=$170;
 var $171=$6;
 var $172=$171;
 _aplfree($172);
 label=46;break;
 case 43: 
 var $174=$5;
 var $175=($174|0)==1;
 if($175){label=44;break;}else{label=45;break;}
 case 44: 
 var $177=$3;
 var $178=$out;
 var $179=(($178+16)|0);
 var $180=SAFE_HEAP_LOAD($179, "i32*", 0, 0);
 SAFE_HEAP_STORE($180, $177, "i32", 0);
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 var $184=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $185=($184|0)!=0;
 if($185){label=48;break;}else{label=49;break;}
 case 48: 
 var $187=$out;
 var $188=_endoper($187);
 $out=0;
 label=49;break;
 case 49: 
 var $190=$out;
 $1=$190;
 label=50;break;
 case 50: 
 var $192=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $192;
  default: assert(0, "bad label: " + label);
 }

}


function _getcbi($dataptr,$datacnt,$datatyp,$rank,$dimptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $out;
 var $ip;
 $1=$dataptr;
 $2=$datacnt;
 $3=$datatyp;
 $4=$rank;
 $5=$dimptr;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 var $10=_getcb($6,$7,$8,$9,0);
 $out=$10;
 var $11=$out;
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=4;break;}
 case 2: 
 var $14=$4;
 var $15=($14|0)>1;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=$out;
 var $18=(($17+16)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32*", 0, 0);
 var $20=$19;
 var $21=$5;
 var $22=$21;
 var $23=$4;
 var $24=_intcopy($20,$22,$23,1);
 var $25=$24;
 $ip=$25;
 label=4;break;
 case 4: 
 var $27=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function _getch(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=SAFE_HEAP_LOAD(3280, "i32", 0, 0);
 var $2=($1|0)>0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=SAFE_HEAP_LOAD(3280, "i32", 0, 0);
 var $5=((($4)-(1))|0);
 SAFE_HEAP_STORE(3280, $5, "i32", 0);
 var $6=((3288+$5)|0);
 var $7=SAFE_HEAP_LOAD($6, "i8", 0, 0);
 var $8=(($7<<24)>>24);
 var $12=$8;label=4;break;
 case 3: 
 var $10=_getchar();
 var $12=$10;label=4;break;
 case 4: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _getchrv($prompt){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $line=sp;
 var $cp;
 var $linelen;
 var $out;
 $1=$prompt;
 var $2=(($line)|0);
 SAFE_HEAP_STORE($2, 0, "i8", 0);
 _aplnewl();
 var $3=$1;
 var $4=_printf(9416,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $3, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 $linelen=0;
 label=2;break;
 case 2: 
 var $6=$linelen;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=(($line)|0);
 SAFE_HEAP_STORE($9, 0, "i8", 0);
 var $10=(($line)|0);
 var $11=_apltext($10,1024);
 $linelen=$11;
 label=2;break;
 case 4: 
 _aplnewl();
 var $13=$linelen;
 var $14=($13|0)==-1;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 $linelen=0;
 label=6;break;
 case 6: 
 var $17=$linelen;
 var $18=_getcb(0,$17,9,1,0);
 $out=$18;
 var $19=$out;
 var $20=($19|0)!=0;
 if($20){label=7;break;}else{label=10;break;}
 case 7: 
 var $22=$out;
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 var $27=$out;
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 var $31=(($line)|0);
 var $32=$out;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=_chrcopy($30,$31,$34,1);
 $cp=$35;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $38=$out;
 var $39=_errstop(0,0,0,$38);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function _getcode($pfunc,$funtok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $code;
 $1=$pfunc;
 $2=$funtok;
 $code=0;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 $code=$5;
 var $6=$2;
 var $7=(($6+20)|0);
 var $8=SAFE_HEAP_LOAD($7, "i8*", 0, 0);
 var $9=$1;
 SAFE_HEAP_STORE($9, $8, "i8*", 0);
 var $10=0!=($8|0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $code=256;
 label=10;break;
 case 3: 
 var $13=$code;
 switch(($13|0)){case 3:case -10:case -7:{ label=4;break;}case 42:case 65:case 14:{ label=5;break;}default:{label=6;break;}}break;
 case 4: 
 var $15=$2;
 var $16=(($15+12)|0);
 var $17=$16;
 var $18=SAFE_HEAP_LOAD($17, "i8*", 0, 0);
 var $19=$1;
 SAFE_HEAP_STORE($19, $18, "i8*", 0);
 var $20=$2;
 var $21=(($20+12)|0);
 var $22=$21;
 SAFE_HEAP_STORE($22, 0, "i8*", 0);
 label=9;break;
 case 5: 
 label=9;break;
 case 6: 
 var $25=$code;
 var $26=($25|0)>-11;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 63, "i32", 0);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $31=$code;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }

}


function _getfact($rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $itimesid=sp;
 var $out;
 $1=$rite;
 SAFE_HEAP_STORE($itimesid, 1, "i32", 0);
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=_iscalar(-1);
 var $8=_iscalar(1);
 var $9=$1;
 var $10=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $11=_reverse($9,$10);
 var $12=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $13=_iscan((72),$itimesid,$11,$12);
 var $14=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $15=_cat($8,$13,$14);
 var $16=_drop($7,$15);
 var $17=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $18=_reverse($16,$17);
 var $19=_perm($18);
 $out=$19;
 label=4;break;
 case 3: 
 var $21=_iscalar(1);
 var $22=_perm($21);
 $out=$22;
 var $23=$1;
 _endoper($23);
 label=4;break;
 case 4: 
 var $25=$out;
 var $26=_errstop(0,0,0,$25);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _gettcom($line,$linelen,$maxline,$cursor,$insert){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6;
 var $cc;
 var $ii=(sp)+(8);
 var $jj;
 var $lim;
 $2=$line;
 $3=$linelen;
 $4=$maxline;
 SAFE_HEAP_STORE($5, $cursor, "i32", 0);
 $6=$insert;
 var $7=$4;
 var $8=$3;
 var $9=((($7)-($8))|0);
 $lim=$9;
 label=2;break;
 case 2: 
 var $11=$lim;
 var $12=((($11)-(1))|0);
 $lim=$12;
 var $13=($12|0)>0;
 if($13){label=3;break;}else{var $18=0;label=4;break;}
 case 3: 
 var $15=_aplgetc();
 $cc=$15;
 var $16=($15|0)!=-1;
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 if($18){label=5;break;}else{label=46;break;}
 case 5: 
 var $20=$cc;
 var $21=($20|0)==10;
 if($21){label=7;break;}else{label=6;break;}
 case 6: 
 var $23=$cc;
 var $24=($23|0)==13;
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 var $26=$3;
 SAFE_HEAP_STORE($5, $26, "i32", 0);
 label=46;break;
 case 8: 
 var $28=$cc;
 if(($28|0)==0){ label=12;break;}else if(($28|0)==8){ label=9;break;}else{label=31;break;}
 case 9: 
 var $30=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $31=($30|0)!=0;
 if($31){label=10;break;}else{label=11;break;}
 case 10: 
 var $33=$2;
 var $34=$3;
 var $35=((($34)-(1))|0);
 $3=$35;
 _edling($33,$5,1,$35);
 var $36=$lim;
 var $37=((($36)+(1))|0);
 $lim=$37;
 label=11;break;
 case 11: 
 label=45;break;
 case 12: 
 var $40=_aplgetc();
 switch(($40|0)){case 71:{ label=13;break;}case 75:{ label=17;break;}case 77:{ label=20;break;}case 79:{ label=23;break;}case 83:{ label=27;break;}default:{label=30;break;}}break;
 case 13: 
 label=14;break;
 case 14: 
 var $43=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $44=($43|0)!=0;
 if($44){label=15;break;}else{label=16;break;}
 case 15: 
 var $46=$2;
 _edlinf($46,$5,1);
 label=14;break;
 case 16: 
 label=30;break;
 case 17: 
 var $49=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $50=($49|0)!=0;
 if($50){label=18;break;}else{label=19;break;}
 case 18: 
 var $52=$2;
 _edlinf($52,$5,1);
 label=19;break;
 case 19: 
 label=30;break;
 case 20: 
 var $55=$3;
 var $56=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $57=($55|0)>($56|0);
 if($57){label=21;break;}else{label=22;break;}
 case 21: 
 var $59=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $60=((($59)+(1))|0);
 SAFE_HEAP_STORE($5, $60, "i32", 0);
 var $61=$2;
 var $62=(($61+$59)|0);
 var $63=SAFE_HEAP_LOAD($62, "i8", 0, 0);
 _aplputch($63);
 label=22;break;
 case 22: 
 label=30;break;
 case 23: 
 label=24;break;
 case 24: 
 var $67=$3;
 var $68=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $69=($67|0)>($68|0);
 if($69){label=25;break;}else{label=26;break;}
 case 25: 
 var $71=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $72=((($71)+(1))|0);
 SAFE_HEAP_STORE($5, $72, "i32", 0);
 var $73=$2;
 var $74=(($73+$71)|0);
 var $75=SAFE_HEAP_LOAD($74, "i8", 0, 0);
 _aplputch($75);
 label=24;break;
 case 26: 
 label=30;break;
 case 27: 
 var $78=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $79=$3;
 var $80=($78|0)<($79|0);
 if($80){label=28;break;}else{label=29;break;}
 case 28: 
 var $82=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $83=((($82)+(1))|0);
 SAFE_HEAP_STORE($5, $83, "i32", 0);
 var $84=$2;
 var $85=$3;
 var $86=((($85)-(1))|0);
 $3=$86;
 _edling($84,$5,1,$86);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=45;break;
 case 31: 
 var $90=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $91=$4;
 var $92=($90|0)>=($91|0);
 if($92){label=32;break;}else{label=33;break;}
 case 32: 
 label=45;break;
 case 33: 
 var $95=$6;
 var $96=($95|0)!=0;
 if($96){label=34;break;}else{label=39;break;}
 case 34: 
 var $98=$3;
 var $99=((($98)+(1))|0);
 $3=$99;
 $jj=$98;
 label=35;break;
 case 35: 
 var $101=$jj;
 var $102=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $103=($101|0)>=($102|0);
 if($103){label=36;break;}else{label=38;break;}
 case 36: 
 var $105=$jj;
 var $106=$2;
 var $107=(($106+$105)|0);
 var $108=SAFE_HEAP_LOAD($107, "i8", 0, 0);
 var $109=$jj;
 var $110=((($109)+(1))|0);
 var $111=$2;
 var $112=(($111+$110)|0);
 SAFE_HEAP_STORE($112, $108, "i8", 0);
 label=37;break;
 case 37: 
 var $114=$jj;
 var $115=((($114)-(1))|0);
 $jj=$115;
 label=35;break;
 case 38: 
 label=39;break;
 case 39: 
 var $118=$cc;
 var $119=(($118)&255);
 var $120=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $121=((($120)+(1))|0);
 SAFE_HEAP_STORE($5, $121, "i32", 0);
 var $122=$2;
 var $123=(($122+$120)|0);
 SAFE_HEAP_STORE($123, $119, "i8", 0);
 _aplputch($119);
 var $124=$6;
 var $125=($124|0)!=0;
 if($125){label=40;break;}else{label=41;break;}
 case 40: 
 var $127=$2;
 var $128=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $129=(($127+$128)|0);
 _aplprint($129);
 var $130=$3;
 SAFE_HEAP_STORE($ii, $130, "i32", 0);
 var $131=$2;
 var $132=$3;
 var $133=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $134=((($132)-($133))|0);
 _edlinf($131,$ii,$134);
 label=44;break;
 case 41: 
 var $136=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $137=$3;
 var $138=($136|0)>($137|0);
 if($138){label=42;break;}else{label=43;break;}
 case 42: 
 var $140=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 $3=$140;
 var $141=$2;
 var $142=(($141+$140)|0);
 SAFE_HEAP_STORE($142, 0, "i8", 0);
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 label=2;break;
 case 46: 
 _aplnewl();
 var $147=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $148=$2;
 var $149=(($148+$147)|0);
 SAFE_HEAP_STORE($149, 0, "i8", 0);
 var $150=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $151=($150|0)==0;
 if($151){label=47;break;}else{label=49;break;}
 case 47: 
 var $153=$cc;
 var $154=($153|0)==-1;
 if($154){label=48;break;}else{label=49;break;}
 case 48: 
 $1=-1;
 label=50;break;
 case 49: 
 var $157=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 $1=$157;
 label=50;break;
 case 50: 
 var $159=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $159;
  default: assert(0, "bad label: " + label);
 }

}


function _grade2a($out1,$out2,$up,$rows,$cols,$div){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $dimcb;
 var $out3;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $m;
 var $n;
 var $op;
 var $sp;
 $1=$out1;
 $2=$out2;
 $3=$up;
 $4=$rows;
 $5=$cols;
 $6=$div;
 $dimcb=0;
 var $7=$5;
 var $8=((($7)-(2))|0);
 $m=$8;
 $i=0;
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=$m;
 var $12=($10|0)<($11|0);
 if($12){label=3;break;}else{label=24;break;}
 case 3: 
 var $14=$1;
 $out3=$14;
 var $15=$2;
 $1=$15;
 var $16=$out3;
 $2=$16;
 var $17=$1;
 var $18=(($17)|0);
 var $19=$18;
 var $20=SAFE_HEAP_LOAD($19, "i32*", 0, 0);
 var $21=$i;
 var $22=(($20+($21<<2))|0);
 $ip=$22;
 $j=0;
 label=4;break;
 case 4: 
 var $24=$j;
 var $25=$4;
 var $26=($24|0)<($25|0);
 if($26){label=5;break;}else{label=10;break;}
 case 5: 
 var $28=$3;
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$j;
 var $37=$31;label=8;break;
 case 7: 
 var $33=$4;
 var $34=$j;
 var $35=((($33)-($34))|0);
 var $37=$35;label=8;break;
 case 8: 
 var $37;
 var $38=$ip;
 var $39=$m;
 var $40=(($38+($39<<2))|0);
 var $41=$i;
 var $42=(((-$41))|0);
 var $43=(($40+($42<<2))|0);
 SAFE_HEAP_STORE($43, $37, "i32", 0);
 var $44=$5;
 var $45=$ip;
 var $46=(($45+($44<<2))|0);
 $ip=$46;
 label=9;break;
 case 9: 
 var $48=$j;
 var $49=((($48)+(1))|0);
 $j=$49;
 label=4;break;
 case 10: 
 var $51=$dimcb;
 _endoper($51);
 var $52=$1;
 var $53=$3;
 var $54=_grade($52,$53);
 $dimcb=$54;
 var $55=$dimcb;
 var $56=($55|0)==0;
 if($56){label=11;break;}else{label=12;break;}
 case 11: 
 label=24;break;
 case 12: 
 var $59=$dimcb;
 var $60=(($59)|0);
 var $61=$60;
 var $62=SAFE_HEAP_LOAD($61, "i32*", 0, 0);
 $sp=$62;
 var $63=$2;
 var $64=(($63)|0);
 var $65=$64;
 var $66=SAFE_HEAP_LOAD($65, "i32*", 0, 0);
 $op=$66;
 $j=0;
 label=13;break;
 case 13: 
 var $68=$j;
 var $69=$4;
 var $70=($68|0)<($69|0);
 if($70){label=14;break;}else{label=22;break;}
 case 14: 
 var $72=$1;
 var $73=(($72)|0);
 var $74=$73;
 var $75=SAFE_HEAP_LOAD($74, "i32*", 0, 0);
 var $76=$sp;
 var $77=(($76+4)|0);
 $sp=$77;
 var $78=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $79=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $80=((($78)-($79))|0);
 var $81=$5;
 var $82=(Math_imul($80,$81)|0);
 var $83=(($75+($82<<2))|0);
 $ip=$83;
 $k=0;
 label=15;break;
 case 15: 
 var $85=$k;
 var $86=$5;
 var $87=($85|0)<($86|0);
 if($87){label=16;break;}else{label=20;break;}
 case 16: 
 var $89=$k;
 var $90=$i;
 var $91=($89|0)==($90|0);
 if($91){label=17;break;}else{label=18;break;}
 case 17: 
 var $93=$ip;
 var $94=SAFE_HEAP_LOAD($93, "i32", 0, 0);
 var $95=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $96=((($94)-($95))|0);
 var $97=$6;
 var $98=(((($96|0))/(($97|0)))&-1);
 var $99=$ip;
 SAFE_HEAP_STORE($99, $98, "i32", 0);
 label=18;break;
 case 18: 
 var $101=$ip;
 var $102=(($101+4)|0);
 $ip=$102;
 var $103=SAFE_HEAP_LOAD($101, "i32", 0, 0);
 var $104=$op;
 var $105=(($104+4)|0);
 $op=$105;
 SAFE_HEAP_STORE($104, $103, "i32", 0);
 label=19;break;
 case 19: 
 var $107=$k;
 var $108=((($107)+(1))|0);
 $k=$108;
 label=15;break;
 case 20: 
 label=21;break;
 case 21: 
 var $111=$j;
 var $112=((($111)+(1))|0);
 $j=$112;
 label=13;break;
 case 22: 
 label=23;break;
 case 23: 
 var $115=$i;
 var $116=((($115)+(1))|0);
 $i=$116;
 label=2;break;
 case 24: 
 var $118=$dimcb;
 var $119=($118|0)!=0;
 if($119){label=25;break;}else{label=29;break;}
 case 25: 
 var $121=$dimcb;
 var $122=(($121)|0);
 var $123=$122;
 var $124=SAFE_HEAP_LOAD($123, "i32*", 0, 0);
 $op=$124;
 var $125=$2;
 var $126=(($125)|0);
 var $127=$126;
 var $128=SAFE_HEAP_LOAD($127, "i32*", 0, 0);
 var $129=$5;
 var $130=(($128+($129<<2))|0);
 var $131=((($130)-(4))|0);
 $ip=$131;
 label=26;break;
 case 26: 
 var $133=$4;
 var $134=((($133)-(1))|0);
 $4=$134;
 var $135=($133|0)!=0;
 if($135){label=27;break;}else{label=28;break;}
 case 27: 
 var $137=$ip;
 var $138=SAFE_HEAP_LOAD($137, "i32", 0, 0);
 var $139=$op;
 var $140=(($139+4)|0);
 $op=$140;
 SAFE_HEAP_STORE($139, $138, "i32", 0);
 var $141=$5;
 var $142=$ip;
 var $143=(($142+($141<<2))|0);
 $ip=$143;
 label=26;break;
 case 28: 
 label=29;break;
 case 29: 
 var $146=$dimcb;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $146;
  default: assert(0, "bad label: " + label);
 }

}


function _grade2($left,$rite,$up){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $dimcb=sp;
 var $out1;
 var $out2;
 var $out3;
 var $axis;
 var $cols;
 var $div;
 var $i;
 var $j;
 var $rows;
 $1=$left;
 $2=$rite;
 $3=$up;
 $out1=0;
 $out2=0;
 $out3=0;
 var $4=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $5=((($4)+(1))|0);
 $axis=$5;
 var $6=$2;
 $out1=$6;
 label=2;break;
 case 2: 
 var $8=$1;
 var $9=_formati($8,$dimcb);
 var $10=_temp($9);
 var $11=_transpos(0,$10);
 $out3=$11;
 var $12=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $13=($12|0)==0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 label=23;break;
 case 4: 
 var $16=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $17=(($16+8)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=($18|0)<2;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $28=1;label=7;break;
 case 6: 
 var $22=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $23=(($22)|0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $28=$26;label=7;break;
 case 7: 
 var $28;
 $div=$28;
 var $29=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $30=_temp($29);
 _endoper($30);
 var $31=$2;
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=($33|0)>0;
 if($34){label=8;break;}else{label=13;break;}
 case 8: 
 $cols=1;
 $i=1;
 var $36=$2;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 $j=$38;
 label=9;break;
 case 9: 
 var $40=$i;
 var $41=$j;
 var $42=($40|0)<($41|0);
 if($42){label=10;break;}else{label=12;break;}
 case 10: 
 var $44=$2;
 var $45=(($44+16)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32*", 0, 0);
 var $47=$i;
 var $48=(($46+($47<<2))|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 var $50=$cols;
 var $51=(Math_imul($50,$49)|0);
 $cols=$51;
 label=11;break;
 case 11: 
 var $53=$i;
 var $54=((($53)+(1))|0);
 $i=$54;
 label=9;break;
 case 12: 
 var $56=$2;
 var $57=(($56+16)|0);
 var $58=SAFE_HEAP_LOAD($57, "i32*", 0, 0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 $rows=$59;
 label=14;break;
 case 13: 
 $cols=1;
 $rows=1;
 label=14;break;
 case 14: 
 var $62=_getcb(0,2,5,1,0);
 SAFE_HEAP_STORE($dimcb, $62, "%struct.aplcb*", 0);
 var $63=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $64=($63|0)==0;
 if($64){label=15;break;}else{label=16;break;}
 case 15: 
 label=23;break;
 case 16: 
 var $67=$rows;
 var $68=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "i32*", 0, 0);
 SAFE_HEAP_STORE($71, $67, "i32", 0);
 var $72=$cols;
 var $73=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $74=(($73)|0);
 var $75=$74;
 var $76=SAFE_HEAP_LOAD($75, "i32*", 0, 0);
 var $77=(($76+4)|0);
 SAFE_HEAP_STORE($77, $72, "i32", 0);
 var $78=$rows;
 var $79=_indxsub($78);
 var $80=_perm($79);
 $out2=$80;
 var $81=$out2;
 var $82=($81|0)==0;
 if($82){label=17;break;}else{label=18;break;}
 case 17: 
 label=23;break;
 case 18: 
 var $85=$out3;
 var $86=SAFE_HEAP_LOAD($dimcb, "%struct.aplcb*", 0, 0);
 var $87=$2;
 var $88=_reshape($86,$87);
 var $89=_indexof($85,$88);
 var $90=$out2;
 var $91=$axis;
 var $92=_cat($89,$90,$91);
 var $93=$out2;
 var $94=$axis;
 var $95=_cat($92,$93,$94);
 var $96=_perm($95);
 $out1=$96;
 var $97=$out2;
 var $98=_temp($97);
 _endoper($98);
 SAFE_HEAP_STORE($dimcb, 0, "%struct.aplcb*", 0);
 var $99=$out1;
 var $100=($99|0)==0;
 if($100){label=19;break;}else{label=20;break;}
 case 19: 
 label=23;break;
 case 20: 
 var $103=$out1;
 var $104=_aplcopy($103);
 $out2=$104;
 var $105=$out2;
 var $106=($105|0)==0;
 if($106){label=21;break;}else{label=22;break;}
 case 21: 
 label=23;break;
 case 22: 
 var $109=$out1;
 var $110=$out2;
 var $111=$3;
 var $112=$rows;
 var $113=$cols;
 var $114=((($113)+(2))|0);
 var $115=$div;
 var $116=_grade2a($109,$110,$111,$112,$114,$115);
 $out3=$116;
 label=23;break;
 case 23: 
 var $118=$out1;
 var $119=_temp($118);
 var $120=$out2;
 var $121=_temp($120);
 var $122=$out3;
 var $123=_errstop(0,$119,$121,$122);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $123;
  default: assert(0, "bad label: " + label);
 }

}


function _grade($rite,$up){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $out;
 var $a;
 var $b;
 var $datatyp;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $op;
 var $p;
 var $q;
 var $r;
 var $t;
 var $dp;
 $2=$rite;
 $3=$up;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=_errstop(0,0,$7,0);
 $1=$8;
 label=35;break;
 case 3: 
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&70;
 $datatyp=$13;
 var $14=$datatyp;
 var $15=($14|0)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=$datatyp;
 var $18=($17|0)==64;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=$2;
 var $21=_errstop(47,0,$20,0);
 $1=$21;
 label=35;break;
 case 6: 
 var $23=$2;
 var $24=(($23+12)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=$2;
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $37=$31;label=9;break;
 case 8: 
 var $33=$2;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $37=$35;label=9;break;
 case 9: 
 var $37;
 $n=$37;
 var $38=$n;
 var $39=_indxsub($38);
 $out=$39;
 var $40=$out;
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=($42|0)<2;
 if($43){label=10;break;}else{label=11;break;}
 case 10: 
 var $45=$2;
 var $46=$out;
 var $47=_errstop(0,0,$45,$46);
 $1=$47;
 label=35;break;
 case 11: 
 $r=1;
 var $49=$2;
 var $50=(($49+12)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32", 0, 0);
 var $52=($51|0)>1;
 if($52){label=12;break;}else{label=17;break;}
 case 12: 
 var $54=$2;
 var $55=(($54+12)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=((($56)-(1))|0);
 $i=$57;
 label=13;break;
 case 13: 
 var $59=$i;
 var $60=($59|0)>0;
 if($60){label=14;break;}else{label=16;break;}
 case 14: 
 var $62=$2;
 var $63=(($62+16)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32*", 0, 0);
 var $65=$i;
 var $66=(($64+($65<<2))|0);
 var $67=SAFE_HEAP_LOAD($66, "i32", 0, 0);
 var $68=$r;
 var $69=(Math_imul($68,$67)|0);
 $r=$69;
 label=15;break;
 case 15: 
 var $71=$i;
 var $72=((($71)-(1))|0);
 $i=$72;
 label=13;break;
 case 16: 
 label=17;break;
 case 17: 
 var $75=$2;
 var $76=(($75)|0);
 var $77=$76;
 var $78=SAFE_HEAP_LOAD($77, "double*", 0, 0);
 $dp=$78;
 var $79=$dp;
 var $80=$79;
 var $81=$80;
 $ip=$81;
 var $82=$out;
 var $83=(($82)|0);
 var $84=$83;
 var $85=SAFE_HEAP_LOAD($84, "i32*", 0, 0);
 $op=$85;
 var $86=$n;
 var $87=(((($86|0))/(2))&-1);
 $m=$87;
 label=18;break;
 case 18: 
 var $89=$m;
 var $90=($89|0)!=0;
 if($90){label=19;break;}else{label=34;break;}
 case 19: 
 var $92=$n;
 var $93=$m;
 var $94=((($92)-($93))|0);
 $k=$94;
 $j=0;
 label=20;break;
 case 20: 
 var $96=$j;
 var $97=$k;
 var $98=($96|0)<($97|0);
 if($98){label=21;break;}else{label=33;break;}
 case 21: 
 var $100=$j;
 $i=$100;
 label=22;break;
 case 22: 
 var $102=$i;
 var $103=$m;
 var $104=((($102)+($103))|0);
 $l=$104;
 var $105=$op;
 var $106=$i;
 var $107=(($105+($106<<2))|0);
 var $108=SAFE_HEAP_LOAD($107, "i32", 0, 0);
 var $109=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $110=((($108)-($109))|0);
 $a=$110;
 var $111=$op;
 var $112=$l;
 var $113=(($111+($112<<2))|0);
 var $114=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 var $115=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $116=((($114)-($115))|0);
 $b=$116;
 var $117=$2;
 var $118=$a;
 var $119=$b;
 var $120=$r;
 var $121=_gradesub($117,$118,$119,$120);
 $p=$121;
 var $122=$3;
 var $123=($122|0)!=0;
 if($123){label=23;break;}else{label=24;break;}
 case 23: 
 var $125=$p;
 var $126=($125|0)<=0;
 var $127=($126&1);
 $q=$127;
 label=25;break;
 case 24: 
 var $129=$p;
 var $130=($129|0)>=0;
 var $131=($130&1);
 $q=$131;
 label=25;break;
 case 25: 
 var $133=$q;
 var $134=($133|0)!=0;
 if($134){label=26;break;}else{label=29;break;}
 case 26: 
 var $136=$p;
 var $137=($136|0)==0;
 if($137){label=27;break;}else{label=28;break;}
 case 27: 
 var $139=$a;
 var $140=$b;
 var $141=($139|0)>($140|0);
 if($141){label=29;break;}else{label=28;break;}
 case 28: 
 label=31;break;
 case 29: 
 var $144=$b;
 var $145=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $146=((($144)+($145))|0);
 var $147=$op;
 var $148=$i;
 var $149=(($147+($148<<2))|0);
 SAFE_HEAP_STORE($149, $146, "i32", 0);
 var $150=$a;
 var $151=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $152=((($150)+($151))|0);
 var $153=$op;
 var $154=$l;
 var $155=(($153+($154<<2))|0);
 SAFE_HEAP_STORE($155, $152, "i32", 0);
 var $156=$m;
 var $157=$i;
 var $158=((($157)-($156))|0);
 $i=$158;
 label=30;break;
 case 30: 
 var $160=$i;
 var $161=($160|0)>=0;
 if($161){label=22;break;}else{label=31;break;}
 case 31: 
 label=32;break;
 case 32: 
 var $164=$j;
 var $165=((($164)+(1))|0);
 $j=$165;
 label=20;break;
 case 33: 
 var $167=$m;
 var $168=(((($167|0))/(2))&-1);
 $m=$168;
 label=18;break;
 case 34: 
 var $170=$2;
 var $171=$out;
 var $172=_errstop(0,0,$170,$171);
 $1=$172;
 label=35;break;
 case 35: 
 var $174=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $174;
  default: assert(0, "bad label: " + label);
 }

}


function _gradedn2($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=_grade($7,0);
 $1=$8;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 var $12=_grade2($10,$11,0);
 $1=$12;
 label=4;break;
 case 4: 
 var $14=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _gradesub($rite,$a,$b,$r){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $aip;
 var $bip;
 var $i;
 var $adp;
 var $bdp;
 var $d;
 $2=$rite;
 $3=$a;
 $4=$b;
 $5=$r;
 var $6=$2;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=$8&70;
 if(($9|0)==2){ label=10;break;}else if(($9|0)==4){ label=2;break;}else{label=18;break;}
 case 2: 
 var $11=$2;
 var $12=(($11)|0);
 var $13=$12;
 var $14=SAFE_HEAP_LOAD($13, "i32*", 0, 0);
 var $15=$3;
 var $16=$5;
 var $17=(Math_imul($15,$16)|0);
 var $18=(($14+($17<<2))|0);
 $aip=$18;
 var $19=$2;
 var $20=(($19)|0);
 var $21=$20;
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 var $23=$4;
 var $24=$5;
 var $25=(Math_imul($23,$24)|0);
 var $26=(($22+($25<<2))|0);
 $bip=$26;
 label=3;break;
 case 3: 
 var $28=$5;
 var $29=((($28)-(1))|0);
 $5=$29;
 var $30=($28|0)!=0;
 if($30){label=4;break;}else{label=9;break;}
 case 4: 
 var $32=$aip;
 var $33=(($32+4)|0);
 $aip=$33;
 var $34=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $35=$bip;
 var $36=(($35+4)|0);
 $bip=$36;
 var $37=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 var $38=((($34)-($37))|0);
 $i=$38;
 var $39=$i;
 var $40=($39|0)>0;
 if($40){label=5;break;}else{label=6;break;}
 case 5: 
 $1=1;
 label=19;break;
 case 6: 
 var $43=$i;
 var $44=($43|0)<0;
 if($44){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-1;
 label=19;break;
 case 8: 
 label=3;break;
 case 9: 
 label=18;break;
 case 10: 
 var $49=$2;
 var $50=(($49)|0);
 var $51=$50;
 var $52=SAFE_HEAP_LOAD($51, "double*", 0, 0);
 var $53=$3;
 var $54=$5;
 var $55=(Math_imul($53,$54)|0);
 var $56=(($52+($55<<3))|0);
 $adp=$56;
 var $57=$2;
 var $58=(($57)|0);
 var $59=$58;
 var $60=SAFE_HEAP_LOAD($59, "double*", 0, 0);
 var $61=$4;
 var $62=$5;
 var $63=(Math_imul($61,$62)|0);
 var $64=(($60+($63<<3))|0);
 $bdp=$64;
 label=11;break;
 case 11: 
 var $66=$5;
 var $67=((($66)-(1))|0);
 $5=$67;
 var $68=($66|0)!=0;
 if($68){label=12;break;}else{label=17;break;}
 case 12: 
 var $70=$adp;
 var $71=(($70+8)|0);
 $adp=$71;
 var $72=SAFE_HEAP_LOAD($70, "double", 0, 0);
 var $73=$bdp;
 var $74=(($73+8)|0);
 $bdp=$74;
 var $75=SAFE_HEAP_LOAD($73, "double", 0, 0);
 var $76=($72)-($75);
 $d=$76;
 var $77=$d;
 var $78=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $79=$77>$78;
 if($79){label=13;break;}else{label=14;break;}
 case 13: 
 $1=1;
 label=19;break;
 case 14: 
 var $82=$d;
 var $83=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $84=((-.0))-($83);
 var $85=$82<$84;
 if($85){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-1;
 label=19;break;
 case 16: 
 label=11;break;
 case 17: 
 label=18;break;
 case 18: 
 $1=0;
 label=19;break;
 case 19: 
 var $91=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $91;
  default: assert(0, "bad label: " + label);
 }

}


function _gradeup2($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=_grade($7,1);
 $1=$8;
 label=4;break;
 case 3: 
 var $10=$2;
 var $11=$3;
 var $12=_grade2($10,$11,1);
 $1=$12;
 label=4;break;
 case 4: 
 var $14=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _gt($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=($4)-($5);
 $diff=$6;
 var $7=$6<=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$diff;
 var $12=$10>=$11;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=6;break;
 case 5: 
 $1=1;
 label=6;break;
 case 6: 
 var $16=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }

}


function _gtp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)-($7);
 $diff=$8;
 var $9=$8<=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$3;
 SAFE_HEAP_STORE($11, 0, "i32", 0);
 label=7;break;
 case 3: 
 var $13=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $14=$diff;
 var $15=$13>=$14;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$3;
 SAFE_HEAP_STORE($17, 0, "i32", 0);
 label=6;break;
 case 5: 
 var $19=$3;
 SAFE_HEAP_STORE($19, 1, "i32", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _iabs($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$x;
 var $2=$1;
 var $3=($2|0);
 var $4=$3>=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$1;
 var $11=$6;label=4;break;
 case 3: 
 var $8=$1;
 var $9=(((-$8))|0);
 var $11=$9;label=4;break;
 case 4: 
 var $11;
 $1=$11;
 var $12=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _iand($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=($3|0)!=0;
 var $5=($4&1);
 var $6=$2;
 var $7=($6|0)!=0;
 var $8=($7&1);
 var $9=$5&$8;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $9;
}


function _iandp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=($5|0)!=0;
 var $7=($6&1);
 var $8=$2;
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=($9|0)!=0;
 var $11=($10&1);
 var $12=$7&$11;
 var $13=$3;
 SAFE_HEAP_STORE($13, $12, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _iconjug($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$x;
 var $2=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $2;
}


function _idyadic($oper,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $dataout=(sp)+(16);
 var $leftptr=(sp)+(24);
 var $riteptr=(sp)+(32);
 var $i;
 var $leftinc=(sp)+(40);
 var $riteinc=(sp)+(48);
 var $out;
 $2=$oper;
 SAFE_HEAP_STORE($3, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 var $5=_matchok($3,$4,4);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=12;break;
 case 3: 
 var $9=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $10=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $11=$dataout;
 var $12=$leftptr;
 var $13=$riteptr;
 var $14=_dyadicm($9,$10,$11,$12,$13,$leftinc,$riteinc,4);
 $out=$14;
 var $15=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=12;break;
 case 5: 
 var $19=$out;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $25=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $26=$out;
 var $27=_errstop(0,$24,$25,$26);
 $1=$27;
 label=12;break;
 case 7: 
 var $29=$out;
 var $30=(($29+8)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 $i=$31;
 label=8;break;
 case 8: 
 var $33=$i;
 var $34=($33|0)>0;
 if($34){label=9;break;}else{label=11;break;}
 case 9: 
 var $36=$2;
 var $37=SAFE_HEAP_LOAD($leftptr, "i32*", 0, 0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=SAFE_HEAP_LOAD($riteptr, "i32*", 0, 0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=$36;
 var $42=FUNCTION_TABLE[$41]($38,$40);
 var $43=SAFE_HEAP_LOAD($dataout, "i32*", 0, 0);
 var $44=(($43+4)|0);
 SAFE_HEAP_STORE($dataout, $44, "i32*", 0);
 SAFE_HEAP_STORE($43, $42, "i32", 0);
 var $45=SAFE_HEAP_LOAD($leftinc, "i32", 0, 0);
 var $46=SAFE_HEAP_LOAD($leftptr, "i32*", 0, 0);
 var $47=(($46+($45<<2))|0);
 SAFE_HEAP_STORE($leftptr, $47, "i32*", 0);
 var $48=SAFE_HEAP_LOAD($riteinc, "i32", 0, 0);
 var $49=SAFE_HEAP_LOAD($riteptr, "i32*", 0, 0);
 var $50=(($49+($48<<2))|0);
 SAFE_HEAP_STORE($riteptr, $50, "i32*", 0);
 label=10;break;
 case 10: 
 var $52=$i;
 var $53=((($52)-(1))|0);
 $i=$53;
 label=8;break;
 case 11: 
 var $55=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $56=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $57=$out;
 var $58=_errstop(0,$55,$56,$57);
 $1=$58;
 label=12;break;
 case 12: 
 var $60=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $60;
  default: assert(0, "bad label: " + label);
 }

}


function _ieq($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)==($4|0);
 var $6=($5&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $6;
}


function _ifactorl($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 $2=$n;
 var $3=$2;
 $j=$3;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$2;
 var $8=($7|0)==1;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $1=1;
 label=10;break;
 case 4: 
 var $11=$2;
 var $12=($11|0);
 var $13=$12<0;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE(4592, 36, "i32", 0);
 $1=0;
 label=10;break;
 case 6: 
 var $16=$2;
 $j=$16;
 label=7;break;
 case 7: 
 var $18=$2;
 var $19=((($18)-(1))|0);
 $2=$19;
 var $20=($19|0)!=0;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 var $22=$2;
 var $23=$j;
 var $24=(Math_imul($23,$22)|0);
 $j=$24;
 label=7;break;
 case 9: 
 var $26=$j;
 $1=$26;
 label=10;break;
 case 10: 
 var $28=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }

}


function _ige($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)>=($4|0);
 var $6=($5&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $6;
}


function _igep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($5|0)>=($7|0);
 var $9=($8&1);
 var $10=$3;
 SAFE_HEAP_STORE($10, $9, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _igt($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)>($4|0);
 var $6=($5&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $6;
}


function _igtp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($5|0)>($7|0);
 var $9=($8&1);
 var $10=$3;
 SAFE_HEAP_STORE($10, $9, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _ile($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)<=($4|0);
 var $6=($5&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $6;
}


function _ilep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($5|0)<=($7|0);
 var $9=($8&1);
 var $10=$3;
 SAFE_HEAP_STORE($10, $9, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _ilt($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)<($4|0);
 var $6=($5&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $6;
}


function _iltp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($5|0)<($7|0);
 var $9=($8&1);
 var $10=$3;
 SAFE_HEAP_STORE($10, $9, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _imax($a,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$a;
 $2=$b;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)>($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $11=$7;label=4;break;
 case 3: 
 var $9=$2;
 var $11=$9;label=4;break;
 case 4: 
 var $11;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _imaxp($a,$b,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$a;
 $2=$b;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($5|0)>($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $16=$11;label=4;break;
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 var $17=$3;
 SAFE_HEAP_STORE($17, $16, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _imin($a,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$a;
 $2=$b;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)<($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $11=$7;label=4;break;
 case 3: 
 var $9=$2;
 var $11=$9;label=4;break;
 case 4: 
 var $11;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _iminp($a,$b,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$a;
 $2=$b;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=($5|0)<($7|0);
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $16=$11;label=4;break;
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 var $17=$3;
 SAFE_HEAP_STORE($17, $16, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _iminus($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=((($3)-($4))|0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $5;
}


function _imod($num,$den){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 $2=$num;
 $3=$den;
 var $4=$3;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 $1=$7;
 label=13;break;
 case 3: 
 var $9=$2;
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=13;break;
 case 5: 
 var $13=$2;
 var $14=$3;
 var $15=(((($13|0))%(($14|0)))&-1);
 $i=$15;
 var $16=0==($15|0);
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=13;break;
 case 7: 
 var $19=$2;
 var $20=($19|0)>0;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 var $22=$3;
 var $23=($22|0)>0;
 if($23){label=11;break;}else{label=9;break;}
 case 9: 
 var $25=$2;
 var $26=($25|0)<0;
 if($26){label=10;break;}else{label=12;break;}
 case 10: 
 var $28=$3;
 var $29=($28|0)<0;
 if($29){label=11;break;}else{label=12;break;}
 case 11: 
 var $31=$i;
 $1=$31;
 label=13;break;
 case 12: 
 var $33=$i;
 var $34=$3;
 var $35=((($33)+($34))|0);
 $1=$35;
 label=13;break;
 case 13: 
 var $37=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _imonadic($oper,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $dataout;
 var $datarite;
 var $dimptr;
 var $dimrite;
 var $i;
 var $out;
 $2=$oper;
 $3=$rite;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=_errstop(0,0,$7,0);
 $1=$8;
 label=18;break;
 case 3: 
 var $10=$3;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&4;
 var $14=($13|0)!=0;
 if($14){label=7;break;}else{label=4;break;}
 case 4: 
 var $16=$3;
 var $17=_integer($16);
 $3=$17;
 var $18=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=18;break;
 case 6: 
 label=7;break;
 case 7: 
 var $23=$3;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=$3;
 var $27=(($26+12)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=_getcb(0,$25,5,$28,0);
 $out=$29;
 var $30=$out;
 var $31=($30|0)==0;
 if($31){label=8;break;}else{label=9;break;}
 case 8: 
 var $33=$3;
 var $34=_errstop(0,0,$33,0);
 $1=$34;
 label=18;break;
 case 9: 
 var $36=$out;
 var $37=(($36+8)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=($38|0)!=0;
 if($39){label=11;break;}else{label=10;break;}
 case 10: 
 var $41=$3;
 var $42=$out;
 var $43=_errstop(0,0,$41,$42);
 $1=$43;
 label=18;break;
 case 11: 
 var $45=$out;
 var $46=(($45+12)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=($47|0)>1;
 if($48){label=12;break;}else{label=13;break;}
 case 12: 
 var $50=$out;
 var $51=(($50+16)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32*", 0, 0);
 var $53=$52;
 var $54=$3;
 var $55=(($54+16)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32*", 0, 0);
 var $57=$56;
 var $58=$out;
 var $59=(($58+12)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=_intcopy($53,$57,$60,1);
 var $62=$61;
 $dimptr=$62;
 label=13;break;
 case 13: 
 var $64=$out;
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "i32*", 0, 0);
 $dataout=$67;
 var $68=$3;
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "i32*", 0, 0);
 $datarite=$71;
 var $72=$out;
 var $73=(($72+8)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 $i=$74;
 label=14;break;
 case 14: 
 var $76=$i;
 var $77=($76|0)>0;
 if($77){label=15;break;}else{label=17;break;}
 case 15: 
 var $79=$2;
 var $80=$datarite;
 var $81=(($80+4)|0);
 $datarite=$81;
 var $82=SAFE_HEAP_LOAD($80, "i32", 0, 0);
 var $83=$79;
 var $84=FUNCTION_TABLE[$83]($82);
 var $85=$dataout;
 var $86=(($85+4)|0);
 $dataout=$86;
 SAFE_HEAP_STORE($85, $84, "i32", 0);
 label=16;break;
 case 16: 
 var $88=$i;
 var $89=((($88)-(1))|0);
 $i=$89;
 label=14;break;
 case 17: 
 var $91=$3;
 var $92=$out;
 var $93=_errstop(0,0,$91,$92);
 $1=$93;
 label=18;break;
 case 18: 
 var $95=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $95;
  default: assert(0, "bad label: " + label);
 }

}


function _inand($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=($3|0)!=0;
 var $5=($4&1);
 var $6=$2;
 var $7=($6|0)!=0;
 var $8=($7&1);
 var $9=$5&$8;
 var $10=($9|0)!=0;
 var $11=$10^1;
 var $12=($11&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
}


function _inandp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=($5|0)!=0;
 var $7=($6&1);
 var $8=$2;
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=($9|0)!=0;
 var $11=($10&1);
 var $12=$7&$11;
 var $13=($12|0)!=0;
 var $14=$13^1;
 var $15=($14&1);
 var $16=$3;
 SAFE_HEAP_STORE($16, $15, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _indexgen($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $datatyp;
 var $i;
 var $dbl;
 $2=$rite;
 label=2;break;
 case 2: 
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 label=23;break;
 case 4: 
 var $8=$2;
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=($10|0)!=1;
 if($11){label=5;break;}else{label=6;break;}
 case 5: 
 label=23;break;
 case 6: 
 var $14=$2;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$16&6;
 $i=$17;
 var $18=0==($17|0);
 if($18){label=7;break;}else{label=8;break;}
 case 7: 
 label=23;break;
 case 8: 
 var $21=$i;
 var $22=($21|0)==4;
 if($22){label=9;break;}else{label=10;break;}
 case 9: 
 var $24=$2;
 var $25=_ivalue($24);
 $i=$25;
 label=20;break;
 case 10: 
 var $27=$2;
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "double*", 0, 0);
 var $31=SAFE_HEAP_LOAD($30, "double", 0, 0);
 $dbl=$31;
 var $32=0>$31;
 if($32){label=11;break;}else{label=15;break;}
 case 11: 
 var $34=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $35=((-.0))-($34);
 var $36=$dbl;
 var $37=$35>$36;
 if($37){label=12;break;}else{label=13;break;}
 case 12: 
 label=23;break;
 case 13: 
 $i=0;
 label=14;break;
 case 14: 
 label=19;break;
 case 15: 
 var $42=$dbl;
 var $43=_mod($42,1);
 var $44=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $45=$43>$44;
 if($45){label=16;break;}else{label=17;break;}
 case 16: 
 label=23;break;
 case 17: 
 var $48=$dbl;
 var $49=(($48)&-1);
 $i=$49;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $52=$2;
 var $53=_endoper($52);
 label=20;break;
 case 20: 
 var $55=$i;
 var $56=($55|0)<0;
 if($56){label=21;break;}else{label=22;break;}
 case 21: 
 label=23;break;
 case 22: 
 var $59=$i;
 var $60=_indxsub($59);
 $1=$60;
 label=24;break;
 case 23: 
 var $62=$2;
 var $63=_errstop(45,0,$62,0);
 $1=$63;
 label=24;break;
 case 24: 
 var $65=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $65;
  default: assert(0, "bad label: " + label);
 }

}


function _indexma($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $dimcb;
 var $s;
 var $t;
 var $u;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $leftrank;
 var $op;
 var $tempsave;
 $2=$p;
 var $3=_getcb(0,0,5,1,0);
 $dimcb=$3;
 var $4=$2;
 var $5=(($4+12)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $7=(($6)|0);
 var $8=$7;
 var $9=SAFE_HEAP_LOAD($8, "%struct.aplcb**", 0, 0);
 $s=$9;
 var $10=$2;
 var $11=(($10)|0);
 var $12=SAFE_HEAP_LOAD($11, "%struct.aplcb*", 0, 0);
 var $13=(($12+12)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 $leftrank=$14;
 var $15=$2;
 var $16=(($15)|0);
 var $17=SAFE_HEAP_LOAD($16, "%struct.aplcb*", 0, 0);
 var $18=(($17+16)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32*", 0, 0);
 var $20=$leftrank;
 var $21=(($19+($20<<2))|0);
 var $22=((($21)-(4))|0);
 $ip=$22;
 var $23=$leftrank;
 var $24=((($23)-(1))|0);
 var $25=$leftrank;
 var $26=($25<<2);
 var $27=_aplmall($26);
 var $28=$27;
 var $29=$2;
 var $30=(($29+16)|0);
 SAFE_HEAP_STORE($30, $28, "i32*", 0);
 var $31=(($28+($24<<2))|0);
 $op=$31;
 $k=1;
 $i=0;
 label=2;break;
 case 2: 
 var $33=$i;
 var $34=$leftrank;
 var $35=($33|0)<($34|0);
 if($35){label=3;break;}else{label=14;break;}
 case 3: 
 var $37=$k;
 var $38=$op;
 var $39=((($38)-(4))|0);
 $op=$39;
 SAFE_HEAP_STORE($38, $37, "i32", 0);
 var $40=$ip;
 var $41=((($40)-(4))|0);
 $ip=$41;
 var $42=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $43=$k;
 var $44=(Math_imul($43,$42)|0);
 $k=$44;
 var $45=$s;
 var $46=SAFE_HEAP_LOAD($45, "%struct.aplcb*", 0, 0);
 $t=$46;
 var $47=0==($46|0);
 if($47){label=4;break;}else{label=5;break;}
 case 4: 
 var $49=$2;
 var $50=(($49)|0);
 var $51=SAFE_HEAP_LOAD($50, "%struct.aplcb*", 0, 0);
 var $52=(($51+16)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32*", 0, 0);
 var $54=$i;
 var $55=(($53+($54<<2))|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 $j=$56;
 var $57=_iscalar($56);
 $u=$57;
 var $58=$j;
 var $59=_indxsub($58);
 var $60=$s;
 SAFE_HEAP_STORE($60, $59, "%struct.aplcb*", 0);
 label=12;break;
 case 5: 
 var $62=$t;
 var $63=(($62+4)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=$64&4;
 var $66=($65|0)!=0;
 if($66){label=9;break;}else{label=6;break;}
 case 6: 
 var $68=$t;
 var $69=_integer($68);
 $t=$69;
 var $70=$s;
 SAFE_HEAP_STORE($70, $69, "%struct.aplcb*", 0);
 var $71=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $72=($71|0)!=0;
 if($72){label=7;break;}else{label=8;break;}
 case 7: 
 var $74=$dimcb;
 var $75=_errstop(0,0,0,$74);
 $1=$75;
 label=15;break;
 case 8: 
 label=9;break;
 case 9: 
 var $78=$t;
 var $79=(($78+4)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 var $81=$80&1;
 $tempsave=$81;
 var $82=($81|0)!=0;
 if($82){label=10;break;}else{label=11;break;}
 case 10: 
 var $84=$t;
 var $85=(($84+4)|0);
 var $86=SAFE_HEAP_LOAD($85, "i32", 0, 0);
 var $87=((($86)-(1))|0);
 SAFE_HEAP_STORE($85, $87, "i32", 0);
 label=11;break;
 case 11: 
 var $89=$t;
 var $90=_shape($89);
 $u=$90;
 var $91=$tempsave;
 var $92=$t;
 var $93=(($92+4)|0);
 var $94=SAFE_HEAP_LOAD($93, "i32", 0, 0);
 var $95=((($94)+($91))|0);
 SAFE_HEAP_STORE($93, $95, "i32", 0);
 label=12;break;
 case 12: 
 var $97=$dimcb;
 var $98=$u;
 var $99=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $100=_cat($97,$98,$99);
 $dimcb=$100;
 var $101=$s;
 var $102=(($101+4)|0);
 $s=$102;
 label=13;break;
 case 13: 
 var $104=$i;
 var $105=((($104)+(1))|0);
 $i=$105;
 label=2;break;
 case 14: 
 var $107=$dimcb;
 $1=$107;
 label=15;break;
 case 15: 
 var $109=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $109;
  default: assert(0, "bad label: " + label);
 }

}


function _indexmb($level,$p,$ixcbp,$pix,$ixdta,$leftp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $ixcb;
 var $nxtcb;
 var $nxtcbp;
 var $wc;
 var $wt;
 var $currdim;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $nxtix;
 var $nxtlev;
 var $ch;
 var $curl;
 $2=$level;
 $3=$p;
 $4=$ixcbp;
 $5=$pix;
 $6=$ixdta;
 $7=$leftp;
 var $8=$4;
 var $9=SAFE_HEAP_LOAD($8, "%struct.aplcb*", 0, 0);
 $ixcb=$9;
 var $10=$2;
 var $11=((($10)+(1))|0);
 $nxtlev=$11;
 var $12=$5;
 var $13=((($12)+(1))|0);
 $nxtix=$13;
 var $14=$ixcb;
 var $15=(($14+12)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)==0;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 $currdim=1;
 label=4;break;
 case 3: 
 var $20=$ixcb;
 var $21=(($20+16)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 var $23=$5;
 var $24=(($22+($23<<2))|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 $currdim=$25;
 label=4;break;
 case 4: 
 $j=0;
 label=5;break;
 case 5: 
 var $28=$j;
 var $29=$currdim;
 var $30=($28|0)<($29|0);
 if($30){label=6;break;}else{label=27;break;}
 case 6: 
 var $32=$nxtix;
 var $33=$ixcb;
 var $34=(($33+12)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=($32|0)<($35|0);
 if($36){label=7;break;}else{label=8;break;}
 case 7: 
 var $38=$2;
 var $39=$3;
 var $40=$4;
 var $41=$nxtix;
 var $42=$6;
 var $43=$7;
 var $44=_indexmb($38,$39,$40,$41,$42,$43);
 $6=$44;
 label=25;break;
 case 8: 
 var $46=$6;
 var $47=(($46+4)|0);
 $6=$47;
 var $48=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $49=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $50=((($48)-($49))|0);
 $k=$50;
 var $51=$k;
 var $52=($51|0)<0;
 if($52){label=10;break;}else{label=9;break;}
 case 9: 
 var $54=$k;
 var $55=$3;
 var $56=(($55)|0);
 var $57=SAFE_HEAP_LOAD($56, "%struct.aplcb*", 0, 0);
 var $58=(($57+16)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32*", 0, 0);
 var $60=$2;
 var $61=(($59+($60<<2))|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=($54|0)>=($62|0);
 if($63){label=10;break;}else{label=11;break;}
 case 10: 
 SAFE_HEAP_STORE(4592, 34, "i32", 0);
 $1=0;
 label=28;break;
 case 11: 
 var $66=$7;
 var $67=$3;
 var $68=(($67+16)|0);
 var $69=SAFE_HEAP_LOAD($68, "i32*", 0, 0);
 var $70=$2;
 var $71=(($69+($70<<2))|0);
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=$3;
 var $74=(($73)|0);
 var $75=SAFE_HEAP_LOAD($74, "%struct.aplcb*", 0, 0);
 var $76=(($75+20)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=(Math_imul($72,$77)|0);
 var $79=$k;
 var $80=(Math_imul($78,$79)|0);
 var $81=(($66+$80)|0);
 $curl=$81;
 var $82=$nxtlev;
 var $83=$3;
 var $84=(($83)|0);
 var $85=SAFE_HEAP_LOAD($84, "%struct.aplcb*", 0, 0);
 var $86=(($85+12)|0);
 var $87=SAFE_HEAP_LOAD($86, "i32", 0, 0);
 var $88=($82|0)<($87|0);
 if($88){label=12;break;}else{label=13;break;}
 case 12: 
 var $90=$4;
 var $91=(($90+4)|0);
 $nxtcbp=$91;
 var $92=$nxtcbp;
 var $93=SAFE_HEAP_LOAD($92, "%struct.aplcb*", 0, 0);
 $nxtcb=$93;
 var $94=$nxtlev;
 var $95=$3;
 var $96=$nxtcbp;
 var $97=$nxtcb;
 var $98=(($97)|0);
 var $99=$98;
 var $100=SAFE_HEAP_LOAD($99, "i32*", 0, 0);
 var $101=$curl;
 var $102=_indexmb($94,$95,$96,0,$100,$101);
 $ip=$102;
 label=24;break;
 case 13: 
 var $104=$3;
 var $105=(($104+24)|0);
 var $106=SAFE_HEAP_LOAD($105, "i8*", 0, 0);
 var $107=($106|0)!=0;
 if($107){label=14;break;}else{label=20;break;}
 case 14: 
 var $109=$3;
 var $110=(($109+36)|0);
 var $111=SAFE_HEAP_LOAD($110, "i32", 0, 0);
 var $112=$111&32;
 var $113=($112|0)!=0;
 if($113){label=15;break;}else{label=18;break;}
 case 15: 
 var $115=$curl;
 var $116=$115;
 var $117=SAFE_HEAP_LOAD($116, "%struct.aplcb*", 0, 0);
 $wt=$117;
 var $118=0!=($117|0);
 if($118){label=16;break;}else{label=17;break;}
 case 16: 
 var $120=$wt;
 var $121=_temp($120);
 _endoper($121);
 label=17;break;
 case 17: 
 var $123=$3;
 var $124=(($123+24)|0);
 var $125=SAFE_HEAP_LOAD($124, "i8*", 0, 0);
 var $126=$125;
 var $127=SAFE_HEAP_LOAD($126, "%struct.aplcb*", 0, 0);
 var $128=_aplcopy($127);
 var $129=$curl;
 var $130=$129;
 SAFE_HEAP_STORE($130, $128, "%struct.aplcb*", 0);
 label=19;break;
 case 18: 
 var $132=$curl;
 var $133=$3;
 var $134=(($133+24)|0);
 var $135=SAFE_HEAP_LOAD($134, "i8*", 0, 0);
 var $136=$3;
 var $137=(($136+20)|0);
 var $138=SAFE_HEAP_LOAD($137, "i32", 0, 0);
 var $139=_chrcopy($132,$135,$138,1);
 $ch=$139;
 label=19;break;
 case 19: 
 var $141=$3;
 var $142=(($141+32)|0);
 var $143=SAFE_HEAP_LOAD($142, "i32", 0, 0);
 var $144=$3;
 var $145=(($144+24)|0);
 var $146=SAFE_HEAP_LOAD($145, "i8*", 0, 0);
 var $147=(($146+$143)|0);
 SAFE_HEAP_STORE($145, $147, "i8*", 0);
 label=20;break;
 case 20: 
 var $149=$3;
 var $150=(($149+36)|0);
 var $151=SAFE_HEAP_LOAD($150, "i32", 0, 0);
 var $152=$151&32;
 var $153=($152|0)!=0;
 if($153){label=21;break;}else{label=22;break;}
 case 21: 
 var $155=$3;
 var $156=(($155+28)|0);
 var $157=SAFE_HEAP_LOAD($156, "i8*", 0, 0);
 var $158=$157;
 $nxtcbp=$158;
 var $159=$curl;
 var $160=$159;
 var $161=SAFE_HEAP_LOAD($160, "%struct.aplcb*", 0, 0);
 var $162=_aplcopy($161);
 $wc=$162;
 var $163=$nxtcbp;
 SAFE_HEAP_STORE($163, $162, "%struct.aplcb*", 0);
 var $164=$nxtcbp;
 var $165=(($164+4)|0);
 $nxtcbp=$165;
 var $166=$nxtcbp;
 var $167=$166;
 var $168=$3;
 var $169=(($168+28)|0);
 SAFE_HEAP_STORE($169, $167, "i8*", 0);
 label=23;break;
 case 22: 
 var $171=$3;
 var $172=(($171+28)|0);
 var $173=SAFE_HEAP_LOAD($172, "i8*", 0, 0);
 var $174=$curl;
 var $175=$3;
 var $176=(($175+20)|0);
 var $177=SAFE_HEAP_LOAD($176, "i32", 0, 0);
 var $178=_chrcopy($173,$174,$177,1);
 var $179=$3;
 var $180=(($179+28)|0);
 SAFE_HEAP_STORE($180, $178, "i8*", 0);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $185=$j;
 var $186=((($185)+(1))|0);
 $j=$186;
 label=5;break;
 case 27: 
 var $188=$6;
 $1=$188;
 label=28;break;
 case 28: 
 var $190=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $190;
  default: assert(0, "bad label: " + label);
 }

}


function _indexm($left,$indices,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4=(sp)+(8);
 var $datacnt;
 var $i;
 var $ip;
 var $itimesid=(sp)+(16);
 var $j;
 var $k;
 var $op;
 var $rank;
 var $tempsave;
 var $p=(sp)+(24);
 var $dimcb;
 var $x;
 var $xcb;
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 $3=$indices;
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 var $5=_errinit();
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $9=$3;
 var $10=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $11=_errstop(0,$8,$9,$10);
 $1=$11;
 label=34;break;
 case 3: 
 var $13=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=6;break;}
 case 4: 
 var $16=_matchok($2,$4,110);
 var $17=($16|0)!=0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=$3;
 var $20=_errstop(0,0,$19,0);
 $1=$20;
 label=34;break;
 case 6: 
 var $22=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $23=(($22+12)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=$3;
 var $26=(($25+8)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($24|0)!=($27|0);
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 var $30=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $31=$3;
 var $32=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $33=_errstop(53,$30,$31,$32);
 $1=$33;
 label=34;break;
 case 8: 
 var $35=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $36=(($35+20)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=(($p+20)|0);
 SAFE_HEAP_STORE($38, $37, "i32", 0);
 var $39=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $40=(($p)|0);
 SAFE_HEAP_STORE($40, $39, "%struct.aplcb*", 0);
 var $41=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $42=(($p+4)|0);
 SAFE_HEAP_STORE($42, $41, "%struct.aplcb*", 0);
 var $43=$3;
 var $44=(($p+12)|0);
 SAFE_HEAP_STORE($44, $43, "%struct.aplcb*", 0);
 var $45=(($p+28)|0);
 SAFE_HEAP_STORE($45, 0, "i8*", 0);
 var $46=(($p+24)|0);
 SAFE_HEAP_STORE($46, 0, "i8*", 0);
 var $47=(($p+24)|0);
 var $48=SAFE_HEAP_LOAD($47, "i8*", 0, 0);
 var $49=$48;
 var $50=(($p+16)|0);
 SAFE_HEAP_STORE($50, $49, "i32*", 0);
 var $51=(($p+16)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32*", 0, 0);
 var $53=$52;
 var $54=$53;
 var $55=(($p+8)|0);
 SAFE_HEAP_STORE($55, $54, "%struct.aplcb*", 0);
 var $56=$p;
 var $57=_indexma($56);
 $dimcb=$57;
 var $58=$dimcb;
 var $59=($58|0)!=0;
 if($59){label=9;break;}else{label=31;break;}
 case 9: 
 SAFE_HEAP_STORE($itimesid, 1, "i32", 0);
 var $61=$dimcb;
 var $62=_perm($61);
 var $63=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $64=_ireduce((72),$itimesid,$62,$63);
 var $65=_ivalue($64);
 $datacnt=$65;
 var $66=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $67=(($66+4)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=$68&110;
 var $70=(($p+36)|0);
 SAFE_HEAP_STORE($70, $69, "i32", 0);
 var $71=$dimcb;
 var $72=(($71+8)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 $rank=$73;
 var $74=0==($73|0);
 if($74){label=10;break;}else{label=12;break;}
 case 10: 
 var $76=(($p+36)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=($77|0)==8;
 if($78){label=11;break;}else{label=12;break;}
 case 11: 
 var $80=$rank;
 var $81=((($80)+(1))|0);
 $rank=$81;
 label=12;break;
 case 12: 
 var $83=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $84=($83|0)!=0;
 if($84){label=13;break;}else{label=21;break;}
 case 13: 
 var $86=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $87=(($86)|0);
 var $88=$87;
 var $89=SAFE_HEAP_LOAD($88, "i8*", 0, 0);
 var $90=(($p+24)|0);
 SAFE_HEAP_STORE($90, $89, "i8*", 0);
 var $91=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $92=(($91+8)|0);
 var $93=SAFE_HEAP_LOAD($92, "i32", 0, 0);
 var $94=1==($93|0);
 if($94){label=14;break;}else{label=15;break;}
 case 14: 
 var $100=0;label=16;break;
 case 15: 
 var $97=(($p+20)|0);
 var $98=SAFE_HEAP_LOAD($97, "i32", 0, 0);
 var $100=$98;label=16;break;
 case 16: 
 var $100;
 var $101=(($p+32)|0);
 SAFE_HEAP_STORE($101, $100, "i32", 0);
 var $102=(($p+36)|0);
 var $103=SAFE_HEAP_LOAD($102, "i32", 0, 0);
 var $104=($103|0)!=32;
 if($104){label=17;break;}else{label=20;break;}
 case 17: 
 var $106=(($p+32)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32", 0, 0);
 var $108=($107|0)!=0;
 if($108){label=18;break;}else{label=20;break;}
 case 18: 
 var $110=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $111=(($110+8)|0);
 var $112=SAFE_HEAP_LOAD($111, "i32", 0, 0);
 var $113=$datacnt;
 var $114=($112|0)!=($113|0);
 if($114){label=19;break;}else{label=20;break;}
 case 19: 
 SAFE_HEAP_STORE(4592, 112, "i32", 0);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $118=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $119=($118|0)==0;
 if($119){label=22;break;}else{label=23;break;}
 case 22: 
 var $121=$datacnt;
 var $122=(($p+36)|0);
 var $123=SAFE_HEAP_LOAD($122, "i32", 0, 0);
 var $124=((($123)+(1))|0);
 var $125=$rank;
 var $126=_getcb(0,$121,$124,$125,0);
 var $127=(($p+8)|0);
 SAFE_HEAP_STORE($127, $126, "%struct.aplcb*", 0);
 label=23;break;
 case 23: 
 var $129=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $130=($129|0)==0;
 if($130){label=24;break;}else{label=26;break;}
 case 24: 
 var $132=$rank;
 var $133=($132|0)>1;
 if($133){label=25;break;}else{label=26;break;}
 case 25: 
 var $135=(($p+8)|0);
 var $136=SAFE_HEAP_LOAD($135, "%struct.aplcb*", 0, 0);
 var $137=(($136+16)|0);
 var $138=SAFE_HEAP_LOAD($137, "i32*", 0, 0);
 var $139=$138;
 var $140=$dimcb;
 var $141=(($140)|0);
 var $142=$141;
 var $143=SAFE_HEAP_LOAD($142, "i32*", 0, 0);
 var $144=$143;
 var $145=$rank;
 var $146=_intcopy($139,$144,$145,1);
 var $147=$146;
 $ip=$147;
 label=26;break;
 case 26: 
 var $149=$dimcb;
 var $150=_temp($149);
 var $151=_endoper($150);
 var $152=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $153=($152|0)==0;
 if($153){label=27;break;}else{label=30;break;}
 case 27: 
 var $155=(($p+8)|0);
 var $156=SAFE_HEAP_LOAD($155, "%struct.aplcb*", 0, 0);
 var $157=(($156)|0);
 var $158=$157;
 var $159=SAFE_HEAP_LOAD($158, "i8*", 0, 0);
 var $160=(($p+28)|0);
 SAFE_HEAP_STORE($160, $159, "i8*", 0);
 var $161=(($p+8)|0);
 var $162=SAFE_HEAP_LOAD($161, "%struct.aplcb*", 0, 0);
 var $163=(($162+8)|0);
 var $164=SAFE_HEAP_LOAD($163, "i32", 0, 0);
 var $165=($164|0)!=0;
 if($165){label=28;break;}else{label=29;break;}
 case 28: 
 var $167=$3;
 var $168=(($167)|0);
 var $169=$168;
 var $170=SAFE_HEAP_LOAD($169, "%struct.aplcb**", 0, 0);
 $xcb=$170;
 var $171=SAFE_HEAP_LOAD($170, "%struct.aplcb*", 0, 0);
 $x=$171;
 var $172=$p;
 var $173=$xcb;
 var $174=$x;
 var $175=(($174)|0);
 var $176=$175;
 var $177=SAFE_HEAP_LOAD($176, "i32*", 0, 0);
 var $178=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $179=(($178)|0);
 var $180=$179;
 var $181=SAFE_HEAP_LOAD($180, "i8*", 0, 0);
 var $182=_indexmb(0,$172,$173,0,$177,$181);
 $ip=$182;
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $186=(($p+16)|0);
 var $187=SAFE_HEAP_LOAD($186, "i32*", 0, 0);
 var $188=($187|0)!=0;
 if($188){label=32;break;}else{label=33;break;}
 case 32: 
 var $190=(($p+16)|0);
 var $191=SAFE_HEAP_LOAD($190, "i32*", 0, 0);
 var $192=$191;
 _aplfree($192);
 label=33;break;
 case 33: 
 var $194=$3;
 var $195=_endoper($194);
 var $196=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $197=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $198=(($p+8)|0);
 var $199=SAFE_HEAP_LOAD($198, "%struct.aplcb*", 0, 0);
 var $200=_errstop(0,$196,$197,$199);
 $1=$200;
 label=34;break;
 case 34: 
 var $202=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $202;
  default: assert(0, "bad label: " + label);
 }

}


function _indexno($n,$rp,$ip,$jp,$org){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $j;
 var $k;
 var $m;
 var $p;
 $2=$n;
 $3=$rp;
 $4=$ip;
 $5=$jp;
 $6=$org;
 $p=0;
 $m=1;
 label=2;break;
 case 2: 
 var $8=$2;
 var $9=((($8)-(1))|0);
 $2=$9;
 var $10=($8|0)!=0;
 if($10){label=3;break;}else{label=15;break;}
 case 3: 
 var $12=$3;
 var $13=($12|0)!=0;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=$3;
 var $16=$2;
 var $17=(($15+($16<<2))|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$6;
 var $20=((($18)-($19))|0);
 var $24=$20;label=6;break;
 case 5: 
 var $22=$2;
 var $24=$22;label=6;break;
 case 6: 
 var $24;
 $k=$24;
 var $25=$4;
 var $26=$k;
 var $27=(($25+($26<<2))|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=$6;
 var $30=((($28)-($29))|0);
 $i=$30;
 var $31=$i;
 var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=12;break;}
 case 7: 
 var $34=$5;
 var $35=($34|0)==0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-1;
 label=16;break;
 case 9: 
 var $38=$i;
 var $39=$5;
 var $40=$2;
 var $41=(($39+($40<<2))|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=($38|0)>=($42|0);
 if($43){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-1;
 label=16;break;
 case 11: 
 var $46=$i;
 var $47=$m;
 var $48=(Math_imul($46,$47)|0);
 $j=$48;
 var $49=$j;
 var $50=$p;
 var $51=((($50)+($49))|0);
 $p=$51;
 label=12;break;
 case 12: 
 var $53=$5;
 var $54=($53|0)!=0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$5;
 var $57=$2;
 var $58=(($56+($57<<2))|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=$m;
 var $61=(Math_imul($60,$59)|0);
 $m=$61;
 label=14;break;
 case 14: 
 label=2;break;
 case 15: 
 var $64=$p;
 $1=$64;
 label=16;break;
 case 16: 
 var $66=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $66;
  default: assert(0, "bad label: " + label);
 }

}


function _indexof($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=_memixcm(1,$3,$4);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $5;
}


function _indexv($left,$indices,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4=(sp)+(8);
 var $ixcb;
 var $out;
 var $datatyp;
 var $i;
 var $ix;
 var $j;
 var $riteincr;
 var $cp;
 var $dp;
 var $outdata;
 var $ritedata;
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 $3=$indices;
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 $out=0;
 $riteincr=0;
 var $5=_errinit();
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $9=$3;
 var $10=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $11=_errstop(0,$8,$9,$10);
 $1=$11;
 label=25;break;
 case 3: 
 var $13=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $ritedata=0;
 label=12;break;
 case 5: 
 var $17=_matchok($2,$4,110);
 var $18=($17|0)!=0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=$3;
 var $21=_errstop(0,0,$20,0);
 $1=$21;
 label=25;break;
 case 7: 
 var $23=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)>1;
 if($26){label=8;break;}else{label=11;break;}
 case 8: 
 var $28=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=$3;
 var $32=(($31+8)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=($30|0)!=($33|0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $37=$3;
 var $38=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $39=_errstop(35,$36,$37,$38);
 $1=$39;
 label=25;break;
 case 10: 
 var $41=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $42=(($41+20)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 $riteincr=$43;
 label=11;break;
 case 11: 
 var $45=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $46=(($45)|0);
 var $47=$46;
 var $48=SAFE_HEAP_LOAD($47, "i8*", 0, 0);
 $ritedata=$48;
 label=12;break;
 case 12: 
 var $50=$3;
 var $51=_vectin($50);
 var $52=_temp($51);
 $ixcb=$52;
 var $53=0==($52|0);
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $56=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $57=_errstop(0,$55,$56,0);
 $1=$57;
 label=25;break;
 case 14: 
 var $59=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $60=(($59+4)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=$61&110;
 $datatyp=$62;
 var $63=$ixcb;
 var $64=(($63+8)|0);
 var $65=SAFE_HEAP_LOAD($64, "i32", 0, 0);
 var $66=$datatyp;
 var $67=((($66)+(1))|0);
 var $68=_getcb(0,$65,$67,1,0);
 $out=$68;
 var $69=$out;
 var $70=(($69)|0);
 var $71=$70;
 var $72=SAFE_HEAP_LOAD($71, "i8*", 0, 0);
 $outdata=$72;
 var $73=$ixcb;
 var $74=(($73)|0);
 var $75=$74;
 var $76=SAFE_HEAP_LOAD($75, "i32*", 0, 0);
 $ix=$76;
 $i=0;
 label=15;break;
 case 15: 
 var $78=$i;
 var $79=$ixcb;
 var $80=(($79+8)|0);
 var $81=SAFE_HEAP_LOAD($80, "i32", 0, 0);
 var $82=($78|0)<($81|0);
 if($82){label=16;break;}else{label=24;break;}
 case 16: 
 var $84=$ix;
 var $85=(($84+4)|0);
 $ix=$85;
 var $86=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 var $87=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $88=((($86)-($87))|0);
 $j=$88;
 var $89=$j;
 var $90=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $91=(($90+8)|0);
 var $92=SAFE_HEAP_LOAD($91, "i32", 0, 0);
 var $93=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $94=((($92)-($93))|0);
 var $95=($89|0)>($94|0);
 if($95){label=18;break;}else{label=17;break;}
 case 17: 
 var $97=$j;
 var $98=($97|0)<0;
 if($98){label=18;break;}else{label=19;break;}
 case 18: 
 SAFE_HEAP_STORE(4592, 34, "i32", 0);
 label=22;break;
 case 19: 
 var $101=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $102=(($101)|0);
 var $103=$102;
 var $104=SAFE_HEAP_LOAD($103, "i8*", 0, 0);
 var $105=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $106=(($105+20)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32", 0, 0);
 var $108=$j;
 var $109=(Math_imul($107,$108)|0);
 var $110=(($104+$109)|0);
 $cp=$110;
 var $111=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $112=($111|0)!=0;
 if($112){label=20;break;}else{label=21;break;}
 case 20: 
 var $114=$cp;
 var $115=$ritedata;
 var $116=$datatyp;
 var $117=_dtacopy($114,$115,1,1,$116);
 $dp=$117;
 var $118=$riteincr;
 var $119=$ritedata;
 var $120=(($119+$118)|0);
 $ritedata=$120;
 label=21;break;
 case 21: 
 var $122=$outdata;
 var $123=$cp;
 var $124=$datatyp;
 var $125=_dtacopy($122,$123,1,1,$124);
 $outdata=$125;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $128=$i;
 var $129=((($128)+(1))|0);
 $i=$129;
 label=15;break;
 case 24: 
 var $131=$ixcb;
 var $132=_endoper($131);
 var $133=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $134=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $135=$out;
 var $136=_errstop(0,$133,$134,$135);
 $1=$136;
 label=25;break;
 case 25: 
 var $138=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $138;
  default: assert(0, "bad label: " + label);
 }

}


function _indices($ip,$jp,$j,$rank,$org){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$ip;
 $2=$jp;
 $3=$j;
 $4=$rank;
 $5=$org;
 var $6=$3;
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=((($7)-(1))|0);
 SAFE_HEAP_STORE($6, $8, "i32", 0);
 label=2;break;
 case 2: 
 var $10=$3;
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$4;
 var $13=($11|0)<($12|0);
 if($13){label=3;break;}else{label=7;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $16=$1;
 var $17=$3;
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=(($16+($18<<2))|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=((($20)+(1))|0);
 SAFE_HEAP_STORE($19, $21, "i32", 0);
 var $22=$2;
 var $23=$3;
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=(($22+($24<<2))|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=$5;
 var $28=((($26)+($27))|0);
 var $29=($21|0)==($28|0);
 if($29){label=5;break;}else{label=6;break;}
 case 5: 
 var $31=$5;
 var $32=((($31)-(1))|0);
 var $33=$1;
 var $34=$3;
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=((($35)-(1))|0);
 SAFE_HEAP_STORE($34, $36, "i32", 0);
 var $37=(($33+($35<<2))|0);
 SAFE_HEAP_STORE($37, $32, "i32", 0);
 label=4;break;
 case 6: 
 var $39=$3;
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=((($40)+(1))|0);
 SAFE_HEAP_STORE($39, $41, "i32", 0);
 label=2;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _indxsub($indx){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $datacnt;
 var $i;
 var $ip;
 var $out;
 $2=$indx;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=18;break;
 case 3: 
 var $7=$2;
 var $8=($7|0)>=0;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$2;
 var $15=$10;label=6;break;
 case 5: 
 var $12=$2;
 var $13=(((-$12))|0);
 var $15=$13;label=6;break;
 case 6: 
 var $15;
 $datacnt=$15;
 var $16=$datacnt;
 var $17=_getcb(0,$16,5,1,0);
 $out=$17;
 var $18=$datacnt;
 var $19=($18|0)!=0;
 if($19){label=7;break;}else{label=17;break;}
 case 7: 
 var $21=$out;
 var $22=(($21)|0);
 var $23=$22;
 var $24=SAFE_HEAP_LOAD($23, "i32*", 0, 0);
 $ip=$24;
 var $25=$2;
 var $26=($25|0)>0;
 if($26){label=8;break;}else{label=12;break;}
 case 8: 
 var $28=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 $i=$28;
 label=9;break;
 case 9: 
 var $30=$datacnt;
 var $31=((($30)-(1))|0);
 $datacnt=$31;
 var $32=($30|0)!=0;
 if($32){label=10;break;}else{label=11;break;}
 case 10: 
 var $34=$i;
 var $35=((($34)+(1))|0);
 $i=$35;
 var $36=$ip;
 var $37=(($36+4)|0);
 $ip=$37;
 SAFE_HEAP_STORE($36, $34, "i32", 0);
 label=9;break;
 case 11: 
 label=16;break;
 case 12: 
 var $40=$datacnt;
 var $41=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $42=((($40)+($41))|0);
 var $43=((($42)-(1))|0);
 $i=$43;
 label=13;break;
 case 13: 
 var $45=$datacnt;
 var $46=((($45)-(1))|0);
 $datacnt=$46;
 var $47=($45|0)!=0;
 if($47){label=14;break;}else{label=15;break;}
 case 14: 
 var $49=$i;
 var $50=((($49)-(1))|0);
 $i=$50;
 var $51=$ip;
 var $52=(($51+4)|0);
 $ip=$52;
 SAFE_HEAP_STORE($51, $49, "i32", 0);
 label=13;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $56=$out;
 var $57=_errstop(0,0,0,$56);
 $1=$57;
 label=18;break;
 case 18: 
 var $59=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $59;
  default: assert(0, "bad label: " + label);
 }

}


function _ine($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3|0)!=($4|0);
 var $6=($5&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $6;
}


function _inegativ($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=(((-$2))|0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $3;
}


function _innrcom($innrprd,$left,$rite,$laxis,$laxicnt,$lbotcnt,$ltopcnt,$lincr,$raxicnt,$rbotcnt,$rtopcnt,$rincr,$parmtyp,$odata,$ldata,$rdata){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $17;
 var $i;
 var $lax;
 var $rax;
 var $out;
 $2=$innrprd;
 $3=$left;
 $4=$rite;
 $5=$laxis;
 $6=$laxicnt;
 $7=$lbotcnt;
 $8=$ltopcnt;
 $9=$lincr;
 $10=$raxicnt;
 $11=$rbotcnt;
 $12=$rtopcnt;
 $13=$rincr;
 $14=$parmtyp;
 $15=$odata;
 $16=$ldata;
 $17=$rdata;
 var $18=$3;
 var $19=(($18+12)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=($20|0)<2;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 var $23=$3;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)==1;
 if($26){label=12;break;}else{label=3;break;}
 case 3: 
 var $28=$4;
 var $29=(($28+12)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=($30|0)<2;
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 var $33=$4;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=($35|0)==1;
 if($36){label=12;break;}else{label=5;break;}
 case 5: 
 var $38=$3;
 var $39=(($38+16)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32*", 0, 0);
 var $41=$3;
 var $42=(($41+12)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 var $44=(($40+($43<<2))|0);
 var $45=((($44)-(4))|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 $lax=$46;
 var $47=$4;
 var $48=(($47+16)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32*", 0, 0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 $rax=$50;
 var $51=$lax;
 var $52=$rax;
 var $53=($51|0)!=($52|0);
 if($53){label=6;break;}else{label=11;break;}
 case 6: 
 var $55=$2;
 var $56=($55|0)==0;
 if($56){label=7;break;}else{label=8;break;}
 case 7: 
 var $58=$lax;
 var $59=($58|0)==1;
 if($59){label=11;break;}else{label=8;break;}
 case 8: 
 var $61=$rax;
 var $62=($61|0)==1;
 if($62){label=11;break;}else{label=9;break;}
 case 9: 
 var $64=$2;
 var $65=($64|0)==3;
 if($65){label=11;break;}else{label=10;break;}
 case 10: 
 var $67=$3;
 var $68=$4;
 var $69=_errstop(24,$67,$68,0);
 $1=$69;
 label=27;break;
 case 11: 
 label=12;break;
 case 12: 
 var $72=$3;
 var $73=$3;
 var $74=(($73+12)|0);
 var $75=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $76=$5;
 SAFE_HEAP_STORE($76, $75, "i32", 0);
 var $77=$6;
 var $78=$7;
 var $79=$8;
 var $80=_axispre($72,$75,$77,$78,$79);
 $i=$80;
 var $81=$4;
 var $82=$10;
 var $83=$11;
 var $84=$12;
 var $85=_axispre($81,1,$82,$83,$84);
 $i=$85;
 var $86=$6;
 var $87=SAFE_HEAP_LOAD($86, "i32", 0, 0);
 var $88=($87|0)==1;
 if($88){label=13;break;}else{label=14;break;}
 case 13: 
 var $90=$9;
 SAFE_HEAP_STORE($90, 0, "i32", 0);
 var $91=$10;
 var $92=SAFE_HEAP_LOAD($91, "i32", 0, 0);
 var $93=$6;
 SAFE_HEAP_STORE($93, $92, "i32", 0);
 label=15;break;
 case 14: 
 var $95=$7;
 var $96=SAFE_HEAP_LOAD($95, "i32", 0, 0);
 var $97=$9;
 SAFE_HEAP_STORE($97, $96, "i32", 0);
 label=15;break;
 case 15: 
 var $99=$10;
 var $100=SAFE_HEAP_LOAD($99, "i32", 0, 0);
 var $101=($100|0)==1;
 if($101){label=16;break;}else{label=17;break;}
 case 16: 
 var $103=$13;
 SAFE_HEAP_STORE($103, 0, "i32", 0);
 var $104=$6;
 var $105=SAFE_HEAP_LOAD($104, "i32", 0, 0);
 var $106=$10;
 SAFE_HEAP_STORE($106, $105, "i32", 0);
 label=18;break;
 case 17: 
 var $108=$11;
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 var $110=$13;
 SAFE_HEAP_STORE($110, $109, "i32", 0);
 label=18;break;
 case 18: 
 var $112=$2;
 var $113=($112|0)!=3;
 if($113){label=19;break;}else{label=24;break;}
 case 19: 
 var $115=$2;
 var $116=($115|0)!=2;
 if($116){label=20;break;}else{label=21;break;}
 case 20: 
 var $118=$3;
 var $119=(($118+4)|0);
 var $120=SAFE_HEAP_LOAD($119, "i32", 0, 0);
 var $121=$120&110;
 var $122=$14;
 SAFE_HEAP_STORE($122, $121, "i32", 0);
 label=21;break;
 case 21: 
 var $124=$14;
 var $125=SAFE_HEAP_LOAD($124, "i32", 0, 0);
 var $126=($125|0)==8;
 if($126){label=22;break;}else{label=23;break;}
 case 22: 
 var $128=$14;
 SAFE_HEAP_STORE($128, 2, "i32", 0);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $131=$3;
 var $132=$4;
 var $133=$14;
 var $134=SAFE_HEAP_LOAD($133, "i32", 0, 0);
 var $135=_innrprda($131,$132,$134);
 $out=$135;
 var $136=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $137=($136|0)!=0;
 if($137){label=25;break;}else{label=26;break;}
 case 25: 
 var $139=$3;
 var $140=$4;
 var $141=$out;
 var $142=_errstop(0,$139,$140,$141);
 $1=$142;
 label=27;break;
 case 26: 
 var $144=$out;
 var $145=(($144)|0);
 var $146=$145;
 var $147=SAFE_HEAP_LOAD($146, "i8*", 0, 0);
 var $148=$15;
 SAFE_HEAP_STORE($148, $147, "i8*", 0);
 var $149=$3;
 var $150=(($149)|0);
 var $151=$150;
 var $152=SAFE_HEAP_LOAD($151, "i8*", 0, 0);
 var $153=$16;
 SAFE_HEAP_STORE($153, $152, "i8*", 0);
 var $154=$4;
 var $155=(($154)|0);
 var $156=$155;
 var $157=SAFE_HEAP_LOAD($156, "i8*", 0, 0);
 var $158=$17;
 SAFE_HEAP_STORE($158, $157, "i8*", 0);
 var $159=$out;
 $1=$159;
 label=27;break;
 case 27: 
 var $161=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $161;
  default: assert(0, "bad label: " + label);
 }

}


function _innrprda($left,$rite,$ptype){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $dimcb;
 var $out;
 var $ip;
 var $itimesid=sp;
 var $leftsave;
 var $rank;
 var $ritesave;
 $1=$left;
 $2=$rite;
 $3=$ptype;
 $out=0;
 SAFE_HEAP_STORE($itimesid, 1, "i32", 0);
 var $4=$1;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$6&1;
 $leftsave=$7;
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=((($12)-(1))|0);
 SAFE_HEAP_STORE($11, $13, "i32", 0);
 label=3;break;
 case 3: 
 var $15=$2;
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$17&1;
 $ritesave=$18;
 var $19=($18|0)!=0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=$2;
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=((($23)-(1))|0);
 SAFE_HEAP_STORE($22, $24, "i32", 0);
 label=5;break;
 case 5: 
 var $26=_iscalar(-1);
 var $27=$1;
 var $28=_shape($27);
 var $29=_drop($26,$28);
 var $30=_iscalar(1);
 var $31=$2;
 var $32=_shape($31);
 var $33=_drop($30,$32);
 var $34=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $35=_cat($29,$33,$34);
 var $36=_perm($35);
 $dimcb=$36;
 var $37=$dimcb;
 var $38=(($37+8)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 $rank=$39;
 var $40=$dimcb;
 var $41=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $42=_ireduce((72),$itimesid,$40,$41);
 var $43=_ivalue($42);
 var $44=$3;
 var $45=((($44)+(1))|0);
 var $46=$rank;
 var $47=_getcb(0,$43,$45,$46,0);
 $out=$47;
 var $48=$rank;
 var $49=($48|0)>1;
 if($49){label=6;break;}else{label=7;break;}
 case 6: 
 var $51=$out;
 var $52=(($51+16)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32*", 0, 0);
 var $54=$53;
 var $55=$dimcb;
 var $56=(($55)|0);
 var $57=$56;
 var $58=SAFE_HEAP_LOAD($57, "i32*", 0, 0);
 var $59=$58;
 var $60=$rank;
 var $61=_intcopy($54,$59,$60,1);
 var $62=$61;
 $ip=$62;
 label=7;break;
 case 7: 
 var $64=$dimcb;
 var $65=_temp($64);
 var $66=_endoper($65);
 var $67=$leftsave;
 var $68=$1;
 var $69=(($68+4)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=((($70)+($67))|0);
 SAFE_HEAP_STORE($69, $71, "i32", 0);
 var $72=$ritesave;
 var $73=$2;
 var $74=(($73+4)|0);
 var $75=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $76=((($75)+($72))|0);
 SAFE_HEAP_STORE($74, $76, "i32", 0);
 var $77=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $77;
  default: assert(0, "bad label: " + label);
 }

}


function _innrprdp($opera,$operb,$identity,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6=(sp)+(8);
 var $axc;
 var $dty=(sp)+(16);
 var $iw;
 var $jw;
 var $kw;
 var $lxc=(sp)+(24);
 var $lax=(sp)+(32);
 var $lbot=(sp)+(40);
 var $lincr=(sp)+(48);
 var $ltop=(sp)+(56);
 var $mw;
 var $nw;
 var $raxc=(sp)+(64);
 var $rbot=(sp)+(72);
 var $rincr=(sp)+(80);
 var $rtop=(sp)+(88);
 var $type;
 var $od=(sp)+(96);
 var $ip;
 var $jp;
 var $kp;
 var $ld=(sp)+(104);
 var $mp;
 var $np;
 var $rd=(sp)+(112);
 var $tp;
 var $out;
 var $wa=(sp)+(120);
 var $wb=(sp)+(136);
 var $wc=(sp)+(152);
 $2=$opera;
 $3=$operb;
 $4=$identity;
 SAFE_HEAP_STORE($5, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($6, $rite, "%struct.aplcb*", 0);
 var $7=_matchok($5,$6,78);
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=26;break;
 case 3: 
 var $11=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $12=SAFE_HEAP_LOAD($6, "%struct.aplcb*", 0, 0);
 var $13=_innrcom(1,$11,$12,$lax,$lxc,$lbot,$ltop,$lincr,$raxc,$rbot,$rtop,$rincr,$dty,$od,$ld,$rd);
 $out=$13;
 var $14=$out;
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=26;break;
 case 5: 
 var $18=SAFE_HEAP_LOAD($raxc, "i32", 0, 0);
 $axc=$18;
 $iw=0;
 label=6;break;
 case 6: 
 var $20=$iw;
 var $21=SAFE_HEAP_LOAD($ltop, "i32", 0, 0);
 var $22=($20|0)<($21|0);
 if($22){label=7;break;}else{label=25;break;}
 case 7: 
 var $24=SAFE_HEAP_LOAD($ld, "i8*", 0, 0);
 var $25=$iw;
 var $26=$axc;
 var $27=(Math_imul($25,$26)|0);
 var $28=SAFE_HEAP_LOAD($lincr, "i32", 0, 0);
 var $29=(Math_imul($27,$28)|0);
 var $30=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $31=(($30+20)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=(Math_imul($29,$32)|0);
 var $34=(($24+$33)|0);
 $ip=$34;
 $jw=0;
 label=8;break;
 case 8: 
 var $36=$jw;
 var $37=SAFE_HEAP_LOAD($lbot, "i32", 0, 0);
 var $38=($36|0)<($37|0);
 if($38){label=9;break;}else{label=23;break;}
 case 9: 
 var $40=$ip;
 var $41=$jw;
 var $42=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $43=(($42+20)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=(Math_imul($41,$44)|0);
 var $46=(($40+$45)|0);
 $jp=$46;
 $kw=0;
 label=10;break;
 case 10: 
 var $48=$kw;
 var $49=SAFE_HEAP_LOAD($rtop, "i32", 0, 0);
 var $50=($48|0)<($49|0);
 if($50){label=11;break;}else{label=21;break;}
 case 11: 
 var $52=SAFE_HEAP_LOAD($rd, "i8*", 0, 0);
 var $53=$kw;
 var $54=$axc;
 var $55=(Math_imul($53,$54)|0);
 var $56=SAFE_HEAP_LOAD($rincr, "i32", 0, 0);
 var $57=(Math_imul($55,$56)|0);
 var $58=SAFE_HEAP_LOAD($6, "%struct.aplcb*", 0, 0);
 var $59=(($58+20)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=(Math_imul($57,$60)|0);
 var $62=(($52+$61)|0);
 $kp=$62;
 $mw=0;
 label=12;break;
 case 12: 
 var $64=$mw;
 var $65=SAFE_HEAP_LOAD($rbot, "i32", 0, 0);
 var $66=($64|0)<($65|0);
 if($66){label=13;break;}else{label=19;break;}
 case 13: 
 var $68=$kp;
 var $69=$mw;
 var $70=$axc;
 var $71=SAFE_HEAP_LOAD($rincr, "i32", 0, 0);
 var $72=(Math_imul($70,$71)|0);
 var $73=((($69)+($72))|0);
 var $74=SAFE_HEAP_LOAD($6, "%struct.aplcb*", 0, 0);
 var $75=(($74+20)|0);
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $77=(Math_imul($73,$76)|0);
 var $78=(($68+$77)|0);
 $mp=$78;
 var $79=$jp;
 var $80=$axc;
 var $81=SAFE_HEAP_LOAD($lincr, "i32", 0, 0);
 var $82=(Math_imul($80,$81)|0);
 var $83=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $84=(($83+20)|0);
 var $85=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 var $86=(Math_imul($82,$85)|0);
 var $87=(($79+$86)|0);
 $np=$87;
 var $88=(($wa)|0);
 var $89=$88;
 var $90=$4;
 var $91=SAFE_HEAP_LOAD($dty, "i32", 0, 0);
 var $92=_dtacopy($89,$90,1,1,$91);
 $tp=$92;
 $nw=0;
 label=14;break;
 case 14: 
 var $94=$nw;
 var $95=$axc;
 var $96=($94|0)<($95|0);
 if($96){label=15;break;}else{label=17;break;}
 case 15: 
 var $98=$3;
 var $99=SAFE_HEAP_LOAD($lincr, "i32", 0, 0);
 var $100=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $101=(($100+20)|0);
 var $102=SAFE_HEAP_LOAD($101, "i32", 0, 0);
 var $103=(Math_imul($99,$102)|0);
 var $104=$np;
 var $105=(((-$103))|0);
 var $106=(($104+$105)|0);
 $np=$106;
 var $107=SAFE_HEAP_LOAD($rincr, "i32", 0, 0);
 var $108=SAFE_HEAP_LOAD($6, "%struct.aplcb*", 0, 0);
 var $109=(($108+20)|0);
 var $110=SAFE_HEAP_LOAD($109, "i32", 0, 0);
 var $111=(Math_imul($107,$110)|0);
 var $112=$mp;
 var $113=(((-$111))|0);
 var $114=(($112+$113)|0);
 $mp=$114;
 var $115=(($wb)|0);
 var $116=$98;
 FUNCTION_TABLE[$116]($106,$114,$115);
 var $117=(($wc)|0);
 var $118=$117;
 var $119=(($wa)|0);
 var $120=$119;
 var $121=SAFE_HEAP_LOAD($dty, "i32", 0, 0);
 var $122=_dtacopy($118,$120,1,1,$121);
 $tp=$122;
 var $123=$2;
 var $124=(($wb)|0);
 var $125=(($wc)|0);
 var $126=(($wa)|0);
 var $127=$123;
 FUNCTION_TABLE[$127]($124,$125,$126);
 label=16;break;
 case 16: 
 var $129=$nw;
 var $130=((($129)+(1))|0);
 $nw=$130;
 label=14;break;
 case 17: 
 var $132=SAFE_HEAP_LOAD($od, "i8*", 0, 0);
 var $133=(($wa)|0);
 var $134=$133;
 var $135=SAFE_HEAP_LOAD($dty, "i32", 0, 0);
 var $136=_dtacopy($132,$134,1,1,$135);
 SAFE_HEAP_STORE($od, $136, "i8*", 0);
 label=18;break;
 case 18: 
 var $138=$mw;
 var $139=((($138)+(1))|0);
 $mw=$139;
 label=12;break;
 case 19: 
 label=20;break;
 case 20: 
 var $142=$kw;
 var $143=((($142)+(1))|0);
 $kw=$143;
 label=10;break;
 case 21: 
 label=22;break;
 case 22: 
 var $146=$jw;
 var $147=((($146)+(1))|0);
 $jw=$147;
 label=8;break;
 case 23: 
 label=24;break;
 case 24: 
 var $150=$iw;
 var $151=((($150)+(1))|0);
 $iw=$151;
 label=6;break;
 case 25: 
 var $153=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $154=SAFE_HEAP_LOAD($6, "%struct.aplcb*", 0, 0);
 var $155=$out;
 var $156=_errstop(0,$153,$154,$155);
 $1=$156;
 label=26;break;
 case 26: 
 var $158=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $158;
  default: assert(0, "bad label: " + label);
 }

}


function _innrprdx($opera,$tf,$identity,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 var $datatyp=sp;
 var $i;
 var $j;
 var $k;
 var $laxicnt=(sp)+(8);
 var $laxis=(sp)+(16);
 var $lbotcnt=(sp)+(24);
 var $lincr=(sp)+(32);
 var $ltopcnt=(sp)+(40);
 var $m;
 var $n;
 var $raxicnt=(sp)+(48);
 var $rbotcnt=(sp)+(56);
 var $rincr=(sp)+(64);
 var $rtopcnt=(sp)+(72);
 var $dataout=(sp)+(80);
 var $dtf=(sp)+(88);
 var $wrka=(sp)+(96);
 var $wrkb=(sp)+(104);
 var $ldata=(sp)+(112);
 var $rdata=(sp)+(120);
 $2=$opera;
 $3=$tf;
 $4=$identity;
 $5=$left;
 $6=$rite;
 SAFE_HEAP_STORE($datatyp, 2, "i32", 0);
 var $7=$5;
 var $8=$6;
 var $9=$dataout;
 var $10=_innrcom(2,$7,$8,$laxis,$laxicnt,$lbotcnt,$ltopcnt,$lincr,$raxicnt,$rbotcnt,$rtopcnt,$rincr,$datatyp,$9,$ldata,$rdata);
 $out=$10;
 var $11=$out;
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=24;break;
 case 3: 
 var $15=$3;
 var $16=($15|0);
 SAFE_HEAP_STORE($dtf, $16, "double", 0);
 $i=0;
 label=4;break;
 case 4: 
 var $18=$i;
 var $19=SAFE_HEAP_LOAD($ltopcnt, "i32", 0, 0);
 var $20=($18|0)<($19|0);
 if($20){label=5;break;}else{label=23;break;}
 case 5: 
 $j=0;
 label=6;break;
 case 6: 
 var $23=$j;
 var $24=SAFE_HEAP_LOAD($lbotcnt, "i32", 0, 0);
 var $25=($23|0)<($24|0);
 if($25){label=7;break;}else{label=21;break;}
 case 7: 
 $k=0;
 label=8;break;
 case 8: 
 var $28=$k;
 var $29=SAFE_HEAP_LOAD($rtopcnt, "i32", 0, 0);
 var $30=($28|0)<($29|0);
 if($30){label=9;break;}else{label=19;break;}
 case 9: 
 $m=0;
 label=10;break;
 case 10: 
 var $33=$m;
 var $34=SAFE_HEAP_LOAD($rbotcnt, "i32", 0, 0);
 var $35=($33|0)<($34|0);
 if($35){label=11;break;}else{label=17;break;}
 case 11: 
 var $37=$4;
 SAFE_HEAP_STORE($wrka, $37, "double", 0);
 $n=0;
 label=12;break;
 case 12: 
 var $39=$n;
 var $40=SAFE_HEAP_LOAD($raxicnt, "i32", 0, 0);
 var $41=($39|0)<($40|0);
 if($41){label=13;break;}else{label=15;break;}
 case 13: 
 var $43=SAFE_HEAP_LOAD($wrka, "double", 0, 0);
 SAFE_HEAP_STORE($wrkb, $43, "double", 0);
 var $44=$2;
 FUNCTION_TABLE[$44]($dtf,$wrkb,$wrka);
 label=14;break;
 case 14: 
 var $46=$n;
 var $47=((($46)+(1))|0);
 $n=$47;
 label=12;break;
 case 15: 
 var $49=SAFE_HEAP_LOAD($wrka, "double", 0, 0);
 var $50=SAFE_HEAP_LOAD($dataout, "double*", 0, 0);
 var $51=(($50+8)|0);
 SAFE_HEAP_STORE($dataout, $51, "double*", 0);
 SAFE_HEAP_STORE($50, $49, "double", 0);
 label=16;break;
 case 16: 
 var $53=$m;
 var $54=((($53)+(1))|0);
 $m=$54;
 label=10;break;
 case 17: 
 label=18;break;
 case 18: 
 var $57=$k;
 var $58=((($57)+(1))|0);
 $k=$58;
 label=8;break;
 case 19: 
 label=20;break;
 case 20: 
 var $61=$j;
 var $62=((($61)+(1))|0);
 $j=$62;
 label=6;break;
 case 21: 
 label=22;break;
 case 22: 
 var $65=$i;
 var $66=((($65)+(1))|0);
 $i=$66;
 label=4;break;
 case 23: 
 var $68=$5;
 var $69=$6;
 var $70=$out;
 var $71=_errstop(0,$68,$69,$70);
 $1=$71;
 label=24;break;
 case 24: 
 var $73=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $73;
  default: assert(0, "bad label: " + label);
 }

}


function _inor($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=($3|0)!=0;
 var $5=($4&1);
 var $6=$2;
 var $7=($6|0)!=0;
 var $8=($7&1);
 var $9=$5|$8;
 var $10=($9|0)!=0;
 var $11=$10^1;
 var $12=($11&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
}


function _inorp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=($5|0)!=0;
 var $7=($6&1);
 var $8=$2;
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=($9|0)!=0;
 var $11=($10&1);
 var $12=$7|$11;
 var $13=($12|0)!=0;
 var $14=$13^1;
 var $15=($14&1);
 var $16=$3;
 SAFE_HEAP_STORE($16, $15, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _inot($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=($2|0)==0;
 var $4=($3&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $4;
}


function _intcopy($to,$from,$cnt,$incr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$to;
 $2=$from;
 $3=$cnt;
 $4=$incr;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=((($6)-(1))|0);
 $3=$7;
 var $8=($6|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=$2;
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$1;
 var $13=(($12+4)|0);
 $1=$13;
 SAFE_HEAP_STORE($12, $11, "i32", 0);
 var $14=$4;
 var $15=$2;
 var $16=(($15+($14<<2))|0);
 $2=$16;
 label=2;break;
 case 4: 
 var $18=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }

}


function _integer($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $op;
 var $out;
 $2=$rite;
 label=2;break;
 case 2: 
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 label=11;break;
 case 4: 
 var $8=$2;
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=$2;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=_getcb(0,$10,5,$13,0);
 $out=$14;
 var $15=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 label=11;break;
 case 6: 
 var $19=$2;
 var $20=(($19+12)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)>1;
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 var $24=$out;
 var $25=(($24+16)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32*", 0, 0);
 var $27=$26;
 var $28=$2;
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$30;
 var $32=$2;
 var $33=(($32+12)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=_intcopy($27,$31,$34,1);
 var $36=$35;
 $op=$36;
 label=8;break;
 case 8: 
 var $38=$out;
 var $39=(($38+8)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 var $41=($40|0)==0;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 label=11;break;
 case 10: 
 var $44=$2;
 var $45=$out;
 var $46=_integes($44,$45);
 $1=$46;
 label=12;break;
 case 11: 
 var $48=$2;
 var $49=$out;
 var $50=_errstop(0,0,$48,$49);
 $1=$50;
 label=12;break;
 case 12: 
 var $52=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $52;
  default: assert(0, "bad label: " + label);
 }

}


function _integes($rite,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ip;
 var $wrk;
 var $fin;
 var $fwrk=sp;
 var $i;
 var $op;
 $1=$rite;
 $2=$out;
 var $3=$2;
 var $4=(($3+8)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 $i=$5;
 var $6=$2;
 var $7=(($6)|0);
 var $8=$7;
 var $9=SAFE_HEAP_LOAD($8, "i32*", 0, 0);
 $op=$9;
 var $10=$1;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&110;
 switch(($13|0)){case 4:{ label=2;break;}case 8:{ label=3;break;}case 2:{ label=4;break;}case 64:{ label=5;break;}case 32:{ label=9;break;}default:{label=23;break;}}break;
 case 2: 
 var $15=$op;
 var $16=$15;
 var $17=$1;
 var $18=(($17)|0);
 var $19=$18;
 var $20=SAFE_HEAP_LOAD($19, "i32*", 0, 0);
 var $21=$20;
 var $22=$i;
 var $23=_intcopy($16,$21,$22,1);
 label=24;break;
 case 3: 
 SAFE_HEAP_STORE(4592, 19, "i32", 0);
 label=24;break;
 case 4: 
 var $26=$op;
 var $27=$1;
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "double*", 0, 0);
 var $31=$i;
 _inttran($26,$30,$31,1);
 label=24;break;
 case 5: 
 var $33=$1;
 var $34=(($33)|0);
 var $35=$34;
 var $36=SAFE_HEAP_LOAD($35, "double*", 0, 0);
 $fin=$36;
 label=6;break;
 case 6: 
 var $38=$i;
 var $39=((($38)-(1))|0);
 $i=$39;
 var $40=($38|0)!=0;
 if($40){label=7;break;}else{label=8;break;}
 case 7: 
 var $42=$fin;
 var $43=(($fwrk)|0);
 _dabsx($42,$43);
 var $44=$fin;
 var $45=(($44+16)|0);
 $fin=$45;
 var $46=(($fwrk)|0);
 var $47=SAFE_HEAP_LOAD($46, "double", 0, 0);
 var $48=(($47)&-1);
 var $49=$op;
 var $50=(($49+4)|0);
 $op=$50;
 SAFE_HEAP_STORE($49, $48, "i32", 0);
 label=6;break;
 case 8: 
 label=24;break;
 case 9: 
 var $53=$1;
 var $54=(($53)|0);
 var $55=$54;
 var $56=SAFE_HEAP_LOAD($55, "%struct.aplcb**", 0, 0);
 $ip=$56;
 label=10;break;
 case 10: 
 var $58=$i;
 var $59=((($58)-(1))|0);
 $i=$59;
 var $60=($58|0)!=0;
 if($60){label=11;break;}else{var $65=0;label=12;break;}
 case 11: 
 var $62=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $63=($62|0)==0;
 var $65=$63;label=12;break;
 case 12: 
 var $65;
 if($65){label=13;break;}else{label=22;break;}
 case 13: 
 var $67=$ip;
 var $68=(($67+4)|0);
 $ip=$68;
 var $69=SAFE_HEAP_LOAD($67, "%struct.aplcb*", 0, 0);
 $wrk=$69;
 var $70=$wrk;
 var $71=(($70+8)|0);
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=($72|0)>1;
 if($73){label=14;break;}else{label=15;break;}
 case 14: 
 SAFE_HEAP_STORE(4592, 125, "i32", 0);
 label=22;break;
 case 15: 
 var $76=$wrk;
 var $77=(($76+4)|0);
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 var $79=$78&78;
 if(($79|0)==4){ label=16;break;}else if(($79|0)==64){ label=17;break;}else if(($79|0)==8){ label=18;break;}else if(($79|0)==2){ label=19;break;}else{label=20;break;}
 case 16: 
 var $81=$wrk;
 var $82=(($81)|0);
 var $83=$82;
 var $84=SAFE_HEAP_LOAD($83, "i32*", 0, 0);
 var $85=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 var $86=$op;
 var $87=(($86+4)|0);
 $op=$87;
 SAFE_HEAP_STORE($86, $85, "i32", 0);
 label=21;break;
 case 17: 
 var $89=$wrk;
 var $90=(($89)|0);
 var $91=$90;
 var $92=SAFE_HEAP_LOAD($91, "double*", 0, 0);
 var $93=(($fwrk)|0);
 _dabsx($92,$93);
 var $94=(($fwrk)|0);
 var $95=SAFE_HEAP_LOAD($94, "double", 0, 0);
 var $96=(($95)&-1);
 var $97=$op;
 var $98=(($97+4)|0);
 $op=$98;
 SAFE_HEAP_STORE($97, $96, "i32", 0);
 label=21;break;
 case 18: 
 SAFE_HEAP_STORE(4592, 19, "i32", 0);
 label=21;break;
 case 19: 
 var $101=$op;
 var $102=(($101+4)|0);
 $op=$102;
 var $103=$wrk;
 var $104=(($103)|0);
 var $105=$104;
 var $106=SAFE_HEAP_LOAD($105, "double*", 0, 0);
 _inttran($101,$106,1,1);
 label=21;break;
 case 20: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=21;break;
 case 21: 
 label=10;break;
 case 22: 
 label=24;break;
 case 23: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=24;break;
 case 24: 
 var $112=$1;
 var $113=$2;
 var $114=_errstop(0,0,$112,$113);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $114;
  default: assert(0, "bad label: " + label);
 }

}


function _intone($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$3;
 SAFE_HEAP_STORE($4, 1, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _inttran($to,$from,$count,$incr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $j;
 var $f;
 var $g;
 $1=$to;
 $2=$from;
 $3=$count;
 $4=$incr;
 label=2;break;
 case 2: 
 var $6=$3;
 var $7=((($6)-(1))|0);
 $3=$7;
 var $8=($6|0)!=0;
 if($8){label=3;break;}else{label=9;break;}
 case 3: 
 var $10=$2;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 $f=$11;
 var $12=0>$11;
 if($12){label=4;break;}else{label=7;break;}
 case 4: 
 var $14=$f;
 var $15=$f;
 var $16=(($15)&-1);
 $j=$16;
 var $17=($16|0);
 $g=$17;
 var $18=$14!=$17;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=$j;
 var $21=((($20)-(1))|0);
 $j=$21;
 label=6;break;
 case 6: 
 label=8;break;
 case 7: 
 var $24=$f;
 var $25=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $26=($24)+($25);
 var $27=(($26)&-1);
 $j=$27;
 label=8;break;
 case 8: 
 var $29=$j;
 var $30=$1;
 var $31=(($30+4)|0);
 $1=$31;
 SAFE_HEAP_STORE($30, $29, "i32", 0);
 var $32=$4;
 var $33=$2;
 var $34=(($33+($32<<3))|0);
 $2=$34;
 label=2;break;
 case 9: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _intzero($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$3;
 SAFE_HEAP_STORE($4, 0, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _invert($m,$rows){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $j;
 var $k;
 var $n;
 var $p;
 var $logden;
 var $logmax;
 var $logmin;
 var $w;
 var $x;
 var $y;
 var $z;
 var $v;
 var $t;
 var $s;
 $2=$m;
 $3=$rows;
 var $4=Math_log(10);
 $logden=$4;
 $logmin=0;
 $logmax=0;
 var $5=$3;
 var $6=$3;
 var $7=(Math_imul($5,$6)|0);
 var $8=($7<<3);
 var $9=_aplmall($8);
 var $10=$9;
 $z=$10;
 var $11=$z;
 var $12=$3;
 var $13=$3;
 var $14=(Math_imul($12,$13)|0);
 var $15=(($11+($14<<3))|0);
 $t=$15;
 var $16=$z;
 $v=$16;
 label=2;break;
 case 2: 
 var $18=$v;
 var $19=$t;
 var $20=($18>>>0)<($19>>>0);
 if($20){label=3;break;}else{label=5;break;}
 case 3: 
 var $22=$v;
 SAFE_HEAP_STORE($22, 0, "double", 0);
 label=4;break;
 case 4: 
 var $24=$v;
 var $25=(($24+8)|0);
 $v=$25;
 label=2;break;
 case 5: 
 var $27=$z;
 $v=$27;
 label=6;break;
 case 6: 
 var $29=$v;
 var $30=$t;
 var $31=($29>>>0)<($30>>>0);
 if($31){label=7;break;}else{label=9;break;}
 case 7: 
 var $33=$v;
 SAFE_HEAP_STORE($33, 1, "double", 0);
 label=8;break;
 case 8: 
 var $35=$3;
 var $36=((($35)+(1))|0);
 var $37=$v;
 var $38=(($37+($36<<3))|0);
 $v=$38;
 label=6;break;
 case 9: 
 var $40=$3;
 var $41=$3;
 var $42=(Math_imul($40,$41)|0);
 var $43=($42<<3);
 var $44=_aplmall($43);
 var $45=$44;
 $t=$45;
 $i=0;
 label=10;break;
 case 10: 
 var $47=$i;
 var $48=$3;
 var $49=$3;
 var $50=(Math_imul($48,$49)|0);
 var $51=($47|0)<($50|0);
 if($51){label=11;break;}else{label=13;break;}
 case 11: 
 var $53=$2;
 var $54=$i;
 var $55=(($53+($54<<3))|0);
 var $56=SAFE_HEAP_LOAD($55, "double", 0, 0);
 var $57=$t;
 var $58=$i;
 var $59=(($57+($58<<3))|0);
 SAFE_HEAP_STORE($59, $56, "double", 0);
 label=12;break;
 case 12: 
 var $61=$i;
 var $62=((($61)+(1))|0);
 $i=$62;
 label=10;break;
 case 13: 
 var $64=$t;
 $2=$64;
 $i=0;
 label=14;break;
 case 14: 
 var $66=$i;
 var $67=$3;
 var $68=($66|0)<($67|0);
 if($68){label=15;break;}else{label=89;break;}
 case 15: 
 var $70=$i;
 var $71=$3;
 var $72=(Math_imul($70,$71)|0);
 $n=$72;
 $k=-1;
 $w=0;
 var $73=$i;
 $j=$73;
 label=16;break;
 case 16: 
 var $75=$j;
 var $76=$3;
 var $77=($75|0)<($76|0);
 if($77){label=17;break;}else{label=24;break;}
 case 17: 
 var $79=$2;
 var $80=$j;
 var $81=$3;
 var $82=(Math_imul($80,$81)|0);
 var $83=(($79+($82<<3))|0);
 var $84=$i;
 var $85=(($83+($84<<3))|0);
 var $86=SAFE_HEAP_LOAD($85, "double", 0, 0);
 $x=$86;
 var $87=$x;
 var $88=0>$87;
 if($88){label=18;break;}else{label=19;break;}
 case 18: 
 var $90=$x;
 var $91=(-$90);
 var $95=$91;label=20;break;
 case 19: 
 var $93=$x;
 var $95=$93;label=20;break;
 case 20: 
 var $95;
 $x=$95;
 var $96=$x;
 var $97=$w;
 var $98=$96>$97;
 if($98){label=21;break;}else{label=22;break;}
 case 21: 
 var $100=$j;
 $k=$100;
 var $101=$x;
 $w=$101;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $104=$j;
 var $105=((($104)+(1))|0);
 $j=$105;
 label=16;break;
 case 24: 
 var $107=$w;
 var $108=Math_log($107);
 var $109=$logden;
 var $110=($108)/($109);
 $y=$110;
 var $111=$i;
 var $112=($111|0)==0;
 if($112){label=25;break;}else{label=26;break;}
 case 25: 
 var $114=$y;
 $logmax=$114;
 var $115=$y;
 $logmin=$115;
 label=31;break;
 case 26: 
 var $117=$y;
 var $118=$logmax;
 var $119=$117>$118;
 if($119){label=27;break;}else{label=28;break;}
 case 27: 
 var $121=$y;
 $logmax=$121;
 label=28;break;
 case 28: 
 var $123=$y;
 var $124=$logmin;
 var $125=$123<$124;
 if($125){label=29;break;}else{label=30;break;}
 case 29: 
 var $127=$y;
 $logmin=$127;
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $130=$k;
 var $131=($130|0)==-1;
 if($131){label=34;break;}else{label=32;break;}
 case 32: 
 var $133=$w;
 var $134=$133<(0.00001);
 if($134){label=34;break;}else{label=33;break;}
 case 33: 
 var $136=$logmax;
 var $137=$logmin;
 var $138=($136)-($137);
 var $139=$138>8;
 if($139){label=34;break;}else{label=35;break;}
 case 34: 
 var $141=$2;
 var $142=$141;
 _aplfree($142);
 var $143=$z;
 var $144=$143;
 _aplfree($144);
 $1=0;
 label=90;break;
 case 35: 
 var $146=$k;
 var $147=$i;
 var $148=($146|0)!=($147|0);
 if($148){label=36;break;}else{label=45;break;}
 case 36: 
 var $150=$k;
 var $151=$3;
 var $152=(Math_imul($150,$151)|0);
 $p=$152;
 var $153=$i;
 $j=$153;
 label=37;break;
 case 37: 
 var $155=$j;
 var $156=$3;
 var $157=($155|0)<($156|0);
 if($157){label=38;break;}else{label=40;break;}
 case 38: 
 var $159=$2;
 var $160=$n;
 var $161=(($159+($160<<3))|0);
 var $162=$j;
 var $163=(($161+($162<<3))|0);
 $t=$163;
 var $164=SAFE_HEAP_LOAD($163, "double", 0, 0);
 $w=$164;
 var $165=$2;
 var $166=$p;
 var $167=(($165+($166<<3))|0);
 var $168=$j;
 var $169=(($167+($168<<3))|0);
 $v=$169;
 var $170=SAFE_HEAP_LOAD($169, "double", 0, 0);
 var $171=$t;
 SAFE_HEAP_STORE($171, $170, "double", 0);
 var $172=$w;
 var $173=$v;
 SAFE_HEAP_STORE($173, $172, "double", 0);
 label=39;break;
 case 39: 
 var $175=$j;
 var $176=((($175)+(1))|0);
 $j=$176;
 label=37;break;
 case 40: 
 $j=0;
 label=41;break;
 case 41: 
 var $179=$j;
 var $180=$3;
 var $181=($179|0)<($180|0);
 if($181){label=42;break;}else{label=44;break;}
 case 42: 
 var $183=$z;
 var $184=$n;
 var $185=(($183+($184<<3))|0);
 var $186=$j;
 var $187=(($185+($186<<3))|0);
 $t=$187;
 var $188=SAFE_HEAP_LOAD($187, "double", 0, 0);
 $w=$188;
 var $189=$z;
 var $190=$p;
 var $191=(($189+($190<<3))|0);
 var $192=$j;
 var $193=(($191+($192<<3))|0);
 $v=$193;
 var $194=SAFE_HEAP_LOAD($193, "double", 0, 0);
 var $195=$t;
 SAFE_HEAP_STORE($195, $194, "double", 0);
 var $196=$w;
 var $197=$v;
 SAFE_HEAP_STORE($197, $196, "double", 0);
 label=43;break;
 case 43: 
 var $199=$j;
 var $200=((($199)+(1))|0);
 $j=$200;
 label=41;break;
 case 44: 
 label=45;break;
 case 45: 
 var $203=$2;
 var $204=$n;
 var $205=(($203+($204<<3))|0);
 var $206=$i;
 var $207=(($205+($206<<3))|0);
 $t=$207;
 var $208=SAFE_HEAP_LOAD($207, "double", 0, 0);
 var $209=$208!=1;
 if($209){label=46;break;}else{label=55;break;}
 case 46: 
 var $211=$t;
 var $212=SAFE_HEAP_LOAD($211, "double", 0, 0);
 $w=$212;
 var $213=$i;
 $j=$213;
 label=47;break;
 case 47: 
 var $215=$j;
 var $216=$3;
 var $217=($215|0)<($216|0);
 if($217){label=48;break;}else{label=50;break;}
 case 48: 
 var $219=$w;
 var $220=$2;
 var $221=$n;
 var $222=(($220+($221<<3))|0);
 var $223=$j;
 var $224=(($222+($223<<3))|0);
 var $225=SAFE_HEAP_LOAD($224, "double", 0, 0);
 var $226=($225)/($219);
 SAFE_HEAP_STORE($224, $226, "double", 0);
 label=49;break;
 case 49: 
 var $228=$j;
 var $229=((($228)+(1))|0);
 $j=$229;
 label=47;break;
 case 50: 
 $j=0;
 label=51;break;
 case 51: 
 var $232=$j;
 var $233=$3;
 var $234=($232|0)<($233|0);
 if($234){label=52;break;}else{label=54;break;}
 case 52: 
 var $236=$w;
 var $237=$z;
 var $238=$n;
 var $239=(($237+($238<<3))|0);
 var $240=$j;
 var $241=(($239+($240<<3))|0);
 var $242=SAFE_HEAP_LOAD($241, "double", 0, 0);
 var $243=($242)/($236);
 SAFE_HEAP_STORE($241, $243, "double", 0);
 label=53;break;
 case 53: 
 var $245=$j;
 var $246=((($245)+(1))|0);
 $j=$246;
 label=51;break;
 case 54: 
 label=55;break;
 case 55: 
 var $249=$i;
 var $250=$3;
 var $251=((($250)-(1))|0);
 var $252=($249|0)<($251|0);
 if($252){label=56;break;}else{label=71;break;}
 case 56: 
 var $254=$i;
 var $255=((($254)+(1))|0);
 $j=$255;
 label=57;break;
 case 57: 
 var $257=$j;
 var $258=$3;
 var $259=($257|0)<($258|0);
 if($259){label=58;break;}else{label=70;break;}
 case 58: 
 var $261=$2;
 var $262=$j;
 var $263=$3;
 var $264=(Math_imul($262,$263)|0);
 var $265=(($261+($264<<3))|0);
 var $266=$i;
 var $267=(($265+($266<<3))|0);
 $t=$267;
 var $268=SAFE_HEAP_LOAD($267, "double", 0, 0);
 $w=$268;
 var $269=$268!=0;
 if($269){label=59;break;}else{label=68;break;}
 case 59: 
 var $271=$t;
 SAFE_HEAP_STORE($271, 0, "double", 0);
 var $272=$2;
 var $273=$j;
 var $274=$3;
 var $275=(Math_imul($273,$274)|0);
 var $276=(($272+($275<<3))|0);
 $t=$276;
 var $277=$2;
 var $278=$n;
 var $279=(($277+($278<<3))|0);
 $v=$279;
 var $280=$i;
 var $281=((($280)+(1))|0);
 $k=$281;
 label=60;break;
 case 60: 
 var $283=$k;
 var $284=$3;
 var $285=($283|0)<($284|0);
 if($285){label=61;break;}else{label=63;break;}
 case 61: 
 var $287=$t;
 var $288=$k;
 var $289=(($287+($288<<3))|0);
 $s=$289;
 var $290=$s;
 var $291=SAFE_HEAP_LOAD($290, "double", 0, 0);
 var $292=$w;
 var $293=($291)/($292);
 var $294=$v;
 var $295=$k;
 var $296=(($294+($295<<3))|0);
 var $297=SAFE_HEAP_LOAD($296, "double", 0, 0);
 var $298=($293)-($297);
 var $299=$s;
 SAFE_HEAP_STORE($299, $298, "double", 0);
 label=62;break;
 case 62: 
 var $301=$k;
 var $302=((($301)+(1))|0);
 $k=$302;
 label=60;break;
 case 63: 
 var $304=$z;
 var $305=$j;
 var $306=$3;
 var $307=(Math_imul($305,$306)|0);
 var $308=(($304+($307<<3))|0);
 $t=$308;
 var $309=$z;
 var $310=$n;
 var $311=(($309+($310<<3))|0);
 $v=$311;
 $k=0;
 label=64;break;
 case 64: 
 var $313=$k;
 var $314=$3;
 var $315=($313|0)<($314|0);
 if($315){label=65;break;}else{label=67;break;}
 case 65: 
 var $317=$t;
 var $318=$k;
 var $319=(($317+($318<<3))|0);
 $s=$319;
 var $320=$s;
 var $321=SAFE_HEAP_LOAD($320, "double", 0, 0);
 var $322=$w;
 var $323=($321)/($322);
 var $324=$v;
 var $325=$k;
 var $326=(($324+($325<<3))|0);
 var $327=SAFE_HEAP_LOAD($326, "double", 0, 0);
 var $328=($323)-($327);
 var $329=$s;
 SAFE_HEAP_STORE($329, $328, "double", 0);
 label=66;break;
 case 66: 
 var $331=$k;
 var $332=((($331)+(1))|0);
 $k=$332;
 label=64;break;
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 var $336=$j;
 var $337=((($336)+(1))|0);
 $j=$337;
 label=57;break;
 case 70: 
 label=71;break;
 case 71: 
 var $340=$i;
 var $341=($340|0)>0;
 if($341){label=72;break;}else{label=87;break;}
 case 72: 
 var $343=$i;
 var $344=((($343)-(1))|0);
 $j=$344;
 label=73;break;
 case 73: 
 var $346=$j;
 var $347=($346|0)>=0;
 if($347){label=74;break;}else{label=86;break;}
 case 74: 
 var $349=$2;
 var $350=$j;
 var $351=$3;
 var $352=(Math_imul($350,$351)|0);
 var $353=(($349+($352<<3))|0);
 var $354=$i;
 var $355=(($353+($354<<3))|0);
 $t=$355;
 var $356=SAFE_HEAP_LOAD($355, "double", 0, 0);
 $w=$356;
 var $357=$356!=0;
 if($357){label=75;break;}else{label=84;break;}
 case 75: 
 var $359=$t;
 SAFE_HEAP_STORE($359, 0, "double", 0);
 var $360=$2;
 var $361=$j;
 var $362=$3;
 var $363=(Math_imul($361,$362)|0);
 var $364=(($360+($363<<3))|0);
 $t=$364;
 var $365=$2;
 var $366=$n;
 var $367=(($365+($366<<3))|0);
 $v=$367;
 var $368=$i;
 var $369=((($368)+(1))|0);
 $k=$369;
 label=76;break;
 case 76: 
 var $371=$k;
 var $372=$3;
 var $373=($371|0)<($372|0);
 if($373){label=77;break;}else{label=79;break;}
 case 77: 
 var $375=$t;
 var $376=$k;
 var $377=(($375+($376<<3))|0);
 $s=$377;
 var $378=$s;
 var $379=SAFE_HEAP_LOAD($378, "double", 0, 0);
 var $380=$w;
 var $381=$v;
 var $382=$k;
 var $383=(($381+($382<<3))|0);
 var $384=SAFE_HEAP_LOAD($383, "double", 0, 0);
 var $385=($380)*($384);
 var $386=($379)-($385);
 var $387=$s;
 SAFE_HEAP_STORE($387, $386, "double", 0);
 label=78;break;
 case 78: 
 var $389=$k;
 var $390=((($389)+(1))|0);
 $k=$390;
 label=76;break;
 case 79: 
 var $392=$z;
 var $393=$j;
 var $394=$3;
 var $395=(Math_imul($393,$394)|0);
 var $396=(($392+($395<<3))|0);
 $t=$396;
 var $397=$z;
 var $398=$n;
 var $399=(($397+($398<<3))|0);
 $v=$399;
 $k=0;
 label=80;break;
 case 80: 
 var $401=$k;
 var $402=$3;
 var $403=($401|0)<($402|0);
 if($403){label=81;break;}else{label=83;break;}
 case 81: 
 var $405=$t;
 var $406=$k;
 var $407=(($405+($406<<3))|0);
 $s=$407;
 var $408=$s;
 var $409=SAFE_HEAP_LOAD($408, "double", 0, 0);
 var $410=$w;
 var $411=$v;
 var $412=$k;
 var $413=(($411+($412<<3))|0);
 var $414=SAFE_HEAP_LOAD($413, "double", 0, 0);
 var $415=($410)*($414);
 var $416=($409)-($415);
 var $417=$s;
 SAFE_HEAP_STORE($417, $416, "double", 0);
 label=82;break;
 case 82: 
 var $419=$k;
 var $420=((($419)+(1))|0);
 $k=$420;
 label=80;break;
 case 83: 
 label=84;break;
 case 84: 
 label=85;break;
 case 85: 
 var $424=$j;
 var $425=((($424)-(1))|0);
 $j=$425;
 label=73;break;
 case 86: 
 label=87;break;
 case 87: 
 label=88;break;
 case 88: 
 var $429=$i;
 var $430=((($429)+(1))|0);
 $i=$430;
 label=14;break;
 case 89: 
 var $432=$2;
 var $433=$432;
 _aplfree($433);
 var $434=$z;
 $1=$434;
 label=90;break;
 case 90: 
 var $436=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $436;
  default: assert(0, "bad label: " + label);
 }

}


function _ior($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=($3|0)!=0;
 var $5=($4&1);
 var $6=$2;
 var $7=($6|0)!=0;
 var $8=($7&1);
 var $9=$5|$8;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $9;
}


function _iorder($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $a;
 var $b;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $l;
 var $m;
 var $n;
 var $op;
 var $p;
 var $q;
 var $t;
 $1=$rite;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 var $5=($4|0)<2;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 label=15;break;
 case 3: 
 var $8=$1;
 var $9=(($8)|0);
 var $10=$9;
 var $11=SAFE_HEAP_LOAD($10, "i32*", 0, 0);
 $ip=$11;
 var $12=$1;
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 $n=$14;
 var $15=$n;
 var $16=(((($15|0))/(2))&-1);
 $m=$16;
 label=4;break;
 case 4: 
 var $18=$m;
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=15;break;}
 case 5: 
 var $21=$n;
 var $22=$m;
 var $23=((($21)-($22))|0);
 $k=$23;
 $j=0;
 label=6;break;
 case 6: 
 var $25=$j;
 var $26=$k;
 var $27=($25|0)<($26|0);
 if($27){label=7;break;}else{label=14;break;}
 case 7: 
 var $29=$j;
 $i=$29;
 label=8;break;
 case 8: 
 var $31=$i;
 var $32=$m;
 var $33=((($31)+($32))|0);
 $l=$33;
 var $34=$ip;
 var $35=$i;
 var $36=(($34+($35<<2))|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 $a=$37;
 var $38=$ip;
 var $39=$l;
 var $40=(($38+($39<<2))|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 $b=$41;
 var $42=$a;
 var $43=$b;
 var $44=($42|0)>($43|0);
 if($44){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=$b;
 var $47=$ip;
 var $48=$i;
 var $49=(($47+($48<<2))|0);
 SAFE_HEAP_STORE($49, $46, "i32", 0);
 var $50=$a;
 var $51=$ip;
 var $52=$l;
 var $53=(($51+($52<<2))|0);
 SAFE_HEAP_STORE($53, $50, "i32", 0);
 label=10;break;
 case 10: 
 var $55=$m;
 var $56=$i;
 var $57=((($56)-($55))|0);
 $i=$57;
 label=11;break;
 case 11: 
 var $59=$i;
 var $60=($59|0)>=0;
 if($60){label=8;break;}else{label=12;break;}
 case 12: 
 label=13;break;
 case 13: 
 var $63=$j;
 var $64=((($63)+(1))|0);
 $j=$64;
 label=6;break;
 case 14: 
 var $66=$m;
 var $67=(((($66|0))/(2))&-1);
 $m=$67;
 label=4;break;
 case 15: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _iorp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=($5|0)!=0;
 var $7=($6&1);
 var $8=$2;
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=($9|0)!=0;
 var $11=($10&1);
 var $12=$7|$11;
 var $13=$3;
 SAFE_HEAP_STORE($13, $12, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _iplus($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=((($3)+($4))|0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $5;
}


function _ireduce($oper,$identity,$rite,$axis){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$oper;
 $2=$identity;
 $3=$rite;
 $4=$axis;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 var $9=_ireduces(1,$5,$6,$7,$8);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $9;
}


function _ireduces($id,$oper,$identity,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 var $out;
 var $axicnt=(sp)+(8);
 var $botcnt=(sp)+(16);
 var $topcnt=(sp)+(24);
 var $i;
 var $j;
 var $k;
 var $m;
 var $n;
 var $p;
 var $dataout;
 var $ip;
 var $kp;
 var $wrk;
 $2=$id;
 $3=$oper;
 $4=$identity;
 $5=$rite;
 SAFE_HEAP_STORE($6, $axis, "i32", 0);
 var $7=_errinit();
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$5;
 var $11=_errstop(0,0,$10,0);
 $1=$11;
 label=37;break;
 case 3: 
 var $13=$5;
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=$15&4;
 var $17=($16|0)!=0;
 if($17){label=7;break;}else{label=4;break;}
 case 4: 
 var $19=$5;
 var $20=_integer($19);
 $5=$20;
 var $21=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $22=($21|0)!=0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=37;break;
 case 6: 
 label=7;break;
 case 7: 
 var $26=$2;
 var $27=$4;
 var $28=$27;
 var $29=$5;
 var $30=_reducecm($26,$28,$29,$6,$axicnt,$botcnt,$topcnt,4);
 $out=$30;
 var $31=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $32=($31|0)!=0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=37;break;
 case 9: 
 var $35=$2;
 var $36=($35|0)!=0;
 if($36){label=10;break;}else{label=11;break;}
 case 10: 
 var $41=1;label=12;break;
 case 11: 
 var $39=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $41=$39;label=12;break;
 case 12: 
 var $41;
 $n=$41;
 var $42=$out;
 var $43=(($42+8)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=($44|0)!=0;
 if($45){label=13;break;}else{label=36;break;}
 case 13: 
 var $47=$out;
 var $48=(($47)|0);
 var $49=$48;
 var $50=SAFE_HEAP_LOAD($49, "i32*", 0, 0);
 $dataout=$50;
 var $51=$5;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=0==($53|0);
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=$dataout;
 var $57=$4;
 var $58=$out;
 var $59=(($58+8)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=_intcopy($56,$57,$60,0);
 $dataout=$61;
 label=35;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $64=$i;
 var $65=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $66=($64|0)<($65|0);
 if($66){label=17;break;}else{label=34;break;}
 case 17: 
 var $68=$5;
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "i32*", 0, 0);
 var $72=$i;
 var $73=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $74=(Math_imul($72,$73)|0);
 var $75=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $76=(Math_imul($74,$75)|0);
 $p=$76;
 var $77=(($71+($76<<2))|0);
 $ip=$77;
 $j=0;
 label=18;break;
 case 18: 
 var $79=$j;
 var $80=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $81=($79|0)<($80|0);
 if($81){label=19;break;}else{label=32;break;}
 case 19: 
 var $83=$n;
 $m=$83;
 label=20;break;
 case 20: 
 var $85=$m;
 var $86=($85|0)>0;
 if($86){label=21;break;}else{label=30;break;}
 case 21: 
 var $88=$ip;
 var $89=$j;
 var $90=(($88+($89<<2))|0);
 var $91=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $92=$m;
 var $93=((($91)-($92))|0);
 var $94=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $95=(Math_imul($93,$94)|0);
 var $96=(($90+($95<<2))|0);
 $kp=$96;
 var $97=SAFE_HEAP_LOAD($96, "i32", 0, 0);
 $wrk=$97;
 $k=1;
 label=22;break;
 case 22: 
 var $99=$k;
 var $100=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $101=$m;
 var $102=((($100)-($101))|0);
 var $103=((($102)+(1))|0);
 var $104=($99|0)<($103|0);
 if($104){label=23;break;}else{label=25;break;}
 case 23: 
 var $106=$3;
 var $107=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $108=$kp;
 var $109=(((-$107))|0);
 var $110=(($108+($109<<2))|0);
 $kp=$110;
 var $111=SAFE_HEAP_LOAD($110, "i32", 0, 0);
 var $112=$wrk;
 var $113=$106;
 var $114=FUNCTION_TABLE[$113]($111,$112);
 $wrk=$114;
 label=24;break;
 case 24: 
 var $116=$k;
 var $117=((($116)+(1))|0);
 $k=$117;
 label=22;break;
 case 25: 
 var $119=$2;
 var $120=($119|0)!=0;
 if($120){label=26;break;}else{label=27;break;}
 case 26: 
 var $122=$wrk;
 var $123=$dataout;
 var $124=(($123+4)|0);
 $dataout=$124;
 SAFE_HEAP_STORE($123, $122, "i32", 0);
 label=28;break;
 case 27: 
 var $126=$wrk;
 var $127=$dataout;
 var $128=$p;
 var $129=(($127+($128<<2))|0);
 var $130=$j;
 var $131=(($129+($130<<2))|0);
 var $132=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $133=$m;
 var $134=((($132)-($133))|0);
 var $135=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $136=(Math_imul($134,$135)|0);
 var $137=(($131+($136<<2))|0);
 SAFE_HEAP_STORE($137, $126, "i32", 0);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $140=$m;
 var $141=((($140)-(1))|0);
 $m=$141;
 label=20;break;
 case 30: 
 label=31;break;
 case 31: 
 var $144=$j;
 var $145=((($144)+(1))|0);
 $j=$145;
 label=18;break;
 case 32: 
 label=33;break;
 case 33: 
 var $148=$i;
 var $149=((($148)+(1))|0);
 $i=$149;
 label=16;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $153=$5;
 var $154=$out;
 var $155=_errstop(0,0,$153,$154);
 $1=$155;
 label=37;break;
 case 37: 
 var $157=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $157;
  default: assert(0, "bad label: " + label);
 }

}


function _iroll($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $divisor;
 $2=$n;
 $divisor=2147483647;
 var $3=$2;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $7=$2;
 var $8=($7|0)<0;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 37, "i32", 0);
 $1=0;
 label=6;break;
 case 5: 
 var $11=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $12=_rand();
 var $13=($12|0);
 var $14=$divisor;
 var $15=($13)/($14);
 var $16=$2;
 var $17=($16|0);
 var $18=($15)*($17);
 var $19=(($18)&-1);
 var $20=((($11)+($19))|0);
 $1=$20;
 label=6;break;
 case 6: 
 var $22=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _irollp($narg,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $n;
 var $r;
 var $divisor;
 $1=$narg;
 $2=$ret;
 $divisor=2147483647;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 $n=$4;
 var $5=$n;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 SAFE_HEAP_STORE($8, 0, "i32", 0);
 label=7;break;
 case 3: 
 var $10=$n;
 var $11=($10|0)<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 37, "i32", 0);
 var $13=$2;
 SAFE_HEAP_STORE($13, 0, "i32", 0);
 label=6;break;
 case 5: 
 var $15=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $16=_rand();
 var $17=($16|0);
 var $18=$divisor;
 var $19=($17)/($18);
 var $20=$n;
 var $21=($20|0);
 var $22=($19)*($21);
 var $23=(($22)&-1);
 var $24=((($15)+($23))|0);
 var $25=$2;
 SAFE_HEAP_STORE($25, $24, "i32", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _iscalar($value){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 $1=$value;
 var $2=_getcb(0,1,5,0,0);
 $out=$2;
 var $3=$out;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$1;
 var $7=$out;
 var $8=(($7)|0);
 var $9=$8;
 var $10=SAFE_HEAP_LOAD($9, "i32*", 0, 0);
 SAFE_HEAP_STORE($10, $6, "i32", 0);
 label=3;break;
 case 3: 
 var $12=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _iscan($oper,$identity,$rite,$axis){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$oper;
 $2=$identity;
 $3=$rite;
 $4=$axis;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 var $9=_ireduces(0,$5,$6,$7,$8);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $9;
}


function _isign($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$x;
 var $3=$2;
 var $4=($3|0)<0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $7=$2;
 var $8=($7|0)>0;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $12=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _itimes($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=(Math_imul($3,$4)|0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $5;
}


function _ivalue($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ret;
 $2=$rite;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=11;break;
 case 3: 
 var $7=$2;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&4;
 var $11=($10|0)!=0;
 if($11){label=7;break;}else{label=4;break;}
 case 4: 
 var $13=$2;
 var $14=_integer($13);
 $2=$14;
 var $15=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=11;break;
 case 6: 
 label=7;break;
 case 7: 
 var $20=$2;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=($22|0)!=0;
 if($23){label=9;break;}else{label=8;break;}
 case 8: 
 SAFE_HEAP_STORE(4592, 22, "i32", 0);
 $ret=0;
 label=10;break;
 case 9: 
 var $26=$2;
 var $27=(($26)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "i32*", 0, 0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 $ret=$30;
 label=10;break;
 case 10: 
 var $32=$2;
 _endoper($32);
 var $33=$ret;
 $1=$33;
 label=11;break;
 case 11: 
 var $35=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _laminate($left,$rite,$paxis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $4;
 var $big=(sp)+(16);
 var $lit=(sp)+(24);
 var $out;
 var $axicnt=(sp)+(32);
 var $axis;
 var $botcnt=(sp)+(40);
 var $datacnt;
 var $datatyp;
 var $dimptr;
 var $i;
 var $ip;
 var $j;
 var $leftcnt;
 var $op;
 var $rank;
 var $ritecnt;
 var $topcnt=(sp)+(48);
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 $4=$paxis;
 $out=0;
 var $5=_matchok($2,$3,110);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=23;break;
 case 3: 
 var $9=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $10=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $11=_conform($9,$10,0,$big,$lit);
 var $12=1!=($11|0);
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $15=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $16=_errstop(50,$14,$15,0);
 $1=$16;
 label=23;break;
 case 5: 
 var $18=$4;
 var $19=$18<0;
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 var $21=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $22=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $23=_errstop(51,$21,$22,0);
 $1=$23;
 label=23;break;
 case 7: 
 var $25=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $26=(($25+12)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=_imax(1,$27);
 var $29=((($28)+(1))|0);
 $rank=$29;
 var $30=$rank;
 var $31=$4;
 var $32=($31)+(1);
 var $33=(($32)&-1);
 $axis=$33;
 var $34=($30|0)<($33|0);
 if($34){label=8;break;}else{label=9;break;}
 case 8: 
 var $36=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $37=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $38=_errstop(52,$36,$37,0);
 $1=$38;
 label=23;break;
 case 9: 
 var $40=$rank;
 var $41=($40<<2);
 var $42=_aplmall($41);
 var $43=$42;
 $op=$43;
 $dimptr=$43;
 var $44=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $45=(($44+12)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=($46|0)!=0;
 if($47){label=10;break;}else{label=18;break;}
 case 10: 
 var $49=SAFE_HEAP_LOAD($big, "%struct.aplcb*", 0, 0);
 var $50=(($49+16)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32*", 0, 0);
 $ip=$51;
 $datacnt=1;
 $i=1;
 label=11;break;
 case 11: 
 var $53=$i;
 var $54=$rank;
 var $55=($53|0)<=($54|0);
 if($55){label=12;break;}else{label=17;break;}
 case 12: 
 var $57=$i;
 var $58=$axis;
 var $59=($57|0)!=($58|0);
 if($59){label=13;break;}else{label=14;break;}
 case 13: 
 var $61=$ip;
 var $62=(($61+4)|0);
 $ip=$62;
 var $63=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 $j=$63;
 var $64=$op;
 var $65=(($64+4)|0);
 $op=$65;
 SAFE_HEAP_STORE($64, $63, "i32", 0);
 label=15;break;
 case 14: 
 $j=2;
 var $67=$op;
 var $68=(($67+4)|0);
 $op=$68;
 SAFE_HEAP_STORE($67, 2, "i32", 0);
 label=15;break;
 case 15: 
 var $70=$j;
 var $71=$datacnt;
 var $72=(Math_imul($71,$70)|0);
 $datacnt=$72;
 label=16;break;
 case 16: 
 var $74=$i;
 var $75=((($74)+(1))|0);
 $i=$75;
 label=11;break;
 case 17: 
 label=19;break;
 case 18: 
 $datacnt=2;
 var $78=$op;
 var $79=$axis;
 var $80=(((($79|0))%(2))&-1);
 var $81=(($78+($80<<2))|0);
 SAFE_HEAP_STORE($81, 1, "i32", 0);
 var $82=$op;
 var $83=$axis;
 var $84=(($82+($83<<2))|0);
 var $85=((($84)-(4))|0);
 SAFE_HEAP_STORE($85, 2, "i32", 0);
 label=19;break;
 case 19: 
 var $87=$datacnt;
 var $88=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $89=(($88+4)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=$90&110;
 $datatyp=$91;
 var $92=((($91)+(1))|0);
 var $93=$rank;
 var $94=$dimptr;
 var $95=_getcb(0,$87,$92,$93,$94);
 $out=$95;
 var $96=$out;
 var $97=(($96+8)|0);
 var $98=SAFE_HEAP_LOAD($97, "i32", 0, 0);
 var $99=($98|0)==0;
 if($99){label=21;break;}else{label=20;break;}
 case 20: 
 var $101=$out;
 var $102=$axis;
 var $103=_axispre($101,$102,$axicnt,$botcnt,$topcnt);
 var $104=1!=($103|0);
 if($104){label=21;break;}else{label=22;break;}
 case 21: 
 var $106=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $107=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $108=$out;
 var $109=_errstop(0,$106,$107,$108);
 $1=$109;
 label=23;break;
 case 22: 
 var $111=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 $ritecnt=$111;
 $leftcnt=$111;
 var $112=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $113=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $114=$out;
 var $115=$axis;
 var $116=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $117=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $118=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $119=$leftcnt;
 var $120=$ritecnt;
 var $121=_catlamcm($112,$113,$114,$115,$116,$117,$118,$119,$120);
 $1=$121;
 label=23;break;
 case 23: 
 var $123=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $123;
  default: assert(0, "bad label: " + label);
 }

}


function _leafdel($leaf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$leaf;
 var $2=$1;
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 label=4;break;
 case 3: 
 var $6=$1;
 var $7=_temp($6);
 _endoper($7);
 label=4;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _le($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=($4)-($5);
 $diff=$6;
 var $7=$6<=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=6;break;
 case 3: 
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$diff;
 var $12=$10>=$11;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $16=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }

}


function _lep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)-($7);
 $diff=$8;
 var $9=$8<=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$3;
 SAFE_HEAP_STORE($11, 1, "i32", 0);
 label=7;break;
 case 3: 
 var $13=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $14=$diff;
 var $15=$13>=$14;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$3;
 SAFE_HEAP_STORE($17, 1, "i32", 0);
 label=6;break;
 case 5: 
 var $19=$3;
 SAFE_HEAP_STORE($19, 0, "i32", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _lifo($hdr,$nxt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$hdr;
 $2=$nxt;
 var $3=$1;
 var $4=$3;
 var $5=(($4)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.el.1681*", 0, 0);
 var $7=$2;
 var $8=$7;
 var $9=(($8)|0);
 SAFE_HEAP_STORE($9, $6, "%struct.el.1681*", 0);
 var $10=$2;
 var $11=$10;
 var $12=$1;
 var $13=$12;
 var $14=(($13)|0);
 SAFE_HEAP_STORE($14, $11, "%struct.el.1681*", 0);
 var $15=$2;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $15;
}


function _logamma($carg,$cans){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$carg;
 $2=$cans;
 var $3=$1;
 var $4=$2;
 _gammax($3,$4,0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _logp($num,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$num;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=Math_log($4);
 var $6=$2;
 SAFE_HEAP_STORE($6, $5, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _logrithm($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $6=(1)-($5);
 var $7=$4>$6;
 if($7){label=2;break;}else{label=6;break;}
 case 2: 
 var $9=$2;
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=($10)+(1);
 var $12=$9<$11;
 if($12){label=3;break;}else{label=6;break;}
 case 3: 
 var $14=$3;
 var $15=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $16=(1)-($15);
 var $17=$14>$16;
 if($17){label=4;break;}else{label=6;break;}
 case 4: 
 var $19=$3;
 var $20=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $21=($20)+(1);
 var $22=$19<$21;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 $1=1;
 label=7;break;
 case 6: 
 var $25=$3;
 var $26=Math_log($25);
 var $27=$2;
 var $28=Math_log($27);
 var $29=($26)/($28);
 $1=$29;
 label=7;break;
 case 7: 
 var $31=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }

}


function _logrithp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=(1)-($6);
 var $8=$5>$7;
 if($8){label=2;break;}else{label=6;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $13=($12)+(1);
 var $14=$11<$13;
 if($14){label=3;break;}else{label=6;break;}
 case 3: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 var $18=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $19=(1)-($18);
 var $20=$17>$19;
 if($20){label=4;break;}else{label=6;break;}
 case 4: 
 var $22=$2;
 var $23=SAFE_HEAP_LOAD($22, "double", 0, 0);
 var $24=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $25=($24)+(1);
 var $26=$23<$25;
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $28=$3;
 SAFE_HEAP_STORE($28, 1, "double", 0);
 label=7;break;
 case 6: 
 var $30=$2;
 var $31=SAFE_HEAP_LOAD($30, "double", 0, 0);
 var $32=Math_log($31);
 var $33=$1;
 var $34=SAFE_HEAP_LOAD($33, "double", 0, 0);
 var $35=Math_log($34);
 var $36=($32)/($35);
 var $37=$3;
 SAFE_HEAP_STORE($37, $36, "double", 0);
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _logrithx($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $wrka=sp;
 var $wrkb=(sp)+(16);
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=(($wrka)|0);
 _logx($4,$5);
 var $6=$2;
 var $7=(($wrkb)|0);
 _logx($6,$7);
 var $8=(($wrkb)|0);
 var $9=(($wrka)|0);
 var $10=$3;
 _dividex($8,$9,$10);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _logx($num,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $a;
 var $b;
 var $babs;
 var $p=sp;
 $1=$num;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $a=$4;
 var $5=$1;
 var $6=(($5+8)|0);
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 $b=$7;
 var $8=$b;
 var $9=$8>0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$b;
 var $16=$11;label=4;break;
 case 3: 
 var $13=$b;
 var $14=((-.0))-($13);
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 $babs=$16;
 var $17=$babs;
 var $18=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $19=$17<$18;
 if($19){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=$a;
 var $22=$21>0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$a;
 var $25=Math_log($24);
 var $26=$2;
 SAFE_HEAP_STORE($26, $25, "double", 0);
 var $27=$2;
 var $28=(($27+8)|0);
 SAFE_HEAP_STORE($28, 0, "double", 0);
 label=14;break;
 case 7: 
 var $30=$1;
 var $31=(($p)|0);
 _dabsx($30,$31);
 var $32=(($p)|0);
 var $33=SAFE_HEAP_LOAD($32, "double", 0, 0);
 var $34=Math_log($33);
 var $35=$2;
 SAFE_HEAP_STORE($35, $34, "double", 0);
 var $36=$a;
 var $37=$36==0;
 if($37){label=8;break;}else{label=12;break;}
 case 8: 
 var $39=$b;
 var $40=$39<0;
 if($40){label=9;break;}else{label=10;break;}
 case 9: 
 var $42=SAFE_HEAP_LOAD(2640, "double", 0, 0);
 var $43=((-.0))-($42);
 var $47=$43;label=11;break;
 case 10: 
 var $45=SAFE_HEAP_LOAD(2640, "double", 0, 0);
 var $47=$45;label=11;break;
 case 11: 
 var $47;
 var $48=$2;
 var $49=(($48+8)|0);
 SAFE_HEAP_STORE($49, $47, "double", 0);
 label=13;break;
 case 12: 
 var $51=$b;
 var $52=$a;
 var $53=Math_atan2($51,$52);
 var $54=$2;
 var $55=(($54+8)|0);
 SAFE_HEAP_STORE($55, $53, "double", 0);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _lovfscb($fp,$flags){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $out;
 var $count=sp;
 var $i;
 var $j;
 var $k;
 var $rank=(sp)+(8);
 var $size=(sp)+(16);
 var $tflags=(sp)+(24);
 var $type;
 var $ip;
 var $cp;
 $2=$fp;
 $3=$flags;
 var $4=$2;
 var $5=_read($4,$count,4);
 $i=$5;
 var $6=$2;
 var $7=_read($6,$rank,4);
 $i=$7;
 var $8=$2;
 var $9=_read($8,$size,4);
 $i=$9;
 var $10=SAFE_HEAP_LOAD($count, "i32", 0, 0);
 var $11=$3;
 var $12=SAFE_HEAP_LOAD($rank, "i32", 0, 0);
 var $13=_getcb(0,$10,$11,$12,0);
 $out=$13;
 var $14=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=15;break;
 case 3: 
 var $18=$out;
 var $19=(($18+16)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32*", 0, 0);
 $ip=$20;
 var $21=$out;
 var $22=(($21+12)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 $j=$23;
 label=4;break;
 case 4: 
 var $25=$j;
 var $26=($25|0)>0;
 if($26){label=5;break;}else{label=7;break;}
 case 5: 
 var $28=$2;
 var $29=$ip;
 var $30=(($29+4)|0);
 $ip=$30;
 var $31=_read($28,$29,4);
 $i=$31;
 label=6;break;
 case 6: 
 var $33=$j;
 var $34=((($33)-(1))|0);
 $j=$34;
 label=4;break;
 case 7: 
 var $36=$out;
 var $37=(($36)|0);
 var $38=$37;
 var $39=SAFE_HEAP_LOAD($38, "i8*", 0, 0);
 $cp=$39;
 var $40=$out;
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 $j=$42;
 label=8;break;
 case 8: 
 var $44=$j;
 var $45=($44|0)>0;
 if($45){label=9;break;}else{label=14;break;}
 case 9: 
 var $47=$3;
 var $48=$47&32;
 var $49=($48|0)!=0;
 if($49){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=$2;
 var $52=_read($51,$tflags,4);
 $i=$52;
 var $53=$2;
 var $54=SAFE_HEAP_LOAD($tflags, "i32", 0, 0);
 var $55=_lovfscb($53,$54);
 var $56=$cp;
 var $57=$56;
 SAFE_HEAP_STORE($57, $55, "%struct.aplcb*", 0);
 label=12;break;
 case 11: 
 var $59=$2;
 var $60=$cp;
 var $61=$out;
 var $62=(($61+20)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=_read($59,$60,$63);
 $i=$64;
 label=12;break;
 case 12: 
 var $66=$out;
 var $67=(($66+20)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=$cp;
 var $70=(($69+$68)|0);
 $cp=$70;
 label=13;break;
 case 13: 
 var $72=$j;
 var $73=((($72)-(1))|0);
 $j=$73;
 label=8;break;
 case 14: 
 var $75=$out;
 $1=$75;
 label=15;break;
 case 15: 
 var $77=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $77;
  default: assert(0, "bad label: " + label);
 }

}


function _lovfsfn($fp,$flags){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $func;
 var $cbflags=sp;
 var $iw;
 var $jw;
 var $ip;
 $2=$fp;
 $3=$flags;
 var $4=_execqfxa(0);
 $func=$4;
 var $5=0==($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=9;break;
 case 3: 
 var $8=$3;
 var $9=$func;
 var $10=(($9+4)|0);
 SAFE_HEAP_STORE($10, $8, "i32", 0);
 var $11=$2;
 var $12=$func;
 var $13=(($12+8)|0);
 var $14=_read($11,$13,4);
 $iw=$14;
 var $15=$2;
 var $16=$func;
 var $17=(($16+12)|0);
 var $18=_read($15,$17,4);
 $iw=$18;
 var $19=$2;
 var $20=$func;
 var $21=(($20+16)|0);
 var $22=_read($19,$21,4);
 $iw=$22;
 var $23=$func;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25<<2);
 $jw=$26;
 var $27=_aplmall($26);
 var $28=$27;
 $ip=$28;
 var $29=0==($28|0);
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=$func;
 var $32=_expunge($31);
 var $33=$32;
 $1=$33;
 label=9;break;
 case 5: 
 var $35=$ip;
 var $36=$func;
 var $37=(($36+20)|0);
 SAFE_HEAP_STORE($37, $35, "i32*", 0);
 var $38=$2;
 var $39=$func;
 var $40=(($39+20)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32*", 0, 0);
 var $42=$jw;
 var $43=_read($38,$41,$42);
 $iw=$43;
 var $44=$2;
 var $45=_read($44,$cbflags,4);
 $iw=$45;
 var $46=$2;
 var $47=SAFE_HEAP_LOAD($cbflags, "i32", 0, 0);
 var $48=_lovfscb($46,$47);
 var $49=$func;
 var $50=(($49+24)|0);
 SAFE_HEAP_STORE($50, $48, "%struct.aplcb*", 0);
 var $51=$func;
 var $52=(($51+12)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=((($53)*(24))&-1);
 $jw=$54;
 var $55=$jw;
 var $56=_aplmall($55);
 var $57=$56;
 var $58=$func;
 var $59=(($58+36)|0);
 SAFE_HEAP_STORE($59, $57, "%struct.apltoken*", 0);
 var $60=0==($57|0);
 if($60){label=7;break;}else{label=6;break;}
 case 6: 
 var $62=$func;
 var $63=(($62+16)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=($64<<2);
 var $66=_aplmall($65);
 var $67=$66;
 var $68=$func;
 var $69=(($68+32)|0);
 SAFE_HEAP_STORE($69, $67, "%struct.apltoken**", 0);
 var $70=0==($67|0);
 if($70){label=7;break;}else{label=8;break;}
 case 7: 
 var $72=$func;
 var $73=_expunge($72);
 var $74=$73;
 $1=$74;
 label=9;break;
 case 8: 
 var $76=$2;
 var $77=$func;
 var $78=$jw;
 var $79=_lovfsfp($76,$77,$78);
 $1=$79;
 label=9;break;
 case 9: 
 var $81=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $81;
  default: assert(0, "bad label: " + label);
 }

}


function _lovfsfo($fp,$func){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tok;
 var $cbflags=sp;
 var $i;
 var $j;
 $2=$fp;
 $3=$func;
 var $4=$3;
 var $5=(($4+36)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 $tok=$6;
 var $7=$3;
 var $8=(($7+12)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $j=$9;
 label=2;break;
 case 2: 
 var $11=$j;
 var $12=($11|0)>0;
 if($12){label=3;break;}else{label=8;break;}
 case 3: 
 var $14=$tok;
 var $15=(($14+4)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 if(($16|0)==7|($16|0)==-3){ label=4;break;}else if(($16|0)==-4){ label=5;break;}else{label=6;break;}
 case 4: 
 var $18=$2;
 var $19=_read($18,$cbflags,4);
 $i=$19;
 var $20=$2;
 var $21=SAFE_HEAP_LOAD($cbflags, "i32", 0, 0);
 var $22=_lovfscb($20,$21);
 var $23=$tok;
 var $24=(($23+12)|0);
 var $25=$24;
 SAFE_HEAP_STORE($25, $22, "%struct.aplcb*", 0);
 label=6;break;
 case 5: 
 var $27=$2;
 var $28=_strread($27);
 var $29=$tok;
 var $30=(($29+12)|0);
 var $31=$30;
 SAFE_HEAP_STORE($31, $28, "i8*", 0);
 label=6;break;
 case 6: 
 var $33=$tok;
 var $34=(($33+24)|0);
 $tok=$34;
 label=7;break;
 case 7: 
 var $36=$j;
 var $37=((($36)-(1))|0);
 $j=$37;
 label=2;break;
 case 8: 
 var $39=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function _lovfsfp($fp,$func,$j){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $cur;
 var $tok;
 var $tokhdr;
 var $i;
 var $k=sp;
 $1=$fp;
 $2=$func;
 $3=$j;
 var $4=$1;
 var $5=_read($4,$k,4);
 $i=$5;
 var $6=$2;
 var $7=(($6+36)|0);
 var $8=SAFE_HEAP_LOAD($7, "%struct.apltoken*", 0, 0);
 var $9=$8;
 var $10=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $11=_offtptr($9,$10);
 var $12=$11;
 var $13=$2;
 var $14=(($13+28)|0);
 SAFE_HEAP_STORE($14, $12, "%struct.apltoken*", 0);
 var $15=$1;
 var $16=$2;
 var $17=(($16+36)|0);
 var $18=SAFE_HEAP_LOAD($17, "%struct.apltoken*", 0, 0);
 var $19=$3;
 var $20=_read($15,$18,$19);
 $i=$20;
 var $21=$2;
 var $22=(($21+36)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.apltoken*", 0, 0);
 $tok=$23;
 var $24=$2;
 var $25=(($24+12)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 $3=$26;
 label=2;break;
 case 2: 
 var $28=$3;
 var $29=($28|0)>0;
 if($29){label=3;break;}else{label=5;break;}
 case 3: 
 var $31=$2;
 var $32=(($31+36)|0);
 var $33=SAFE_HEAP_LOAD($32, "%struct.apltoken*", 0, 0);
 var $34=$33;
 var $35=$tok;
 var $36=(($35)|0);
 var $37=$36;
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=_offtptr($34,$38);
 var $40=$39;
 var $41=$tok;
 var $42=(($41)|0);
 var $43=$42;
 SAFE_HEAP_STORE($43, $40, "%struct.apltoken*", 0);
 var $44=$tok;
 var $45=(($44+24)|0);
 $tok=$45;
 label=4;break;
 case 4: 
 var $47=$3;
 var $48=((($47)-(1))|0);
 $3=$48;
 label=2;break;
 case 5: 
 var $50=$2;
 var $51=(($50+32)|0);
 var $52=SAFE_HEAP_LOAD($51, "%struct.apltoken**", 0, 0);
 $tokhdr=$52;
 var $53=$2;
 var $54=(($53+16)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 $3=$55;
 label=6;break;
 case 6: 
 var $57=$3;
 var $58=($57|0)>0;
 if($58){label=7;break;}else{label=9;break;}
 case 7: 
 var $60=$1;
 var $61=_read($60,$k,4);
 $i=$61;
 var $62=$2;
 var $63=(($62+36)|0);
 var $64=SAFE_HEAP_LOAD($63, "%struct.apltoken*", 0, 0);
 var $65=$64;
 var $66=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $67=_offtptr($65,$66);
 var $68=$67;
 var $69=$tokhdr;
 var $70=(($69+4)|0);
 $tokhdr=$70;
 SAFE_HEAP_STORE($69, $68, "%struct.apltoken*", 0);
 label=8;break;
 case 8: 
 var $72=$3;
 var $73=((($72)-(1))|0);
 $3=$73;
 label=6;break;
 case 9: 
 var $75=$1;
 var $76=_read($75,$k,4);
 $i=$76;
 var $77=$2;
 var $78=(($77+36)|0);
 var $79=SAFE_HEAP_LOAD($78, "%struct.apltoken*", 0, 0);
 var $80=$79;
 var $81=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $82=_offtptr($80,$81);
 var $83=$82;
 var $84=$2;
 var $85=(($84+40)|0);
 SAFE_HEAP_STORE($85, $83, "%struct.apltoken*", 0);
 var $86=$1;
 var $87=_read($86,$k,4);
 $i=$87;
 var $88=$2;
 var $89=(($88+36)|0);
 var $90=SAFE_HEAP_LOAD($89, "%struct.apltoken*", 0, 0);
 var $91=$90;
 var $92=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $93=_offtptr($91,$92);
 var $94=$93;
 var $95=$2;
 var $96=(($95+44)|0);
 SAFE_HEAP_STORE($96, $94, "%struct.apltoken*", 0);
 var $97=$1;
 var $98=$2;
 var $99=_lovfsfo($97,$98);
 var $100=$2;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $100;
  default: assert(0, "bad label: " + label);
 }

}


function _lt($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$3;
 var $6=($4)-($5);
 $diff=$6;
 var $7=$6>=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$diff;
 var $12=((-.0))-($11);
 var $13=$10>=$12;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=6;break;
 case 5: 
 $1=1;
 label=6;break;
 case 6: 
 var $17=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function _ltp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)-($7);
 $diff=$8;
 var $9=$8>=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$3;
 SAFE_HEAP_STORE($11, 0, "i32", 0);
 label=7;break;
 case 3: 
 var $13=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $14=$diff;
 var $15=((-.0))-($14);
 var $16=$13>=$15;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$3;
 SAFE_HEAP_STORE($18, 0, "i32", 0);
 label=6;break;
 case 5: 
 var $20=$3;
 SAFE_HEAP_STORE($20, 1, "i32", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _main(){
 var label=0;


 SAFE_HEAP_STORE(4536, 0, "i8*", 0);
 _aplinit();
 _funinit();
 return 0;
}
Module["_main"] = _main;

function _myprocess($line){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$line;
 var $2=$1;
 var $3=_chrvect($2);
 var $4=_execute($3);
 var $5=_endoper($4);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}
Module["_myprocess"] = _myprocess;

function _match($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $datatyp;
 var $i;
 var $ret;
 var $lp;
 var $rp;
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 $ret=0;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $8=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=20;break;
 case 3: 
 label=4;break;
 case 4: 
 var $12=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $13=(($12+12)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $16=(($15+12)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=($14|0)!=($17|0);
 if($18){label=6;break;}else{label=5;break;}
 case 5: 
 var $20=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($22|0)!=($25|0);
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 label=19;break;
 case 7: 
 var $29=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $30=(($29+4)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=$31&110;
 $datatyp=$32;
 var $33=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 $i=$35;
 var $36=0==($35|0);
 if($36){label=8;break;}else{label=10;break;}
 case 8: 
 var $38=$datatyp;
 var $39=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $40=(($39+4)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$41&110;
 var $43=($38|0)!=($42|0);
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 label=19;break;
 case 10: 
 var $46=_matchok($2,$3,110);
 var $47=($46|0)!=0;
 if($47){label=12;break;}else{label=11;break;}
 case 11: 
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 label=19;break;
 case 12: 
 var $50=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $51=(($50)|0);
 var $52=$51;
 var $53=SAFE_HEAP_LOAD($52, "i8*", 0, 0);
 $lp=$53;
 var $54=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $55=(($54)|0);
 var $56=$55;
 var $57=SAFE_HEAP_LOAD($56, "i8*", 0, 0);
 $rp=$57;
 $ret=1;
 label=13;break;
 case 13: 
 var $59=$i;
 var $60=((($59)-(1))|0);
 $i=$60;
 var $61=($59|0)!=0;
 if($61){label=14;break;}else{var $69=0;label=16;break;}
 case 14: 
 var $63=$ret;
 var $64=($63|0)!=0;
 if($64){label=15;break;}else{var $69=0;label=16;break;}
 case 15: 
 var $66=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $67=($66|0)==0;
 var $69=$67;label=16;break;
 case 16: 
 var $69;
 if($69){label=17;break;}else{label=18;break;}
 case 17: 
 var $71=$datatyp;
 var $72=$lp;
 var $73=$rp;
 var $74=_matchsub($71,$72,$73);
 $ret=$74;
 var $75=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $76=(($75+20)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=$lp;
 var $79=(($78+$77)|0);
 $lp=$79;
 var $80=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $81=(($80+20)|0);
 var $82=SAFE_HEAP_LOAD($81, "i32", 0, 0);
 var $83=$rp;
 var $84=(($83+$82)|0);
 $rp=$84;
 label=13;break;
 case 18: 
 label=19;break;
 case 19: 
 var $87=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $88=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $89=$ret;
 var $90=_iscalar($89);
 var $91=_errstop(0,$87,$88,$90);
 $1=$91;
 label=20;break;
 case 20: 
 var $93=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $93;
  default: assert(0, "bad label: " + label);
 }

}


function _matchget($old,$newtype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $out;
 var $ip;
 var $rank;
 $2=$old;
 $3=$newtype;
 var $4=$3;
 var $5=((($4)+(1))|0);
 var $6=$2;
 var $7=(($6+12)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $rank=$8;
 var $9=_getcb(0,0,$5,$8,0);
 $out=$9;
 var $10=$out;
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $14=$rank;
 var $15=($14|0)>1;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$out;
 var $18=(($17+16)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32*", 0, 0);
 var $20=$19;
 var $21=$2;
 var $22=(($21+16)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32*", 0, 0);
 var $24=$23;
 var $25=$rank;
 var $26=_intcopy($20,$24,$25,1);
 var $27=$26;
 $ip=$27;
 label=5;break;
 case 5: 
 var $29=$2;
 _endoper($29);
 var $30=$out;
 $1=$30;
 label=6;break;
 case 6: 
 var $32=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _matchok($pleft,$prite,$datatyp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$pleft;
 $3=$prite;
 $4=$datatyp;
 var $5=_errinit();
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=5;break;}
 case 2: 
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=_matchoks($8,$9,$10);
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 $1=1;
 label=8;break;
 case 4: 
 label=5;break;
 case 5: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "%struct.aplcb*", 0, 0);
 _endoper($17);
 var $18=$2;
 SAFE_HEAP_STORE($18, 0, "%struct.aplcb*", 0);
 var $19=$3;
 var $20=SAFE_HEAP_LOAD($19, "%struct.aplcb*", 0, 0);
 _endoper($20);
 var $21=$3;
 SAFE_HEAP_STORE($21, 0, "%struct.aplcb*", 0);
 var $22=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 1, "i32", 0);
 label=7;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $27=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function _matchoks($pleft,$prite,$datatyp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $left;
 var $rite;
 var $ltype;
 var $rtype;
 $2=$pleft;
 $3=$prite;
 $4=$datatyp;
 var $5=$2;
 var $6=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 $left=$6;
 var $7=(($6+4)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 var $9=$8&110;
 $ltype=$9;
 var $10=$3;
 var $11=SAFE_HEAP_LOAD($10, "%struct.aplcb*", 0, 0);
 $rite=$11;
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$13&110;
 $rtype=$14;
 var $15=$ltype;
 var $16=$rtype;
 var $17=($15|0)==($16|0);
 if($17){label=2;break;}else{label=4;break;}
 case 2: 
 var $19=$ltype;
 var $20=$4;
 var $21=$19&$20;
 var $22=($21|0)!=0;
 if($22){label=3;break;}else{label=4;break;}
 case 3: 
 $1=1;
 label=27;break;
 case 4: 
 var $25=$left;
 var $26=(($25+8)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $30=$rtype;
 var $31=$4;
 var $32=$30&$31;
 var $33=($32|0)!=0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$left;
 var $36=$rtype;
 var $37=_matchget($35,$36);
 var $38=$2;
 SAFE_HEAP_STORE($38, $37, "%struct.aplcb*", 0);
 $1=1;
 label=27;break;
 case 7: 
 var $40=$rite;
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=($42|0)==0;
 if($43){label=8;break;}else{label=10;break;}
 case 8: 
 var $45=$ltype;
 var $46=$4;
 var $47=$45&$46;
 var $48=($47|0)!=0;
 if($48){label=9;break;}else{label=10;break;}
 case 9: 
 var $50=$rite;
 var $51=$ltype;
 var $52=_matchget($50,$51);
 var $53=$3;
 SAFE_HEAP_STORE($53, $52, "%struct.aplcb*", 0);
 $1=1;
 label=27;break;
 case 10: 
 var $55=$4;
 var $56=$55&70;
 var $57=($56|0)!=0;
 if($57){label=11;break;}else{label=14;break;}
 case 11: 
 var $59=$ltype;
 var $60=$59&70;
 var $61=($60|0)!=0;
 if($61){label=12;break;}else{label=14;break;}
 case 12: 
 var $63=$rtype;
 var $64=$63&70;
 var $65=($64|0)!=0;
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 var $67=$2;
 var $68=$3;
 var $69=$4;
 var $70=$ltype;
 var $71=$rtype;
 var $72=_matchokt($67,$68,$69,$70,$71);
 $1=$72;
 label=27;break;
 case 14: 
 var $74=$4;
 var $75=$74&32;
 var $76=($75|0)!=0;
 if($76){label=15;break;}else{label=20;break;}
 case 15: 
 var $78=$ltype;
 var $79=($78|0)!=32;
 if($79){label=16;break;}else{label=17;break;}
 case 16: 
 var $81=$left;
 var $82=_aplnest($81);
 var $83=$2;
 SAFE_HEAP_STORE($83, $82, "%struct.aplcb*", 0);
 label=17;break;
 case 17: 
 var $85=$rtype;
 var $86=($85|0)!=32;
 if($86){label=18;break;}else{label=19;break;}
 case 18: 
 var $88=$rite;
 var $89=_aplnest($88);
 var $90=$3;
 SAFE_HEAP_STORE($90, $89, "%struct.aplcb*", 0);
 label=19;break;
 case 19: 
 $1=1;
 label=27;break;
 case 20: 
 var $93=$4;
 var $94=$93&8;
 var $95=($94|0)!=0;
 if($95){label=21;break;}else{label=26;break;}
 case 21: 
 var $97=$ltype;
 var $98=($97|0)!=8;
 if($98){label=22;break;}else{label=23;break;}
 case 22: 
 var $100=$left;
 var $101=_formdft($100);
 var $102=$2;
 SAFE_HEAP_STORE($102, $101, "%struct.aplcb*", 0);
 label=23;break;
 case 23: 
 var $104=$rtype;
 var $105=($104|0)!=8;
 if($105){label=24;break;}else{label=25;break;}
 case 24: 
 var $107=$rite;
 var $108=_formdft($107);
 var $109=$3;
 SAFE_HEAP_STORE($109, $108, "%struct.aplcb*", 0);
 label=25;break;
 case 25: 
 $1=1;
 label=27;break;
 case 26: 
 $1=0;
 label=27;break;
 case 27: 
 var $113=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $113;
  default: assert(0, "bad label: " + label);
 }

}


function _matchokt($pleft,$prite,$datatyp,$ltype,$rtype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $left;
 var $rite;
 $2=$pleft;
 $3=$prite;
 $4=$datatyp;
 $5=$ltype;
 $6=$rtype;
 var $7=$2;
 var $8=SAFE_HEAP_LOAD($7, "%struct.aplcb*", 0, 0);
 $left=$8;
 var $9=$3;
 var $10=SAFE_HEAP_LOAD($9, "%struct.aplcb*", 0, 0);
 $rite=$10;
 var $11=$5;
 var $12=$6;
 var $13=$11|$12;
 var $14=$13&64;
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=8;break;}
 case 2: 
 var $17=$4;
 var $18=$17&64;
 var $19=($18|0)!=0;
 if($19){label=3;break;}else{label=8;break;}
 case 3: 
 var $21=$5;
 var $22=($21|0)!=64;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=$left;
 var $25=_complex($24);
 var $26=$2;
 SAFE_HEAP_STORE($26, $25, "%struct.aplcb*", 0);
 label=5;break;
 case 5: 
 var $28=$6;
 var $29=($28|0)!=64;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$rite;
 var $32=_complex($31);
 var $33=$3;
 SAFE_HEAP_STORE($33, $32, "%struct.aplcb*", 0);
 label=7;break;
 case 7: 
 label=46;break;
 case 8: 
 var $36=$5;
 var $37=$6;
 var $38=$36|$37;
 var $39=$38&2;
 var $40=($39|0)!=0;
 if($40){label=9;break;}else{label=15;break;}
 case 9: 
 var $42=$4;
 var $43=$42&2;
 var $44=($43|0)!=0;
 if($44){label=10;break;}else{label=15;break;}
 case 10: 
 var $46=$5;
 var $47=($46|0)!=2;
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 var $49=$left;
 var $50=_real($49);
 var $51=$2;
 SAFE_HEAP_STORE($51, $50, "%struct.aplcb*", 0);
 label=12;break;
 case 12: 
 var $53=$6;
 var $54=($53|0)!=2;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$rite;
 var $57=_real($56);
 var $58=$3;
 SAFE_HEAP_STORE($58, $57, "%struct.aplcb*", 0);
 label=14;break;
 case 14: 
 label=45;break;
 case 15: 
 var $61=$5;
 var $62=$6;
 var $63=$61|$62;
 var $64=$63&4;
 var $65=($64|0)!=0;
 if($65){label=16;break;}else{label=22;break;}
 case 16: 
 var $67=$4;
 var $68=$67&4;
 var $69=($68|0)!=0;
 if($69){label=17;break;}else{label=22;break;}
 case 17: 
 var $71=$5;
 var $72=($71|0)!=4;
 if($72){label=18;break;}else{label=19;break;}
 case 18: 
 var $74=$left;
 var $75=_integer($74);
 var $76=$2;
 SAFE_HEAP_STORE($76, $75, "%struct.aplcb*", 0);
 label=19;break;
 case 19: 
 var $78=$6;
 var $79=($78|0)!=4;
 if($79){label=20;break;}else{label=21;break;}
 case 20: 
 var $81=$rite;
 var $82=_integer($81);
 var $83=$3;
 SAFE_HEAP_STORE($83, $82, "%struct.aplcb*", 0);
 label=21;break;
 case 21: 
 label=44;break;
 case 22: 
 var $86=$4;
 var $87=$86&4;
 var $88=($87|0)!=0;
 if($88){label=23;break;}else{label=28;break;}
 case 23: 
 var $90=$5;
 var $91=($90|0)!=4;
 if($91){label=24;break;}else{label=25;break;}
 case 24: 
 var $93=$left;
 var $94=_integer($93);
 var $95=$2;
 SAFE_HEAP_STORE($95, $94, "%struct.aplcb*", 0);
 label=25;break;
 case 25: 
 var $97=$6;
 var $98=($97|0)!=4;
 if($98){label=26;break;}else{label=27;break;}
 case 26: 
 var $100=$rite;
 var $101=_integer($100);
 var $102=$3;
 SAFE_HEAP_STORE($102, $101, "%struct.aplcb*", 0);
 label=27;break;
 case 27: 
 label=43;break;
 case 28: 
 var $105=$4;
 var $106=$105&2;
 var $107=($106|0)!=0;
 if($107){label=29;break;}else{label=34;break;}
 case 29: 
 var $109=$5;
 var $110=($109|0)!=2;
 if($110){label=30;break;}else{label=31;break;}
 case 30: 
 var $112=$left;
 var $113=_real($112);
 var $114=$2;
 SAFE_HEAP_STORE($114, $113, "%struct.aplcb*", 0);
 label=31;break;
 case 31: 
 var $116=$6;
 var $117=($116|0)!=2;
 if($117){label=32;break;}else{label=33;break;}
 case 32: 
 var $119=$rite;
 var $120=_real($119);
 var $121=$3;
 SAFE_HEAP_STORE($121, $120, "%struct.aplcb*", 0);
 label=33;break;
 case 33: 
 label=42;break;
 case 34: 
 var $124=$4;
 var $125=$124&64;
 var $126=($125|0)!=0;
 if($126){label=35;break;}else{label=40;break;}
 case 35: 
 var $128=$5;
 var $129=($128|0)!=64;
 if($129){label=36;break;}else{label=37;break;}
 case 36: 
 var $131=$left;
 var $132=_complex($131);
 var $133=$2;
 SAFE_HEAP_STORE($133, $132, "%struct.aplcb*", 0);
 label=37;break;
 case 37: 
 var $135=$6;
 var $136=($135|0)!=64;
 if($136){label=38;break;}else{label=39;break;}
 case 38: 
 var $138=$rite;
 var $139=_complex($138);
 var $140=$3;
 SAFE_HEAP_STORE($140, $139, "%struct.aplcb*", 0);
 label=39;break;
 case 39: 
 label=41;break;
 case 40: 
 $1=0;
 label=47;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 var $149=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $150=($149|0)==0;
 var $151=($150&1);
 $1=$151;
 label=47;break;
 case 47: 
 var $153=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $153;
  default: assert(0, "bad label: " + label);
 }

}


function _matchsub($datatyp,$lp,$rp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ret;
 $1=$datatyp;
 $2=$lp;
 $3=$rp;
 var $4=$1;
 if(($4|0)==8){ label=2;break;}else if(($4|0)==4){ label=3;break;}else if(($4|0)==2){ label=4;break;}else if(($4|0)==32){ label=5;break;}else{label=6;break;}
 case 2: 
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "i8", 0, 0);
 var $8=(($7<<24)>>24);
 var $9=$3;
 var $10=SAFE_HEAP_LOAD($9, "i8", 0, 0);
 var $11=(($10<<24)>>24);
 var $12=($8|0)==($11|0);
 var $13=($12&1);
 $ret=$13;
 label=7;break;
 case 3: 
 var $15=$2;
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$3;
 var $19=$18;
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=($17|0)==($20|0);
 var $22=($21&1);
 $ret=$22;
 label=7;break;
 case 4: 
 var $24=$2;
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=$3;
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "double", 0, 0);
 var $30=_eq($26,$29);
 $ret=$30;
 label=7;break;
 case 5: 
 var $32=$2;
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "%struct.aplcb*", 0, 0);
 var $35=$3;
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "%struct.aplcb*", 0, 0);
 var $38=_match($34,$37);
 var $39=_ivalue($38);
 $ret=$39;
 label=7;break;
 case 6: 
 $ret=0;
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=7;break;
 case 7: 
 var $42=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $42;
  default: assert(0, "bad label: " + label);
 }

}


function _matinv($rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cols=sp;
 var $dimptr;
 var $i;
 var $rows=(sp)+(8);
 var $dataptr;
 var $f;
 var $inv;
 var $out;
 $2=$rite;
 $out=0;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=$out;
 var $8=_errstop(0,0,$6,$7);
 $1=$8;
 label=21;break;
 case 3: 
 var $10=$2;
 var $11=_mdivarg($10,$rows,$cols);
 var $12=0==($11|0);
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=$2;
 var $15=$out;
 var $16=_errstop(0,0,$14,$15);
 $1=$16;
 label=21;break;
 case 5: 
 var $18=SAFE_HEAP_LOAD($rows, "i32", 0, 0);
 var $19=SAFE_HEAP_LOAD($cols, "i32", 0, 0);
 var $20=($18|0)<($19|0);
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$2;
 var $23=$out;
 var $24=_errstop(6,0,$22,$23);
 $1=$24;
 label=21;break;
 case 7: 
 var $26=$2;
 var $27=(($26+4)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=$28&2;
 var $30=($29|0)!=0;
 if($30){label=11;break;}else{label=8;break;}
 case 8: 
 var $32=$2;
 var $33=_real($32);
 $2=$33;
 var $34=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $35=($34|0)!=0;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 $1=0;
 label=21;break;
 case 10: 
 label=11;break;
 case 11: 
 var $39=SAFE_HEAP_LOAD($rows, "i32", 0, 0);
 var $40=SAFE_HEAP_LOAD($cols, "i32", 0, 0);
 var $41=($39|0)==($40|0);
 if($41){label=12;break;}else{label=15;break;}
 case 12: 
 var $43=$2;
 var $44=(($43)|0);
 var $45=$44;
 var $46=SAFE_HEAP_LOAD($45, "double*", 0, 0);
 var $47=SAFE_HEAP_LOAD($rows, "i32", 0, 0);
 var $48=_invert($46,$47);
 $dataptr=$48;
 var $49=$dataptr;
 var $50=0==($49|0);
 if($50){label=13;break;}else{label=14;break;}
 case 13: 
 var $52=$2;
 var $53=$out;
 var $54=_errstop(8,0,$52,$53);
 $1=$54;
 label=21;break;
 case 14: 
 label=18;break;
 case 15: 
 var $57=$2;
 var $58=SAFE_HEAP_LOAD($rows, "i32", 0, 0);
 var $59=SAFE_HEAP_LOAD($rows, "i32", 0, 0);
 var $60=SAFE_HEAP_LOAD($rows, "i32", 0, 0);
 var $61=SAFE_HEAP_LOAD($cols, "i32", 0, 0);
 var $62=_regress(0,$57,$58,$59,$60,$61);
 $dataptr=$62;
 var $63=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $64=($63|0)!=0;
 if($64){label=16;break;}else{label=17;break;}
 case 16: 
 $1=0;
 label=21;break;
 case 17: 
 label=18;break;
 case 18: 
 var $68=$dataptr;
 var $69=$68;
 var $70=$2;
 var $71=(($70+8)|0);
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=$2;
 var $74=(($73+12)|0);
 var $75=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $76=_getcb($69,$72,3,$75,0);
 $out=$76;
 var $77=$2;
 var $78=(($77+12)|0);
 var $79=SAFE_HEAP_LOAD($78, "i32", 0, 0);
 var $80=($79|0)>1;
 if($80){label=19;break;}else{label=20;break;}
 case 19: 
 var $82=$out;
 var $83=(($82+16)|0);
 var $84=SAFE_HEAP_LOAD($83, "i32*", 0, 0);
 $dimptr=$84;
 var $85=$2;
 var $86=(($85+16)|0);
 var $87=SAFE_HEAP_LOAD($86, "i32*", 0, 0);
 var $88=(($87+4)|0);
 var $89=SAFE_HEAP_LOAD($88, "i32", 0, 0);
 var $90=$dimptr;
 var $91=(($90+4)|0);
 $dimptr=$91;
 SAFE_HEAP_STORE($90, $89, "i32", 0);
 var $92=$2;
 var $93=(($92+16)|0);
 var $94=SAFE_HEAP_LOAD($93, "i32*", 0, 0);
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $96=$dimptr;
 SAFE_HEAP_STORE($96, $95, "i32", 0);
 label=20;break;
 case 20: 
 var $98=$2;
 var $99=$out;
 var $100=_errstop(0,0,$98,$99);
 $1=$100;
 label=21;break;
 case 21: 
 var $102=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $102;
  default: assert(0, "bad label: " + label);
 }

}


function _matmult($a,$b,$arows,$acols,$bcols){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $j;
 var $k;
 var $t;
 var $m;
 var $n;
 var $c;
 $1=$a;
 $2=$b;
 $3=$arows;
 $4=$acols;
 $5=$bcols;
 var $6=$3;
 var $7=$5;
 var $8=(Math_imul($6,$7)|0);
 var $9=($8<<3);
 var $10=_aplmall($9);
 var $11=$10;
 $c=$11;
 $i=0;
 label=2;break;
 case 2: 
 var $13=$i;
 var $14=$3;
 var $15=($13|0)<($14|0);
 if($15){label=3;break;}else{label=13;break;}
 case 3: 
 var $17=$1;
 var $18=$i;
 var $19=$4;
 var $20=(Math_imul($18,$19)|0);
 var $21=(($17+($20<<3))|0);
 $m=$21;
 var $22=$c;
 var $23=$i;
 var $24=$5;
 var $25=(Math_imul($23,$24)|0);
 var $26=(($22+($25<<3))|0);
 $n=$26;
 $k=0;
 label=4;break;
 case 4: 
 var $28=$k;
 var $29=$5;
 var $30=($28|0)<($29|0);
 if($30){label=5;break;}else{label=11;break;}
 case 5: 
 $t=0;
 $j=0;
 label=6;break;
 case 6: 
 var $33=$j;
 var $34=$4;
 var $35=($33|0)<($34|0);
 if($35){label=7;break;}else{label=9;break;}
 case 7: 
 var $37=$m;
 var $38=$j;
 var $39=(($37+($38<<3))|0);
 var $40=SAFE_HEAP_LOAD($39, "double", 0, 0);
 var $41=$2;
 var $42=$j;
 var $43=$5;
 var $44=(Math_imul($42,$43)|0);
 var $45=(($41+($44<<3))|0);
 var $46=$k;
 var $47=(($45+($46<<3))|0);
 var $48=SAFE_HEAP_LOAD($47, "double", 0, 0);
 var $49=($40)*($48);
 var $50=$t;
 var $51=($50)+($49);
 $t=$51;
 label=8;break;
 case 8: 
 var $53=$j;
 var $54=((($53)+(1))|0);
 $j=$54;
 label=6;break;
 case 9: 
 var $56=$t;
 var $57=$n;
 var $58=$k;
 var $59=(($57+($58<<3))|0);
 SAFE_HEAP_STORE($59, $56, "double", 0);
 label=10;break;
 case 10: 
 var $61=$k;
 var $62=((($61)+(1))|0);
 $k=$62;
 label=4;break;
 case 11: 
 label=12;break;
 case 12: 
 var $65=$i;
 var $66=((($65)+(1))|0);
 $i=$66;
 label=2;break;
 case 13: 
 var $68=$c;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $68;
  default: assert(0, "bad label: " + label);
 }

}


function _mdivarg($arg,$prows,$pcols){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 $1=$arg;
 $2=$prows;
 $3=$pcols;
 $i=1;
 var $4=$1;
 var $5=(($4+12)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 if(($6|0)==0){ label=2;break;}else if(($6|0)==1){ label=3;break;}else if(($6|0)==2){ label=4;break;}else{label=5;break;}
 case 2: 
 var $8=$3;
 SAFE_HEAP_STORE($8, 1, "i32", 0);
 var $9=$2;
 SAFE_HEAP_STORE($9, 1, "i32", 0);
 label=6;break;
 case 3: 
 var $11=$1;
 var $12=(($11+16)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32*", 0, 0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$2;
 SAFE_HEAP_STORE($15, $14, "i32", 0);
 var $16=$3;
 SAFE_HEAP_STORE($16, 1, "i32", 0);
 label=6;break;
 case 4: 
 var $18=$1;
 var $19=(($18+16)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32*", 0, 0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=$2;
 SAFE_HEAP_STORE($22, $21, "i32", 0);
 var $23=$1;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 var $26=(($25+4)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=$3;
 SAFE_HEAP_STORE($28, $27, "i32", 0);
 label=6;break;
 case 5: 
 SAFE_HEAP_STORE(4592, 5, "i32", 0);
 $i=0;
 label=6;break;
 case 6: 
 var $31=$i;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $31;
  default: assert(0, "bad label: " + label);
 }

}


function _mdivide($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $datacnt;
 var $dimptr;
 var $i;
 var $lcols=(sp)+(16);
 var $lrows=(sp)+(24);
 var $rank;
 var $rcols=(sp)+(32);
 var $rrows=(sp)+(40);
 var $dataptr;
 var $f;
 var $inv;
 var $out;
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 $out=0;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $8=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $9=$out;
 var $10=_errstop(0,$7,$8,$9);
 $1=$10;
 label=34;break;
 case 3: 
 var $12=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $13=_mdivarg($12,$rrows,$rcols);
 var $14=0==($13|0);
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $17=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $18=$out;
 var $19=_errstop(0,$16,$17,$18);
 $1=$19;
 label=34;break;
 case 5: 
 var $21=SAFE_HEAP_LOAD($rrows, "i32", 0, 0);
 var $22=SAFE_HEAP_LOAD($rcols, "i32", 0, 0);
 var $23=($21|0)<($22|0);
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $26=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $27=$out;
 var $28=_errstop(6,$25,$26,$27);
 $1=$28;
 label=34;break;
 case 7: 
 var $30=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $31=_mdivarg($30,$lrows,$lcols);
 var $32=0==($31|0);
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $35=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $36=$out;
 var $37=_errstop(0,$34,$35,$36);
 $1=$37;
 label=34;break;
 case 9: 
 var $39=SAFE_HEAP_LOAD($lrows, "i32", 0, 0);
 var $40=SAFE_HEAP_LOAD($rrows, "i32", 0, 0);
 var $41=($39|0)!=($40|0);
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $44=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $45=$out;
 var $46=_errstop(7,$43,$44,$45);
 $1=$46;
 label=34;break;
 case 11: 
 var $48=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $49=(($48+4)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=$50&64;
 var $52=($51|0)!=0;
 if($52){label=13;break;}else{label=12;break;}
 case 12: 
 var $54=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $55=(($54+4)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=$56&64;
 var $58=($57|0)!=0;
 if($58){label=13;break;}else{label=14;break;}
 case 13: 
 var $60=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $61=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $62=$out;
 var $63=_errstop(995,$60,$61,$62);
 $1=$63;
 label=34;break;
 case 14: 
 var $65=_matchok($2,$3,2);
 var $66=($65|0)!=0;
 if($66){label=16;break;}else{label=15;break;}
 case 15: 
 var $68=$out;
 $1=$68;
 label=34;break;
 case 16: 
 var $70=SAFE_HEAP_LOAD($rrows, "i32", 0, 0);
 var $71=SAFE_HEAP_LOAD($rcols, "i32", 0, 0);
 var $72=($70|0)==($71|0);
 if($72){label=17;break;}else{label=20;break;}
 case 17: 
 var $74=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $75=(($74)|0);
 var $76=$75;
 var $77=SAFE_HEAP_LOAD($76, "double*", 0, 0);
 var $78=SAFE_HEAP_LOAD($rrows, "i32", 0, 0);
 var $79=_invert($77,$78);
 $inv=$79;
 var $80=$inv;
 var $81=0==($80|0);
 if($81){label=18;break;}else{label=19;break;}
 case 18: 
 var $83=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $84=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $85=$out;
 var $86=_errstop(8,$83,$84,$85);
 $1=$86;
 label=34;break;
 case 19: 
 var $88=$inv;
 var $89=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $90=(($89)|0);
 var $91=$90;
 var $92=SAFE_HEAP_LOAD($91, "double*", 0, 0);
 var $93=SAFE_HEAP_LOAD($rrows, "i32", 0, 0);
 var $94=SAFE_HEAP_LOAD($rcols, "i32", 0, 0);
 var $95=SAFE_HEAP_LOAD($lcols, "i32", 0, 0);
 var $96=_matmult($88,$92,$93,$94,$95);
 $dataptr=$96;
 var $97=$inv;
 var $98=$97;
 _aplfree($98);
 label=23;break;
 case 20: 
 var $100=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $101=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $102=SAFE_HEAP_LOAD($lrows, "i32", 0, 0);
 var $103=SAFE_HEAP_LOAD($lcols, "i32", 0, 0);
 var $104=SAFE_HEAP_LOAD($rrows, "i32", 0, 0);
 var $105=SAFE_HEAP_LOAD($rcols, "i32", 0, 0);
 var $106=_regress($100,$101,$102,$103,$104,$105);
 $dataptr=$106;
 var $107=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $108=($107|0)!=0;
 if($108){label=21;break;}else{label=22;break;}
 case 21: 
 var $110=$out;
 $1=$110;
 label=34;break;
 case 22: 
 label=23;break;
 case 23: 
 $rank=0;
 var $113=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $114=(($113+12)|0);
 var $115=SAFE_HEAP_LOAD($114, "i32", 0, 0);
 var $116=($115|0)>1;
 if($116){label=24;break;}else{label=25;break;}
 case 24: 
 var $118=$rank;
 var $119=((($118)+(1))|0);
 $rank=$119;
 label=25;break;
 case 25: 
 var $121=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $122=(($121+12)|0);
 var $123=SAFE_HEAP_LOAD($122, "i32", 0, 0);
 var $124=($123|0)>1;
 if($124){label=26;break;}else{label=27;break;}
 case 26: 
 var $126=$rank;
 var $127=((($126)+(1))|0);
 $rank=$127;
 label=27;break;
 case 27: 
 var $129=SAFE_HEAP_LOAD($lcols, "i32", 0, 0);
 var $130=SAFE_HEAP_LOAD($rcols, "i32", 0, 0);
 var $131=(Math_imul($129,$130)|0);
 $datacnt=$131;
 var $132=$dataptr;
 var $133=$132;
 var $134=$datacnt;
 var $135=$rank;
 var $136=_getcb($133,$134,3,$135,0);
 $out=$136;
 var $137=$rank;
 var $138=($137|0)>1;
 if($138){label=28;break;}else{label=33;break;}
 case 28: 
 var $140=$out;
 var $141=(($140+16)|0);
 var $142=SAFE_HEAP_LOAD($141, "i32*", 0, 0);
 $dimptr=$142;
 var $143=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $144=(($143+12)|0);
 var $145=SAFE_HEAP_LOAD($144, "i32", 0, 0);
 var $146=($145|0)>1;
 if($146){label=29;break;}else{label=30;break;}
 case 29: 
 var $148=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $149=(($148+16)|0);
 var $150=SAFE_HEAP_LOAD($149, "i32*", 0, 0);
 var $151=(($150+4)|0);
 var $152=SAFE_HEAP_LOAD($151, "i32", 0, 0);
 var $153=$dimptr;
 var $154=(($153+4)|0);
 $dimptr=$154;
 SAFE_HEAP_STORE($153, $152, "i32", 0);
 label=30;break;
 case 30: 
 var $156=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $157=(($156+12)|0);
 var $158=SAFE_HEAP_LOAD($157, "i32", 0, 0);
 var $159=($158|0)>1;
 if($159){label=31;break;}else{label=32;break;}
 case 31: 
 var $161=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $162=(($161+16)|0);
 var $163=SAFE_HEAP_LOAD($162, "i32*", 0, 0);
 var $164=(($163+4)|0);
 var $165=SAFE_HEAP_LOAD($164, "i32", 0, 0);
 var $166=$dimptr;
 SAFE_HEAP_STORE($166, $165, "i32", 0);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $169=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $170=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $171=$out;
 var $172=_errstop(0,$169,$170,$171);
 $1=$172;
 label=34;break;
 case 34: 
 var $174=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $174;
  default: assert(0, "bad label: " + label);
 }

}


function _member($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$2;
 var $4=$1;
 var $5=_memixcm(0,$3,$4);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $5;
}


function _memixb($key,$left,$rite,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k;
 var $op;
 var $curd;
 var $hid;
 var $lod;
 var $lp;
 var $rp;
 var $lw;
 $1=$key;
 $2=$left;
 $3=$rite;
 $4=$out;
 var $5=$2;
 var $6=(($5)|0);
 var $7=$6;
 var $8=SAFE_HEAP_LOAD($7, "double*", 0, 0);
 $lp=$8;
 var $9=$3;
 var $10=(($9)|0);
 var $11=$10;
 var $12=SAFE_HEAP_LOAD($11, "double*", 0, 0);
 $rp=$12;
 var $13=$4;
 var $14=(($13)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "i32*", 0, 0);
 $op=$16;
 $i=0;
 label=2;break;
 case 2: 
 var $18=$i;
 var $19=$3;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($18|0)<($21|0);
 if($22){label=3;break;}else{label=16;break;}
 case 3: 
 var $24=$lp;
 $lw=$24;
 $k=0;
 var $25=$rp;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $28=($26)-($27);
 $lod=$28;
 var $29=$rp;
 var $30=SAFE_HEAP_LOAD($29, "double", 0, 0);
 var $31=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $32=($30)+($31);
 $hid=$32;
 $j=0;
 label=4;break;
 case 4: 
 var $34=$j;
 var $35=$2;
 var $36=(($35+8)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=($34|0)<($37|0);
 if($38){label=5;break;}else{label=12;break;}
 case 5: 
 var $40=$lw;
 var $41=(($40+8)|0);
 $lw=$41;
 var $42=SAFE_HEAP_LOAD($40, "double", 0, 0);
 $curd=$42;
 var $43=$curd;
 var $44=$lod;
 var $45=$43>=$44;
 if($45){label=6;break;}else{label=8;break;}
 case 6: 
 var $47=$curd;
 var $48=$hid;
 var $49=$47<=$48;
 if($49){label=7;break;}else{label=8;break;}
 case 7: 
 $k=1;
 label=8;break;
 case 8: 
 var $52=$k;
 var $53=($52|0)!=0;
 if($53){label=9;break;}else{label=10;break;}
 case 9: 
 label=12;break;
 case 10: 
 label=11;break;
 case 11: 
 var $57=$j;
 var $58=((($57)+(1))|0);
 $j=$58;
 label=4;break;
 case 12: 
 var $60=$1;
 var $61=($60|0)!=0;
 if($61){label=13;break;}else{label=14;break;}
 case 13: 
 var $63=$j;
 var $64=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $65=((($63)+($64))|0);
 $k=$65;
 label=14;break;
 case 14: 
 var $67=$k;
 var $68=$op;
 var $69=(($68+4)|0);
 $op=$69;
 SAFE_HEAP_STORE($68, $67, "i32", 0);
 var $70=$rp;
 var $71=(($70+8)|0);
 $rp=$71;
 label=15;break;
 case 15: 
 var $73=$i;
 var $74=((($73)+(1))|0);
 $i=$74;
 label=2;break;
 case 16: 
 var $76=$2;
 var $77=$3;
 var $78=$4;
 var $79=_errstop(0,$76,$77,$78);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $79;
  default: assert(0, "bad label: " + label);
 }

}


function _memixc($key,$left,$rite,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k;
 var $op;
 var $lp;
 var $rp;
 var $lw;
 $1=$key;
 $2=$left;
 $3=$rite;
 $4=$out;
 var $5=$2;
 var $6=(($5)|0);
 var $7=$6;
 var $8=SAFE_HEAP_LOAD($7, "i32*", 0, 0);
 $lp=$8;
 var $9=$3;
 var $10=(($9)|0);
 var $11=$10;
 var $12=SAFE_HEAP_LOAD($11, "i32*", 0, 0);
 $rp=$12;
 var $13=$4;
 var $14=(($13)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "i32*", 0, 0);
 $op=$16;
 $i=0;
 label=2;break;
 case 2: 
 var $18=$i;
 var $19=$3;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($18|0)<($21|0);
 if($22){label=3;break;}else{label=15;break;}
 case 3: 
 var $24=$lp;
 $lw=$24;
 $k=0;
 $j=0;
 label=4;break;
 case 4: 
 var $26=$j;
 var $27=$2;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=($26|0)<($29|0);
 if($30){label=5;break;}else{label=11;break;}
 case 5: 
 var $32=$rp;
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=$lw;
 var $35=(($34+4)|0);
 $lw=$35;
 var $36=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $37=($33|0)==($36|0);
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 $k=1;
 label=7;break;
 case 7: 
 var $40=$k;
 var $41=($40|0)!=0;
 if($41){label=8;break;}else{label=9;break;}
 case 8: 
 label=11;break;
 case 9: 
 label=10;break;
 case 10: 
 var $45=$j;
 var $46=((($45)+(1))|0);
 $j=$46;
 label=4;break;
 case 11: 
 var $48=$1;
 var $49=($48|0)!=0;
 if($49){label=12;break;}else{label=13;break;}
 case 12: 
 var $51=$j;
 var $52=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $53=((($51)+($52))|0);
 $k=$53;
 label=13;break;
 case 13: 
 var $55=$k;
 var $56=$op;
 var $57=(($56+4)|0);
 $op=$57;
 SAFE_HEAP_STORE($56, $55, "i32", 0);
 var $58=$rp;
 var $59=(($58+4)|0);
 $rp=$59;
 label=14;break;
 case 14: 
 var $61=$i;
 var $62=((($61)+(1))|0);
 $i=$62;
 label=2;break;
 case 15: 
 var $64=$2;
 var $65=$3;
 var $66=$4;
 var $67=_errstop(0,$64,$65,$66);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $67;
  default: assert(0, "bad label: " + label);
 }

}


function _memixcm($key,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $out;
 var $dimptr;
 $2=$key;
 SAFE_HEAP_STORE($3, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 var $5=_matchok($3,$4,110);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=13;break;
 case 3: 
 var $9=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $10=(($9+8)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $13=(($12+12)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=_getcb(0,$11,5,$14,0);
 $out=$15;
 var $16=$out;
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=($18|0)>1;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=$out;
 var $22=(($21+16)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32*", 0, 0);
 var $24=$23;
 var $25=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $26=(($25+16)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32*", 0, 0);
 var $28=$27;
 var $29=$out;
 var $30=(($29+12)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=_intcopy($24,$28,$31,1);
 var $33=$32;
 $dimptr=$33;
 label=5;break;
 case 5: 
 var $35=$out;
 var $36=(($35+8)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=0==($37|0);
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $41=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $42=$out;
 var $43=_errstop(0,$40,$41,$42);
 $1=$43;
 label=13;break;
 case 7: 
 var $45=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $46=(($45+4)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=$47&110;
 switch(($48|0)){case 8:{ label=10;break;}case 32:{ label=11;break;}case 64:{ label=12;break;}case 2:{ label=8;break;}case 4:{ label=9;break;}default:{label=13;break;}}break;
 case 8: 
 var $50=$2;
 var $51=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $52=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $53=$out;
 var $54=_memixb($50,$51,$52,$53);
 $1=$54;
 label=13;break;
 case 9: 
 var $56=$2;
 var $57=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $58=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $59=$out;
 var $60=_memixc($56,$57,$58,$59);
 $1=$60;
 label=13;break;
 case 10: 
 var $62=$2;
 var $63=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $64=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $65=$out;
 var $66=_memixd($62,$63,$64,$65);
 $1=$66;
 label=13;break;
 case 11: 
 var $68=$2;
 var $69=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $70=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $71=$out;
 var $72=_memixe($68,$69,$70,$71);
 $1=$72;
 label=13;break;
 case 12: 
 var $74=$2;
 var $75=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $76=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $77=$out;
 var $78=_memixf($74,$75,$76,$77);
 $1=$78;
 label=13;break;
 case 13: 
 var $80=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $80;
  default: assert(0, "bad label: " + label);
 }

}


function _memixd($key,$left,$rite,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k;
 var $op;
 var $lp;
 var $rp;
 var $lw;
 $1=$key;
 $2=$left;
 $3=$rite;
 $4=$out;
 var $5=$2;
 var $6=(($5)|0);
 var $7=$6;
 var $8=SAFE_HEAP_LOAD($7, "i8*", 0, 0);
 $lp=$8;
 var $9=$3;
 var $10=(($9)|0);
 var $11=$10;
 var $12=SAFE_HEAP_LOAD($11, "i8*", 0, 0);
 $rp=$12;
 var $13=$4;
 var $14=(($13)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "i32*", 0, 0);
 $op=$16;
 $i=0;
 label=2;break;
 case 2: 
 var $18=$i;
 var $19=$3;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($18|0)<($21|0);
 if($22){label=3;break;}else{label=15;break;}
 case 3: 
 var $24=$lp;
 $lw=$24;
 $k=0;
 $j=0;
 label=4;break;
 case 4: 
 var $26=$j;
 var $27=$2;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=($26|0)<($29|0);
 if($30){label=5;break;}else{label=11;break;}
 case 5: 
 var $32=$rp;
 var $33=SAFE_HEAP_LOAD($32, "i8", 0, 0);
 var $34=(($33<<24)>>24);
 var $35=$lw;
 var $36=(($35+1)|0);
 $lw=$36;
 var $37=SAFE_HEAP_LOAD($35, "i8", 0, 0);
 var $38=(($37<<24)>>24);
 var $39=($34|0)==($38|0);
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 $k=1;
 label=7;break;
 case 7: 
 var $42=$k;
 var $43=($42|0)!=0;
 if($43){label=8;break;}else{label=9;break;}
 case 8: 
 label=11;break;
 case 9: 
 label=10;break;
 case 10: 
 var $47=$j;
 var $48=((($47)+(1))|0);
 $j=$48;
 label=4;break;
 case 11: 
 var $50=$1;
 var $51=($50|0)!=0;
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $53=$j;
 var $54=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $55=((($53)+($54))|0);
 $k=$55;
 label=13;break;
 case 13: 
 var $57=$k;
 var $58=$op;
 var $59=(($58+4)|0);
 $op=$59;
 SAFE_HEAP_STORE($58, $57, "i32", 0);
 var $60=$rp;
 var $61=(($60+1)|0);
 $rp=$61;
 label=14;break;
 case 14: 
 var $63=$i;
 var $64=((($63)+(1))|0);
 $i=$64;
 label=2;break;
 case 15: 
 var $66=$2;
 var $67=$3;
 var $68=$4;
 var $69=_errstop(0,$66,$67,$68);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $69;
  default: assert(0, "bad label: " + label);
 }

}


function _memixe($key,$left,$rite,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k;
 var $op;
 var $lp;
 var $rp;
 var $lw;
 $1=$key;
 $2=$left;
 $3=$rite;
 $4=$out;
 var $5=$2;
 var $6=(($5)|0);
 var $7=$6;
 var $8=SAFE_HEAP_LOAD($7, "%struct.aplcb**", 0, 0);
 $lp=$8;
 var $9=$3;
 var $10=(($9)|0);
 var $11=$10;
 var $12=SAFE_HEAP_LOAD($11, "%struct.aplcb**", 0, 0);
 $rp=$12;
 var $13=$4;
 var $14=(($13)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "i32*", 0, 0);
 $op=$16;
 $i=0;
 label=2;break;
 case 2: 
 var $18=$i;
 var $19=$3;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($18|0)<($21|0);
 if($22){label=3;break;}else{label=13;break;}
 case 3: 
 var $24=$lp;
 $lw=$24;
 $k=0;
 $j=0;
 label=4;break;
 case 4: 
 var $26=$j;
 var $27=$2;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=($26|0)<($29|0);
 if($30){label=5;break;}else{label=9;break;}
 case 5: 
 var $32=$lw;
 var $33=(($32+4)|0);
 $lw=$33;
 var $34=SAFE_HEAP_LOAD($32, "%struct.aplcb*", 0, 0);
 var $35=$rp;
 var $36=SAFE_HEAP_LOAD($35, "%struct.aplcb*", 0, 0);
 var $37=_aplmatch($34,$36);
 $k=$37;
 var $38=$k;
 var $39=($38|0)!=0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $43=$j;
 var $44=((($43)+(1))|0);
 $j=$44;
 label=4;break;
 case 9: 
 var $46=$1;
 var $47=($46|0)!=0;
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=$j;
 var $50=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $51=((($49)+($50))|0);
 $k=$51;
 label=11;break;
 case 11: 
 var $53=$k;
 var $54=$op;
 var $55=(($54+4)|0);
 $op=$55;
 SAFE_HEAP_STORE($54, $53, "i32", 0);
 var $56=$rp;
 var $57=(($56+4)|0);
 $rp=$57;
 label=12;break;
 case 12: 
 var $59=$i;
 var $60=((($59)+(1))|0);
 $i=$60;
 label=2;break;
 case 13: 
 var $62=$2;
 var $63=$3;
 var $64=$4;
 var $65=_errstop(0,$62,$63,$64);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $65;
  default: assert(0, "bad label: " + label);
 }

}


function _memixf($key,$left,$rite,$out){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $j;
 var $k=sp;
 var $op;
 var $lp;
 var $rp;
 var $lw;
 $1=$key;
 $2=$left;
 $3=$rite;
 $4=$out;
 var $5=$2;
 var $6=(($5)|0);
 var $7=$6;
 var $8=SAFE_HEAP_LOAD($7, "double*", 0, 0);
 $lp=$8;
 var $9=$3;
 var $10=(($9)|0);
 var $11=$10;
 var $12=SAFE_HEAP_LOAD($11, "double*", 0, 0);
 $rp=$12;
 var $13=$4;
 var $14=(($13)|0);
 var $15=$14;
 var $16=SAFE_HEAP_LOAD($15, "i32*", 0, 0);
 $op=$16;
 $i=0;
 label=2;break;
 case 2: 
 var $18=$i;
 var $19=$3;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($18|0)<($21|0);
 if($22){label=3;break;}else{label=13;break;}
 case 3: 
 var $24=$lp;
 $lw=$24;
 SAFE_HEAP_STORE($k, 0, "i32", 0);
 $j=0;
 label=4;break;
 case 4: 
 var $26=$j;
 var $27=$2;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=($26|0)<($29|0);
 if($30){label=5;break;}else{label=9;break;}
 case 5: 
 var $32=$rp;
 var $33=$lw;
 _eqx($32,$33,$k);
 var $34=$lw;
 var $35=(($34+16)|0);
 $lw=$35;
 var $36=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $37=($36|0)!=0;
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $41=$j;
 var $42=((($41)+(1))|0);
 $j=$42;
 label=4;break;
 case 9: 
 var $44=$1;
 var $45=($44|0)!=0;
 if($45){label=10;break;}else{label=11;break;}
 case 10: 
 var $47=$j;
 var $48=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $49=((($47)+($48))|0);
 SAFE_HEAP_STORE($k, $49, "i32", 0);
 label=11;break;
 case 11: 
 var $51=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $52=$op;
 var $53=(($52+4)|0);
 $op=$53;
 SAFE_HEAP_STORE($52, $51, "i32", 0);
 var $54=$rp;
 var $55=(($54+16)|0);
 $rp=$55;
 label=12;break;
 case 12: 
 var $57=$i;
 var $58=((($57)+(1))|0);
 $i=$58;
 label=2;break;
 case 13: 
 var $60=$2;
 var $61=$3;
 var $62=$4;
 var $63=_errstop(0,$60,$61,$62);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $63;
  default: assert(0, "bad label: " + label);
 }

}


function _minus($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3)-($4);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $5;
}


function _minusp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)-($7);
 var $9=$3;
 SAFE_HEAP_STORE($9, $8, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _minusx($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)-($7);
 var $9=$3;
 SAFE_HEAP_STORE($9, $8, "double", 0);
 var $10=$1;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "double", 0, 0);
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "double", 0, 0);
 var $16=($12)-($15);
 var $17=$3;
 var $18=(($17+8)|0);
 SAFE_HEAP_STORE($18, $16, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _mod($num,$den){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$num;
 $2=$den;
 var $3=$1;
 var $4=$2;
 var $5=$1;
 var $6=$2;
 var $7=$2;
 var $8=$7==0;
 var $9=($8&1);
 var $10=($9|0);
 var $11=($6)+($10);
 var $12=($5)/($11);
 var $13=Math_floor($12);
 var $14=($4)*($13);
 var $15=($3)-($14);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $15;
}


function _monfront($fun,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $oper;
 var $out;
 var $dimptr;
 var $i;
 var $intype;
 var $outype;
 var $ritetype;
 var $idata;
 var $odata;
 $2=$fun;
 $3=$rite;
 $oper=0;
 $out=0;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $8=_errstop(0,0,$7,0);
 $1=$8;
 label=38;break;
 case 3: 
 var $10=$3;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&78;
 $ritetype=$13;
 $outype=$13;
 $intype=$13;
 if(($13|0)==64){ label=12;break;}else if(($13|0)==4){ label=4;break;}else if(($13|0)==2){ label=7;break;}else{label=17;break;}
 case 4: 
 var $15=$2;
 var $16=(($15)|0);
 var $17=(($16)|0);
 var $18=SAFE_HEAP_LOAD($17, "void (i32*, i32*)*", 0, 0);
 var $19=$18;
 $oper=$19;
 var $20=0!=($19|0);
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 label=18;break;
 case 6: 
 $intype=2;
 label=7;break;
 case 7: 
 $outype=4;
 var $24=$2;
 var $25=(($24)|0);
 var $26=(($25+8)|0);
 var $27=SAFE_HEAP_LOAD($26, "void (double*, i32*)*", 0, 0);
 var $28=$27;
 $oper=$28;
 var $29=0!=($28|0);
 if($29){label=8;break;}else{label=9;break;}
 case 8: 
 label=18;break;
 case 9: 
 $outype=2;
 var $32=$2;
 var $33=(($32)|0);
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "void (double*, double*)*", 0, 0);
 var $36=$35;
 $oper=$36;
 var $37=0!=($36|0);
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 label=18;break;
 case 11: 
 $outype=64;
 $intype=64;
 label=12;break;
 case 12: 
 var $41=$2;
 var $42=(($41)|0);
 var $43=(($42+12)|0);
 var $44=SAFE_HEAP_LOAD($43, "void (double*, double*)*", 0, 0);
 var $45=$44;
 $oper=$45;
 var $46=0!=($45|0);
 if($46){label=13;break;}else{label=14;break;}
 case 13: 
 label=18;break;
 case 14: 
 $outype=2;
 $intype=2;
 var $49=$2;
 var $50=(($49)|0);
 var $51=(($50+4)|0);
 var $52=SAFE_HEAP_LOAD($51, "void (double*, double*)*", 0, 0);
 var $53=$52;
 $oper=$53;
 var $54=0!=($53|0);
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 label=18;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $59=$oper;
 var $60=($59|0)==0;
 if($60){label=19;break;}else{label=20;break;}
 case 19: 
 var $62=$3;
 var $63=_errstop(73,0,$62,0);
 $1=$63;
 label=38;break;
 case 20: 
 var $65=$intype;
 var $66=$ritetype;
 var $67=($65|0)!=($66|0);
 if($67){label=21;break;}else{label=27;break;}
 case 21: 
 var $69=$intype;
 if(($69|0)==2){ label=22;break;}else if(($69|0)==64){ label=23;break;}else if(($69|0)==4){ label=24;break;}else{label=25;break;}
 case 22: 
 var $71=$3;
 var $72=_real($71);
 $3=$72;
 label=26;break;
 case 23: 
 var $74=$3;
 var $75=_complex($74);
 $3=$75;
 label=26;break;
 case 24: 
 var $77=$3;
 var $78=_integer($77);
 $3=$78;
 label=26;break;
 case 25: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $82=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $83=($82|0)!=0;
 if($83){label=28;break;}else{label=29;break;}
 case 28: 
 var $85=$3;
 var $86=_errstop(0,0,$85,0);
 $1=$86;
 label=38;break;
 case 29: 
 var $88=$3;
 var $89=(($88+8)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=$outype;
 var $92=((($91)+(1))|0);
 var $93=$3;
 var $94=(($93+12)|0);
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $96=_getcb(0,$90,$92,$95,0);
 $out=$96;
 var $97=$out;
 var $98=(($97+12)|0);
 var $99=SAFE_HEAP_LOAD($98, "i32", 0, 0);
 var $100=($99|0)>1;
 if($100){label=30;break;}else{label=31;break;}
 case 30: 
 var $102=$out;
 var $103=(($102+16)|0);
 var $104=SAFE_HEAP_LOAD($103, "i32*", 0, 0);
 var $105=$104;
 var $106=$3;
 var $107=(($106+16)|0);
 var $108=SAFE_HEAP_LOAD($107, "i32*", 0, 0);
 var $109=$108;
 var $110=$out;
 var $111=(($110+12)|0);
 var $112=SAFE_HEAP_LOAD($111, "i32", 0, 0);
 var $113=_intcopy($105,$109,$112,1);
 var $114=$113;
 $dimptr=$114;
 label=31;break;
 case 31: 
 var $116=$out;
 var $117=(($116+8)|0);
 var $118=SAFE_HEAP_LOAD($117, "i32", 0, 0);
 var $119=($118|0)!=0;
 if($119){label=32;break;}else{label=37;break;}
 case 32: 
 var $121=$out;
 var $122=(($121)|0);
 var $123=$122;
 var $124=SAFE_HEAP_LOAD($123, "i8*", 0, 0);
 $odata=$124;
 var $125=$3;
 var $126=(($125)|0);
 var $127=$126;
 var $128=SAFE_HEAP_LOAD($127, "i8*", 0, 0);
 $idata=$128;
 var $129=$out;
 var $130=(($129+8)|0);
 var $131=SAFE_HEAP_LOAD($130, "i32", 0, 0);
 $i=$131;
 label=33;break;
 case 33: 
 var $133=$i;
 var $134=($133|0)>0;
 if($134){label=34;break;}else{label=36;break;}
 case 34: 
 var $136=$oper;
 var $137=$idata;
 var $138=$odata;
 var $139=$136;
 FUNCTION_TABLE[$139]($137,$138);
 var $140=$out;
 var $141=(($140+20)|0);
 var $142=SAFE_HEAP_LOAD($141, "i32", 0, 0);
 var $143=$odata;
 var $144=(($143+$142)|0);
 $odata=$144;
 var $145=$3;
 var $146=(($145+20)|0);
 var $147=SAFE_HEAP_LOAD($146, "i32", 0, 0);
 var $148=$idata;
 var $149=(($148+$147)|0);
 $idata=$149;
 label=35;break;
 case 35: 
 var $151=$i;
 var $152=((($151)-(1))|0);
 $i=$152;
 label=33;break;
 case 36: 
 label=37;break;
 case 37: 
 var $155=$3;
 var $156=$out;
 var $157=_errstop(0,0,$155,$156);
 $1=$157;
 label=38;break;
 case 38: 
 var $159=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $159;
  default: assert(0, "bad label: " + label);
 }

}


function _namelen($nameary,$colsize,$ix,$nameptr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $s;
 var $t=sp;
 var $u=(sp)+(8);
 var $v;
 var $code;
 var $len;
 $2=$nameary;
 $3=$colsize;
 $4=$ix;
 $5=$nameptr;
 var $6=$2;
 var $7=$4;
 var $8=$3;
 var $9=(Math_imul($7,$8)|0);
 var $10=(($6+$9)|0);
 var $11=$5;
 SAFE_HEAP_STORE($11, $10, "i8*", 0);
 $s=$10;
 var $12=(($10+1)|0);
 SAFE_HEAP_STORE($t, $12, "i8*", 0);
 var $13=$s;
 var $14=SAFE_HEAP_LOAD($13, "i8", 0, 0);
 var $15=(($14<<24)>>24);
 var $16=_codechar(44);
 var $17=SAFE_HEAP_LOAD($16, "i8", 0, 0);
 var $18=(($17<<24)>>24);
 var $19=($15|0)==($18|0);
 if($19){label=2;break;}else{label=4;break;}
 case 2: 
 var $21=$s;
 var $22=$3;
 var $23=(($21+$22)|0);
 var $24=_aplquae($t,$23);
 var $25=($24|0)!=0;
 if($25){label=3;break;}else{label=4;break;}
 case 3: 
 var $27=SAFE_HEAP_LOAD($t, "i8*", 0, 0);
 SAFE_HEAP_STORE($u, $27, "i8*", 0);
 label=5;break;
 case 4: 
 var $29=$s;
 var $30=$s;
 var $31=$3;
 var $32=(($30+$31)|0);
 var $33=_aplname($29,$32);
 SAFE_HEAP_STORE($t, $33, "i8*", 0);
 SAFE_HEAP_STORE($u, $33, "i8*", 0);
 label=5;break;
 case 5: 
 var $35=SAFE_HEAP_LOAD($u, "i8*", 0, 0);
 var $36=$s;
 var $37=$3;
 var $38=(($36+$37)|0);
 var $39=($35|0)==($38|0);
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 $code=0;
 label=8;break;
 case 7: 
 var $42=$s;
 var $43=$3;
 var $44=(($42+$43)|0);
 var $45=_aplscan($u,$44);
 $code=$45;
 label=8;break;
 case 8: 
 var $47=SAFE_HEAP_LOAD($t, "i8*", 0, 0);
 var $48=$s;
 var $49=$47;
 var $50=$48;
 var $51=((($49)-($50))|0);
 $len=$51;
 var $52=0==($51|0);
 if($52){label=11;break;}else{label=9;break;}
 case 9: 
 var $54=$code;
 var $55=($54|0)!=0;
 if($55){label=11;break;}else{label=10;break;}
 case 10: 
 var $57=SAFE_HEAP_LOAD($u, "i8*", 0, 0);
 var $58=$s;
 var $59=$3;
 var $60=(($58+$59)|0);
 var $61=($57|0)!=($60|0);
 if($61){label=11;break;}else{label=12;break;}
 case 11: 
 $1=0;
 label=13;break;
 case 12: 
 var $64=$len;
 $1=$64;
 label=13;break;
 case 13: 
 var $66=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $66;
  default: assert(0, "bad label: " + label);
 }

}


function _nand($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ileft;
 var $irite;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $5=((-.0))-($4);
 var $6=$3>=$5;
 var $7=($6&1);
 var $8=$1;
 var $9=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $10=$8<=$9;
 var $11=($10&1);
 var $12=$7&$11;
 var $13=($12|0)!=0;
 var $14=$13^1;
 var $15=($14&1);
 $ileft=$15;
 var $16=$2;
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=((-.0))-($17);
 var $19=$16>=$18;
 var $20=($19&1);
 var $21=$2;
 var $22=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $23=$21<=$22;
 var $24=($23&1);
 var $25=$20&$24;
 var $26=($25|0)!=0;
 var $27=$26^1;
 var $28=($27&1);
 $irite=$28;
 var $29=$ileft;
 var $30=$irite;
 var $31=$29&$30;
 var $32=($31|0)!=0;
 var $33=$32^1;
 var $34=($33&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $34;
}


function _nandp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $ileft;
 var $irite;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=((-.0))-($6);
 var $8=$5>=$7;
 var $9=($8&1);
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $13=$11<=$12;
 var $14=($13&1);
 var $15=$9&$14;
 var $16=($15|0)!=0;
 var $17=$16^1;
 var $18=($17&1);
 $ileft=$18;
 var $19=$2;
 var $20=SAFE_HEAP_LOAD($19, "double", 0, 0);
 var $21=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $22=((-.0))-($21);
 var $23=$20>=$22;
 var $24=($23&1);
 var $25=$2;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $28=$26<=$27;
 var $29=($28&1);
 var $30=$24&$29;
 var $31=($30|0)!=0;
 var $32=$31^1;
 var $33=($32&1);
 $irite=$33;
 var $34=$ileft;
 var $35=$irite;
 var $36=$34&$35;
 var $37=($36|0)!=0;
 var $38=$37^1;
 var $39=($38&1);
 var $40=$3;
 SAFE_HEAP_STORE($40, $39, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _ne($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $diff;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=$3>$4;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=$2;
 var $9=($7)-($8);
 var $15=$9;label=4;break;
 case 3: 
 var $11=$2;
 var $12=$1;
 var $13=($11)-($12);
 var $15=$13;label=4;break;
 case 4: 
 var $15;
 $diff=$15;
 var $16=$diff;
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=$16>$17;
 var $19=($18&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }

}


function _negative($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=((-.0))-($2);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $3;
}


function _negativp($rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$rite;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=((-.0))-($4);
 var $6=$2;
 SAFE_HEAP_STORE($6, $5, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _negativx($rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$rite;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=((-.0))-($4);
 var $6=$2;
 SAFE_HEAP_STORE($6, $5, "double", 0);
 var $7=$1;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 var $10=((-.0))-($9);
 var $11=$2;
 var $12=(($11+8)|0);
 SAFE_HEAP_STORE($12, $10, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _nep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=$5>$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=$2;
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 var $14=($11)-($13);
 var $22=$14;label=4;break;
 case 3: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 var $18=$1;
 var $19=SAFE_HEAP_LOAD($18, "double", 0, 0);
 var $20=($17)-($19);
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 $diff=$22;
 var $23=$diff;
 var $24=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $25=$23>$24;
 var $26=($25&1);
 var $27=$3;
 SAFE_HEAP_STORE($27, $26, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _nestchar($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $cb;
 var $cbp;
 var $out;
 var $cbcount;
 var $maxlen;
 var $thislen;
 var $op;
 $1=$rite;
 $out=0;
 var $2=$1;
 var $3=(($2)|0);
 var $4=$3;
 var $5=SAFE_HEAP_LOAD($4, "%struct.aplcb**", 0, 0);
 $cbp=$5;
 var $6=$1;
 var $7=(($6+8)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $cbcount=$8;
 $maxlen=0;
 label=2;break;
 case 2: 
 var $10=$cbcount;
 var $11=((($10)-(1))|0);
 $cbcount=$11;
 var $12=($10|0)!=0;
 if($12){label=3;break;}else{label=6;break;}
 case 3: 
 var $14=$cbp;
 var $15=(($14+4)|0);
 $cbp=$15;
 var $16=SAFE_HEAP_LOAD($14, "%struct.aplcb*", 0, 0);
 var $17=(($16+8)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 $thislen=$18;
 var $19=$thislen;
 var $20=$maxlen;
 var $21=($19|0)>($20|0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=$thislen;
 $maxlen=$23;
 label=5;break;
 case 5: 
 label=2;break;
 case 6: 
 var $26=$1;
 var $27=(($26+8)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=$maxlen;
 var $30=(Math_imul($28,$29)|0);
 var $31=_getcb(0,$30,9,2,0);
 $out=$31;
 var $32=$out;
 var $33=($32|0)!=0;
 if($33){label=7;break;}else{label=11;break;}
 case 7: 
 var $35=$1;
 var $36=(($35+8)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 $cbcount=$37;
 var $38=$cbcount;
 var $39=$out;
 var $40=(($39+16)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32*", 0, 0);
 SAFE_HEAP_STORE($41, $38, "i32", 0);
 var $42=$maxlen;
 var $43=$out;
 var $44=(($43+16)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32*", 0, 0);
 var $46=(($45+4)|0);
 SAFE_HEAP_STORE($46, $42, "i32", 0);
 var $47=$out;
 var $48=(($47)|0);
 var $49=$48;
 var $50=SAFE_HEAP_LOAD($49, "i8*", 0, 0);
 var $51=$out;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=_chrcopy($50,2608,$53,0);
 var $55=$1;
 var $56=(($55)|0);
 var $57=$56;
 var $58=SAFE_HEAP_LOAD($57, "%struct.aplcb**", 0, 0);
 $cbp=$58;
 var $59=$out;
 var $60=(($59)|0);
 var $61=$60;
 var $62=SAFE_HEAP_LOAD($61, "i8*", 0, 0);
 $op=$62;
 label=8;break;
 case 8: 
 var $64=$cbcount;
 var $65=((($64)-(1))|0);
 $cbcount=$65;
 var $66=($64|0)!=0;
 if($66){label=9;break;}else{label=10;break;}
 case 9: 
 var $68=$cbp;
 var $69=(($68+4)|0);
 $cbp=$69;
 var $70=SAFE_HEAP_LOAD($68, "%struct.aplcb*", 0, 0);
 $cb=$70;
 var $71=$cb;
 var $72=(($71+8)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 $thislen=$73;
 var $74=$op;
 var $75=$cb;
 var $76=(($75)|0);
 var $77=$76;
 var $78=SAFE_HEAP_LOAD($77, "i8*", 0, 0);
 var $79=$thislen;
 var $80=_chrcopy($74,$78,$79,1);
 $op=$80;
 var $81=$maxlen;
 var $82=$thislen;
 var $83=((($81)-($82))|0);
 var $84=$op;
 var $85=(($84+$83)|0);
 $op=$85;
 label=8;break;
 case 10: 
 label=11;break;
 case 11: 
 var $88=$1;
 var $89=$out;
 var $90=_errstop(0,0,$88,$89);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }

}


function _newderiv($axcb,$lcb,$rcb){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $dp;
 $2=$axcb;
 $3=$lcb;
 $4=$rcb;
 var $5=_aplmall(80);
 var $6=$5;
 $dp=$6;
 var $7=$dp;
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$3;
 var $11=$4;
 var $12=$2;
 var $13=_errstop(0,$10,$11,$12);
 _endoper($13);
 $1=0;
 label=20;break;
 case 3: 
 var $15=$dp;
 var $16=(($15)|0);
 SAFE_HEAP_STORE($16, 0, "i32", 0);
 var $17=$2;
 var $18=$dp;
 var $19=(($18+16)|0);
 SAFE_HEAP_STORE($19, $17, "%struct.aplcb*", 0);
 var $20=($17|0)!=0;
 if($20){label=4;break;}else{label=8;break;}
 case 4: 
 var $22=$2;
 var $23=(($22+4)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=$24&1;
 var $26=($25|0)!=0;
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $28=$2;
 var $29=(($28+4)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=((($30)-(1))|0);
 SAFE_HEAP_STORE($29, $31, "i32", 0);
 label=7;break;
 case 6: 
 var $33=$2;
 var $34=_aplcopy($33);
 var $35=$dp;
 var $36=(($35+16)|0);
 SAFE_HEAP_STORE($36, $34, "%struct.aplcb*", 0);
 $2=$34;
 label=7;break;
 case 7: 
 var $38=$2;
 var $39=_value($38);
 var $40=$dp;
 var $41=(($40+8)|0);
 SAFE_HEAP_STORE($41, $39, "double", 0);
 var $42=$dp;
 var $43=(($42+8)|0);
 var $44=SAFE_HEAP_LOAD($43, "double", 0, 0);
 var $45=(($44)&-1);
 var $46=$dp;
 var $47=(($46+4)|0);
 SAFE_HEAP_STORE($47, $45, "i32", 0);
 label=9;break;
 case 8: 
 var $49=$dp;
 var $50=(($49+4)|0);
 SAFE_HEAP_STORE($50, -1, "i32", 0);
 var $51=$dp;
 var $52=(($51+8)|0);
 SAFE_HEAP_STORE($52, -1, "double", 0);
 label=9;break;
 case 9: 
 var $54=$3;
 var $55=$dp;
 var $56=(($55+28)|0);
 var $57=(($56+12)|0);
 SAFE_HEAP_STORE($57, $54, "%struct.aplcb*", 0);
 var $58=($54|0)!=0;
 if($58){label=10;break;}else{label=14;break;}
 case 10: 
 var $60=$3;
 var $61=(($60+4)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=$62&1;
 var $64=($63|0)!=0;
 if($64){label=11;break;}else{label=12;break;}
 case 11: 
 var $66=$3;
 var $67=(($66+4)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=((($68)-(1))|0);
 SAFE_HEAP_STORE($67, $69, "i32", 0);
 label=13;break;
 case 12: 
 var $71=$3;
 var $72=_aplcopy($71);
 var $73=$dp;
 var $74=(($73+28)|0);
 var $75=(($74+12)|0);
 SAFE_HEAP_STORE($75, $72, "%struct.aplcb*", 0);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $78=$4;
 var $79=$dp;
 var $80=(($79+52)|0);
 var $81=(($80+12)|0);
 SAFE_HEAP_STORE($81, $78, "%struct.aplcb*", 0);
 var $82=($78|0)!=0;
 if($82){label=15;break;}else{label=19;break;}
 case 15: 
 var $84=$4;
 var $85=(($84+4)|0);
 var $86=SAFE_HEAP_LOAD($85, "i32", 0, 0);
 var $87=$86&1;
 var $88=($87|0)!=0;
 if($88){label=16;break;}else{label=17;break;}
 case 16: 
 var $90=$4;
 var $91=(($90+4)|0);
 var $92=SAFE_HEAP_LOAD($91, "i32", 0, 0);
 var $93=((($92)-(1))|0);
 SAFE_HEAP_STORE($91, $93, "i32", 0);
 label=18;break;
 case 17: 
 var $95=$4;
 var $96=_aplcopy($95);
 var $97=$dp;
 var $98=(($97+52)|0);
 var $99=(($98+12)|0);
 SAFE_HEAP_STORE($99, $96, "%struct.aplcb*", 0);
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $102=$dp;
 var $103=(($102+20)|0);
 SAFE_HEAP_STORE($103, 0, "i8*", 0);
 var $104=$dp;
 var $105=(($104+24)|0);
 SAFE_HEAP_STORE($105, 0, "%struct.aplcb* (%struct.aplderiv.457*, %struct.aplcb*, %struct.aplcb*)*", 0);
 var $106=$dp;
 var $107=(($106+52)|0);
 var $108=(($107)|0);
 SAFE_HEAP_STORE($108, 0, "i32", 0);
 var $109=$dp;
 var $110=(($109+28)|0);
 var $111=(($110)|0);
 SAFE_HEAP_STORE($111, 0, "i32", 0);
 var $112=$dp;
 var $113=(($112+52)|0);
 var $114=(($113+4)|0);
 SAFE_HEAP_STORE($114, 0, "i8*", 0);
 var $115=$dp;
 var $116=(($115+28)|0);
 var $117=(($116+4)|0);
 SAFE_HEAP_STORE($117, 0, "i8*", 0);
 var $118=$dp;
 var $119=(($118+52)|0);
 var $120=(($119+8)|0);
 SAFE_HEAP_STORE($120, 0, "i8*", 0);
 var $121=$dp;
 var $122=(($121+28)|0);
 var $123=(($122+8)|0);
 SAFE_HEAP_STORE($123, 0, "i8*", 0);
 var $124=$dp;
 var $125=(($124+52)|0);
 var $126=(($125+16)|0);
 SAFE_HEAP_STORE($126, 0, "i32", 0);
 var $127=$dp;
 var $128=(($127+28)|0);
 var $129=(($128+16)|0);
 SAFE_HEAP_STORE($129, 0, "i32", 0);
 var $130=$dp;
 var $131=(($130+52)|0);
 var $132=(($131+20)|0);
 var $133=$132;
 SAFE_HEAP_STORE($133, 0, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 var $134=$dp;
 var $135=(($134+28)|0);
 var $136=(($135+20)|0);
 var $137=$136;
 SAFE_HEAP_STORE($137, 0, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*)*", 0);
 var $138=$dp;
 $1=$138;
 label=20;break;
 case 20: 
 var $140=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $140;
  default: assert(0, "bad label: " + label);
 }

}


function _newtok($parm_code,$parm_flags,$parm_offset,$namebuf,$namelen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $new;
 var $cp;
 $2=$parm_code;
 $3=$parm_flags;
 $4=$parm_offset;
 $5=$namebuf;
 $6=$namelen;
 var $7=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=11;break;
 case 3: 
 var $11=_aplmall(24);
 var $12=$11;
 $new=$12;
 var $13=$new;
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=11;break;
 case 5: 
 var $17=$3;
 var $18=$new;
 var $19=(($18+16)|0);
 SAFE_HEAP_STORE($19, $17, "i32", 0);
 var $20=$4;
 var $21=$new;
 var $22=(($21+8)|0);
 SAFE_HEAP_STORE($22, $20, "i32", 0);
 var $23=$2;
 var $24=$new;
 var $25=(($24+4)|0);
 SAFE_HEAP_STORE($25, $23, "i32", 0);
 var $26=$new;
 var $27=(($26+20)|0);
 SAFE_HEAP_STORE($27, 0, "i8*", 0);
 var $28=$5;
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=9;break;}
 case 6: 
 var $31=$6;
 var $32=((($31)+(1))|0);
 var $33=_aplmall($32);
 $cp=$33;
 var $34=$new;
 var $35=(($34+12)|0);
 var $36=$35;
 SAFE_HEAP_STORE($36, $33, "i8*", 0);
 var $37=$cp;
 var $38=($37|0)==0;
 if($38){label=7;break;}else{label=8;break;}
 case 7: 
 var $40=$new;
 _execfree($40);
 $1=0;
 label=11;break;
 case 8: 
 var $42=$cp;
 var $43=$5;
 var $44=$6;
 var $45=_chrcopy($42,$43,$44,1);
 $cp=$45;
 var $46=$cp;
 SAFE_HEAP_STORE($46, 0, "i8", 0);
 label=10;break;
 case 9: 
 var $48=$new;
 var $49=(($48+12)|0);
 var $50=$49;
 SAFE_HEAP_STORE($50, 0, "i8*", 0);
 label=10;break;
 case 10: 
 var $52=$new;
 $1=$52;
 label=11;break;
 case 11: 
 var $54=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }

}


function _nex($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $diff;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=$5>$7;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=$2;
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 var $14=($11)-($13);
 var $22=$14;label=4;break;
 case 3: 
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 var $18=$1;
 var $19=SAFE_HEAP_LOAD($18, "double", 0, 0);
 var $20=($17)-($19);
 var $22=$20;label=4;break;
 case 4: 
 var $22;
 $diff=$22;
 var $23=$diff;
 var $24=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $25=$23>$24;
 var $26=($25&1);
 var $27=$3;
 SAFE_HEAP_STORE($27, $26, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _nor($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ileft;
 var $irite;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $5=((-.0))-($4);
 var $6=$3>=$5;
 var $7=($6&1);
 var $8=$1;
 var $9=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $10=$8<=$9;
 var $11=($10&1);
 var $12=$7&$11;
 var $13=($12|0)!=0;
 var $14=$13^1;
 var $15=($14&1);
 $ileft=$15;
 var $16=$2;
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=((-.0))-($17);
 var $19=$16>=$18;
 var $20=($19&1);
 var $21=$2;
 var $22=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $23=$21<=$22;
 var $24=($23&1);
 var $25=$20&$24;
 var $26=($25|0)!=0;
 var $27=$26^1;
 var $28=($27&1);
 $irite=$28;
 var $29=$ileft;
 var $30=$irite;
 var $31=$29|$30;
 var $32=($31|0)!=0;
 var $33=$32^1;
 var $34=($33&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $34;
}


function _norp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $ileft;
 var $irite;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=((-.0))-($6);
 var $8=$5>=$7;
 var $9=($8&1);
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $13=$11<=$12;
 var $14=($13&1);
 var $15=$9&$14;
 var $16=($15|0)!=0;
 var $17=$16^1;
 var $18=($17&1);
 $ileft=$18;
 var $19=$2;
 var $20=SAFE_HEAP_LOAD($19, "double", 0, 0);
 var $21=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $22=((-.0))-($21);
 var $23=$20>=$22;
 var $24=($23&1);
 var $25=$2;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $28=$26<=$27;
 var $29=($28&1);
 var $30=$24&$29;
 var $31=($30|0)!=0;
 var $32=$31^1;
 var $33=($32&1);
 $irite=$33;
 var $34=$ileft;
 var $35=$irite;
 var $36=$34|$35;
 var $37=($36|0)!=0;
 var $38=$37^1;
 var $39=($38&1);
 var $40=$3;
 SAFE_HEAP_STORE($40, $39, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _not($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$rite;
 var $2=$1;
 var $3=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $4=(-$3);
 var $5=$2>$4;
 if($5){label=2;break;}else{var $11=0;label=3;break;}
 case 2: 
 var $7=$1;
 var $8=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $9=$7<$8;
 var $11=$9;label=3;break;
 case 3: 
 var $11;
 var $12=($11&1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _nreduce($dp,$rite,$axis){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$dp;
 $2=$rite;
 $3=$axis;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=_nreduces(1,$4,$5,$6);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $7;
}


function _nreduces($id,$dp,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4;
 var $5=(sp)+(8);
 var $axicnt=(sp)+(16);
 var $botcnt=(sp)+(24);
 var $topcnt=(sp)+(32);
 var $i;
 var $j;
 var $k;
 var $m;
 var $n;
 var $p;
 var $q;
 var $r;
 var $tempsave;
 var $type;
 var $icp;
 var $kp;
 var $op;
 var $out;
 var $wrk;
 SAFE_HEAP_STORE($2, $id, "i32", 0);
 $3=$dp;
 $4=$rite;
 SAFE_HEAP_STORE($5, $axis, "i32", 0);
 var $6=_errinit();
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$4;
 var $10=_errstop(0,0,$9,0);
 $1=$10;
 label=45;break;
 case 3: 
 var $12=SAFE_HEAP_LOAD($2, "i32", 0, 0);
 var $13=$2;
 var $14=$4;
 var $15=_reducecm($12,$13,$14,$5,$axicnt,$botcnt,$topcnt,32);
 $out=$15;
 var $16=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=45;break;
 case 5: 
 var $20=SAFE_HEAP_LOAD($2, "i32", 0, 0);
 var $21=($20|0)!=0;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=1;label=8;break;
 case 7: 
 var $24=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 $n=$26;
 var $27=$out;
 var $28=(($27+8)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=($29|0)!=0;
 if($30){label=9;break;}else{label=44;break;}
 case 9: 
 var $32=$out;
 var $33=(($32)|0);
 var $34=$33;
 var $35=SAFE_HEAP_LOAD($34, "%struct.aplcb**", 0, 0);
 $op=$35;
 var $36=$4;
 var $37=(($36+8)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=0==($38|0);
 if($39){label=10;break;}else{label=15;break;}
 case 10: 
 var $41=$4;
 var $42=(($41+4)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 var $44=$43&1;
 $tempsave=$44;
 var $45=$tempsave;
 var $46=$4;
 var $47=(($46+4)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=((($48)-($45))|0);
 SAFE_HEAP_STORE($47, $49, "i32", 0);
 var $50=$out;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 $i=$52;
 label=11;break;
 case 11: 
 var $54=$i;
 var $55=($54|0)!=0;
 if($55){label=12;break;}else{label=14;break;}
 case 12: 
 var $57=$4;
 var $58=_apltype($57);
 var $59=_first($58);
 var $60=_perm($59);
 var $61=$op;
 var $62=(($61+4)|0);
 $op=$62;
 SAFE_HEAP_STORE($61, $60, "%struct.aplcb*", 0);
 label=13;break;
 case 13: 
 var $64=$i;
 var $65=((($64)-(1))|0);
 $i=$65;
 label=11;break;
 case 14: 
 var $67=$tempsave;
 var $68=$4;
 var $69=(($68+4)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=((($70)+($67))|0);
 SAFE_HEAP_STORE($69, $71, "i32", 0);
 label=43;break;
 case 15: 
 $i=0;
 label=16;break;
 case 16: 
 var $74=$i;
 var $75=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $76=($74|0)<($75|0);
 if($76){label=17;break;}else{label=42;break;}
 case 17: 
 var $78=$4;
 var $79=(($78)|0);
 var $80=$79;
 var $81=SAFE_HEAP_LOAD($80, "%struct.aplcb**", 0, 0);
 var $82=$i;
 var $83=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $84=(Math_imul($82,$83)|0);
 var $85=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $86=(Math_imul($84,$85)|0);
 $p=$86;
 var $87=(($81+($86<<2))|0);
 $icp=$87;
 $j=0;
 label=18;break;
 case 18: 
 var $89=$j;
 var $90=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $91=($89|0)<($90|0);
 if($91){label=19;break;}else{label=40;break;}
 case 19: 
 var $93=$n;
 $m=$93;
 label=20;break;
 case 20: 
 var $95=$m;
 var $96=($95|0)>0;
 if($96){label=21;break;}else{label=38;break;}
 case 21: 
 var $98=$icp;
 var $99=$j;
 var $100=(($98+($99<<2))|0);
 var $101=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $102=$m;
 var $103=((($101)-($102))|0);
 var $104=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $105=(Math_imul($103,$104)|0);
 var $106=(($100+($105<<2))|0);
 $kp=$106;
 var $107=SAFE_HEAP_LOAD($106, "%struct.aplcb*", 0, 0);
 $wrk=$107;
 var $108=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $109=$m;
 var $110=((($108)-($109))|0);
 var $111=((($110)+(1))|0);
 $r=$111;
 var $112=1<($111|0);
 if($112){label=22;break;}else{label=30;break;}
 case 22: 
 $k=1;
 label=23;break;
 case 23: 
 var $115=$k;
 var $116=$r;
 var $117=($115|0)<($116|0);
 if($117){label=24;break;}else{label=29;break;}
 case 24: 
 var $119=$3;
 var $120=(($119+28)|0);
 var $121=(($120)|0);
 var $122=SAFE_HEAP_LOAD($121, "i32", 0, 0);
 var $123=$3;
 var $124=(($123+28)|0);
 var $125=(($124+4)|0);
 var $126=SAFE_HEAP_LOAD($125, "i8*", 0, 0);
 var $127=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $128=$kp;
 var $129=(((-$127))|0);
 var $130=(($128+($129<<2))|0);
 $kp=$130;
 var $131=SAFE_HEAP_LOAD($130, "%struct.aplcb*", 0, 0);
 var $132=$wrk;
 var $133=_execdyan($122,$126,$131,$132);
 $wrk=$133;
 var $134=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $135=($134|0)!=0;
 if($135){label=26;break;}else{label=25;break;}
 case 25: 
 var $137=$wrk;
 var $138=($137|0)==0;
 if($138){label=26;break;}else{label=27;break;}
 case 26: 
 var $140=$4;
 var $141=$out;
 var $142=_errstop(0,0,$140,$141);
 $1=$142;
 label=45;break;
 case 27: 
 label=28;break;
 case 28: 
 var $145=$k;
 var $146=((($145)+(1))|0);
 $k=$146;
 label=23;break;
 case 29: 
 label=30;break;
 case 30: 
 var $149=$wrk;
 var $150=(($149+4)|0);
 var $151=SAFE_HEAP_LOAD($150, "i32", 0, 0);
 var $152=$151&1;
 var $153=($152|0)!=0;
 if($153){label=31;break;}else{label=32;break;}
 case 31: 
 var $155=$wrk;
 var $156=(($155+4)|0);
 var $157=SAFE_HEAP_LOAD($156, "i32", 0, 0);
 var $158=((($157)-(1))|0);
 SAFE_HEAP_STORE($156, $158, "i32", 0);
 label=33;break;
 case 32: 
 var $160=$wrk;
 var $161=_aplcopy($160);
 $wrk=$161;
 label=33;break;
 case 33: 
 var $163=SAFE_HEAP_LOAD($2, "i32", 0, 0);
 var $164=($163|0)!=0;
 if($164){label=34;break;}else{label=35;break;}
 case 34: 
 var $166=$wrk;
 var $167=$op;
 var $168=(($167+4)|0);
 $op=$168;
 SAFE_HEAP_STORE($167, $166, "%struct.aplcb*", 0);
 label=36;break;
 case 35: 
 var $170=$p;
 var $171=$j;
 var $172=((($170)+($171))|0);
 var $173=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $174=$m;
 var $175=((($173)-($174))|0);
 var $176=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $177=(Math_imul($175,$176)|0);
 var $178=((($172)+($177))|0);
 $q=$178;
 var $179=$wrk;
 var $180=$op;
 var $181=$q;
 var $182=(($180+($181<<2))|0);
 SAFE_HEAP_STORE($182, $179, "%struct.aplcb*", 0);
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $185=$m;
 var $186=((($185)-(1))|0);
 $m=$186;
 label=20;break;
 case 38: 
 label=39;break;
 case 39: 
 var $189=$j;
 var $190=((($189)+(1))|0);
 $j=$190;
 label=18;break;
 case 40: 
 label=41;break;
 case 41: 
 var $193=$i;
 var $194=((($193)+(1))|0);
 $i=$194;
 label=16;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 var $198=$4;
 var $199=$out;
 var $200=_errstop(0,0,$198,$199);
 $1=$200;
 label=45;break;
 case 45: 
 var $202=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $202;
  default: assert(0, "bad label: " + label);
 }

}


function _nscan($dp,$rite,$axis){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$dp;
 $2=$rite;
 $3=$axis;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=_nreduces(0,$4,$5,$6);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $7;
}


function _nwisea($pep,$rite,$lef,$labs,$datacnt,$outype,$axis,$axicnt,$naxicnt,$botcnt,$topcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $out;
 var $bump;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $m;
 var $icp;
 var $jcp;
 var $kcp;
 var $ocp;
 var $wcp;
 $2=$pep;
 $3=$rite;
 $4=$lef;
 $5=$labs;
 $6=$datacnt;
 $7=$outype;
 $8=$axis;
 $9=$axicnt;
 $10=$naxicnt;
 $11=$botcnt;
 $12=$topcnt;
 $out=0;
 var $13=$3;
 var $14=$6;
 var $15=$7;
 var $16=$8;
 var $17=$10;
 var $18=_nwiseb($13,$14,$15,$16,$17);
 $out=$18;
 var $19=$out;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)==0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=$out;
 $1=$24;
 label=24;break;
 case 3: 
 var $26=$11;
 var $27=$3;
 var $28=(($27+20)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=(Math_imul($26,$29)|0);
 $bump=$30;
 var $31=$4;
 var $32=($31|0)<0;
 if($32){label=4;break;}else{label=5;break;}
 case 4: 
 var $34=$bump;
 var $35=(((-$34))|0);
 $bump=$35;
 label=5;break;
 case 5: 
 $i=0;
 label=6;break;
 case 6: 
 var $38=$i;
 var $39=$12;
 var $40=($38|0)<($39|0);
 if($40){label=7;break;}else{label=23;break;}
 case 7: 
 var $42=$3;
 var $43=(($42)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "i8*", 0, 0);
 var $46=$i;
 var $47=$11;
 var $48=(Math_imul($46,$47)|0);
 var $49=$9;
 var $50=(Math_imul($48,$49)|0);
 var $51=$3;
 var $52=(($51+20)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 var $54=(Math_imul($50,$53)|0);
 var $55=(($45+$54)|0);
 $icp=$55;
 var $56=$out;
 var $57=(($56)|0);
 var $58=$57;
 var $59=SAFE_HEAP_LOAD($58, "i8*", 0, 0);
 var $60=$i;
 var $61=$11;
 var $62=(Math_imul($60,$61)|0);
 var $63=$10;
 var $64=(Math_imul($62,$63)|0);
 var $65=$out;
 var $66=(($65+20)|0);
 var $67=SAFE_HEAP_LOAD($66, "i32", 0, 0);
 var $68=(Math_imul($64,$67)|0);
 var $69=(($59+$68)|0);
 $jcp=$69;
 $j=0;
 label=8;break;
 case 8: 
 var $71=$j;
 var $72=$11;
 var $73=($71|0)<($72|0);
 if($73){label=9;break;}else{label=21;break;}
 case 9: 
 var $75=$10;
 $m=$75;
 label=10;break;
 case 10: 
 var $77=$m;
 var $78=($77|0)>0;
 if($78){label=11;break;}else{label=19;break;}
 case 11: 
 var $80=$icp;
 var $81=$j;
 var $82=$9;
 var $83=$m;
 var $84=((($82)-($83))|0);
 var $85=$11;
 var $86=(Math_imul($84,$85)|0);
 var $87=((($81)+($86))|0);
 var $88=$3;
 var $89=(($88+20)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=(Math_imul($87,$90)|0);
 var $92=(($80+$91)|0);
 $kcp=$92;
 var $93=$jcp;
 var $94=$j;
 var $95=$10;
 var $96=$m;
 var $97=((($95)-($96))|0);
 var $98=$11;
 var $99=(Math_imul($97,$98)|0);
 var $100=((($94)+($99))|0);
 var $101=$out;
 var $102=(($101+20)|0);
 var $103=SAFE_HEAP_LOAD($102, "i32", 0, 0);
 var $104=(Math_imul($100,$103)|0);
 var $105=(($93+$104)|0);
 $ocp=$105;
 var $106=$4;
 var $107=($106|0)<0;
 if($107){label=12;break;}else{label=13;break;}
 case 12: 
 var $109=$5;
 var $110=((($109)-(1))|0);
 var $111=$bump;
 var $112=(Math_imul($110,$111)|0);
 var $113=$kcp;
 var $114=(($113+$112)|0);
 $kcp=$114;
 label=13;break;
 case 13: 
 var $116=$ocp;
 var $117=$kcp;
 var $118=$3;
 var $119=(($118+20)|0);
 var $120=SAFE_HEAP_LOAD($119, "i32", 0, 0);
 var $121=_chrcopy($116,$117,$120,1);
 $wcp=$121;
 $k=1;
 label=14;break;
 case 14: 
 var $123=$k;
 var $124=$5;
 var $125=($123|0)<($124|0);
 if($125){label=15;break;}else{label=17;break;}
 case 15: 
 var $127=$bump;
 var $128=$kcp;
 var $129=(((-$127))|0);
 var $130=(($128+$129)|0);
 $kcp=$130;
 var $131=$2;
 var $132=$kcp;
 var $133=$ocp;
 var $134=$ocp;
 FUNCTION_TABLE[$131]($132,$133,$134);
 label=16;break;
 case 16: 
 var $136=$k;
 var $137=((($136)+(1))|0);
 $k=$137;
 label=14;break;
 case 17: 
 label=18;break;
 case 18: 
 var $140=$m;
 var $141=((($140)-(1))|0);
 $m=$141;
 label=10;break;
 case 19: 
 label=20;break;
 case 20: 
 var $144=$j;
 var $145=((($144)+(1))|0);
 $j=$145;
 label=8;break;
 case 21: 
 label=22;break;
 case 22: 
 var $148=$i;
 var $149=((($148)+(1))|0);
 $i=$149;
 label=6;break;
 case 23: 
 var $151=$out;
 $1=$151;
 label=24;break;
 case 24: 
 var $153=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $153;
  default: assert(0, "bad label: " + label);
 }

}


function _nwiseb($rite,$datacnt,$outype,$axis,$naxicnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 var $ip;
 $2=$rite;
 $3=$datacnt;
 $4=$outype;
 $5=$axis;
 $6=$naxicnt;
 $out=0;
 var $7=$3;
 var $8=$4;
 var $9=((($8)+(1))|0);
 var $10=$2;
 var $11=(($10+12)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=_getcb(0,$7,$9,$12,0);
 $out=$13;
 var $14=$out;
 var $15=($14|0)==0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=$out;
 $1=$17;
 label=6;break;
 case 3: 
 var $19=$out;
 var $20=(($19+12)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)>1;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=$out;
 var $25=(($24+16)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32*", 0, 0);
 var $27=$26;
 var $28=$2;
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$30;
 var $32=$out;
 var $33=(($32+12)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=_intcopy($27,$31,$34,1);
 var $36=$35;
 $ip=$36;
 var $37=$6;
 var $38=$out;
 var $39=(($38+16)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32*", 0, 0);
 var $41=$5;
 var $42=(($40+($41<<2))|0);
 var $43=((($42)-(4))|0);
 SAFE_HEAP_STORE($43, $37, "i32", 0);
 label=5;break;
 case 5: 
 var $45=$out;
 $1=$45;
 label=6;break;
 case 6: 
 var $47=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $47;
  default: assert(0, "bad label: " + label);
 }

}


function _nwise($dp,$left,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $pep;
 var $out;
 var $axicnt=sp;
 var $botcnt=(sp)+(8);
 var $code;
 var $datacnt;
 var $datatyp;
 var $err;
 var $i;
 var $intype;
 var $ip;
 var $j;
 var $lef;
 var $labs;
 var $naxicnt;
 var $outype;
 var $topcnt=(sp)+(16);
 var $fun;
 $1=$dp;
 $2=$left;
 $3=$rite;
 $4=$axis;
 $pep=0;
 $out=0;
 $err=0;
 label=2;break;
 case 2: 
 var $6=_errinit();
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 label=27;break;
 case 4: 
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=$12&4;
 var $14=($13|0)!=0;
 if($14){label=6;break;}else{label=5;break;}
 case 5: 
 var $16=$2;
 var $17=_integer($16);
 $2=$17;
 label=6;break;
 case 6: 
 var $19=$2;
 var $20=($19|0)==0;
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 label=27;break;
 case 8: 
 var $23=$2;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)!=1;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 $err=126;
 label=27;break;
 case 10: 
 var $29=$2;
 var $30=(($29)|0);
 var $31=$30;
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 $lef=$33;
 var $34=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $35=($34|0)==0;
 var $36=($35&1);
 var $37=$4;
 var $38=((($37)+($36))|0);
 $4=$38;
 var $39=$3;
 var $40=$4;
 var $41=_axispre($39,$40,$axicnt,$botcnt,$topcnt);
 var $42=1!=($41|0);
 if($42){label=11;break;}else{label=12;break;}
 case 11: 
 label=27;break;
 case 12: 
 var $45=$lef;
 var $46=($45|0)>0;
 if($46){label=13;break;}else{label=14;break;}
 case 13: 
 var $48=$lef;
 var $53=$48;label=15;break;
 case 14: 
 var $50=$lef;
 var $51=(((-$50))|0);
 var $53=$51;label=15;break;
 case 15: 
 var $53;
 $labs=$53;
 var $54=$labs;
 var $55=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $56=($54|0)>($55|0);
 if($56){label=16;break;}else{label=17;break;}
 case 16: 
 $err=126;
 label=27;break;
 case 17: 
 var $59=$labs;
 var $60=($59|0)==1;
 if($60){label=18;break;}else{label=19;break;}
 case 18: 
 var $62=$3;
 var $63=_aplcopy($62);
 $out=$63;
 var $64=$out;
 var $65=(($64+4)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=$66|1;
 SAFE_HEAP_STORE($65, $67, "i32", 0);
 label=27;break;
 case 19: 
 var $69=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $70=((($69)+(1))|0);
 var $71=$labs;
 var $72=((($70)-($71))|0);
 $naxicnt=$72;
 var $73=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $74=$naxicnt;
 var $75=(Math_imul($73,$74)|0);
 var $76=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $77=(Math_imul($75,$76)|0);
 $datacnt=$77;
 var $78=$1;
 var $79=(($78+28)|0);
 var $80=(($79+4)|0);
 var $81=SAFE_HEAP_LOAD($80, "i8*", 0, 0);
 $fun=$81;
 var $82=$fun;
 var $83=$82;
 var $84=(($83+4)|0);
 var $85=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 $i=$85;
 var $86=$1;
 var $87=(($86+28)|0);
 var $88=(($87)|0);
 var $89=SAFE_HEAP_LOAD($88, "i32", 0, 0);
 $j=$89;
 var $90=$3;
 var $91=(($90+4)|0);
 var $92=SAFE_HEAP_LOAD($91, "i32", 0, 0);
 var $93=$92&32;
 var $94=($93|0)!=0;
 if($94){label=24;break;}else{label=20;break;}
 case 20: 
 var $96=$j;
 var $97=($96|0)==-10;
 if($97){label=21;break;}else{label=24;break;}
 case 21: 
 var $99=$i;
 var $100=($99|0)==7;
 if($100){label=25;break;}else{label=22;break;}
 case 22: 
 var $102=$i;
 var $103=($102|0)==6;
 if($103){label=25;break;}else{label=23;break;}
 case 23: 
 var $105=$i;
 var $106=($105|0)==38;
 if($106){label=25;break;}else{label=24;break;}
 case 24: 
 var $108=$fun;
 var $109=$j;
 var $110=$lef;
 var $111=$labs;
 var $112=$3;
 var $113=$4;
 var $114=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $115=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $116=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $117=$naxicnt;
 var $118=$datacnt;
 var $119=_nwised($108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118);
 $out=$119;
 label=26;break;
 case 25: 
 var $121=$fun;
 var $122=$lef;
 var $123=$labs;
 var $124=$3;
 var $125=$4;
 var $126=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $127=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $128=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $129=$naxicnt;
 var $130=$datacnt;
 var $131=_nwisec($121,$122,$123,$124,$125,$126,$127,$128,$129,$130);
 $out=$131;
 label=26;break;
 case 26: 
 $3=0;
 label=27;break;
 case 27: 
 var $134=$err;
 var $135=$2;
 var $136=$3;
 var $137=$out;
 var $138=_errstop($134,$135,$136,$137);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $138;
  default: assert(0, "bad label: " + label);
 }

}


function _nwisec($fun,$lef,$labs,$rite,$axis,$axicnt,$botcnt,$topcnt,$naxicnt,$datacnt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $pep;
 var $out;
 var $code;
 var $datatyp;
 var $i=sp;
 var $intype;
 var $ip;
 var $outype;
 var $np;
 $1=$fun;
 $2=$lef;
 $3=$labs;
 $4=$rite;
 $5=$axis;
 $6=$axicnt;
 $7=$botcnt;
 $8=$topcnt;
 $9=$naxicnt;
 $10=$datacnt;
 $pep=0;
 $out=0;
 label=2;break;
 case 2: 
 var $12=$2;
 var $13=($12|0)==0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$4;
 var $16=$10;
 var $17=$5;
 var $18=$9;
 var $19=_nwiseb($15,$16,2,$17,$18);
 $out=$19;
 var $20=$out;
 var $21=(($20)|0);
 var $22=$21;
 var $23=SAFE_HEAP_LOAD($22, "double*", 0, 0);
 var $24=$23;
 var $25=$1;
 var $26=$25;
 var $27=(($26+8)|0);
 var $28=(($27)|0);
 var $29=(($28+8)|0);
 var $30=$29;
 var $31=$out;
 var $32=(($31+8)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=_dblcopy($24,$30,$33,0);
 var $35=$34;
 $np=$35;
 label=22;break;
 case 4: 
 var $37=$1;
 var $38=$37;
 var $39=(($38+4)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32", 0, 0);
 $code=$40;
 var $41=$4;
 var $42=(($41+4)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 var $44=$43&78;
 $intype=$44;
 var $45=$intype;
 var $46=($45|0)==8;
 if($46){label=5;break;}else{label=11;break;}
 case 5: 
 var $48=$code;
 var $49=($48|0)!=38;
 if($49){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 75, "i32", 0);
 label=22;break;
 case 7: 
 var $52=$3;
 var $53=($52|0)==2;
 if($53){label=8;break;}else{label=9;break;}
 case 8: 
 $outype=4;
 label=10;break;
 case 9: 
 var $56=$4;
 var $57=$10;
 var $58=$5;
 var $59=$9;
 var $60=_nwiseb($56,$57,4,$58,$59);
 $out=$60;
 var $61=$1;
 var $62=$61;
 var $63=(($62)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=($64|0)==62;
 var $66=($65&1);
 SAFE_HEAP_STORE($i, $66, "i32", 0);
 var $67=$out;
 var $68=(($67)|0);
 var $69=$68;
 var $70=SAFE_HEAP_LOAD($69, "i32*", 0, 0);
 var $71=$70;
 var $72=$i;
 var $73=$out;
 var $74=(($73+8)|0);
 var $75=SAFE_HEAP_LOAD($74, "i32", 0, 0);
 var $76=_intcopy($71,$72,$75,0);
 var $77=$76;
 $ip=$77;
 label=22;break;
 case 10: 
 label=19;break;
 case 11: 
 var $80=$intype;
 var $81=($80|0)==4;
 if($81){label=12;break;}else{label=15;break;}
 case 12: 
 var $83=$code;
 var $84=($83|0)==38;
 if($84){label=14;break;}else{label=13;break;}
 case 13: 
 var $86=$code;
 var $87=($86|0)==6;
 if($87){label=14;break;}else{label=15;break;}
 case 14: 
 $outype=4;
 label=18;break;
 case 15: 
 var $90=$4;
 var $91=_real($90);
 $4=$91;
 var $92=$4;
 var $93=($92|0)==0;
 if($93){label=16;break;}else{label=17;break;}
 case 16: 
 label=22;break;
 case 17: 
 $outype=2;
 $intype=2;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $98=$1;
 var $99=$code;
 var $100=$intype;
 var $101=$outype;
 var $102=_scalay($98,$99,$100,$101);
 var $103=$102;
 $pep=$103;
 var $104=$pep;
 var $105=($104|0)==0;
 if($105){label=20;break;}else{label=21;break;}
 case 20: 
 SAFE_HEAP_STORE(4592, 79, "i32", 0);
 label=22;break;
 case 21: 
 var $108=$pep;
 var $109=$4;
 var $110=$2;
 var $111=$3;
 var $112=$10;
 var $113=$outype;
 var $114=$5;
 var $115=$6;
 var $116=$9;
 var $117=$7;
 var $118=$8;
 var $119=_nwisea($108,$109,$110,$111,$112,$113,$114,$115,$116,$117,$118);
 $out=$119;
 label=22;break;
 case 22: 
 var $121=$4;
 var $122=$out;
 var $123=_errstop(0,0,$121,$122);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $123;
  default: assert(0, "bad label: " + label);
 }

}


function _nwised($fun,$code,$lef,$labs,$rite,$axis,$axicnt,$botcnt,$topcnt,$naxicnt,$datacnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $bump;
 var $i;
 var $j;
 var $k;
 var $m;
 var $p;
 var $icp;
 var $jcp;
 var $kcp;
 var $ocp;
 var $out;
 $1=$fun;
 $2=$code;
 $3=$lef;
 $4=$labs;
 $5=$rite;
 $6=$axis;
 $7=$axicnt;
 $8=$botcnt;
 $9=$topcnt;
 $10=$naxicnt;
 $11=$datacnt;
 $out=0;
 label=2;break;
 case 2: 
 var $13=$5;
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=$15&32;
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 var $19=$5;
 var $20=_aplnest($19);
 $5=$20;
 label=4;break;
 case 4: 
 var $22=$5;
 var $23=$11;
 var $24=$6;
 var $25=$10;
 var $26=_nwiseb($22,$23,32,$24,$25);
 $out=$26;
 var $27=$out;
 var $28=($27|0)==0;
 if($28){label=6;break;}else{label=5;break;}
 case 5: 
 var $30=$out;
 var $31=(($30+8)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=($32|0)==0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 label=31;break;
 case 7: 
 var $36=$3;
 var $37=($36|0)<0;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=$8;
 var $40=(((-$39))|0);
 var $44=$40;label=10;break;
 case 9: 
 var $42=$8;
 var $44=$42;label=10;break;
 case 10: 
 var $44;
 $bump=$44;
 $i=0;
 label=11;break;
 case 11: 
 var $46=$i;
 var $47=$9;
 var $48=($46|0)<($47|0);
 if($48){label=12;break;}else{label=30;break;}
 case 12: 
 var $50=$5;
 var $51=(($50)|0);
 var $52=$51;
 var $53=SAFE_HEAP_LOAD($52, "%struct.aplcb**", 0, 0);
 var $54=$i;
 var $55=$8;
 var $56=(Math_imul($54,$55)|0);
 var $57=$7;
 var $58=(Math_imul($56,$57)|0);
 var $59=(($53+($58<<2))|0);
 $icp=$59;
 var $60=$out;
 var $61=(($60)|0);
 var $62=$61;
 var $63=SAFE_HEAP_LOAD($62, "%struct.aplcb**", 0, 0);
 var $64=$i;
 var $65=$8;
 var $66=(Math_imul($64,$65)|0);
 var $67=$10;
 var $68=(Math_imul($66,$67)|0);
 var $69=(($63+($68<<2))|0);
 $jcp=$69;
 $j=0;
 label=13;break;
 case 13: 
 var $71=$j;
 var $72=$8;
 var $73=($71|0)<($72|0);
 if($73){label=14;break;}else{label=28;break;}
 case 14: 
 var $75=$10;
 $m=$75;
 label=15;break;
 case 15: 
 var $77=$m;
 var $78=($77|0)>0;
 if($78){label=16;break;}else{label=26;break;}
 case 16: 
 var $80=$icp;
 var $81=$j;
 var $82=$7;
 var $83=$m;
 var $84=((($82)-($83))|0);
 var $85=$8;
 var $86=(Math_imul($84,$85)|0);
 var $87=((($81)+($86))|0);
 var $88=(($80+($87<<2))|0);
 $kcp=$88;
 var $89=$jcp;
 var $90=$j;
 var $91=$10;
 var $92=$m;
 var $93=((($91)-($92))|0);
 var $94=$8;
 var $95=(Math_imul($93,$94)|0);
 var $96=((($90)+($95))|0);
 var $97=(($89+($96<<2))|0);
 $ocp=$97;
 var $98=$3;
 var $99=($98|0)<0;
 if($99){label=17;break;}else{label=18;break;}
 case 17: 
 var $101=$4;
 var $102=((($101)-(1))|0);
 var $103=$bump;
 var $104=(Math_imul($102,$103)|0);
 var $105=$kcp;
 var $106=(($105+($104<<2))|0);
 $kcp=$106;
 label=18;break;
 case 18: 
 var $108=$kcp;
 var $109=SAFE_HEAP_LOAD($108, "%struct.aplcb*", 0, 0);
 var $110=$ocp;
 SAFE_HEAP_STORE($110, $109, "%struct.aplcb*", 0);
 $k=1;
 label=19;break;
 case 19: 
 var $112=$k;
 var $113=$4;
 var $114=($112|0)<($113|0);
 if($114){label=20;break;}else{label=22;break;}
 case 20: 
 var $116=$bump;
 var $117=$kcp;
 var $118=(((-$116))|0);
 var $119=(($117+($118<<2))|0);
 $kcp=$119;
 var $120=$2;
 var $121=$1;
 var $122=$kcp;
 var $123=SAFE_HEAP_LOAD($122, "%struct.aplcb*", 0, 0);
 var $124=$ocp;
 var $125=SAFE_HEAP_LOAD($124, "%struct.aplcb*", 0, 0);
 var $126=_execdyan($120,$121,$123,$125);
 var $127=$ocp;
 SAFE_HEAP_STORE($127, $126, "%struct.aplcb*", 0);
 label=21;break;
 case 21: 
 var $129=$k;
 var $130=((($129)+(1))|0);
 $k=$130;
 label=19;break;
 case 22: 
 var $132=$ocp;
 var $133=SAFE_HEAP_LOAD($132, "%struct.aplcb*", 0, 0);
 var $134=($133|0)!=0;
 if($134){label=23;break;}else{label=24;break;}
 case 23: 
 var $136=$ocp;
 var $137=SAFE_HEAP_LOAD($136, "%struct.aplcb*", 0, 0);
 var $138=(($137+4)|0);
 var $139=SAFE_HEAP_LOAD($138, "i32", 0, 0);
 var $140=((($139)-(1))|0);
 SAFE_HEAP_STORE($138, $140, "i32", 0);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $143=$m;
 var $144=((($143)-(1))|0);
 $m=$144;
 label=15;break;
 case 26: 
 label=27;break;
 case 27: 
 var $147=$j;
 var $148=((($147)+(1))|0);
 $j=$148;
 label=13;break;
 case 28: 
 label=29;break;
 case 29: 
 var $151=$i;
 var $152=((($151)+(1))|0);
 $i=$152;
 label=11;break;
 case 30: 
 label=31;break;
 case 31: 
 var $155=$5;
 var $156=$out;
 var $157=_errstop(0,0,$155,$156);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $157;
  default: assert(0, "bad label: " + label);
 }

}


function _offtptr($array,$offset){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $element;
 $1=$array;
 $2=$offset;
 var $3=$2;
 var $4=($3|0)==-1;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $element=0;
 label=4;break;
 case 3: 
 var $7=$1;
 var $8=$2;
 var $9=(($7+$8)|0);
 $element=$9;
 label=4;break;
 case 4: 
 var $11=$element;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _or($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ileft;
 var $irite;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $5=((-.0))-($4);
 var $6=$3>=$5;
 var $7=($6&1);
 var $8=$1;
 var $9=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $10=$8<=$9;
 var $11=($10&1);
 var $12=$7&$11;
 var $13=($12|0)!=0;
 var $14=$13^1;
 var $15=($14&1);
 $ileft=$15;
 var $16=$2;
 var $17=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $18=((-.0))-($17);
 var $19=$16>=$18;
 var $20=($19&1);
 var $21=$2;
 var $22=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $23=$21<=$22;
 var $24=($23&1);
 var $25=$20&$24;
 var $26=($25|0)!=0;
 var $27=$26^1;
 var $28=($27&1);
 $irite=$28;
 var $29=$ileft;
 var $30=$irite;
 var $31=$29|$30;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $31;
}


function _orp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $ileft;
 var $irite;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $7=((-.0))-($6);
 var $8=$5>=$7;
 var $9=($8&1);
 var $10=$1;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $13=$11<=$12;
 var $14=($13&1);
 var $15=$9&$14;
 var $16=($15|0)!=0;
 var $17=$16^1;
 var $18=($17&1);
 $ileft=$18;
 var $19=$2;
 var $20=SAFE_HEAP_LOAD($19, "double", 0, 0);
 var $21=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $22=((-.0))-($21);
 var $23=$20>=$22;
 var $24=($23&1);
 var $25=$2;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $28=$26<=$27;
 var $29=($28&1);
 var $30=$24&$29;
 var $31=($30|0)!=0;
 var $32=$31^1;
 var $33=($32&1);
 $irite=$33;
 var $34=$ileft;
 var $35=$irite;
 var $36=$34|$35;
 var $37=$3;
 SAFE_HEAP_STORE($37, $36, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _outrprdp($oper,$left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $cnt;
 var $datacnt;
 var $datatyp;
 var $iw;
 var $ip;
 var $jw;
 var $otype;
 var $rank;
 var $out;
 var $ldata;
 var $odata;
 var $rdata;
 var $wrkd=(sp)+(16);
 $2=$oper;
 SAFE_HEAP_STORE($3, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 $out=0;
 var $5=_matchok($3,$4,78);
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 $1=0;
 label=20;break;
 case 3: 
 var $9=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $10=(($9+8)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=(Math_imul($11,$14)|0);
 $datacnt=$15;
 var $16=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $17=(($16+4)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=$18&78;
 $datatyp=$19;
 var $20=$datatyp;
 var $21=8==($20|0);
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=4;label=6;break;
 case 5: 
 var $24=$datatyp;
 var $26=$24;label=6;break;
 case 6: 
 var $26;
 $otype=$26;
 var $27=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $28=(($27+12)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $31=(($30+12)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=((($29)+($32))|0);
 $rank=$33;
 var $34=$datacnt;
 var $35=$otype;
 var $36=((($35)+(1))|0);
 var $37=$rank;
 var $38=_getcb(0,$34,$36,$37,0);
 $out=$38;
 var $39=$rank;
 var $40=($39|0)>1;
 if($40){label=7;break;}else{label=8;break;}
 case 7: 
 var $42=$out;
 var $43=(($42+16)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32*", 0, 0);
 var $45=$44;
 var $46=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $47=(($46+16)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32*", 0, 0);
 var $49=$48;
 var $50=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $51=(($50+12)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=_intcopy($45,$49,$52,1);
 var $54=$53;
 $ip=$54;
 var $55=$ip;
 var $56=$55;
 var $57=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $58=(($57+16)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32*", 0, 0);
 var $60=$59;
 var $61=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $62=(($61+12)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=_intcopy($56,$60,$63,1);
 var $65=$64;
 $ip=$65;
 label=8;break;
 case 8: 
 var $67=$datacnt;
 var $68=($67|0)!=0;
 if($68){label=9;break;}else{label=19;break;}
 case 9: 
 $cnt=0;
 var $70=$out;
 var $71=(($70)|0);
 var $72=$71;
 var $73=SAFE_HEAP_LOAD($72, "i8*", 0, 0);
 $odata=$73;
 var $74=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $75=(($74)|0);
 var $76=$75;
 var $77=SAFE_HEAP_LOAD($76, "i8*", 0, 0);
 $ldata=$77;
 var $78=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $79=(($78+8)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 $iw=$80;
 label=10;break;
 case 10: 
 var $82=$iw;
 var $83=((($82)-(1))|0);
 $iw=$83;
 var $84=0<($82|0);
 if($84){label=11;break;}else{label=18;break;}
 case 11: 
 var $86=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $87=(($86)|0);
 var $88=$87;
 var $89=SAFE_HEAP_LOAD($88, "i8*", 0, 0);
 $rdata=$89;
 var $90=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $91=(($90+8)|0);
 var $92=SAFE_HEAP_LOAD($91, "i32", 0, 0);
 $jw=$92;
 label=12;break;
 case 12: 
 var $94=$jw;
 var $95=((($94)-(1))|0);
 $jw=$95;
 var $96=0<($94|0);
 if($96){label=13;break;}else{label=17;break;}
 case 13: 
 var $98=(($wrkd)|0);
 var $99=(($98+8)|0);
 SAFE_HEAP_STORE($99, 0, "double", 0);
 var $100=$2;
 var $101=$ldata;
 var $102=$rdata;
 var $103=(($wrkd)|0);
 var $104=$103;
 var $105=$100;
 FUNCTION_TABLE[$105]($101,$102,$104);
 var $106=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $107=(($106+20)|0);
 var $108=SAFE_HEAP_LOAD($107, "i32", 0, 0);
 var $109=$rdata;
 var $110=(($109+$108)|0);
 $rdata=$110;
 var $111=(($wrkd)|0);
 var $112=(($111+8)|0);
 var $113=SAFE_HEAP_LOAD($112, "double", 0, 0);
 var $114=$113!=0;
 if($114){label=14;break;}else{label=16;break;}
 case 14: 
 var $116=$otype;
 var $117=($116|0)!=64;
 if($117){label=15;break;}else{label=16;break;}
 case 15: 
 $otype=64;
 var $119=$out;
 var $120=$cnt;
 var $121=_dyadrup($119,$120);
 $out=$121;
 var $122=$out;
 var $123=(($122)|0);
 var $124=$123;
 var $125=SAFE_HEAP_LOAD($124, "i8*", 0, 0);
 var $126=$cnt;
 var $127=$out;
 var $128=(($127+20)|0);
 var $129=SAFE_HEAP_LOAD($128, "i32", 0, 0);
 var $130=(Math_imul($126,$129)|0);
 var $131=(($125+$130)|0);
 $odata=$131;
 label=16;break;
 case 16: 
 var $133=$odata;
 var $134=(($wrkd)|0);
 var $135=$134;
 var $136=$out;
 var $137=(($136+20)|0);
 var $138=SAFE_HEAP_LOAD($137, "i32", 0, 0);
 var $139=_chrcopy($133,$135,$138,1);
 $odata=$139;
 var $140=$cnt;
 var $141=((($140)+(1))|0);
 $cnt=$141;
 label=12;break;
 case 17: 
 var $143=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $144=(($143+20)|0);
 var $145=SAFE_HEAP_LOAD($144, "i32", 0, 0);
 var $146=$ldata;
 var $147=(($146+$145)|0);
 $ldata=$147;
 label=10;break;
 case 18: 
 label=19;break;
 case 19: 
 var $150=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $151=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $152=$out;
 var $153=_errstop(0,$150,$151,$152);
 $1=$153;
 label=20;break;
 case 20: 
 var $155=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $155;
  default: assert(0, "bad label: " + label);
 }

}


function _outrprdx($ival,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $out;
 var $datacnt;
 var $datatyp;
 var $ip;
 var $rank;
 $1=$ival;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=(($4+8)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=$3;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=(Math_imul($6,$9)|0);
 $datacnt=$10;
 $datatyp=4;
 var $11=$2;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$3;
 var $15=(($14+12)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=((($13)+($16))|0);
 $rank=$17;
 var $18=$datacnt;
 var $19=$datatyp;
 var $20=((($19)+(1))|0);
 var $21=$rank;
 var $22=_getcb(0,$18,$20,$21,0);
 $out=$22;
 var $23=$out;
 var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=8;break;}
 case 2: 
 var $26=$rank;
 var $27=($26|0)>1;
 if($27){label=3;break;}else{label=4;break;}
 case 3: 
 var $29=$out;
 var $30=(($29+16)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32*", 0, 0);
 var $32=$31;
 var $33=$2;
 var $34=(($33+16)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32*", 0, 0);
 var $36=$35;
 var $37=$2;
 var $38=(($37+12)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=_intcopy($32,$36,$39,1);
 var $41=$40;
 $ip=$41;
 var $42=$ip;
 var $43=$42;
 var $44=$3;
 var $45=(($44+16)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32*", 0, 0);
 var $47=$46;
 var $48=$3;
 var $49=(($48+12)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=_intcopy($43,$47,$50,1);
 var $52=$51;
 $ip=$52;
 label=4;break;
 case 4: 
 var $54=$out;
 var $55=(($54)|0);
 var $56=$55;
 var $57=SAFE_HEAP_LOAD($56, "i32*", 0, 0);
 $ip=$57;
 label=5;break;
 case 5: 
 var $59=$datacnt;
 var $60=((($59)-(1))|0);
 $datacnt=$60;
 var $61=($59|0)!=0;
 if($61){label=6;break;}else{label=7;break;}
 case 6: 
 var $63=$1;
 var $64=$ip;
 var $65=(($64+4)|0);
 $ip=$65;
 SAFE_HEAP_STORE($64, $63, "i32", 0);
 label=5;break;
 case 7: 
 label=8;break;
 case 8: 
 var $68=$2;
 var $69=$3;
 var $70=$out;
 var $71=_errstop(0,$68,$69,$70);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $71;
  default: assert(0, "bad label: " + label);
 }

}


function _partitn($left,$rite,$axes){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $out;
 var $axis;
 var $datacnt;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $m;
 $2=$left;
 $3=$rite;
 $4=$axes;
 $out=0;
 label=2;break;
 case 2: 
 var $6=_errinit();
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 label=41;break;
 case 4: 
 var $10=$4;
 var $11=($10|0)==0;
 if($11){label=5;break;}else{label=6;break;}
 case 5: 
 var $13=$3;
 var $14=(($13+12)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=((($15)-(1))|0);
 $axis=$16;
 label=12;break;
 case 6: 
 var $18=$4;
 var $19=_ivalue($18);
 var $20=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $21=((($19)-($20))|0);
 $axis=$21;
 var $22=$axis;
 var $23=($22|0)<0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=$axis;
 var $26=$3;
 var $27=(($26+12)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=($25|0)>=($28|0);
 if($29){label=8;break;}else{label=9;break;}
 case 8: 
 SAFE_HEAP_STORE(4592, 3, "i32", 0);
 label=9;break;
 case 9: 
 var $32=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $33=($32|0)!=0;
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 label=41;break;
 case 11: 
 label=12;break;
 case 12: 
 var $37=$2;
 var $38=(($37+8)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=$3;
 var $41=(($40+16)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 var $43=$axis;
 var $44=(($42+($43<<2))|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=($39|0)!=($45|0);
 if($46){label=13;break;}else{label=14;break;}
 case 13: 
 SAFE_HEAP_STORE(4592, 128, "i32", 0);
 label=17;break;
 case 14: 
 var $49=$2;
 var $50=(($49+4)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32", 0, 0);
 var $52=$51&4;
 var $53=($52|0)!=0;
 if($53){label=16;break;}else{label=15;break;}
 case 15: 
 var $55=$2;
 var $56=_integer($55);
 $2=$56;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $59=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $60=($59|0)!=0;
 if($60){label=18;break;}else{label=19;break;}
 case 18: 
 label=41;break;
 case 19: 
 $k=0;
 $j=0;
 $i=0;
 label=20;break;
 case 20: 
 var $64=$i;
 var $65=$2;
 var $66=(($65+8)|0);
 var $67=SAFE_HEAP_LOAD($66, "i32", 0, 0);
 var $68=($64|0)<($67|0);
 if($68){label=21;break;}else{label=23;break;}
 case 21: 
 var $70=$j;
 var $71=$2;
 var $72=(($71)|0);
 var $73=$72;
 var $74=SAFE_HEAP_LOAD($73, "i32*", 0, 0);
 var $75=$i;
 var $76=(($74+($75<<2))|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 $m=$77;
 var $78=($70|0)<($77|0);
 var $79=($78&1);
 var $80=$k;
 var $81=((($80)+($79))|0);
 $k=$81;
 var $82=$m;
 $j=$82;
 label=22;break;
 case 22: 
 var $84=$i;
 var $85=((($84)+(1))|0);
 $i=$85;
 label=20;break;
 case 23: 
 var $87=$k;
 $datacnt=$87;
 var $88=$3;
 var $89=(($88+12)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=($90|0)>1;
 if($91){label=24;break;}else{label=31;break;}
 case 24: 
 $i=0;
 label=25;break;
 case 25: 
 var $94=$i;
 var $95=$3;
 var $96=(($95+12)|0);
 var $97=SAFE_HEAP_LOAD($96, "i32", 0, 0);
 var $98=($94|0)<($97|0);
 if($98){label=26;break;}else{label=30;break;}
 case 26: 
 var $100=$i;
 var $101=$axis;
 var $102=($100|0)!=($101|0);
 if($102){label=27;break;}else{label=28;break;}
 case 27: 
 var $104=$3;
 var $105=(($104+16)|0);
 var $106=SAFE_HEAP_LOAD($105, "i32*", 0, 0);
 var $107=$i;
 var $108=(($106+($107<<2))|0);
 var $109=SAFE_HEAP_LOAD($108, "i32", 0, 0);
 var $110=$datacnt;
 var $111=(Math_imul($110,$109)|0);
 $datacnt=$111;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $114=$i;
 var $115=((($114)+(1))|0);
 $i=$115;
 label=25;break;
 case 30: 
 label=31;break;
 case 31: 
 var $118=$datacnt;
 var $119=$3;
 var $120=(($119+12)|0);
 var $121=SAFE_HEAP_LOAD($120, "i32", 0, 0);
 var $122=_getcb(0,$118,33,$121,0);
 $out=$122;
 var $123=$out;
 var $124=($123|0)==0;
 if($124){label=32;break;}else{label=33;break;}
 case 32: 
 label=41;break;
 case 33: 
 var $127=$out;
 var $128=(($127+12)|0);
 var $129=SAFE_HEAP_LOAD($128, "i32", 0, 0);
 var $130=($129|0)>1;
 if($130){label=34;break;}else{label=40;break;}
 case 34: 
 var $132=$axis;
 var $133=($132|0)!=0;
 if($133){label=35;break;}else{label=36;break;}
 case 35: 
 var $135=$out;
 var $136=(($135+16)|0);
 var $137=SAFE_HEAP_LOAD($136, "i32*", 0, 0);
 var $138=$137;
 var $139=$3;
 var $140=(($139+16)|0);
 var $141=SAFE_HEAP_LOAD($140, "i32*", 0, 0);
 var $142=$141;
 var $143=$axis;
 var $144=_intcopy($138,$142,$143,1);
 var $151=$144;label=37;break;
 case 36: 
 var $146=$out;
 var $147=(($146+16)|0);
 var $148=SAFE_HEAP_LOAD($147, "i32*", 0, 0);
 var $149=$148;
 var $151=$149;label=37;break;
 case 37: 
 var $151;
 var $152=$151;
 $ip=$152;
 var $153=$k;
 var $154=$ip;
 var $155=(($154+4)|0);
 $ip=$155;
 SAFE_HEAP_STORE($154, $153, "i32", 0);
 var $156=$out;
 var $157=(($156+12)|0);
 var $158=SAFE_HEAP_LOAD($157, "i32", 0, 0);
 var $159=$axis;
 var $160=((($158)-($159))|0);
 var $161=((($160)-(1))|0);
 $i=$161;
 var $162=$i;
 var $163=($162|0)>0;
 if($163){label=38;break;}else{label=39;break;}
 case 38: 
 var $165=$ip;
 var $166=$165;
 var $167=$3;
 var $168=(($167+16)|0);
 var $169=SAFE_HEAP_LOAD($168, "i32*", 0, 0);
 var $170=$axis;
 var $171=(($169+($170<<2))|0);
 var $172=(($171+4)|0);
 var $173=$172;
 var $174=$i;
 var $175=_intcopy($166,$173,$174,1);
 var $176=$175;
 $ip=$176;
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $179=$2;
 var $180=$3;
 var $181=$out;
 var $182=$axis;
 var $183=_partito($179,$180,$181,$182);
 $1=$183;
 label=42;break;
 case 41: 
 var $185=$2;
 var $186=$3;
 var $187=$out;
 var $188=_errstop(0,$185,$186,$187);
 $1=$188;
 label=42;break;
 case 42: 
 var $190=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $190;
  default: assert(0, "bad label: " + label);
 }

}


function _partito($left,$rite,$out,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bot;
 var $botcnt=sp;
 var $i;
 var $j;
 var $k;
 var $lead;
 var $m;
 var $n;
 var $oaxi;
 var $oaxicnt;
 var $p;
 var $raxi;
 var $raxicnt=(sp)+(8);
 var $top;
 var $topcnt=(sp)+(16);
 var $trail;
 $1=$left;
 $2=$rite;
 $3=$out;
 $4=$axis;
 label=2;break;
 case 2: 
 var $6=$2;
 var $7=$4;
 var $8=((($7)+(1))|0);
 var $9=_axispre($6,$8,$raxicnt,$botcnt,$topcnt);
 var $10=1!=($9|0);
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 label=22;break;
 case 4: 
 $top=0;
 label=5;break;
 case 5: 
 var $14=$top;
 var $15=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $16=($14|0)<($15|0);
 if($16){label=6;break;}else{label=21;break;}
 case 6: 
 $trail=0;
 $n=0;
 $lead=0;
 $p=0;
 $j=0;
 $raxi=0;
 $oaxi=0;
 label=7;break;
 case 7: 
 var $19=$raxi;
 var $20=SAFE_HEAP_LOAD($raxicnt, "i32", 0, 0);
 var $21=($19|0)<($20|0);
 if($21){label=8;break;}else{label=19;break;}
 case 8: 
 var $23=$j;
 var $24=$1;
 var $25=(($24)|0);
 var $26=$25;
 var $27=SAFE_HEAP_LOAD($26, "i32*", 0, 0);
 var $28=$raxi;
 var $29=(($27+($28<<2))|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 $m=$30;
 var $31=($23|0)<($30|0);
 var $32=($31&1);
 $k=$32;
 var $33=$m;
 $j=$33;
 var $34=$k;
 var $35=($34|0)!=0;
 if($35){label=9;break;}else{label=11;break;}
 case 9: 
 var $37=$n;
 var $38=($37|0)!=0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=$3;
 var $41=$2;
 var $42=$lead;
 var $43=$n;
 var $44=$trail;
 var $45=$top;
 var $46=$oaxi;
 var $47=((($46)+(1))|0);
 $oaxi=$47;
 var $48=$raxi;
 var $49=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $50=$4;
 var $51=_partitp($40,$41,$42,$43,$44,$45,$46,$48,$49,$50);
 $trail=0;
 $n=0;
 $lead=0;
 label=11;break;
 case 11: 
 var $53=$j;
 var $54=($53|0)!=0;
 if($54){label=12;break;}else{label=13;break;}
 case 12: 
 var $56=$n;
 var $57=((($56)+(1))|0);
 $n=$57;
 var $70=$56;label=17;break;
 case 13: 
 var $59=$n;
 var $60=($59|0)!=0;
 if($60){label=14;break;}else{label=15;break;}
 case 14: 
 var $62=$trail;
 var $63=((($62)+(1))|0);
 $trail=$63;
 var $68=$62;label=16;break;
 case 15: 
 var $65=$lead;
 var $66=((($65)+(1))|0);
 $lead=$66;
 var $68=$65;label=16;break;
 case 16: 
 var $68;
 var $70=$68;label=17;break;
 case 17: 
 var $70;
 label=18;break;
 case 18: 
 var $72=$raxi;
 var $73=((($72)+(1))|0);
 $raxi=$73;
 label=7;break;
 case 19: 
 var $75=$3;
 var $76=$2;
 var $77=$lead;
 var $78=$n;
 var $79=$trail;
 var $80=$top;
 var $81=$oaxi;
 var $82=$raxi;
 var $83=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $84=$4;
 var $85=_partitp($75,$76,$77,$78,$79,$80,$81,$82,$83,$84);
 label=20;break;
 case 20: 
 var $87=$top;
 var $88=((($87)+(1))|0);
 $top=$88;
 label=5;break;
 case 21: 
 label=22;break;
 case 22: 
 var $91=$1;
 var $92=$2;
 var $93=$3;
 var $94=_errstop(0,$91,$92,$93);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $94;
  default: assert(0, "bad label: " + label);
 }

}


function _partitp($out,$rite,$lead,$n,$trail,$top,$oaxi,$raxi,$botcnt,$axis){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $new;
 var $op;
 var $bot;
 var $datatyp;
 var $oaxicnt;
 var $raxicnt;
 var $ip;
 $2=$out;
 $3=$rite;
 $4=$lead;
 $5=$n;
 $6=$trail;
 $7=$top;
 $8=$oaxi;
 $9=$raxi;
 $10=$botcnt;
 $11=$axis;
 var $12=$3;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$14&110;
 $datatyp=$15;
 var $16=$2;
 var $17=(($16+16)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32*", 0, 0);
 var $19=$11;
 var $20=(($18+($19<<2))|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 $oaxicnt=$21;
 var $22=$3;
 var $23=(($22+16)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32*", 0, 0);
 var $25=$11;
 var $26=(($24+($25<<2))|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 $raxicnt=$27;
 var $28=$2;
 var $29=(($28)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "%struct.aplcb**", 0, 0);
 var $32=$7;
 var $33=$oaxicnt;
 var $34=(Math_imul($32,$33)|0);
 var $35=$10;
 var $36=(Math_imul($34,$35)|0);
 var $37=(($31+($36<<2))|0);
 var $38=$8;
 var $39=$10;
 var $40=(Math_imul($38,$39)|0);
 var $41=(($37+($40<<2))|0);
 $op=$41;
 var $42=$3;
 var $43=(($42)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "i8*", 0, 0);
 var $46=$3;
 var $47=(($46+20)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=$7;
 var $50=$raxicnt;
 var $51=(Math_imul($49,$50)|0);
 var $52=$10;
 var $53=(Math_imul($51,$52)|0);
 var $54=$9;
 var $55=$5;
 var $56=((($54)-($55))|0);
 var $57=$6;
 var $58=((($56)-($57))|0);
 var $59=$10;
 var $60=(Math_imul($58,$59)|0);
 var $61=((($53)+($60))|0);
 var $62=(Math_imul($48,$61)|0);
 var $63=(($45+$62)|0);
 $ip=$63;
 $bot=0;
 label=2;break;
 case 2: 
 var $65=$bot;
 var $66=$10;
 var $67=($65|0)<($66|0);
 if($67){label=3;break;}else{label=8;break;}
 case 3: 
 var $69=$5;
 var $70=$datatyp;
 var $71=_getcb(0,$69,$70,1,0);
 $new=$71;
 var $72=$new;
 var $73=$op;
 var $74=$bot;
 var $75=(($73+($74<<2))|0);
 SAFE_HEAP_STORE($75, $72, "%struct.aplcb*", 0);
 var $76=$5;
 var $77=($76|0)!=0;
 if($77){label=4;break;}else{label=6;break;}
 case 4: 
 var $79=$new;
 var $80=($79|0)!=0;
 if($80){label=5;break;}else{label=6;break;}
 case 5: 
 var $82=$new;
 var $83=(($82)|0);
 var $84=$83;
 var $85=SAFE_HEAP_LOAD($84, "i8*", 0, 0);
 var $86=$ip;
 var $87=$bot;
 var $88=$3;
 var $89=(($88+20)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=(Math_imul($87,$90)|0);
 var $92=(($86+$91)|0);
 var $93=$5;
 var $94=$10;
 var $95=$datatyp;
 var $96=_dtacopy($85,$92,$93,$94,$95);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $99=$bot;
 var $100=((($99)+(1))|0);
 $bot=$100;
 label=2;break;
 case 8: 
 var $102=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $102;
  default: assert(0, "bad label: " + label);
 }

}


function _perm($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$rite;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7&-2;
 SAFE_HEAP_STORE($6, $8, "i32", 0);
 label=3;break;
 case 3: 
 var $10=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $10;
  default: assert(0, "bad label: " + label);
 }

}


function _pick($left,$rite,$new){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $lw;
 var $out;
 var $riteptr=sp;
 var $rw;
 var $i;
 var $ltype;
 var $vp;
 $2=$left;
 $3=$rite;
 $4=$new;
 $out=0;
 SAFE_HEAP_STORE($riteptr, 0, "%struct.aplcb**", 0);
 label=2;break;
 case 2: 
 var $6=_errinit();
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 label=34;break;
 case 4: 
 var $10=$2;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=$2;
 var $16=$3;
 var $17=$3;
 var $18=_aplcopy($17);
 var $19=_temp($18);
 var $20=_errstop(0,$15,$16,$19);
 $1=$20;
 label=35;break;
 case 6: 
 var $22=$2;
 var $23=(($22+12)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=($24|0)>1;
 if($25){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 124, "i32", 0);
 label=34;break;
 case 8: 
 var $28=$3;
 $rw=$28;
 var $29=$2;
 var $30=(($29+4)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=$31&110;
 $ltype=$32;
 var $33=$ltype;
 var $34=($33|0)==32;
 if($34){label=9;break;}else{label=18;break;}
 case 9: 
 $i=0;
 label=10;break;
 case 10: 
 var $37=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $38=($37|0)==0;
 if($38){label=11;break;}else{label=15;break;}
 case 11: 
 var $40=$2;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "%struct.aplcb**", 0, 0);
 var $44=$i;
 var $45=(($43+($44<<2))|0);
 var $46=SAFE_HEAP_LOAD($45, "%struct.aplcb*", 0, 0);
 $lw=$46;
 var $47=$2;
 var $48=(($47+8)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 var $50=$i;
 var $51=((($49)-($50))|0);
 var $52=($51|0)==1;
 if($52){label=12;break;}else{label=13;break;}
 case 12: 
 label=15;break;
 case 13: 
 var $55=$lw;
 var $56=$rw;
 var $57=$4;
 var $58=_pickit($55,$56,$riteptr,$57,0);
 $rw=$58;
 label=14;break;
 case 14: 
 var $60=$i;
 var $61=((($60)+(1))|0);
 $i=$61;
 label=10;break;
 case 15: 
 var $63=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $64=($63|0)!=0;
 if($64){label=16;break;}else{label=17;break;}
 case 16: 
 label=34;break;
 case 17: 
 var $67=$lw;
 var $68=$rw;
 var $69=$4;
 var $70=_pickit($67,$68,$riteptr,$69,1);
 $out=$70;
 label=33;break;
 case 18: 
 var $72=$ltype;
 var $73=($72|0)!=4;
 if($73){label=19;break;}else{label=20;break;}
 case 19: 
 var $75=$2;
 var $76=_integer($75);
 $2=$76;
 label=20;break;
 case 20: 
 var $78=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $79=($78|0)!=0;
 if($79){label=21;break;}else{label=22;break;}
 case 21: 
 label=34;break;
 case 22: 
 var $82=_getcb(0,1,5,0,0);
 $lw=$82;
 var $83=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $84=($83|0)!=0;
 if($84){label=23;break;}else{label=24;break;}
 case 23: 
 label=34;break;
 case 24: 
 $i=0;
 label=25;break;
 case 25: 
 var $88=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $89=($88|0)==0;
 if($89){label=26;break;}else{label=30;break;}
 case 26: 
 var $91=$2;
 var $92=(($91)|0);
 var $93=$92;
 var $94=SAFE_HEAP_LOAD($93, "i32*", 0, 0);
 var $95=$i;
 var $96=(($94+($95<<2))|0);
 var $97=SAFE_HEAP_LOAD($96, "i32", 0, 0);
 var $98=$lw;
 var $99=(($98)|0);
 var $100=$99;
 var $101=SAFE_HEAP_LOAD($100, "i32*", 0, 0);
 SAFE_HEAP_STORE($101, $97, "i32", 0);
 var $102=$2;
 var $103=(($102+8)|0);
 var $104=SAFE_HEAP_LOAD($103, "i32", 0, 0);
 var $105=$i;
 var $106=((($104)-($105))|0);
 var $107=($106|0)==1;
 if($107){label=27;break;}else{label=28;break;}
 case 27: 
 label=30;break;
 case 28: 
 var $110=$lw;
 var $111=$rw;
 var $112=$4;
 var $113=_pickit($110,$111,$riteptr,$112,0);
 $rw=$113;
 label=29;break;
 case 29: 
 var $115=$i;
 var $116=((($115)+(1))|0);
 $i=$116;
 label=25;break;
 case 30: 
 var $118=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $119=($118|0)!=0;
 if($119){label=31;break;}else{label=32;break;}
 case 31: 
 label=34;break;
 case 32: 
 var $122=$lw;
 var $123=$rw;
 var $124=$4;
 var $125=_pickit($122,$123,$riteptr,$124,1);
 $out=$125;
 var $126=$lw;
 _endoper($126);
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $129=$2;
 var $130=$3;
 var $131=$out;
 var $132=_errstop(0,$129,$130,$131);
 $1=$132;
 label=35;break;
 case 35: 
 var $134=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $134;
  default: assert(0, "bad label: " + label);
 }

}


function _pickdyad($fun){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $sdp;
 var $i;
 $1=$fun;
 var $2=$1;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 $i=$5;
 var $6=$1;
 var $7=$6;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 if(($9|0)==7){ label=2;break;}else if(($9|0)==6){ label=3;break;}else if(($9|0)==38){ label=4;break;}else{label=5;break;}
 case 2: 
 var $11=$1;
 var $12=$11;
 var $13=(($12+8)|0);
 $sdp=$13;
 label=6;break;
 case 3: 
 var $15=$1;
 var $16=$15;
 var $17=(($16+8)|0);
 $sdp=$17;
 label=6;break;
 case 4: 
 var $19=$1;
 var $20=$19;
 var $21=(($20)|0);
 var $22=(($21+8)|0);
 $sdp=$22;
 label=6;break;
 case 5: 
 $sdp=0;
 label=6;break;
 case 6: 
 var $25=$sdp;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _pickit($left,$rite,$pritep,$new,$final){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 var $wrk;
 var $errcode;
 var $p;
 var $rtype;
 var $vp;
 $2=$left;
 $3=$rite;
 $4=$pritep;
 $5=$new;
 $6=$final;
 $out=0;
 $errcode=124;
 label=2;break;
 case 2: 
 var $8=$2;
 var $9=(($8+12)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=($10|0)>1;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=$3;
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=($15|0)!=($18|0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 label=36;break;
 case 5: 
 var $22=$2;
 var $23=(($22+4)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=$24&78;
 var $26=($25|0)!=4;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=$2;
 var $29=_integer($28);
 $2=$29;
 label=7;break;
 case 7: 
 var $31=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $32=($31|0)!=0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=39;break;
 case 9: 
 var $35=$6;
 var $36=($35|0)!=0;
 if($36){label=10;break;}else{label=14;break;}
 case 10: 
 var $38=$5;
 var $39=($38|0)!=0;
 if($39){label=11;break;}else{label=14;break;}
 case 11: 
 var $41=$5;
 var $42=(($41+12)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 var $44=($43|0)!=0;
 if($44){label=12;break;}else{label=14;break;}
 case 12: 
 var $46=$3;
 var $47=(($46+4)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=$48&32;
 var $50=($49|0)!=0;
 if($50){label=14;break;}else{label=13;break;}
 case 13: 
 var $52=$3;
 var $53=_temp($52);
 var $54=_aplnest($53);
 var $55=_perm($54);
 $3=$55;
 var $56=$4;
 var $57=SAFE_HEAP_LOAD($56, "%struct.aplcb**", 0, 0);
 SAFE_HEAP_STORE($57, $55, "%struct.aplcb*", 0);
 label=14;break;
 case 14: 
 var $59=$2;
 var $60=(($59+8)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32", 0, 0);
 var $62=$2;
 var $63=(($62)|0);
 var $64=$63;
 var $65=SAFE_HEAP_LOAD($64, "i32*", 0, 0);
 var $66=$3;
 var $67=(($66+16)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32*", 0, 0);
 var $69=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $70=_indexno($61,0,$65,$68,$69);
 $p=$70;
 var $71=$p;
 var $72=$3;
 var $73=(($72+8)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 var $75=($71|0)>=($74|0);
 if($75){label=15;break;}else{label=16;break;}
 case 15: 
 label=36;break;
 case 16: 
 var $78=$3;
 var $79=(($78+4)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 var $81=$80&110;
 $rtype=$81;
 var $82=$6;
 var $83=($82|0)!=0;
 if($83){label=17;break;}else{label=32;break;}
 case 17: 
 var $85=$rtype;
 var $86=($85|0)==32;
 if($86){label=18;break;}else{label=25;break;}
 case 18: 
 var $88=$5;
 $out=$88;
 var $89=0!=($88|0);
 if($89){label=19;break;}else{label=23;break;}
 case 19: 
 var $91=$3;
 var $92=(($91)|0);
 var $93=$92;
 var $94=SAFE_HEAP_LOAD($93, "%struct.aplcb**", 0, 0);
 var $95=$p;
 var $96=(($94+($95<<2))|0);
 $wrk=$96;
 var $97=SAFE_HEAP_LOAD($96, "%struct.aplcb*", 0, 0);
 var $98=_temp($97);
 _endoper($98);
 var $99=$5;
 var $100=(($99+4)|0);
 var $101=SAFE_HEAP_LOAD($100, "i32", 0, 0);
 var $102=$101&1;
 var $103=($102|0)!=0;
 if($103){label=20;break;}else{label=21;break;}
 case 20: 
 var $105=$5;
 var $110=$105;label=22;break;
 case 21: 
 var $107=$5;
 var $108=_aplcopy($107);
 var $110=$108;label=22;break;
 case 22: 
 var $110;
 var $111=_perm($110);
 var $112=$wrk;
 SAFE_HEAP_STORE($112, $111, "%struct.aplcb*", 0);
 label=24;break;
 case 23: 
 var $114=$3;
 var $115=(($114)|0);
 var $116=$115;
 var $117=SAFE_HEAP_LOAD($116, "%struct.aplcb**", 0, 0);
 var $118=$p;
 var $119=(($117+($118<<2))|0);
 var $120=SAFE_HEAP_LOAD($119, "%struct.aplcb*", 0, 0);
 var $121=_aplcopy($120);
 var $122=_temp($121);
 $out=$122;
 label=24;break;
 case 24: 
 label=31;break;
 case 25: 
 var $125=$5;
 $out=$125;
 var $126=0!=($125|0);
 if($126){label=26;break;}else{label=27;break;}
 case 26: 
 var $128=$3;
 var $129=(($128)|0);
 var $130=$129;
 var $131=SAFE_HEAP_LOAD($130, "i8*", 0, 0);
 var $132=$p;
 var $133=$3;
 var $134=(($133+20)|0);
 var $135=SAFE_HEAP_LOAD($134, "i32", 0, 0);
 var $136=(Math_imul($132,$135)|0);
 var $137=(($131+$136)|0);
 var $138=$5;
 var $139=(($138)|0);
 var $140=$139;
 var $141=SAFE_HEAP_LOAD($140, "i8*", 0, 0);
 var $142=$rtype;
 var $143=_dtacopy($137,$141,1,1,$142);
 $vp=$143;
 label=30;break;
 case 27: 
 var $145=$rtype;
 var $146=((($145)+(1))|0);
 var $147=_getcb(0,1,$146,0,0);
 $out=$147;
 var $148=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $149=($148|0)!=0;
 if($149){label=28;break;}else{label=29;break;}
 case 28: 
 $1=0;
 label=39;break;
 case 29: 
 var $152=$out;
 var $153=(($152)|0);
 var $154=$153;
 var $155=SAFE_HEAP_LOAD($154, "i8*", 0, 0);
 var $156=$3;
 var $157=(($156)|0);
 var $158=$157;
 var $159=SAFE_HEAP_LOAD($158, "i8*", 0, 0);
 var $160=$p;
 var $161=$3;
 var $162=(($161+20)|0);
 var $163=SAFE_HEAP_LOAD($162, "i32", 0, 0);
 var $164=(Math_imul($160,$163)|0);
 var $165=(($159+$164)|0);
 var $166=$rtype;
 var $167=_dtacopy($155,$165,1,1,$166);
 $vp=$167;
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 $errcode=0;
 label=36;break;
 case 32: 
 var $171=$rtype;
 var $172=($171|0)!=32;
 if($172){label=33;break;}else{label=34;break;}
 case 33: 
 label=36;break;
 case 34: 
 label=35;break;
 case 35: 
 var $176=$3;
 var $177=(($176)|0);
 var $178=$177;
 var $179=SAFE_HEAP_LOAD($178, "%struct.aplcb**", 0, 0);
 var $180=$p;
 var $181=(($179+($180<<2))|0);
 var $182=$4;
 SAFE_HEAP_STORE($182, $181, "%struct.aplcb**", 0);
 var $183=$4;
 var $184=SAFE_HEAP_LOAD($183, "%struct.aplcb**", 0, 0);
 var $185=SAFE_HEAP_LOAD($184, "%struct.aplcb*", 0, 0);
 $1=$185;
 label=39;break;
 case 36: 
 var $187=$errcode;
 var $188=($187|0)!=0;
 if($188){label=37;break;}else{label=38;break;}
 case 37: 
 var $190=$errcode;
 SAFE_HEAP_STORE(4592, $190, "i32", 0);
 label=38;break;
 case 38: 
 var $192=$out;
 $1=$192;
 label=39;break;
 case 39: 
 var $194=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $194;
  default: assert(0, "bad label: " + label);
 }

}


function _pitimes($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=SAFE_HEAP_LOAD(2600, "double", 0, 0);
 var $4=($2)*($3);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $4;
}


function _pitimesp($rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$rite;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=SAFE_HEAP_LOAD(2592, "double", 0, 0);
 var $6=($4)*($5);
 var $7=$2;
 SAFE_HEAP_STORE($7, $6, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _pitimesx($rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$rite;
 $2=$ret;
 var $3=$1;
 var $4=(($3+8)|0);
 $1=$4;
 var $5=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $6=SAFE_HEAP_LOAD(2584, "double", 0, 0);
 var $7=($5)*($6);
 var $8=$2;
 var $9=(($8+8)|0);
 $2=$9;
 SAFE_HEAP_STORE($8, $7, "double", 0);
 var $10=$1;
 var $11=(($10+8)|0);
 $1=$11;
 var $12=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $13=SAFE_HEAP_LOAD(2584, "double", 0, 0);
 var $14=($12)*($13);
 var $15=$2;
 var $16=(($15+8)|0);
 $2=$16;
 SAFE_HEAP_STORE($15, $14, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _places($val,$digs,$maxw){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $fraction;
 var $lw;
 var $iw;
 var $kw;
 $2=$val;
 $3=$digs;
 $4=$maxw;
 var $5=$3;
 var $6=$4;
 var $7=($5|0)>=($6|0);
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=20;break;
 case 3: 
 var $10=$2;
 var $11=$10<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$2;
 var $14=((-.0))-($13);
 var $18=$14;label=6;break;
 case 5: 
 var $16=$2;
 var $18=$16;label=6;break;
 case 6: 
 var $18;
 $fraction=$18;
 var $19=$fraction;
 var $20=Math_floor($19);
 var $21=$fraction;
 var $22=($21)-($20);
 $fraction=$22;
 var $23=$fraction;
 var $24=(1)-($23);
 var $25=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $26=$24<$25;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=20;break;
 case 8: 
 var $29=$4;
 var $30=$3;
 var $31=((($29)-($30))|0);
 $kw=$31;
 var $32=$3;
 var $33=($32|0)!=0;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=$kw;
 var $36=((($35)-(1))|0);
 $kw=$36;
 label=10;break;
 case 10: 
 var $38=$kw;
 $iw=$38;
 label=11;break;
 case 11: 
 var $40=$iw;
 var $41=($40|0)>0;
 if($41){label=12;break;}else{label=14;break;}
 case 12: 
 var $43=$fraction;
 var $44=($43)*(10);
 $fraction=$44;
 label=13;break;
 case 13: 
 var $46=$iw;
 var $47=((($46)-(1))|0);
 $iw=$47;
 label=11;break;
 case 14: 
 var $49=$fraction;
 var $50=((0.1))+($49);
 var $51=(($50)&-1);
 $lw=$51;
 var $52=$lw;
 var $53=($52|0)==0;
 if($53){label=15;break;}else{label=16;break;}
 case 15: 
 $1=0;
 label=20;break;
 case 16: 
 label=17;break;
 case 17: 
 var $57=$lw;
 var $58=(((($57|0))%(10))&-1);
 var $59=($58|0)==0;
 if($59){label=18;break;}else{label=19;break;}
 case 18: 
 var $61=$lw;
 var $62=(((($61|0))/(10))&-1);
 $lw=$62;
 var $63=$kw;
 var $64=((($63)-(1))|0);
 $kw=$64;
 label=17;break;
 case 19: 
 var $66=$kw;
 $1=$66;
 label=20;break;
 case 20: 
 var $68=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $68;
  default: assert(0, "bad label: " + label);
 }

}


function _plus($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3)+($4);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $5;
}


function _plusp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)+($7);
 var $9=$3;
 SAFE_HEAP_STORE($9, $8, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _plusx($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)+($7);
 var $9=$3;
 SAFE_HEAP_STORE($9, $8, "double", 0);
 var $10=$1;
 var $11=(($10+8)|0);
 var $12=SAFE_HEAP_LOAD($11, "double", 0, 0);
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "double", 0, 0);
 var $16=($12)+($15);
 var $17=$3;
 var $18=(($17+8)|0);
 SAFE_HEAP_STORE($18, $16, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _pop($hdr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ret;
 $1=$hdr;
 var $2=$1;
 var $3=$2;
 var $4=(($3)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.el.1832*", 0, 0);
 $ret=$5;
 var $6=$ret;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$ret;
 var $10=(($9)|0);
 var $11=SAFE_HEAP_LOAD($10, "%struct.el.1832*", 0, 0);
 var $12=$1;
 var $13=$12;
 var $14=(($13)|0);
 SAFE_HEAP_STORE($14, $11, "%struct.el.1832*", 0);
 label=3;break;
 case 3: 
 var $16=$ret;
 var $17=$16;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function _popnesc($hdr,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $wrk;
 var $datacnt;
 var $op;
 $1=$hdr;
 $2=$out;
 var $3=$2;
 var $4=(($3)|0);
 var $5=$4;
 var $6=SAFE_HEAP_LOAD($5, "double*", 0, 0);
 $op=$6;
 var $7=$2;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $datacnt=$9;
 label=2;break;
 case 2: 
 var $11=$datacnt;
 var $12=((($11)-(1))|0);
 $datacnt=$12;
 var $13=($11|0)!=0;
 if($13){label=3;break;}else{var $18=0;label=4;break;}
 case 3: 
 var $15=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $16=($15|0)==0;
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 if($18){label=5;break;}else{label=11;break;}
 case 5: 
 var $20=$1;
 var $21=_pop($20);
 var $22=$21;
 var $23=_execgetp($22);
 $wrk=$23;
 var $24=$wrk;
 var $25=(($24+4)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=$26&78;
 if(($27|0)==4){ label=6;break;}else if(($27|0)==2){ label=7;break;}else if(($27|0)==64){ label=8;break;}else{label=9;break;}
 case 6: 
 var $29=$wrk;
 var $30=(($29)|0);
 var $31=$30;
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=($33|0);
 var $35=$op;
 var $36=(($35+8)|0);
 $op=$36;
 SAFE_HEAP_STORE($35, $34, "double", 0);
 var $37=$op;
 var $38=(($37+8)|0);
 $op=$38;
 SAFE_HEAP_STORE($37, 0, "double", 0);
 label=10;break;
 case 7: 
 var $40=$wrk;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "double*", 0, 0);
 var $44=SAFE_HEAP_LOAD($43, "double", 0, 0);
 var $45=$op;
 var $46=(($45+8)|0);
 $op=$46;
 SAFE_HEAP_STORE($45, $44, "double", 0);
 var $47=$op;
 var $48=(($47+8)|0);
 $op=$48;
 SAFE_HEAP_STORE($47, 0, "double", 0);
 label=10;break;
 case 8: 
 var $50=$wrk;
 var $51=(($50)|0);
 var $52=$51;
 var $53=SAFE_HEAP_LOAD($52, "double*", 0, 0);
 var $54=SAFE_HEAP_LOAD($53, "double", 0, 0);
 var $55=$op;
 var $56=(($55+8)|0);
 $op=$56;
 SAFE_HEAP_STORE($55, $54, "double", 0);
 var $57=$wrk;
 var $58=(($57)|0);
 var $59=$58;
 var $60=SAFE_HEAP_LOAD($59, "double*", 0, 0);
 var $61=(($60+8)|0);
 var $62=SAFE_HEAP_LOAD($61, "double", 0, 0);
 var $63=$op;
 var $64=(($63+8)|0);
 $op=$64;
 SAFE_HEAP_STORE($63, $62, "double", 0);
 label=10;break;
 case 9: 
 SAFE_HEAP_STORE(4592, 123, "i32", 0);
 label=10;break;
 case 10: 
 var $67=$wrk;
 _endoper($67);
 label=2;break;
 case 11: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _popnest($hdr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tok;
 var $toklast;
 var $toknext;
 var $datacnt;
 var $datatyp;
 var $newtype;
 var $offset;
 var $resolved;
 var $out;
 $2=$hdr;
 $out=0;
 var $3=$2;
 var $4=SAFE_HEAP_LOAD($3, "%struct.apltoken*", 0, 0);
 $tok=$4;
 var $5=0==($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=32;break;
 case 3: 
 var $8=$tok;
 var $9=(($8)|0);
 var $10=$9;
 var $11=SAFE_HEAP_LOAD($10, "%struct.apltoken*", 0, 0);
 var $12=0==($11|0);
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=$2;
 var $15=$14;
 var $16=_pop($15);
 var $17=$16;
 $1=$17;
 label=32;break;
 case 5: 
 var $19=$tok;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 $offset=$21;
 $datatyp=0;
 $datacnt=0;
 var $22=$2;
 var $23=$22;
 $toklast=$23;
 label=6;break;
 case 6: 
 var $25=$tok;
 var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=18;break;}
 case 7: 
 var $28=$datacnt;
 var $29=((($28)+(1))|0);
 $datacnt=$29;
 var $30=$tok;
 var $31=(($30)|0);
 var $32=$31;
 var $33=SAFE_HEAP_LOAD($32, "%struct.apltoken*", 0, 0);
 $toknext=$33;
 var $34=$tok;
 var $35=(($34+4)|0);
 var $36=SAFE_HEAP_LOAD($35, "i32", 0, 0);
 if(($36|0)==-3|($36|0)==7){ label=8;break;}else{label=9;break;}
 case 8: 
 $resolved=1;
 label=10;break;
 case 9: 
 $resolved=0;
 label=10;break;
 case 10: 
 var $40=$resolved;
 var $41=($40|0)!=0;
 if($41){label=14;break;}else{label=11;break;}
 case 11: 
 var $43=$tok;
 var $44=_execgetp($43);
 $out=$44;
 var $45=$out;
 var $46=($45|0)==0;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 var $48=$toknext;
 var $49=$toklast;
 var $50=(($49)|0);
 var $51=$50;
 SAFE_HEAP_STORE($51, $48, "%struct.apltoken*", 0);
 $1=0;
 label=32;break;
 case 13: 
 var $53=$out;
 var $54=$offset;
 var $55=_exectok($53,$54);
 $tok=$55;
 var $56=$tok;
 var $57=$toklast;
 var $58=(($57)|0);
 var $59=$58;
 SAFE_HEAP_STORE($59, $56, "%struct.apltoken*", 0);
 var $60=$toknext;
 var $61=$tok;
 var $62=(($61)|0);
 var $63=$62;
 SAFE_HEAP_STORE($63, $60, "%struct.apltoken*", 0);
 label=14;break;
 case 14: 
 var $65=$tok;
 var $66=(($65+12)|0);
 var $67=$66;
 var $68=SAFE_HEAP_LOAD($67, "%struct.aplcb*", 0, 0);
 $out=$68;
 var $69=$out;
 var $70=(($69+12)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=($71|0)!=0;
 if($72){label=15;break;}else{label=16;break;}
 case 15: 
 $datatyp=32;
 label=17;break;
 case 16: 
 var $75=$datatyp;
 var $76=$out;
 var $77=(($76+4)|0);
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 var $79=$78&110;
 var $80=_typeget($75,$79);
 $datatyp=$80;
 label=17;break;
 case 17: 
 var $82=$tok;
 $toklast=$82;
 var $83=$toknext;
 $tok=$83;
 label=6;break;
 case 18: 
 var $85=$datacnt;
 var $86=$datatyp;
 var $87=((($86)+(1))|0);
 var $88=_getcb(0,$85,$87,1,0);
 $out=$88;
 var $89=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $90=($89|0)!=0;
 if($90){label=19;break;}else{label=20;break;}
 case 19: 
 $1=0;
 label=32;break;
 case 20: 
 var $93=$datatyp;
 switch(($93|0)){case 32:{ label=21;break;}case 8:{ label=22;break;}case 4:{ label=23;break;}case 2:{ label=24;break;}case 64:{ label=25;break;}default:{label=26;break;}}break;
 case 21: 
 var $95=$2;
 var $96=$95;
 var $97=$out;
 var $98=_popnesu($96,$97);
 label=27;break;
 case 22: 
 var $100=$2;
 var $101=$100;
 var $102=$out;
 _popnesv($101,$102);
 label=27;break;
 case 23: 
 var $104=$2;
 var $105=$104;
 var $106=$out;
 _popnesw($105,$106);
 label=27;break;
 case 24: 
 var $108=$2;
 var $109=$108;
 var $110=$out;
 _popnesx($109,$110);
 label=27;break;
 case 25: 
 var $112=$2;
 var $113=$112;
 var $114=$out;
 _popnesc($113,$114);
 label=27;break;
 case 26: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=27;break;
 case 27: 
 var $117=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $118=($117|0)!=0;
 if($118){label=28;break;}else{label=29;break;}
 case 28: 
 var $120=$out;
 _endoper($120);
 $1=0;
 label=32;break;
 case 29: 
 var $122=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $123=(($122+48)|0);
 var $124=SAFE_HEAP_LOAD($123, "i32", 0, 0);
 var $125=($124|0)==3;
 if($125){label=30;break;}else{label=31;break;}
 case 30: 
 var $127=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $128=(($127+48)|0);
 SAFE_HEAP_STORE($128, 0, "i32", 0);
 label=31;break;
 case 31: 
 var $130=$out;
 var $131=$offset;
 var $132=_exectok($130,$131);
 $1=$132;
 label=32;break;
 case 32: 
 var $134=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $134;
  default: assert(0, "bad label: " + label);
 }

}


function _popnesu($hdr,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $op;
 var $wrk;
 var $datacnt;
 $2=$hdr;
 $3=$out;
 var $4=$3;
 var $5=(($4)|0);
 var $6=$5;
 var $7=SAFE_HEAP_LOAD($6, "%struct.aplcb**", 0, 0);
 $op=$7;
 var $8=$3;
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 $datacnt=$10;
 label=2;break;
 case 2: 
 var $12=$datacnt;
 var $13=((($12)-(1))|0);
 $datacnt=$13;
 var $14=($12|0)!=0;
 if($14){label=3;break;}else{label=13;break;}
 case 3: 
 var $16=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 $wrk=0;
 label=12;break;
 case 5: 
 var $20=$2;
 var $21=_pop($20);
 var $22=$21;
 var $23=_execgetp($22);
 $wrk=$23;
 var $24=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $25=($24|0)==0;
 if($25){label=6;break;}else{label=11;break;}
 case 6: 
 var $27=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $28=($27|0)==0;
 if($28){label=7;break;}else{label=9;break;}
 case 7: 
 var $30=$wrk;
 var $31=(($30+4)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=$32&1;
 var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 var $36=$wrk;
 var $37=_aplcopy($36);
 $wrk=$37;
 label=10;break;
 case 9: 
 var $39=$wrk;
 var $40=_perm($39);
 $wrk=$40;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $44=$wrk;
 var $45=$op;
 var $46=(($45+4)|0);
 $op=$46;
 SAFE_HEAP_STORE($45, $44, "%struct.aplcb*", 0);
 label=2;break;
 case 13: 
 var $48=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }

}


function _popnesv($hdr,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $wrk;
 var $datacnt;
 var $op;
 $1=$hdr;
 $2=$out;
 var $3=$2;
 var $4=(($3)|0);
 var $5=$4;
 var $6=SAFE_HEAP_LOAD($5, "i8*", 0, 0);
 $op=$6;
 var $7=$2;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $datacnt=$9;
 label=2;break;
 case 2: 
 var $11=$datacnt;
 var $12=((($11)-(1))|0);
 $datacnt=$12;
 var $13=($11|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$1;
 var $16=_pop($15);
 var $17=$16;
 var $18=_execgetp($17);
 $wrk=$18;
 var $19=$wrk;
 var $20=(($19)|0);
 var $21=$20;
 var $22=SAFE_HEAP_LOAD($21, "i8*", 0, 0);
 var $23=SAFE_HEAP_LOAD($22, "i8", 0, 0);
 var $24=$op;
 var $25=(($24+1)|0);
 $op=$25;
 SAFE_HEAP_STORE($24, $23, "i8", 0);
 var $26=$wrk;
 _endoper($26);
 label=2;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _popnesw($hdr,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $wrk;
 var $datacnt;
 var $op;
 $1=$hdr;
 $2=$out;
 var $3=$2;
 var $4=(($3)|0);
 var $5=$4;
 var $6=SAFE_HEAP_LOAD($5, "i32*", 0, 0);
 $op=$6;
 var $7=$2;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $datacnt=$9;
 label=2;break;
 case 2: 
 var $11=$datacnt;
 var $12=((($11)-(1))|0);
 $datacnt=$12;
 var $13=($11|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$1;
 var $16=_pop($15);
 var $17=$16;
 var $18=_execgetp($17);
 $wrk=$18;
 var $19=$wrk;
 var $20=_ivalue($19);
 var $21=$op;
 var $22=(($21+4)|0);
 $op=$22;
 SAFE_HEAP_STORE($21, $20, "i32", 0);
 label=2;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _popnesx($hdr,$out){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $wrk;
 var $datacnt;
 var $op;
 $1=$hdr;
 $2=$out;
 var $3=$2;
 var $4=(($3)|0);
 var $5=$4;
 var $6=SAFE_HEAP_LOAD($5, "double*", 0, 0);
 $op=$6;
 var $7=$2;
 var $8=(($7+8)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 $datacnt=$9;
 label=2;break;
 case 2: 
 var $11=$datacnt;
 var $12=((($11)-(1))|0);
 $datacnt=$12;
 var $13=($11|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$1;
 var $16=_pop($15);
 var $17=$16;
 var $18=_execgetp($17);
 $wrk=$18;
 var $19=$wrk;
 var $20=_value($19);
 var $21=$op;
 var $22=(($21+8)|0);
 $op=$22;
 SAFE_HEAP_STORE($21, $20, "double", 0);
 label=2;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _power($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $absdif;
 var $absleft;
 var $absrite;
 var $cur;
 var $den;
 var $dif;
 var $num;
 var $ret;
 var $i;
 $2=$left;
 $3=$rite;
 var $4=$3;
 var $5=$4>=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 var $12=$7;label=4;break;
 case 3: 
 var $9=$3;
 var $10=((-.0))-($9);
 var $12=$10;label=4;break;
 case 4: 
 var $12;
 $absrite=$12;
 var $13=$absrite;
 var $14=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $15=$13<=$14;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 $1=1;
 label=36;break;
 case 6: 
 var $18=$2;
 var $19=$18>=0;
 if($19){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$2;
 var $26=$21;label=9;break;
 case 8: 
 var $23=$2;
 var $24=((-.0))-($23);
 var $26=$24;label=9;break;
 case 9: 
 var $26;
 $absleft=$26;
 var $27=$absrite;
 var $28=_mod($27,1);
 var $29=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $30=$28>$29;
 if($30){label=10;break;}else{label=11;break;}
 case 10: 
 var $32=$absleft;
 var $33=$3;
 var $34=Math_pow($32,$33);
 $ret=$34;
 label=17;break;
 case 11: 
 var $36=$absrite;
 var $37=(($36)&-1);
 $i=$37;
 var $38=$absleft;
 $ret=$38;
 label=12;break;
 case 12: 
 var $40=$i;
 var $41=((($40)-(1))|0);
 $i=$41;
 var $42=0<($41|0);
 if($42){label=13;break;}else{label=14;break;}
 case 13: 
 var $44=$absleft;
 var $45=$ret;
 var $46=($45)*($44);
 $ret=$46;
 label=12;break;
 case 14: 
 var $48=$3;
 var $49=$48<0;
 if($49){label=15;break;}else{label=16;break;}
 case 15: 
 var $51=$ret;
 var $52=(1)/($51);
 $ret=$52;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $55=$2;
 var $56=$55<0;
 if($56){label=18;break;}else{label=35;break;}
 case 18: 
 $den=1;
 $num=1;
 $i=0;
 label=19;break;
 case 19: 
 var $59=$i;
 var $60=($59|0)<400;
 if($60){label=20;break;}else{label=34;break;}
 case 20: 
 var $62=$3;
 var $63=$num;
 var $64=$den;
 var $65=($63)/($64);
 $cur=$65;
 var $66=($62)-($65);
 $dif=$66;
 var $67=$dif;
 var $68=$67>=0;
 if($68){label=21;break;}else{label=22;break;}
 case 21: 
 var $70=$dif;
 var $75=$70;label=23;break;
 case 22: 
 var $72=$dif;
 var $73=((-.0))-($72);
 var $75=$73;label=23;break;
 case 23: 
 var $75;
 $absdif=$75;
 var $76=$absdif;
 var $77=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $78=$76<=$77;
 if($78){label=24;break;}else{label=29;break;}
 case 24: 
 var $80=$den;
 var $81=_mod($80,2);
 var $82=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $83=$81<$82;
 if($83){label=25;break;}else{label=26;break;}
 case 25: 
 SAFE_HEAP_STORE(4592, 86, "i32", 0);
 label=26;break;
 case 26: 
 var $86=$num;
 var $87=_mod($86,2);
 var $88=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $89=$87<$88;
 if($89){label=27;break;}else{label=28;break;}
 case 27: 
 var $91=$ret;
 $1=$91;
 label=36;break;
 case 28: 
 var $93=$ret;
 var $94=((-.0))-($93);
 $1=$94;
 label=36;break;
 case 29: 
 var $96=$3;
 var $97=$cur;
 var $98=$96>$97;
 if($98){label=30;break;}else{label=31;break;}
 case 30: 
 var $100=$num;
 var $101=($100)+(1);
 $num=$101;
 label=32;break;
 case 31: 
 var $103=$den;
 var $104=($103)+(1);
 $den=$104;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $107=$i;
 var $108=((($107)+(1))|0);
 $i=$108;
 label=19;break;
 case 34: 
 SAFE_HEAP_STORE(4592, 87, "i32", 0);
 label=35;break;
 case 35: 
 var $111=$ret;
 $1=$111;
 label=36;break;
 case 36: 
 var $113=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $113;
  default: assert(0, "bad label: " + label);
 }

}


function _powerp($left,$rite,$pret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $absdif;
 var $absleft;
 var $absrite;
 var $cur;
 var $den;
 var $dif;
 var $num;
 var $ret=sp;
 var $i;
 $1=$left;
 $2=$rite;
 $3=$pret;
 var $4=(($ret)|0);
 var $5=(($4+8)|0);
 SAFE_HEAP_STORE($5, 0, "double", 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=$7>0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$2;
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $17=$11;label=4;break;
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "double", 0, 0);
 var $15=((-.0))-($14);
 var $17=$15;label=4;break;
 case 4: 
 var $17;
 $absrite=$17;
 var $18=$absrite;
 var $19=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $20=$18<=$19;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=$3;
 SAFE_HEAP_STORE($22, 1, "double", 0);
 label=38;break;
 case 6: 
 var $24=$1;
 var $25=SAFE_HEAP_LOAD($24, "double", 0, 0);
 var $26=$25>0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=$1;
 var $29=SAFE_HEAP_LOAD($28, "double", 0, 0);
 var $35=$29;label=9;break;
 case 8: 
 var $31=$1;
 var $32=SAFE_HEAP_LOAD($31, "double", 0, 0);
 var $33=((-.0))-($32);
 var $35=$33;label=9;break;
 case 9: 
 var $35;
 $absleft=$35;
 var $36=$absrite;
 var $37=_mod($36,1);
 var $38=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $39=$37>$38;
 if($39){label=10;break;}else{label=11;break;}
 case 10: 
 var $41=$absleft;
 var $42=$2;
 var $43=SAFE_HEAP_LOAD($42, "double", 0, 0);
 var $44=Math_pow($41,$43);
 var $45=(($ret)|0);
 SAFE_HEAP_STORE($45, $44, "double", 0);
 label=17;break;
 case 11: 
 var $47=$absrite;
 var $48=(($47)&-1);
 $i=$48;
 var $49=$absleft;
 var $50=(($ret)|0);
 SAFE_HEAP_STORE($50, $49, "double", 0);
 label=12;break;
 case 12: 
 var $52=$i;
 var $53=((($52)-(1))|0);
 $i=$53;
 var $54=0<($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$absleft;
 var $57=(($ret)|0);
 var $58=SAFE_HEAP_LOAD($57, "double", 0, 0);
 var $59=($58)*($56);
 SAFE_HEAP_STORE($57, $59, "double", 0);
 label=12;break;
 case 14: 
 var $61=$2;
 var $62=SAFE_HEAP_LOAD($61, "double", 0, 0);
 var $63=$62<0;
 if($63){label=15;break;}else{label=16;break;}
 case 15: 
 var $65=(($ret)|0);
 var $66=SAFE_HEAP_LOAD($65, "double", 0, 0);
 var $67=(1)/($66);
 var $68=(($ret)|0);
 SAFE_HEAP_STORE($68, $67, "double", 0);
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $71=$1;
 var $72=SAFE_HEAP_LOAD($71, "double", 0, 0);
 var $73=$72<0;
 if($73){label=18;break;}else{label=37;break;}
 case 18: 
 $den=1;
 $num=1;
 $i=0;
 label=19;break;
 case 19: 
 var $76=$i;
 var $77=($76|0)<400;
 if($77){label=20;break;}else{label=36;break;}
 case 20: 
 var $79=$num;
 var $80=$den;
 var $81=($79)/($80);
 $cur=$81;
 var $82=$2;
 var $83=SAFE_HEAP_LOAD($82, "double", 0, 0);
 var $84=$cur;
 var $85=($83)-($84);
 var $86=$85>0;
 if($86){label=21;break;}else{label=22;break;}
 case 21: 
 var $88=$2;
 var $89=SAFE_HEAP_LOAD($88, "double", 0, 0);
 var $90=$cur;
 var $91=($89)-($90);
 var $99=$91;label=23;break;
 case 22: 
 var $93=$2;
 var $94=SAFE_HEAP_LOAD($93, "double", 0, 0);
 var $95=$cur;
 var $96=($94)-($95);
 var $97=((-.0))-($96);
 var $99=$97;label=23;break;
 case 23: 
 var $99;
 $absdif=$99;
 var $100=$absdif;
 var $101=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $102=$100<=$101;
 if($102){label=24;break;}else{label=31;break;}
 case 24: 
 var $104=$den;
 var $105=_mod($104,2);
 var $106=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $107=$105<$106;
 if($107){label=25;break;}else{label=26;break;}
 case 25: 
 var $109=$1;
 var $110=$2;
 var $111=$3;
 var $112=(($ret)|0);
 var $113=$num;
 var $114=$den;
 _powerpx($109,$110,$111,$112,$113,$114);
 label=30;break;
 case 26: 
 var $116=$num;
 var $117=_mod($116,2);
 var $118=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $119=$117<$118;
 if($119){label=27;break;}else{label=28;break;}
 case 27: 
 var $121=(($ret)|0);
 var $122=SAFE_HEAP_LOAD($121, "double", 0, 0);
 var $123=$3;
 SAFE_HEAP_STORE($123, $122, "double", 0);
 label=29;break;
 case 28: 
 var $125=(($ret)|0);
 var $126=SAFE_HEAP_LOAD($125, "double", 0, 0);
 var $127=((-.0))-($126);
 var $128=$3;
 SAFE_HEAP_STORE($128, $127, "double", 0);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $131=(($ret)|0);
 var $132=(($131+8)|0);
 var $133=SAFE_HEAP_LOAD($132, "double", 0, 0);
 var $134=$3;
 var $135=(($134+8)|0);
 SAFE_HEAP_STORE($135, $133, "double", 0);
 label=38;break;
 case 31: 
 var $137=$2;
 var $138=SAFE_HEAP_LOAD($137, "double", 0, 0);
 var $139=$cur;
 var $140=$138>$139;
 if($140){label=32;break;}else{label=33;break;}
 case 32: 
 var $142=$num;
 var $143=($142)+(1);
 $num=$143;
 label=34;break;
 case 33: 
 var $145=$den;
 var $146=($145)+(1);
 $den=$146;
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $149=$i;
 var $150=((($149)+(1))|0);
 $i=$150;
 label=19;break;
 case 36: 
 SAFE_HEAP_STORE(4592, 87, "i32", 0);
 label=37;break;
 case 37: 
 var $153=(($ret)|0);
 var $154=SAFE_HEAP_LOAD($153, "double", 0, 0);
 var $155=$3;
 SAFE_HEAP_STORE($155, $154, "double", 0);
 var $156=(($ret)|0);
 var $157=(($156+8)|0);
 var $158=SAFE_HEAP_LOAD($157, "double", 0, 0);
 var $159=$3;
 var $160=(($159+8)|0);
 SAFE_HEAP_STORE($160, $158, "double", 0);
 label=38;break;
 case 38: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _powerpx($left,$rite,$pret,$ret,$num,$den){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $angle;
 var $wrka=sp;
 var $wrkb=(sp)+(16);
 $1=$left;
 $2=$rite;
 $3=$pret;
 $4=$ret;
 $5=$num;
 $6=$den;
 label=2;break;
 case 2: 
 var $8=$5;
 var $9=_fmod($8,2);
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$9<$10;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 label=5;break;
 case 4: 
 $5=1;
 var $14=$6;
 var $15=($14)/(2);
 $6=$15;
 var $16=$6;
 var $17=((1.5707963267948966))*($16);
 $angle=$17;
 var $18=$angle;
 var $19=Math_cos($18);
 var $20=(($wrka)|0);
 SAFE_HEAP_STORE($20, $19, "double", 0);
 var $21=$angle;
 var $22=Math_sin($21);
 var $23=(($wrka)|0);
 var $24=(($23+8)|0);
 SAFE_HEAP_STORE($24, $22, "double", 0);
 var $25=$4;
 var $26=SAFE_HEAP_LOAD($25, "double", 0, 0);
 var $27=(($wrkb)|0);
 SAFE_HEAP_STORE($27, $26, "double", 0);
 var $28=$4;
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "double", 0, 0);
 var $31=(($wrkb)|0);
 var $32=(($31+8)|0);
 SAFE_HEAP_STORE($32, $30, "double", 0);
 var $33=(($wrka)|0);
 var $34=(($wrkb)|0);
 var $35=$4;
 _timesx($33,$34,$35);
 label=5;break;
 case 5: 
 var $37=$4;
 var $38=SAFE_HEAP_LOAD($37, "double", 0, 0);
 var $39=$3;
 SAFE_HEAP_STORE($39, $38, "double", 0);
 var $40=$4;
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "double", 0, 0);
 var $43=$3;
 var $44=(($43+8)|0);
 SAFE_HEAP_STORE($44, $42, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _powerx($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $absval;
 var $n;
 var $neg;
 var $wrka=sp;
 var $wrkb=(sp)+(16);
 var $wrkc=(sp)+(32);
 var $i;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$2;
 var $5=(($4+8)|0);
 var $6=SAFE_HEAP_LOAD($5, "double", 0, 0);
 var $7=$6>0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$2;
 var $10=(($9+8)|0);
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $18=$11;label=4;break;
 case 3: 
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "double", 0, 0);
 var $16=((-.0))-($15);
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 var $19=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $20=$18>$19;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=$2;
 var $23=SAFE_HEAP_LOAD($22, "double", 0, 0);
 var $24=(($wrka)|0);
 SAFE_HEAP_STORE($24, $23, "double", 0);
 var $25=(($wrka)|0);
 var $26=(($25+8)|0);
 SAFE_HEAP_STORE($26, 0, "double", 0);
 var $27=$1;
 var $28=(($wrka)|0);
 var $29=(($wrkb)|0);
 _powerx($27,$28,$29);
 var $30=$1;
 var $31=(($30+8)|0);
 var $32=SAFE_HEAP_LOAD($31, "double", 0, 0);
 var $33=_circular(2,$32);
 var $34=(($wrka)|0);
 SAFE_HEAP_STORE($34, $33, "double", 0);
 var $35=$1;
 var $36=(($35+8)|0);
 var $37=SAFE_HEAP_LOAD($36, "double", 0, 0);
 var $38=_circular(1,$37);
 var $39=(($wrka)|0);
 var $40=(($39+8)|0);
 SAFE_HEAP_STORE($40, $38, "double", 0);
 var $41=(($wrkb)|0);
 var $42=(($wrka)|0);
 var $43=$3;
 _timesx($41,$42,$43);
 label=21;break;
 case 6: 
 var $45=$1;
 var $46=(($45+8)|0);
 var $47=SAFE_HEAP_LOAD($46, "double", 0, 0);
 var $48=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $49=$47<=$48;
 if($49){label=7;break;}else{label=9;break;}
 case 7: 
 var $51=$1;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "double", 0, 0);
 var $54=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $55=$53>=$54;
 if($55){label=8;break;}else{label=9;break;}
 case 8: 
 var $57=$3;
 var $58=(($57+8)|0);
 SAFE_HEAP_STORE($58, 0, "double", 0);
 var $59=$1;
 var $60=SAFE_HEAP_LOAD($59, "double", 0, 0);
 var $61=$2;
 var $62=SAFE_HEAP_LOAD($61, "double", 0, 0);
 var $63=_power($60,$62);
 var $64=$3;
 SAFE_HEAP_STORE($64, $63, "double", 0);
 label=21;break;
 case 9: 
 var $66=$2;
 var $67=SAFE_HEAP_LOAD($66, "double", 0, 0);
 var $68=$67<0;
 var $69=($68?-1:1);
 $neg=$69;
 var $70=$neg;
 var $71=$2;
 var $72=SAFE_HEAP_LOAD($71, "double", 0, 0);
 var $73=($70)*($72);
 $absval=$73;
 var $74=$absval;
 var $75=_mod($74,1);
 var $76=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $77=$75>$76;
 if($77){label=10;break;}else{label=13;break;}
 case 10: 
 var $79=$absval;
 var $80=(1)/($79);
 $n=$80;
 var $81=$n;
 var $82=_mod($81,1);
 var $83=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $84=$82>$83;
 if($84){label=11;break;}else{label=12;break;}
 case 11: 
 SAFE_HEAP_STORE(4592, 996, "i32", 0);
 label=21;break;
 case 12: 
 var $87=$1;
 var $88=(($wrka)|0);
 _dabsx($87,$88);
 var $89=(($wrka)|0);
 var $90=SAFE_HEAP_LOAD($89, "double", 0, 0);
 var $91=$absval;
 var $92=_power($90,$91);
 var $93=(($wrkb)|0);
 SAFE_HEAP_STORE($93, $92, "double", 0);
 var $94=$1;
 var $95=(($94+8)|0);
 var $96=SAFE_HEAP_LOAD($95, "double", 0, 0);
 var $97=$1;
 var $98=SAFE_HEAP_LOAD($97, "double", 0, 0);
 var $99=Math_atan2($96,$98);
 var $100=$n;
 var $101=($99)/($100);
 var $102=(($wrkb)|0);
 var $103=(($102+8)|0);
 SAFE_HEAP_STORE($103, $101, "double", 0);
 var $104=(($wrkb)|0);
 var $105=SAFE_HEAP_LOAD($104, "double", 0, 0);
 var $106=(($wrkb)|0);
 var $107=(($106+8)|0);
 var $108=SAFE_HEAP_LOAD($107, "double", 0, 0);
 var $109=Math_cos($108);
 var $110=($105)*($109);
 var $111=(($wrka)|0);
 SAFE_HEAP_STORE($111, $110, "double", 0);
 var $112=(($wrkb)|0);
 var $113=SAFE_HEAP_LOAD($112, "double", 0, 0);
 var $114=(($wrkb)|0);
 var $115=(($114+8)|0);
 var $116=SAFE_HEAP_LOAD($115, "double", 0, 0);
 var $117=Math_sin($116);
 var $118=($113)*($117);
 var $119=(($wrka)|0);
 var $120=(($119+8)|0);
 SAFE_HEAP_STORE($120, $118, "double", 0);
 label=17;break;
 case 13: 
 var $122=$absval;
 var $123=(($122)&-1);
 $i=$123;
 var $124=$1;
 var $125=SAFE_HEAP_LOAD($124, "double", 0, 0);
 var $126=(($wrka)|0);
 SAFE_HEAP_STORE($126, $125, "double", 0);
 var $127=$1;
 var $128=(($127+8)|0);
 var $129=SAFE_HEAP_LOAD($128, "double", 0, 0);
 var $130=(($wrka)|0);
 var $131=(($130+8)|0);
 SAFE_HEAP_STORE($131, $129, "double", 0);
 label=14;break;
 case 14: 
 var $133=$i;
 var $134=((($133)-(1))|0);
 $i=$134;
 var $135=($134|0)!=0;
 if($135){label=15;break;}else{label=16;break;}
 case 15: 
 var $137=(($wrka)|0);
 var $138=$1;
 var $139=(($wrkb)|0);
 _timesx($137,$138,$139);
 var $140=(($wrkb)|0);
 var $141=SAFE_HEAP_LOAD($140, "double", 0, 0);
 var $142=(($wrka)|0);
 SAFE_HEAP_STORE($142, $141, "double", 0);
 var $143=(($wrkb)|0);
 var $144=(($143+8)|0);
 var $145=SAFE_HEAP_LOAD($144, "double", 0, 0);
 var $146=(($wrka)|0);
 var $147=(($146+8)|0);
 SAFE_HEAP_STORE($147, $145, "double", 0);
 label=14;break;
 case 16: 
 label=17;break;
 case 17: 
 var $150=$neg;
 var $151=$150==-1;
 if($151){label=18;break;}else{label=19;break;}
 case 18: 
 var $153=(($wrkb)|0);
 SAFE_HEAP_STORE($153, 1, "double", 0);
 var $154=(($wrkb)|0);
 var $155=(($154+8)|0);
 SAFE_HEAP_STORE($155, 0, "double", 0);
 var $156=(($wrkb)|0);
 var $157=(($wrka)|0);
 var $158=$3;
 _dividex($156,$157,$158);
 label=20;break;
 case 19: 
 var $160=(($wrka)|0);
 var $161=SAFE_HEAP_LOAD($160, "double", 0, 0);
 var $162=$3;
 SAFE_HEAP_STORE($162, $161, "double", 0);
 var $163=(($wrka)|0);
 var $164=(($163+8)|0);
 var $165=SAFE_HEAP_LOAD($164, "double", 0, 0);
 var $166=$3;
 var $167=(($166+8)|0);
 SAFE_HEAP_STORE($167, $165, "double", 0);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _precisn($val,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $digs;
 $1=$val;
 $2=$ret;
 var $3=$1;
 var $4=_digits($3);
 $digs=$4;
 var $5=$2;
 SAFE_HEAP_STORE($5, $4, "i32", 0);
 var $6=$1;
 var $7=$digs;
 var $8=SAFE_HEAP_LOAD(2576, "double", 0, 0);
 var $9=(($8)&-1);
 var $10=_places($6,$7,$9);
 var $11=$2;
 var $12=(($11+4)|0);
 SAFE_HEAP_STORE($12, $10, "i32", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _preduces($id,$dp,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $axicnt=(sp)+(8);
 var $botcnt=(sp)+(16);
 var $itype=(sp)+(24);
 var $otype=(sp)+(32);
 var $rtype;
 var $topcnt=(sp)+(40);
 var $out;
 var $oper;
 var $fun;
 var $ddentity=(sp)+(48);
 var $identp;
 var $tdata;
 var $identity=(sp)+(64);
 $2=$id;
 $3=$dp;
 $4=$rite;
 SAFE_HEAP_STORE($5, $axis, "i32", 0);
 $oper=0;
 var $6=_errinit();
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$4;
 var $10=_errstop(0,0,$9,0);
 $1=$10;
 label=18;break;
 case 3: 
 var $12=$4;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$14&78;
 $rtype=$15;
 var $16=$3;
 var $17=(($16+28)|0);
 var $18=(($17+8)|0);
 var $19=SAFE_HEAP_LOAD($18, "i8*", 0, 0);
 var $20=$19;
 $fun=$20;
 var $21=$fun;
 var $22=$21;
 var $23=$rtype;
 var $24=$rtype;
 var $25=_dyadcom($22,$itype,$otype,$23,$24);
 $oper=$25;
 var $26=SAFE_HEAP_LOAD($itype, "i32", 0, 0);
 var $27=$rtype;
 var $28=($26|0)!=($27|0);
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 var $30=$4;
 var $31=SAFE_HEAP_LOAD($otype, "i32", 0, 0);
 var $32=_convert($30,$31);
 $4=$32;
 label=5;break;
 case 5: 
 var $34=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $35=($34|0)!=0;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=$4;
 var $38=_errstop(0,0,$37,0);
 $1=$38;
 label=18;break;
 case 7: 
 var $40=SAFE_HEAP_LOAD($otype, "i32", 0, 0);
 var $41=($40|0)==4;
 if($41){label=8;break;}else{label=9;break;}
 case 8: 
 var $43=$fun;
 var $44=(($43+8)|0);
 var $45=(($44)|0);
 var $46=(($45)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 SAFE_HEAP_STORE($identity, $47, "i32", 0);
 var $48=$identity;
 $identp=$48;
 label=10;break;
 case 9: 
 var $50=$fun;
 var $51=(($50+8)|0);
 var $52=(($51)|0);
 var $53=(($52+8)|0);
 var $54=SAFE_HEAP_LOAD($53, "double", 0, 0);
 var $55=(($ddentity)|0);
 SAFE_HEAP_STORE($55, $54, "double", 0);
 var $56=(($ddentity+8)|0);
 SAFE_HEAP_STORE($56, 0, "double", 0);
 var $57=(($ddentity)|0);
 var $58=$57;
 $identp=$58;
 label=10;break;
 case 10: 
 var $60=$2;
 var $61=(($ddentity)|0);
 var $62=$61;
 var $63=$4;
 var $64=SAFE_HEAP_LOAD($otype, "i32", 0, 0);
 var $65=_reducecm($60,$62,$63,$5,$axicnt,$botcnt,$topcnt,$64);
 $out=$65;
 var $66=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $67=($66|0)!=0;
 if($67){label=11;break;}else{label=12;break;}
 case 11: 
 $1=0;
 label=18;break;
 case 12: 
 var $70=$out;
 var $71=(($70+8)|0);
 var $72=SAFE_HEAP_LOAD($71, "i32", 0, 0);
 var $73=($72|0)!=0;
 if($73){label=13;break;}else{label=17;break;}
 case 13: 
 var $75=$4;
 var $76=(($75+8)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=0==($77|0);
 if($78){label=14;break;}else{label=15;break;}
 case 14: 
 var $80=$out;
 var $81=(($80)|0);
 var $82=$81;
 var $83=SAFE_HEAP_LOAD($82, "i8*", 0, 0);
 var $84=$identp;
 var $85=$out;
 var $86=(($85+8)|0);
 var $87=SAFE_HEAP_LOAD($86, "i32", 0, 0);
 var $88=SAFE_HEAP_LOAD($itype, "i32", 0, 0);
 var $89=SAFE_HEAP_LOAD($otype, "i32", 0, 0);
 var $90=_allcopy($83,$84,$87,0,$88,$89);
 $tdata=$90;
 label=16;break;
 case 15: 
 var $92=$2;
 var $93=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $94=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $95=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $96=SAFE_HEAP_LOAD($itype, "i32", 0, 0);
 var $97=SAFE_HEAP_LOAD($otype, "i32", 0, 0);
 var $98=$4;
 var $99=$out;
 var $100=$oper;
 var $101=$identp;
 _preducet($92,$93,$94,$95,$96,$97,$98,$99,$100,$101);
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $104=$4;
 var $105=$out;
 var $106=_errstop(0,0,$104,$105);
 $1=$106;
 label=18;break;
 case 18: 
 var $108=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $108;
  default: assert(0, "bad label: " + label);
 }

}


function _preducet($id,$axicnt,$botcnt,$topcnt,$itype,$otype,$rite,$out,$oper,$identp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $iw;
 var $isize;
 var $jw;
 var $kw;
 var $osize;
 var $mw;
 var $nw;
 var $pw;
 var $qw;
 var $rw;
 var $wrka=sp;
 var $wrkb=(sp)+(16);
 var $icp;
 var $idata;
 var $kp;
 var $odata;
 var $tdata;
 $1=$id;
 $2=$axicnt;
 $3=$botcnt;
 $4=$topcnt;
 $5=$itype;
 $6=$otype;
 $7=$rite;
 $8=$out;
 $9=$oper;
 $10=$identp;
 var $11=$1;
 var $12=($11|0)!=0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $17=1;label=4;break;
 case 3: 
 var $15=$2;
 var $17=$15;label=4;break;
 case 4: 
 var $17;
 $nw=$17;
 var $18=$8;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "i8*", 0, 0);
 $odata=$21;
 var $22=$8;
 var $23=(($22+20)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 $osize=$24;
 var $25=$7;
 var $26=(($25)|0);
 var $27=$26;
 var $28=SAFE_HEAP_LOAD($27, "i8*", 0, 0);
 $idata=$28;
 var $29=$7;
 var $30=(($29+20)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 $isize=$31;
 $iw=0;
 label=5;break;
 case 5: 
 var $33=$iw;
 var $34=$4;
 var $35=($33|0)<($34|0);
 if($35){label=6;break;}else{label=28;break;}
 case 6: 
 var $37=$iw;
 var $38=$3;
 var $39=(Math_imul($37,$38)|0);
 var $40=$2;
 var $41=(Math_imul($39,$40)|0);
 $pw=$41;
 var $42=$idata;
 var $43=$pw;
 var $44=$isize;
 var $45=(Math_imul($43,$44)|0);
 var $46=(($42+$45)|0);
 $icp=$46;
 $jw=0;
 label=7;break;
 case 7: 
 var $48=$jw;
 var $49=$3;
 var $50=($48|0)<($49|0);
 if($50){label=8;break;}else{label=26;break;}
 case 8: 
 var $52=$nw;
 $mw=$52;
 label=9;break;
 case 9: 
 var $54=$mw;
 var $55=($54|0)>0;
 if($55){label=10;break;}else{label=24;break;}
 case 10: 
 var $57=$icp;
 var $58=$jw;
 var $59=$2;
 var $60=$mw;
 var $61=((($59)-($60))|0);
 var $62=$3;
 var $63=(Math_imul($61,$62)|0);
 var $64=((($58)+($63))|0);
 var $65=$isize;
 var $66=(Math_imul($64,$65)|0);
 var $67=(($57+$66)|0);
 $kp=$67;
 var $68=(($wrka)|0);
 var $69=$68;
 var $70=$kp;
 var $71=$5;
 var $72=_dtacopy($69,$70,1,0,$71);
 $tdata=$72;
 var $73=$2;
 var $74=$mw;
 var $75=((($73)-($74))|0);
 var $76=((($75)+(1))|0);
 $rw=$76;
 var $77=1<($76|0);
 if($77){label=11;break;}else{label=19;break;}
 case 11: 
 $kw=1;
 label=12;break;
 case 12: 
 var $80=$kw;
 var $81=$rw;
 var $82=($80|0)<($81|0);
 if($82){label=13;break;}else{label=18;break;}
 case 13: 
 var $84=$3;
 var $85=$isize;
 var $86=(Math_imul($84,$85)|0);
 var $87=$kp;
 var $88=(((-$86))|0);
 var $89=(($87+$88)|0);
 $kp=$89;
 var $90=$9;
 var $91=$kp;
 var $92=(($wrka)|0);
 var $93=(($wrkb)|0);
 var $94=$90;
 FUNCTION_TABLE[$94]($91,$92,$93);
 var $95=$5;
 var $96=$6;
 var $97=($95|0)==($96|0);
 if($97){label=14;break;}else{label=15;break;}
 case 14: 
 var $99=(($wrkb)|0);
 var $100=SAFE_HEAP_LOAD($99, "double", 0, 0);
 var $101=(($wrka)|0);
 SAFE_HEAP_STORE($101, $100, "double", 0);
 var $102=(($wrkb+8)|0);
 var $103=SAFE_HEAP_LOAD($102, "double", 0, 0);
 var $104=(($wrka+8)|0);
 SAFE_HEAP_STORE($104, $103, "double", 0);
 label=16;break;
 case 15: 
 var $106=(($wrka)|0);
 var $107=$106;
 var $108=(($wrkb)|0);
 var $109=$108;
 var $110=$5;
 var $111=$6;
 var $112=_allcopy($107,$109,1,0,$110,$111);
 $tdata=$112;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $115=$kw;
 var $116=((($115)+(1))|0);
 $kw=$116;
 label=12;break;
 case 18: 
 label=19;break;
 case 19: 
 var $119=$1;
 var $120=($119|0)!=0;
 if($120){label=20;break;}else{label=21;break;}
 case 20: 
 var $122=$odata;
 var $123=(($wrka)|0);
 var $124=$123;
 var $125=$6;
 var $126=_dtacopy($122,$124,1,0,$125);
 $odata=$126;
 label=22;break;
 case 21: 
 var $128=$pw;
 var $129=$jw;
 var $130=((($128)+($129))|0);
 var $131=$2;
 var $132=$mw;
 var $133=((($131)-($132))|0);
 var $134=$3;
 var $135=(Math_imul($133,$134)|0);
 var $136=((($130)+($135))|0);
 var $137=$osize;
 var $138=(Math_imul($136,$137)|0);
 $qw=$138;
 var $139=$odata;
 var $140=$qw;
 var $141=(($139+$140)|0);
 var $142=(($wrka)|0);
 var $143=$142;
 var $144=$6;
 var $145=_dtacopy($141,$143,1,0,$144);
 $tdata=$145;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $148=$mw;
 var $149=((($148)-(1))|0);
 $mw=$149;
 label=9;break;
 case 24: 
 label=25;break;
 case 25: 
 var $152=$jw;
 var $153=((($152)+(1))|0);
 $jw=$153;
 label=7;break;
 case 26: 
 label=27;break;
 case 27: 
 var $156=$iw;
 var $157=((($156)+(1))|0);
 $iw=$157;
 label=5;break;
 case 28: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _ptrtoff($array,$element){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $offset;
 $1=$array;
 $2=$element;
 var $3=$2;
 var $4=0==($3|0);
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $offset=-1;
 label=4;break;
 case 3: 
 var $7=$2;
 var $8=$1;
 var $9=$7;
 var $10=$8;
 var $11=((($9)-($10))|0);
 $offset=$11;
 label=4;break;
 case 4: 
 var $13=$offset;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }

}


function _qquadin(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $line=sp;
 var $cp;
 var $i;
 var $linelen;
 var $out;
 $i=0;
 label=2;break;
 case 2: 
 var $2=$i;
 var $3=SAFE_HEAP_LOAD(5664, "i32", 0, 0);
 var $4=($2|0)<($3|0);
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 var $6=$i;
 var $7=(($line+$6)|0);
 SAFE_HEAP_STORE($7, 32, "i8", 0);
 label=4;break;
 case 4: 
 var $9=$i;
 var $10=((($9)+(1))|0);
 $i=$10;
 label=2;break;
 case 5: 
 var $12=SAFE_HEAP_LOAD(5664, "i32", 0, 0);
 var $13=(($line+$12)|0);
 SAFE_HEAP_STORE($13, 0, "i8", 0);
 var $14=(($line)|0);
 var $15=_apltext($14,1024);
 $linelen=$15;
 var $16=$linelen;
 var $17=($16|0)==-1;
 if($17){label=6;break;}else{label=7;break;}
 case 6: 
 $linelen=0;
 label=7;break;
 case 7: 
 var $20=$linelen;
 var $21=_getcb(0,$20,9,1,0);
 $out=$21;
 var $22=$out;
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 var $27=$out;
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 var $31=(($line)|0);
 var $32=$out;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=_chrcopy($30,$31,$34,1);
 $cp=$35;
 label=9;break;
 case 9: 
 var $37=$out;
 var $38=_errstop(0,0,0,$37);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }

}


function _qquadout($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=_quadoutc($2,0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $3;
}


function _quadin(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $in;
 var $out;
 var $cp=sp;
 var $cpend;
 var $prompt=(sp)+(8);
 var $i;
 var $2=_errinit();
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=18;break;
 case 3: 
 var $6=(($prompt)|0);
 var $7=_codechar(44);
 var $8=_strcpy($6,$7);
 var $9=_codechar(26);
 var $10=_strcat($8,$9);
 $out=0;
 label=4;break;
 case 4: 
 var $12=$out;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=17;break;}
 case 5: 
 SAFE_HEAP_STORE(4592, 0, "i32", 0);
 var $15=(($prompt)|0);
 var $16=_getchrv($15);
 $in=$16;
 var $17=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $18=($17|0)!=0;
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=18;break;
 case 7: 
 var $21=$in;
 var $22=(($21+8)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=($23|0)==0;
 if($24){label=8;break;}else{label=9;break;}
 case 8: 
 var $26=$in;
 _endoper($26);
 label=16;break;
 case 9: 
 var $28=$in;
 var $29=(($28)|0);
 var $30=$29;
 var $31=SAFE_HEAP_LOAD($30, "i8*", 0, 0);
 SAFE_HEAP_STORE($cp, $31, "i8*", 0);
 var $32=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $33=$in;
 var $34=(($33+8)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=(($32+$35)|0);
 $cpend=$36;
 var $37=$cpend;
 var $38=_aplscan($cp,$37);
 $i=$38;
 var $39=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $40=$cpend;
 var $41=($39|0)==($40|0);
 if($41){label=10;break;}else{label=12;break;}
 case 10: 
 var $43=$i;
 var $44=($43|0)==4;
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $46=$in;
 var $47=_errstop(0,$46,0,0);
 $1=$47;
 label=18;break;
 case 12: 
 var $49=$i;
 var $50=($49|0)==9;
 if($50){label=13;break;}else{label=14;break;}
 case 13: 
 var $52=$in;
 var $53=SAFE_HEAP_LOAD($cp, "i8*", 0, 0);
 var $54=$cpend;
 var $55=_aplwksp($52,$53,$54);
 $i=$55;
 label=15;break;
 case 14: 
 var $57=$in;
 var $58=_compute($57);
 $out=$58;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=4;break;
 case 17: 
 var $62=$out;
 var $63=_errstop(0,0,0,$62);
 $1=$63;
 label=18;break;
 case 18: 
 var $65=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $65;
  default: assert(0, "bad label: " + label);
 }

}


function _quadinit(){
 var label=0;


 SAFE_HEAP_STORE(2568, 10, "i8", 0);
 SAFE_HEAP_STORE(2569, 0, "i8", 0);
 SAFE_HEAP_STORE(2560, 13, "i8", 0);
 SAFE_HEAP_STORE(2561, 0, "i8", 0);
 SAFE_HEAP_STORE(2552, 3, "i8", 0);
 SAFE_HEAP_STORE(2553, 0, "i8", 0);
 SAFE_HEAP_STORE(2544, 12, "i8", 0);
 SAFE_HEAP_STORE(2545, 0, "i8", 0);
 SAFE_HEAP_STORE(2536, 39, "i8", 0);
 SAFE_HEAP_STORE(2537, 0, "i8", 0);
 SAFE_HEAP_STORE(2448, 6, "i8", 0);
 SAFE_HEAP_STORE(2449, 0, "i8", 0);
 SAFE_HEAP_STORE(2440, 7, "i8", 0);
 SAFE_HEAP_STORE(2441, 0, "i8", 0);
 SAFE_HEAP_STORE(2432, 8, "i8", 0);
 SAFE_HEAP_STORE(2433, 0, "i8", 0);
 SAFE_HEAP_STORE(2424, 9, "i8", 0);
 SAFE_HEAP_STORE(2425, 0, "i8", 0);
 SAFE_HEAP_STORE(2416, 10, "i8", 0);
 SAFE_HEAP_STORE(2417, 0, "i8", 0);
 return;
}


function _quadname($name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ip;
 $2=$name;
 $ip=0;
 var $3=$2;
 var $4=_strlen($3);
 var $5=1==($4|0);
 if($5){label=2;break;}else{label=29;break;}
 case 2: 
 var $7=$2;
 var $8=_strcmp($7,2568);
 var $9=0==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 $ip=2528;
 label=28;break;
 case 4: 
 var $12=$2;
 var $13=_strcmp($12,2560);
 var $14=0==($13|0);
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 $ip=2520;
 label=27;break;
 case 6: 
 var $17=$2;
 var $18=_strcmp($17,2552);
 var $19=0==($18|0);
 if($19){label=7;break;}else{label=8;break;}
 case 7: 
 $ip=2512;
 label=26;break;
 case 8: 
 var $22=$2;
 var $23=_strcmp($22,2544);
 var $24=0==($23|0);
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 $ip=2504;
 label=25;break;
 case 10: 
 var $27=$2;
 var $28=_strcmp($27,2536);
 var $29=0==($28|0);
 if($29){label=11;break;}else{label=12;break;}
 case 11: 
 $ip=2496;
 label=24;break;
 case 12: 
 var $32=$2;
 var $33=_strcmp($32,2440);
 var $34=0==($33|0);
 if($34){label=13;break;}else{label=14;break;}
 case 13: 
 $ip=2480;
 label=23;break;
 case 14: 
 var $37=$2;
 var $38=_strcmp($37,2432);
 var $39=0==($38|0);
 if($39){label=15;break;}else{label=16;break;}
 case 15: 
 $ip=2472;
 label=22;break;
 case 16: 
 var $42=$2;
 var $43=_strcmp($42,2424);
 var $44=0==($43|0);
 if($44){label=17;break;}else{label=18;break;}
 case 17: 
 $ip=2464;
 label=21;break;
 case 18: 
 var $47=$2;
 var $48=_strcmp($47,2416);
 var $49=0==($48|0);
 if($49){label=19;break;}else{label=20;break;}
 case 19: 
 $ip=2456;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $61=$ip;
 var $62=($61|0)==0;
 if($62){label=30;break;}else{label=31;break;}
 case 30: 
 var $64=$2;
 $1=$64;
 label=32;break;
 case 31: 
 var $66=_codechar(44);
 var $67=_strcpy(2488,$66);
 var $68=_strlen(2488);
 var $69=((2488+$68)|0);
 var $70=$ip;
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=_codechar($71);
 var $73=_strcpy($69,$72);
 var $74=_strlen(2488);
 var $75=((2488+$74)|0);
 var $76=$ip;
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=((($77)+(1))|0);
 var $79=_codechar($78);
 var $80=_strcpy($75,$79);
 $1=2488;
 label=32;break;
 case 32: 
 var $82=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }

}


function _quadnami($code){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $c;
 $1=$code;
 var $2=$1;
 switch(($2|0)){case -29:{ label=10;break;}case -34:{ label=11;break;}case -12:{ label=2;break;}case -14:{ label=3;break;}case -33:{ label=4;break;}case -19:{ label=5;break;}case -21:{ label=6;break;}case -24:{ label=7;break;}case -26:{ label=8;break;}case -28:{ label=9;break;}default:{label=12;break;}}break;
 case 2: 
 $c=2568;
 label=13;break;
 case 3: 
 $c=2560;
 label=13;break;
 case 4: 
 $c=2552;
 label=13;break;
 case 5: 
 $c=2544;
 label=13;break;
 case 6: 
 $c=2536;
 label=13;break;
 case 7: 
 $c=2448;
 label=13;break;
 case 8: 
 $c=2440;
 label=13;break;
 case 9: 
 $c=2432;
 label=13;break;
 case 10: 
 $c=2424;
 label=13;break;
 case 11: 
 $c=2416;
 label=13;break;
 case 12: 
 $c=0;
 label=13;break;
 case 13: 
 var $15=$c;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }

}


function _quadout($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=_quadoutc($2,1);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $3;
}


function _quadoutc($rite,$nl){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tempsave;
 var $cp=sp;
 var $out;
 $2=$rite;
 $3=$nl;
 $out=0;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $8=_aplmsg($7);
 var $9=_printf(14992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $8, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 _aplnewl();
 var $10=$2;
 $1=$10;
 label=11;break;
 case 3: 
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$14&1;
 $tempsave=$15;
 var $16=$2;
 var $17=_perm($16);
 var $18=_formdft($17);
 $out=$18;
 var $19=$tempsave;
 var $20=$2;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=((($22)+($19))|0);
 SAFE_HEAP_STORE($21, $23, "i32", 0);
 var $24=_errinit();
 var $25=($24|0)!=0;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $28=_aplmsg($27);
 var $29=_printf(14992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, $28, "i8*", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 _aplnewl();
 var $30=$2;
 $1=$30;
 label=11;break;
 case 5: 
 var $32=$out;
 var $33=(($32+8)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=0==($34|0);
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=_printf(15256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),SAFE_HEAP_STORE(tempVarArgs, 0, "i32", 0),tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=SAFE_HEAP_LOAD(5664, "i32", 0, 0);
 var $39=((($38)+(1))|0);
 SAFE_HEAP_STORE(5664, $39, "i32", 0);
 label=8;break;
 case 7: 
 var $41=$out;
 var $42=(($41)|0);
 var $43=$42;
 var $44=SAFE_HEAP_LOAD($43, "i8*", 0, 0);
 SAFE_HEAP_STORE($cp, $44, "i8*", 0);
 var $45=$out;
 var $46=(($45+12)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=$out;
 var $49=(($48+16)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32*", 0, 0);
 var $51=$3;
 var $52=_quadrec($47,$50,$cp,$51);
 label=8;break;
 case 8: 
 var $54=$3;
 var $55=($54|0)!=0;
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 _aplnewl();
 label=10;break;
 case 10: 
 var $58=$out;
 var $59=_endoper($58);
 var $60=$2;
 $1=$60;
 label=11;break;
 case 11: 
 var $62=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }

}


function _quadrec($rank,$dimptr,$pcp,$lasttime){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $last;
 $2=$rank;
 $3=$dimptr;
 $4=$pcp;
 $5=$lasttime;
 var $6=$3;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$4;
 var $10=SAFE_HEAP_LOAD($9, "i8*", 0, 0);
 var $11=SAFE_HEAP_LOAD($10, "i8", 0, 0);
 _aplputch($11);
 var $12=SAFE_HEAP_LOAD(5664, "i32", 0, 0);
 var $13=((($12)+(1))|0);
 SAFE_HEAP_STORE(5664, $13, "i32", 0);
 label=15;break;
 case 3: 
 var $15=$3;
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 $i=$16;
 label=4;break;
 case 4: 
 var $18=$i;
 var $19=($18|0)>0;
 if($19){label=5;break;}else{label=14;break;}
 case 5: 
 var $21=$2;
 var $22=($21|0)>1;
 if($22){label=6;break;}else{label=11;break;}
 case 6: 
 var $24=$i;
 var $25=($24|0)==1;
 if($25){label=7;break;}else{var $30=0;label=8;break;}
 case 7: 
 var $27=$5;
 var $28=($27|0)==1;
 var $30=$28;label=8;break;
 case 8: 
 var $30;
 var $31=($30&1);
 $last=$31;
 var $32=$2;
 var $33=((($32)-(1))|0);
 var $34=$3;
 var $35=(($34+4)|0);
 var $36=$4;
 var $37=$last;
 var $38=_quadrec($33,$35,$36,$37);
 var $39=$last;
 var $40=($39|0)!=0;
 if($40){label=10;break;}else{label=9;break;}
 case 9: 
 _aplnewl();
 label=10;break;
 case 10: 
 label=12;break;
 case 11: 
 var $44=$4;
 var $45=SAFE_HEAP_LOAD($44, "i8*", 0, 0);
 var $46=(($45+1)|0);
 SAFE_HEAP_STORE($44, $46, "i8*", 0);
 var $47=SAFE_HEAP_LOAD($45, "i8", 0, 0);
 _aplputch($47);
 var $48=SAFE_HEAP_LOAD(5664, "i32", 0, 0);
 var $49=((($48)+(1))|0);
 SAFE_HEAP_STORE(5664, $49, "i32", 0);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $52=$i;
 var $53=((($52)-(1))|0);
 $i=$53;
 label=4;break;
 case 14: 
 label=15;break;
 case 15: 
 var $56=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }

}


function _quoteit($line1,$line2){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $ch;
 var $in;
 var $out;
 $1=$line1;
 $2=$line2;
 var $3=$2;
 $in=$3;
 var $4=$1;
 $out=$4;
 var $5=$2;
 var $6=_strlen($5);
 $i=$6;
 var $7=$out;
 var $8=(($7+1)|0);
 $out=$8;
 SAFE_HEAP_STORE($7, 39, "i8", 0);
 label=2;break;
 case 2: 
 var $10=$i;
 var $11=((($10)-(1))|0);
 $i=$11;
 var $12=($10|0)!=0;
 if($12){label=3;break;}else{label=6;break;}
 case 3: 
 var $14=$in;
 var $15=(($14+1)|0);
 $in=$15;
 var $16=SAFE_HEAP_LOAD($14, "i8", 0, 0);
 $ch=$16;
 var $17=(($16<<24)>>24);
 var $18=39==($17|0);
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$out;
 var $21=(($20+1)|0);
 $out=$21;
 SAFE_HEAP_STORE($20, 39, "i8", 0);
 label=5;break;
 case 5: 
 var $23=$ch;
 var $24=$out;
 var $25=(($24+1)|0);
 $out=$25;
 SAFE_HEAP_STORE($24, $23, "i8", 0);
 label=2;break;
 case 6: 
 var $27=$out;
 var $28=(($27+1)|0);
 $out=$28;
 SAFE_HEAP_STORE($27, 39, "i8", 0);
 var $29=$out;
 var $30=(($29+1)|0);
 $out=$30;
 SAFE_HEAP_STORE($29, 0, "i8", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _ravel2a($rite,$axes,$lodim,$comcnt,$newaxis){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $out;
 var $datatyp;
 var $i;
 var $ip;
 var $dataptr;
 $1=$rite;
 $2=$axes;
 $3=$lodim;
 $4=$comcnt;
 $5=$newaxis;
 label=2;break;
 case 2: 
 var $7=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 label=14;break;
 case 4: 
 var $11=$1;
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$13&110;
 $datatyp=$14;
 var $15=$1;
 var $16=(($15+8)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$datatyp;
 var $19=((($18)+(1))|0);
 var $20=$1;
 var $21=(($20+12)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$4;
 var $24=((($22)-($23))|0);
 var $25=((($24)+(1))|0);
 var $26=_getcb(0,$17,$19,$25,0);
 $out=$26;
 var $27=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $28=($27|0)!=0;
 if($28){label=5;break;}else{label=6;break;}
 case 5: 
 label=14;break;
 case 6: 
 var $31=$out;
 var $32=(($31)|0);
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "double*", 0, 0);
 var $35=$34;
 var $36=$1;
 var $37=(($36)|0);
 var $38=$37;
 var $39=SAFE_HEAP_LOAD($38, "double*", 0, 0);
 var $40=$39;
 var $41=$out;
 var $42=(($41+8)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 var $44=$datatyp;
 var $45=_dtacopy($35,$40,$43,1,$44);
 $dataptr=$45;
 var $46=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $47=($46|0)!=0;
 if($47){label=7;break;}else{label=8;break;}
 case 7: 
 label=14;break;
 case 8: 
 var $50=$3;
 var $51=($50|0)!=0;
 if($51){label=9;break;}else{label=10;break;}
 case 9: 
 var $53=$out;
 var $54=(($53+16)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32*", 0, 0);
 var $56=$55;
 var $57=$1;
 var $58=(($57+16)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32*", 0, 0);
 var $60=$59;
 var $61=$3;
 var $62=_intcopy($56,$60,$61,1);
 var $63=$62;
 $ip=$63;
 label=11;break;
 case 10: 
 var $65=$out;
 var $66=(($65+16)|0);
 var $67=SAFE_HEAP_LOAD($66, "i32*", 0, 0);
 $ip=$67;
 label=11;break;
 case 11: 
 var $69=$5;
 var $70=$ip;
 var $71=(($70+4)|0);
 $ip=$71;
 SAFE_HEAP_STORE($70, $69, "i32", 0);
 var $72=$3;
 var $73=$4;
 var $74=((($72)+($73))|0);
 $i=$74;
 var $75=$1;
 var $76=(($75+12)|0);
 var $77=SAFE_HEAP_LOAD($76, "i32", 0, 0);
 var $78=($74|0)<($77|0);
 if($78){label=12;break;}else{label=13;break;}
 case 12: 
 var $80=$ip;
 var $81=$80;
 var $82=$1;
 var $83=(($82+16)|0);
 var $84=SAFE_HEAP_LOAD($83, "i32*", 0, 0);
 var $85=$i;
 var $86=(($84+($85<<2))|0);
 var $87=$86;
 var $88=$1;
 var $89=(($88+12)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=$i;
 var $92=((($90)-($91))|0);
 var $93=_intcopy($81,$87,$92,1);
 var $94=$93;
 $ip=$94;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $97=$2;
 var $98=$1;
 var $99=$out;
 var $100=_errstop(0,$97,$98,$99);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $100;
  default: assert(0, "bad label: " + label);
 }

}


function _ravel2($rite,$axes){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $out;
 var $comcnt;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $lodim;
 var $m;
 var $n;
 var $newaxis;
 $2=$rite;
 $3=$axes;
 $out=0;
 $comcnt=0;
 var $4=$2;
 var $5=(($4+12)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 $lodim=$6;
 $newaxis=1;
 var $7=$3;
 var $8=($7|0)==0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$2;
 var $11=_ravel($10);
 $1=$11;
 label=34;break;
 case 3: 
 label=4;break;
 case 4: 
 var $14=$3;
 var $15=(($14+12)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=($16|0)>1;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=33;break;
 case 6: 
 var $20=$3;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$22&2;
 var $24=($23|0)!=0;
 if($24){label=7;break;}else{label=12;break;}
 case 7: 
 var $26=$3;
 var $27=(($26+8)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=($28|0)==1;
 if($29){label=8;break;}else{label=12;break;}
 case 8: 
 var $31=$3;
 var $32=(($31)|0);
 var $33=$32;
 var $34=SAFE_HEAP_LOAD($33, "double*", 0, 0);
 var $35=SAFE_HEAP_LOAD($34, "double", 0, 0);
 var $36=_mod($35,1);
 var $37=$36!=0;
 if($37){label=9;break;}else{label=12;break;}
 case 9: 
 var $39=$3;
 var $40=(($39)|0);
 var $41=$40;
 var $42=SAFE_HEAP_LOAD($41, "double*", 0, 0);
 var $43=SAFE_HEAP_LOAD($42, "double", 0, 0);
 var $44=(($43)&-1);
 $lodim=$44;
 var $45=$lodim;
 var $46=$2;
 var $47=(($46+12)|0);
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=_ravelck($45,$48);
 var $50=($49|0)!=0;
 if($50){label=10;break;}else{label=11;break;}
 case 10: 
 label=33;break;
 case 11: 
 label=32;break;
 case 12: 
 var $54=$3;
 var $55=(($54+8)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=($56|0)==0;
 if($57){label=13;break;}else{label=14;break;}
 case 13: 
 label=33;break;
 case 14: 
 var $60=$3;
 var $61=(($60+8)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=$2;
 var $64=(($63+12)|0);
 var $65=SAFE_HEAP_LOAD($64, "i32", 0, 0);
 var $66=($62|0)>($65|0);
 if($66){label=15;break;}else{label=16;break;}
 case 15: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=33;break;
 case 16: 
 var $69=$3;
 var $70=(($69+4)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=$71&4;
 var $73=($72|0)!=0;
 if($73){label=18;break;}else{label=17;break;}
 case 17: 
 var $75=$3;
 var $76=_integer($75);
 $3=$76;
 label=18;break;
 case 18: 
 var $78=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $79=($78|0)!=0;
 if($79){label=19;break;}else{label=20;break;}
 case 19: 
 label=33;break;
 case 20: 
 var $82=$3;
 var $83=(($82)|0);
 var $84=$83;
 var $85=SAFE_HEAP_LOAD($84, "i32*", 0, 0);
 $ip=$85;
 $lodim=-1;
 $k=-1;
 var $86=$3;
 var $87=(($86+8)|0);
 var $88=SAFE_HEAP_LOAD($87, "i32", 0, 0);
 $m=$88;
 $comcnt=$88;
 label=21;break;
 case 21: 
 var $90=$m;
 var $91=((($90)-(1))|0);
 $m=$91;
 var $92=($90|0)!=0;
 if($92){label=22;break;}else{label=30;break;}
 case 22: 
 var $94=$ip;
 var $95=(($94+4)|0);
 $ip=$95;
 var $96=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $97=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $98=((($96)-($97))|0);
 $j=$98;
 var $99=$j;
 var $100=$2;
 var $101=(($100+12)|0);
 var $102=SAFE_HEAP_LOAD($101, "i32", 0, 0);
 var $103=_ravelck($99,$102);
 var $104=($103|0)!=0;
 if($104){label=23;break;}else{label=24;break;}
 case 23: 
 label=30;break;
 case 24: 
 var $107=$k;
 var $108=($107|0)>=0;
 if($108){label=25;break;}else{label=27;break;}
 case 25: 
 var $110=$k;
 var $111=$j;
 var $112=((($111)-(1))|0);
 var $113=($110|0)!=($112|0);
 if($113){label=26;break;}else{label=27;break;}
 case 26: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=30;break;
 case 27: 
 var $116=$j;
 $k=$116;
 var $117=$lodim;
 var $118=($117|0)==-1;
 if($118){label=28;break;}else{label=29;break;}
 case 28: 
 var $120=$j;
 $lodim=$120;
 label=29;break;
 case 29: 
 var $122=$2;
 var $123=(($122+16)|0);
 var $124=SAFE_HEAP_LOAD($123, "i32*", 0, 0);
 var $125=$j;
 var $126=(($124+($125<<2))|0);
 var $127=SAFE_HEAP_LOAD($126, "i32", 0, 0);
 var $128=$newaxis;
 var $129=(Math_imul($128,$127)|0);
 $newaxis=$129;
 label=21;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $134=$2;
 var $135=$3;
 var $136=$lodim;
 var $137=$comcnt;
 var $138=$newaxis;
 var $139=_ravel2a($134,$135,$136,$137,$138);
 $1=$139;
 label=34;break;
 case 34: 
 var $141=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $141;
  default: assert(0, "bad label: " + label);
 }

}


function _ravel($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 var $datatyp;
 var $dataptr;
 $2=$rite;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=_errstop(0,0,$6,0);
 $1=$7;
 label=4;break;
 case 3: 
 var $9=$2;
 var $10=(($9+8)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 var $15=$14&110;
 $datatyp=$15;
 var $16=((($15)+(1))|0);
 var $17=_getcb(0,$11,$16,1,0);
 $out=$17;
 var $18=$out;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "double*", 0, 0);
 var $22=$21;
 var $23=$2;
 var $24=(($23)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "double*", 0, 0);
 var $27=$26;
 var $28=$out;
 var $29=(($28+8)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=$datatyp;
 var $32=_dtacopy($22,$27,$30,1,$31);
 $dataptr=$32;
 var $33=$2;
 var $34=$out;
 var $35=_errstop(0,0,$33,$34);
 $1=$35;
 label=4;break;
 case 4: 
 var $37=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _ravelck($axis,$rank){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$axis;
 $3=$rank;
 var $4=$2;
 var $5=($4|0)<0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=($7|0)>($8|0);
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 $1=0;
 label=5;break;
 case 4: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 $1=1;
 label=5;break;
 case 5: 
 var $13=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $13;
  default: assert(0, "bad label: " + label);
 }

}


function _real($rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $ip;
 var $rtype;
 var $f;
 var $fin;
 var $fout;
 var $wrk=sp;
 var $out;
 $2=$rite;
 $out=0;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=_errstop(0,0,$6,0);
 $1=$7;
 label=27;break;
 case 3: 
 var $9=$2;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$11&70;
 $rtype=$12;
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 var $18=$rtype;
 var $19=($18|0)==0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$2;
 var $22=_errstop(18,0,$21,0);
 $1=$22;
 label=27;break;
 case 6: 
 var $24=$2;
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=$2;
 var $28=(($27+12)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=_getcb(0,$26,3,$29,0);
 $out=$30;
 var $31=$2;
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=($33|0)>1;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 var $36=$out;
 var $37=(($36+16)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32*", 0, 0);
 var $39=$38;
 var $40=$2;
 var $41=(($40+16)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 var $43=$42;
 var $44=$2;
 var $45=(($44+12)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=_intcopy($39,$43,$46,1);
 var $48=$47;
 $ip=$48;
 label=8;break;
 case 8: 
 var $50=$out;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=($52|0)!=0;
 if($53){label=9;break;}else{label=26;break;}
 case 9: 
 var $55=$out;
 var $56=(($55)|0);
 var $57=$56;
 var $58=SAFE_HEAP_LOAD($57, "double*", 0, 0);
 $fout=$58;
 var $59=$rtype;
 if(($59|0)==2){ label=10;break;}else if(($59|0)==4){ label=11;break;}else if(($59|0)==64){ label=16;break;}else{label=24;break;}
 case 10: 
 var $61=$fout;
 var $62=$61;
 var $63=$2;
 var $64=(($63)|0);
 var $65=$64;
 var $66=SAFE_HEAP_LOAD($65, "double*", 0, 0);
 var $67=$66;
 var $68=$out;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=_dblcopy($62,$67,$70,1);
 var $72=$71;
 $fout=$72;
 label=25;break;
 case 11: 
 var $74=$2;
 var $75=(($74)|0);
 var $76=$75;
 var $77=SAFE_HEAP_LOAD($76, "i32*", 0, 0);
 $ip=$77;
 var $78=$out;
 var $79=(($78+8)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 $i=$80;
 label=12;break;
 case 12: 
 var $82=$i;
 var $83=($82|0)>0;
 if($83){label=13;break;}else{label=15;break;}
 case 13: 
 var $85=$ip;
 var $86=(($85+4)|0);
 $ip=$86;
 var $87=SAFE_HEAP_LOAD($85, "i32", 0, 0);
 var $88=($87|0);
 var $89=$fout;
 var $90=(($89+8)|0);
 $fout=$90;
 SAFE_HEAP_STORE($89, $88, "double", 0);
 label=14;break;
 case 14: 
 var $92=$i;
 var $93=((($92)-(1))|0);
 $i=$93;
 label=12;break;
 case 15: 
 label=25;break;
 case 16: 
 var $96=$2;
 var $97=(($96)|0);
 var $98=$97;
 var $99=SAFE_HEAP_LOAD($98, "double*", 0, 0);
 $fin=$99;
 var $100=$out;
 var $101=(($100+8)|0);
 var $102=SAFE_HEAP_LOAD($101, "i32", 0, 0);
 $i=$102;
 label=17;break;
 case 17: 
 var $104=$i;
 var $105=($104|0)>0;
 if($105){label=18;break;}else{label=23;break;}
 case 18: 
 var $107=$fin;
 var $108=(($107+8)|0);
 var $109=SAFE_HEAP_LOAD($108, "double", 0, 0);
 var $110=$109==0;
 if($110){label=19;break;}else{label=20;break;}
 case 19: 
 var $112=$fin;
 var $113=SAFE_HEAP_LOAD($112, "double", 0, 0);
 var $114=$fout;
 var $115=(($114+8)|0);
 $fout=$115;
 SAFE_HEAP_STORE($114, $113, "double", 0);
 label=21;break;
 case 20: 
 var $117=$fin;
 var $118=(($wrk)|0);
 _dabsx($117,$118);
 var $119=(($wrk)|0);
 var $120=SAFE_HEAP_LOAD($119, "double", 0, 0);
 var $121=$fout;
 var $122=(($121+8)|0);
 $fout=$122;
 SAFE_HEAP_STORE($121, $120, "double", 0);
 label=21;break;
 case 21: 
 var $124=$fin;
 var $125=(($124+16)|0);
 $fin=$125;
 label=22;break;
 case 22: 
 var $127=$i;
 var $128=((($127)-(1))|0);
 $i=$128;
 label=17;break;
 case 23: 
 label=25;break;
 case 24: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $133=$2;
 var $134=$out;
 var $135=_errstop(0,0,$133,$134);
 $1=$135;
 label=27;break;
 case 27: 
 var $137=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $137;
  default: assert(0, "bad label: " + label);
 }

}


function _recip($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$rite;
 var $2=$1;
 var $3=(1)/($2);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $3;
}


function _recipp($rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$rite;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=(1)/($4);
 var $6=$2;
 SAFE_HEAP_STORE($6, $5, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _recipx($rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$rite;
 $2=$ret;
 var $3=$1;
 var $4=$2;
 _dividex(2400,$3,$4);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _redscan($id,$dp,$rite,$axis,$crs,$nrs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $out;
 var $ep;
 var $type;
 var $sp;
 var $en;
 $2=$id;
 $3=$dp;
 $4=$rite;
 $5=$axis;
 $6=$crs;
 $7=$nrs;
 $out=0;
 var $8=$4;
 var $9=(($8+4)|0);
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=$10&110;
 $type=$11;
 var $12=$type;
 var $13=($12|0)!=32;
 if($13){label=2;break;}else{label=12;break;}
 case 2: 
 var $15=$3;
 var $16=(($15+28)|0);
 var $17=(($16+20)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $20=($19|0)==((36)|0);
 if($20){label=4;break;}else{label=3;break;}
 case 3: 
 var $22=$3;
 var $23=(($22+28)|0);
 var $24=(($23+20)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "%struct.aplcb* (i8*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $27=($26|0)==((34)|0);
 if($27){label=4;break;}else{label=12;break;}
 case 4: 
 var $29=$type;
 var $30=($29|0)==8;
 if($30){label=5;break;}else{label=11;break;}
 case 5: 
 var $32=$3;
 var $33=(($32+28)|0);
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i8*", 0, 0);
 var $36=$35;
 $en=$36;
 var $37=$36;
 var $38=_pickdyad($37);
 $sp=$38;
 var $39=$sp;
 var $40=($39|0)==0;
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 SAFE_HEAP_STORE(4592, 72, "i32", 0);
 label=7;break;
 case 7: 
 var $43=$en;
 var $44=(($43)|0);
 var $45=(($44)|0);
 var $46=(($45+4)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=($47|0)==38;
 if($48){label=8;break;}else{label=10;break;}
 case 8: 
 var $50=$en;
 var $51=(($50+64)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32 (i8, i8)*", 0, 0);
 var $53=$52;
 $ep=$53;
 var $54=0!=($53|0);
 if($54){label=9;break;}else{label=10;break;}
 case 9: 
 var $56=$6;
 var $57=$ep;
 var $58=$57;
 var $59=$sp;
 var $60=(($59)|0);
 var $61=(($60)|0);
 var $62=$4;
 var $63=$5;
 var $64=FUNCTION_TABLE[$56]($58,$61,$62,$63);
 $1=$64;
 label=15;break;
 case 10: 
 var $66=$4;
 var $67=_errstop(75,0,$66,0);
 $1=$67;
 label=15;break;
 case 11: 
 var $69=$2;
 var $70=$3;
 var $71=$4;
 var $72=$5;
 var $73=_preduces($69,$70,$71,$72);
 $1=$73;
 label=15;break;
 case 12: 
 var $75=$type;
 var $76=($75|0)!=32;
 if($76){label=13;break;}else{label=14;break;}
 case 13: 
 var $78=$4;
 var $79=_aplnest($78);
 $4=$79;
 label=14;break;
 case 14: 
 var $81=$7;
 var $82=$3;
 var $83=$4;
 var $84=$5;
 var $85=FUNCTION_TABLE[$81]($82,$83,$84);
 $1=$85;
 label=15;break;
 case 15: 
 var $87=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $87;
  default: assert(0, "bad label: " + label);
 }

}


function _reducecm($id,$identity,$rite,$axis,$axicnt,$botcnt,$topcnt,$type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $datacnt;
 var $dimin;
 var $dimout;
 var $i;
 var $j;
 var $k;
 var $rank;
 var $out;
 $2=$id;
 $3=$identity;
 $4=$rite;
 $5=$axis;
 $6=$axicnt;
 $7=$botcnt;
 $8=$topcnt;
 $9=$type;
 $out=0;
 var $10=_errinit();
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$4;
 var $14=_errstop(0,0,$13,0);
 $1=$14;
 label=30;break;
 case 3: 
 var $16=$5;
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=($17|0)<0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$4;
 var $21=(($20+12)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$5;
 SAFE_HEAP_STORE($23, $22, "i32", 0);
 label=6;break;
 case 5: 
 var $25=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $26=($25|0)==0;
 var $27=($26&1);
 var $28=$5;
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=((($29)+($27))|0);
 SAFE_HEAP_STORE($28, $30, "i32", 0);
 label=6;break;
 case 6: 
 var $32=$4;
 var $33=$5;
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=$6;
 var $36=$7;
 var $37=$8;
 var $38=_axispre($32,$34,$35,$36,$37);
 var $39=1!=($38|0);
 if($39){label=7;break;}else{label=8;break;}
 case 7: 
 var $41=$4;
 var $42=_errstop(0,0,$41,0);
 $1=$42;
 label=30;break;
 case 8: 
 var $44=$2;
 var $45=($44|0)!=0;
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $47=$8;
 var $48=SAFE_HEAP_LOAD($47, "i32", 0, 0);
 var $49=$7;
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=(Math_imul($48,$50)|0);
 $datacnt=$51;
 label=11;break;
 case 10: 
 var $53=$4;
 var $54=(($53+8)|0);
 var $55=SAFE_HEAP_LOAD($54, "i32", 0, 0);
 $datacnt=$55;
 label=11;break;
 case 11: 
 var $57=$4;
 var $58=(($57+12)|0);
 var $59=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 var $60=$2;
 var $61=((($59)-($60))|0);
 var $62=_imax(0,$61);
 $rank=$62;
 var $63=$datacnt;
 var $64=($63|0)!=0;
 if($64){label=12;break;}else{label=15;break;}
 case 12: 
 var $66=$9;
 var $67=($66|0)==8;
 if($67){label=13;break;}else{label=15;break;}
 case 13: 
 var $69=$6;
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=($70|0)>1;
 if($71){label=14;break;}else{label=15;break;}
 case 14: 
 $9=4;
 label=15;break;
 case 15: 
 var $74=$datacnt;
 var $75=$9;
 var $76=((($75)+(1))|0);
 var $77=$rank;
 var $78=_getcb(0,$74,$76,$77,0);
 $out=$78;
 var $79=$rank;
 var $80=($79|0)>1;
 if($80){label=16;break;}else{label=24;break;}
 case 16: 
 var $82=$out;
 var $83=(($82+16)|0);
 var $84=SAFE_HEAP_LOAD($83, "i32*", 0, 0);
 $dimout=$84;
 var $85=$4;
 var $86=(($85+16)|0);
 var $87=SAFE_HEAP_LOAD($86, "i32*", 0, 0);
 $dimin=$87;
 $i=1;
 label=17;break;
 case 17: 
 var $89=$i;
 var $90=$4;
 var $91=(($90+12)|0);
 var $92=SAFE_HEAP_LOAD($91, "i32", 0, 0);
 var $93=($89|0)<=($92|0);
 if($93){label=18;break;}else{label=23;break;}
 case 18: 
 var $95=$2;
 var $96=($95|0)!=0;
 if($96){label=19;break;}else{label=20;break;}
 case 19: 
 var $98=$i;
 var $99=$5;
 var $100=SAFE_HEAP_LOAD($99, "i32", 0, 0);
 var $101=($98|0)==($100|0);
 if($101){label=21;break;}else{label=20;break;}
 case 20: 
 var $103=$dimin;
 var $104=SAFE_HEAP_LOAD($103, "i32", 0, 0);
 var $105=$dimout;
 var $106=(($105+4)|0);
 $dimout=$106;
 SAFE_HEAP_STORE($105, $104, "i32", 0);
 label=21;break;
 case 21: 
 var $108=$dimin;
 var $109=(($108+4)|0);
 $dimin=$109;
 label=22;break;
 case 22: 
 var $111=$i;
 var $112=((($111)+(1))|0);
 $i=$112;
 label=17;break;
 case 23: 
 label=24;break;
 case 24: 
 var $115=$datacnt;
 var $116=($115|0)!=0;
 if($116){label=26;break;}else{label=25;break;}
 case 25: 
 var $118=$out;
 $1=$118;
 label=30;break;
 case 26: 
 var $120=$4;
 var $121=(($120+8)|0);
 var $122=SAFE_HEAP_LOAD($121, "i32", 0, 0);
 var $123=($122|0)==0;
 if($123){label=27;break;}else{label=29;break;}
 case 27: 
 var $125=$3;
 var $126=($125|0)==0;
 if($126){label=28;break;}else{label=29;break;}
 case 28: 
 var $128=$4;
 var $129=$out;
 var $130=_errstop(13,0,$128,$129);
 $1=$130;
 label=30;break;
 case 29: 
 var $132=$out;
 $1=$132;
 label=30;break;
 case 30: 
 var $134=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $134;
  default: assert(0, "bad label: " + label);
 }

}


function _reducef($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $axis;
 $2=$dp;
 $3=$left;
 $4=$rite;
 var $5=$2;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 $axis=$7;
 var $8=$axis;
 var $9=($8|0)==-1;
 if($9){label=2;break;}else{label=6;break;}
 case 2: 
 var $11=$2;
 var $12=(($11+20)|0);
 var $13=SAFE_HEAP_LOAD($12, "i8*", 0, 0);
 var $14=0!=($13|0);
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$2;
 var $17=(($16+20)|0);
 var $18=SAFE_HEAP_LOAD($17, "i8*", 0, 0);
 var $19=$18;
 var $20=$4;
 var $21=_axisdft($19,$20);
 $axis=$21;
 label=5;break;
 case 4: 
 var $23=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 $axis=$23;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $26=$3;
 var $27=($26|0)!=0;
 if($27){label=7;break;}else{label=8;break;}
 case 7: 
 var $29=$2;
 var $30=$3;
 var $31=$4;
 var $32=$axis;
 var $33=_nwise($29,$30,$31,$32);
 $1=$33;
 label=9;break;
 case 8: 
 var $35=$2;
 var $36=$4;
 var $37=$axis;
 var $38=_redscan(1,$35,$36,$37,332,(54));
 $1=$38;
 label=9;break;
 case 9: 
 var $40=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $40;
  default: assert(0, "bad label: " + label);
 }

}


function _regress($left,$rite,$lrows,$lcols,$rrows,$rcols){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $xpx;
 var $xpy;
 var $beta;
 $2=$left;
 $3=$rite;
 $4=$lrows;
 $5=$lcols;
 $6=$rrows;
 $7=$rcols;
 var $8=$7;
 var $9=$5;
 var $10=(Math_imul($8,$9)|0);
 var $11=($10<<3);
 var $12=_aplmall($11);
 var $13=$12;
 $beta=$13;
 var $14=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $15=($14|0)!=0;
 if($15){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=4;break;
 case 3: 
 var $18=$7;
 var $19=$7;
 var $20=(Math_imul($18,$19)|0);
 var $21=_getcb(0,$20,3,2,0);
 $xpx=$21;
 var $22=$7;
 var $23=$xpx;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 SAFE_HEAP_STORE($25, $22, "i32", 0);
 var $26=$7;
 var $27=$xpx;
 var $28=(($27+16)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32*", 0, 0);
 var $30=(($29+4)|0);
 SAFE_HEAP_STORE($30, $26, "i32", 0);
 var $31=$7;
 var $32=$5;
 var $33=(Math_imul($31,$32)|0);
 var $34=_getcb(0,$33,3,2,0);
 $xpy=$34;
 var $35=$7;
 var $36=$xpy;
 var $37=(($36+16)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32*", 0, 0);
 SAFE_HEAP_STORE($38, $35, "i32", 0);
 var $39=$5;
 var $40=$xpy;
 var $41=(($40+16)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 var $43=(($42+4)|0);
 SAFE_HEAP_STORE($43, $39, "i32", 0);
 var $44=$2;
 var $45=$3;
 var $46=$4;
 var $47=$5;
 var $48=$6;
 var $49=$7;
 var $50=$beta;
 var $51=$xpx;
 var $52=$xpy;
 var $53=_regrest($44,$45,$46,$47,$48,$49,$50,$51,$52);
 $1=$53;
 label=4;break;
 case 4: 
 var $55=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $55;
  default: assert(0, "bad label: " + label);
 }

}


function _regrest($left,$rite,$lrows,$lcols,$rrows,$rcols,$beta,$xpx,$xpy){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $i;
 var $j;
 var $k;
 var $dp;
 var $ret;
 var $xp;
 var $xpxi;
 var $xr;
 var $yp;
 var $yr;
 $1=$left;
 $2=$rite;
 $3=$lrows;
 $4=$lcols;
 $5=$rrows;
 $6=$rcols;
 $7=$beta;
 $8=$xpx;
 $9=$xpy;
 var $10=$2;
 var $11=(($10)|0);
 var $12=$11;
 var $13=SAFE_HEAP_LOAD($12, "double*", 0, 0);
 $xp=$13;
 var $14=$8;
 var $15=(($14)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "double*", 0, 0);
 $dp=$17;
 $i=0;
 label=2;break;
 case 2: 
 var $19=$i;
 var $20=$6;
 var $21=($19|0)<($20|0);
 if($21){label=3;break;}else{label=13;break;}
 case 3: 
 $j=0;
 label=4;break;
 case 4: 
 var $24=$j;
 var $25=$6;
 var $26=($24|0)<($25|0);
 if($26){label=5;break;}else{label=11;break;}
 case 5: 
 var $28=$dp;
 SAFE_HEAP_STORE($28, 0, "double", 0);
 $k=0;
 label=6;break;
 case 6: 
 var $30=$k;
 var $31=$5;
 var $32=($30|0)<($31|0);
 if($32){label=7;break;}else{label=9;break;}
 case 7: 
 var $34=$xp;
 var $35=$k;
 var $36=$6;
 var $37=(Math_imul($35,$36)|0);
 var $38=(($34+($37<<3))|0);
 $xr=$38;
 var $39=$xr;
 var $40=$i;
 var $41=(($39+($40<<3))|0);
 var $42=SAFE_HEAP_LOAD($41, "double", 0, 0);
 var $43=$xr;
 var $44=$j;
 var $45=(($43+($44<<3))|0);
 var $46=SAFE_HEAP_LOAD($45, "double", 0, 0);
 var $47=($42)*($46);
 var $48=$dp;
 var $49=SAFE_HEAP_LOAD($48, "double", 0, 0);
 var $50=($49)+($47);
 SAFE_HEAP_STORE($48, $50, "double", 0);
 label=8;break;
 case 8: 
 var $52=$k;
 var $53=((($52)+(1))|0);
 $k=$53;
 label=6;break;
 case 9: 
 var $55=$dp;
 var $56=(($55+8)|0);
 $dp=$56;
 label=10;break;
 case 10: 
 var $58=$j;
 var $59=((($58)+(1))|0);
 $j=$59;
 label=4;break;
 case 11: 
 label=12;break;
 case 12: 
 var $62=$i;
 var $63=((($62)+(1))|0);
 $i=$63;
 label=2;break;
 case 13: 
 var $65=$2;
 var $66=(($65)|0);
 var $67=$66;
 var $68=SAFE_HEAP_LOAD($67, "double*", 0, 0);
 $xp=$68;
 var $69=$1;
 var $70=($69|0)==0;
 if($70){label=14;break;}else{label=15;break;}
 case 14: 
 $yp=0;
 label=16;break;
 case 15: 
 var $73=$1;
 var $74=(($73)|0);
 var $75=$74;
 var $76=SAFE_HEAP_LOAD($75, "double*", 0, 0);
 $yp=$76;
 label=16;break;
 case 16: 
 var $78=$9;
 var $79=(($78)|0);
 var $80=$79;
 var $81=SAFE_HEAP_LOAD($80, "double*", 0, 0);
 $dp=$81;
 $i=0;
 label=17;break;
 case 17: 
 var $83=$i;
 var $84=$6;
 var $85=($83|0)<($84|0);
 if($85){label=18;break;}else{label=31;break;}
 case 18: 
 $j=0;
 label=19;break;
 case 19: 
 var $88=$j;
 var $89=$4;
 var $90=($88|0)<($89|0);
 if($90){label=20;break;}else{label=29;break;}
 case 20: 
 var $92=$dp;
 SAFE_HEAP_STORE($92, 0, "double", 0);
 $k=0;
 label=21;break;
 case 21: 
 var $94=$k;
 var $95=$3;
 var $96=($94|0)<($95|0);
 if($96){label=22;break;}else{label=27;break;}
 case 22: 
 var $98=$xp;
 var $99=$k;
 var $100=$6;
 var $101=(Math_imul($99,$100)|0);
 var $102=(($98+($101<<3))|0);
 $xr=$102;
 var $103=$1;
 var $104=($103|0)==0;
 if($104){label=23;break;}else{label=24;break;}
 case 23: 
 var $106=$xr;
 var $107=$i;
 var $108=(($106+($107<<3))|0);
 var $109=SAFE_HEAP_LOAD($108, "double", 0, 0);
 var $110=$j;
 var $111=$k;
 var $112=($110|0)==($111|0);
 var $113=($112&1);
 var $114=($113|0);
 var $115=($109)*($114);
 var $116=$dp;
 var $117=SAFE_HEAP_LOAD($116, "double", 0, 0);
 var $118=($117)+($115);
 SAFE_HEAP_STORE($116, $118, "double", 0);
 label=25;break;
 case 24: 
 var $120=$yp;
 var $121=$k;
 var $122=$4;
 var $123=(Math_imul($121,$122)|0);
 var $124=(($120+($123<<3))|0);
 $yr=$124;
 var $125=$xr;
 var $126=$i;
 var $127=(($125+($126<<3))|0);
 var $128=SAFE_HEAP_LOAD($127, "double", 0, 0);
 var $129=$yr;
 var $130=$j;
 var $131=(($129+($130<<3))|0);
 var $132=SAFE_HEAP_LOAD($131, "double", 0, 0);
 var $133=($128)*($132);
 var $134=$dp;
 var $135=SAFE_HEAP_LOAD($134, "double", 0, 0);
 var $136=($135)+($133);
 SAFE_HEAP_STORE($134, $136, "double", 0);
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $139=$k;
 var $140=((($139)+(1))|0);
 $k=$140;
 label=21;break;
 case 27: 
 var $142=$dp;
 var $143=(($142+8)|0);
 $dp=$143;
 label=28;break;
 case 28: 
 var $145=$j;
 var $146=((($145)+(1))|0);
 $j=$146;
 label=19;break;
 case 29: 
 label=30;break;
 case 30: 
 var $149=$i;
 var $150=((($149)+(1))|0);
 $i=$150;
 label=17;break;
 case 31: 
 var $152=$8;
 var $153=(($152)|0);
 var $154=$153;
 var $155=SAFE_HEAP_LOAD($154, "double*", 0, 0);
 var $156=$6;
 var $157=_invert($155,$156);
 $xpxi=$157;
 var $158=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $159=($158|0)==0;
 if($159){label=32;break;}else{label=45;break;}
 case 32: 
 var $161=$xpxi;
 $xp=$161;
 var $162=$9;
 var $163=(($162)|0);
 var $164=$163;
 var $165=SAFE_HEAP_LOAD($164, "double*", 0, 0);
 $yp=$165;
 var $166=$7;
 $dp=$166;
 $i=0;
 label=33;break;
 case 33: 
 var $168=$i;
 var $169=$6;
 var $170=($168|0)<($169|0);
 if($170){label=34;break;}else{label=44;break;}
 case 34: 
 var $172=$xp;
 var $173=$i;
 var $174=$6;
 var $175=(Math_imul($173,$174)|0);
 var $176=(($172+($175<<3))|0);
 $xr=$176;
 $j=0;
 label=35;break;
 case 35: 
 var $178=$j;
 var $179=$4;
 var $180=($178|0)<($179|0);
 if($180){label=36;break;}else{label=42;break;}
 case 36: 
 var $182=$yp;
 var $183=$j;
 var $184=(($182+($183<<3))|0);
 $yr=$184;
 var $185=$dp;
 SAFE_HEAP_STORE($185, 0, "double", 0);
 $k=0;
 label=37;break;
 case 37: 
 var $187=$k;
 var $188=$6;
 var $189=($187|0)<($188|0);
 if($189){label=38;break;}else{label=40;break;}
 case 38: 
 var $191=$xr;
 var $192=$k;
 var $193=(($191+($192<<3))|0);
 var $194=SAFE_HEAP_LOAD($193, "double", 0, 0);
 var $195=$yr;
 var $196=$k;
 var $197=$4;
 var $198=(Math_imul($196,$197)|0);
 var $199=(($195+($198<<3))|0);
 var $200=SAFE_HEAP_LOAD($199, "double", 0, 0);
 var $201=($194)*($200);
 var $202=$dp;
 var $203=SAFE_HEAP_LOAD($202, "double", 0, 0);
 var $204=($203)+($201);
 SAFE_HEAP_STORE($202, $204, "double", 0);
 label=39;break;
 case 39: 
 var $206=$k;
 var $207=((($206)+(1))|0);
 $k=$207;
 label=37;break;
 case 40: 
 var $209=$dp;
 var $210=(($209+8)|0);
 $dp=$210;
 label=41;break;
 case 41: 
 var $212=$j;
 var $213=((($212)+(1))|0);
 $j=$213;
 label=35;break;
 case 42: 
 label=43;break;
 case 43: 
 var $216=$i;
 var $217=((($216)+(1))|0);
 $i=$217;
 label=33;break;
 case 44: 
 label=45;break;
 case 45: 
 var $220=$xpxi;
 var $221=($220|0)!=0;
 if($221){label=46;break;}else{label=47;break;}
 case 46: 
 var $223=$xpxi;
 var $224=$223;
 _aplfree($224);
 label=47;break;
 case 47: 
 var $226=$8;
 var $227=_endoper($226);
 var $228=$9;
 var $229=_endoper($228);
 var $230=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $231=($230|0)!=0;
 if($231){label=48;break;}else{label=49;break;}
 case 48: 
 var $233=$7;
 var $234=$233;
 _aplfree($234);
 $7=0;
 label=49;break;
 case 49: 
 var $236=$7;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $236;
  default: assert(0, "bad label: " + label);
 }

}


function _reshape($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $datacnt;
 var $datatyp;
 var $i;
 var $ip;
 var $j;
 var $jp;
 var $rank;
 var $out;
 $2=$left;
 $3=$rite;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=45;break;
 case 3: 
 var $11=$2;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=($13|0)>1;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$3;
 var $18=_errstop(10,$16,$17,0);
 $1=$18;
 label=45;break;
 case 5: 
 var $20=$2;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 $rank=$22;
 var $23=0==($22|0);
 if($23){label=6;break;}else{label=10;break;}
 case 6: 
 var $25=$2;
 var $26=(($25+12)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 $datacnt=1;
 label=9;break;
 case 8: 
 $datacnt=0;
 $rank=1;
 label=9;break;
 case 9: 
 label=21;break;
 case 10: 
 $datacnt=1;
 var $33=$2;
 var $34=(($33+4)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=$35&4;
 var $37=($36|0)!=0;
 if($37){label=14;break;}else{label=11;break;}
 case 11: 
 var $39=$2;
 var $40=_integer($39);
 $2=$40;
 var $41=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $42=($41|0)!=0;
 if($42){label=12;break;}else{label=13;break;}
 case 12: 
 var $44=$2;
 var $45=$3;
 var $46=_errstop(0,$44,$45,0);
 $1=$46;
 label=45;break;
 case 13: 
 label=14;break;
 case 14: 
 var $49=$2;
 var $50=(($49)|0);
 var $51=$50;
 var $52=SAFE_HEAP_LOAD($51, "i32*", 0, 0);
 $jp=$52;
 $i=0;
 label=15;break;
 case 15: 
 var $54=$i;
 var $55=$rank;
 var $56=($54|0)<($55|0);
 if($56){label=16;break;}else{label=20;break;}
 case 16: 
 var $58=$jp;
 var $59=(($58+4)|0);
 $jp=$59;
 var $60=SAFE_HEAP_LOAD($58, "i32", 0, 0);
 $j=$60;
 var $61=0>($60|0);
 if($61){label=17;break;}else{label=18;break;}
 case 17: 
 var $63=$2;
 var $64=$3;
 var $65=_errstop(113,$63,$64,0);
 $1=$65;
 label=45;break;
 case 18: 
 var $67=$j;
 var $68=$datacnt;
 var $69=(Math_imul($68,$67)|0);
 $datacnt=$69;
 label=19;break;
 case 19: 
 var $71=$i;
 var $72=((($71)+(1))|0);
 $i=$72;
 label=15;break;
 case 20: 
 label=21;break;
 case 21: 
 var $75=$datacnt;
 var $76=($75|0)!=0;
 if($76){label=22;break;}else{label=24;break;}
 case 22: 
 var $78=$3;
 var $79=(($78+8)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 var $81=($80|0)==0;
 if($81){label=23;break;}else{label=24;break;}
 case 23: 
 var $83=$2;
 var $84=$3;
 var $85=_errstop(11,$83,$84,0);
 $1=$85;
 label=45;break;
 case 24: 
 var $87=$3;
 var $88=(($87+4)|0);
 var $89=SAFE_HEAP_LOAD($88, "i32", 0, 0);
 var $90=$89&110;
 $datatyp=$90;
 var $91=$datacnt;
 var $92=$datatyp;
 var $93=((($92)+(1))|0);
 var $94=$rank;
 var $95=_getcb(0,$91,$93,$94,0);
 $out=$95;
 var $96=0!=($95|0);
 if($96){label=25;break;}else{label=44;break;}
 case 25: 
 var $98=$rank;
 var $99=($98|0)>1;
 if($99){label=26;break;}else{label=31;break;}
 case 26: 
 var $101=$out;
 var $102=(($101+16)|0);
 var $103=SAFE_HEAP_LOAD($102, "i32*", 0, 0);
 $ip=$103;
 var $104=$2;
 var $105=(($104)|0);
 var $106=$105;
 var $107=SAFE_HEAP_LOAD($106, "i32*", 0, 0);
 $jp=$107;
 $i=0;
 label=27;break;
 case 27: 
 var $109=$i;
 var $110=$rank;
 var $111=($109|0)<($110|0);
 if($111){label=28;break;}else{label=30;break;}
 case 28: 
 var $113=$jp;
 var $114=(($113+4)|0);
 $jp=$114;
 var $115=SAFE_HEAP_LOAD($113, "i32", 0, 0);
 var $116=$ip;
 var $117=(($116+4)|0);
 $ip=$117;
 SAFE_HEAP_STORE($116, $115, "i32", 0);
 label=29;break;
 case 29: 
 var $119=$i;
 var $120=((($119)+(1))|0);
 $i=$120;
 label=27;break;
 case 30: 
 label=31;break;
 case 31: 
 var $123=$out;
 var $124=(($123)|0);
 var $125=$124;
 var $126=SAFE_HEAP_LOAD($125, "i32*", 0, 0);
 $jp=$126;
 var $127=$datacnt;
 var $128=($127|0)!=0;
 if($128){label=32;break;}else{label=40;break;}
 case 32: 
 var $130=$3;
 var $131=(($130+12)|0);
 var $132=SAFE_HEAP_LOAD($131, "i32", 0, 0);
 var $133=($132|0)!=0;
 if($133){label=34;break;}else{label=33;break;}
 case 33: 
 var $135=$jp;
 var $136=$135;
 var $137=$3;
 var $138=(($137)|0);
 var $139=$138;
 var $140=SAFE_HEAP_LOAD($139, "i32*", 0, 0);
 var $141=$140;
 var $142=$datacnt;
 var $143=$datatyp;
 var $144=_dtacopy($136,$141,$142,0,$143);
 var $145=$144;
 $jp=$145;
 label=39;break;
 case 34: 
 $i=0;
 label=35;break;
 case 35: 
 var $148=$i;
 var $149=$datacnt;
 var $150=($148|0)<($149|0);
 if($150){label=36;break;}else{label=38;break;}
 case 36: 
 var $152=$jp;
 var $153=$152;
 var $154=$3;
 var $155=(($154)|0);
 var $156=$155;
 var $157=SAFE_HEAP_LOAD($156, "i32*", 0, 0);
 var $158=$157;
 var $159=$3;
 var $160=(($159+8)|0);
 var $161=SAFE_HEAP_LOAD($160, "i32", 0, 0);
 var $162=$datacnt;
 var $163=$i;
 var $164=((($162)-($163))|0);
 var $165=_imin($161,$164);
 $j=$165;
 var $166=$datatyp;
 var $167=_dtacopy($153,$158,$165,1,$166);
 var $168=$167;
 $jp=$168;
 label=37;break;
 case 37: 
 var $170=$j;
 var $171=$i;
 var $172=((($171)+($170))|0);
 $i=$172;
 label=35;break;
 case 38: 
 label=39;break;
 case 39: 
 label=43;break;
 case 40: 
 var $176=$datatyp;
 var $177=$176&32;
 var $178=($177|0)!=0;
 if($178){label=41;break;}else{label=42;break;}
 case 41: 
 var $180=$3;
 var $181=_apltype($180);
 var $182=_perm($181);
 var $183=$jp;
 var $184=$183;
 SAFE_HEAP_STORE($184, $182, "%struct.aplcb*", 0);
 $3=0;
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 var $188=$2;
 var $189=$3;
 var $190=$out;
 var $191=_errstop(0,$188,$189,$190);
 $1=$191;
 label=45;break;
 case 45: 
 var $193=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $193;
  default: assert(0, "bad label: " + label);
 }

}


function _residue($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$left;
 $3=$rite;
 var $4=$2;
 var $5=$4==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$3;
 $1=$7;
 label=4;break;
 case 3: 
 var $9=$3;
 var $10=$2;
 var $11=$3;
 var $12=$2;
 var $13=($11)/($12);
 var $14=Math_floor($13);
 var $15=($10)*($14);
 var $16=($9)-($15);
 $1=$16;
 label=4;break;
 case 4: 
 var $18=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }

}


function _residuep($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$5==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=SAFE_HEAP_LOAD($8, "double", 0, 0);
 var $10=$3;
 SAFE_HEAP_STORE($10, $9, "double", 0);
 label=4;break;
 case 3: 
 var $12=$2;
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 var $14=$1;
 var $15=SAFE_HEAP_LOAD($14, "double", 0, 0);
 var $16=$2;
 var $17=SAFE_HEAP_LOAD($16, "double", 0, 0);
 var $18=$1;
 var $19=SAFE_HEAP_LOAD($18, "double", 0, 0);
 var $20=($17)/($19);
 var $21=Math_floor($20);
 var $22=($15)*($21);
 var $23=($13)-($22);
 var $24=$3;
 SAFE_HEAP_STORE($24, $23, "double", 0);
 label=4;break;
 case 4: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _residuex($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $wrka=sp;
 var $wrkb=(sp)+(16);
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$5==0;
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 var $8=$1;
 var $9=(($8+8)|0);
 var $10=SAFE_HEAP_LOAD($9, "double", 0, 0);
 var $11=$10==0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 var $13=$2;
 var $14=SAFE_HEAP_LOAD($13, "double", 0, 0);
 var $15=$3;
 SAFE_HEAP_STORE($15, $14, "double", 0);
 var $16=$2;
 var $17=(($16+8)|0);
 var $18=SAFE_HEAP_LOAD($17, "double", 0, 0);
 var $19=$3;
 var $20=(($19+8)|0);
 SAFE_HEAP_STORE($20, $18, "double", 0);
 label=5;break;
 case 4: 
 var $22=$2;
 var $23=$1;
 var $24=(($wrka)|0);
 _dividex($22,$23,$24);
 var $25=(($wrka)|0);
 var $26=(($wrkb)|0);
 _floorx($25,$26);
 var $27=$1;
 var $28=(($wrkb)|0);
 var $29=(($wrka)|0);
 _timesx($27,$28,$29);
 var $30=$2;
 var $31=(($wrka)|0);
 var $32=$3;
 _minusx($30,$31,$32);
 label=5;break;
 case 5: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _reverse($rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $a;
 var $axicnt=sp;
 var $botcnt=(sp)+(8);
 var $datatyp;
 var $i;
 var $j;
 var $k;
 var $size;
 var $topcnt=(sp)+(16);
 var $cia;
 var $cib;
 var $coa;
 var $cob;
 var $cop;
 var $out;
 $2=$rite;
 $3=$axis;
 $out=0;
 var $4=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $5=($4|0)==0;
 var $6=($5&1);
 var $7=$3;
 var $8=((($7)+($6))|0);
 $3=$8;
 var $9=$2;
 var $10=$3;
 var $11=_revrot($9,$10,$axicnt,$botcnt,$topcnt);
 $out=$11;
 var $12=0==($11|0);
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$2;
 var $15=_errstop(0,0,$14,0);
 $1=$15;
 label=18;break;
 case 3: 
 var $17=$out;
 var $18=(($17+8)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=0==($19|0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $22=$2;
 var $23=$out;
 var $24=_errstop(0,0,$22,$23);
 $1=$24;
 label=18;break;
 case 5: 
 var $26=$out;
 var $27=(($26+4)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=$28&110;
 $datatyp=$29;
 var $30=$out;
 var $31=(($30+20)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 $size=$32;
 var $33=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $34=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $35=(Math_imul($33,$34)|0);
 $a=$35;
 $i=0;
 label=6;break;
 case 6: 
 var $37=$i;
 var $38=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $39=($37|0)<($38|0);
 if($39){label=7;break;}else{label=17;break;}
 case 7: 
 var $41=$2;
 var $42=(($41)|0);
 var $43=$42;
 var $44=SAFE_HEAP_LOAD($43, "i8*", 0, 0);
 var $45=$i;
 var $46=$a;
 var $47=(Math_imul($45,$46)|0);
 var $48=$size;
 var $49=(Math_imul($47,$48)|0);
 var $50=(($44+$49)|0);
 $cia=$50;
 var $51=$out;
 var $52=(($51)|0);
 var $53=$52;
 var $54=SAFE_HEAP_LOAD($53, "i8*", 0, 0);
 var $55=$i;
 var $56=$a;
 var $57=(Math_imul($55,$56)|0);
 var $58=$size;
 var $59=(Math_imul($57,$58)|0);
 var $60=(($54+$59)|0);
 $coa=$60;
 $j=0;
 label=8;break;
 case 8: 
 var $62=$j;
 var $63=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $64=($62|0)<($63|0);
 if($64){label=9;break;}else{label=15;break;}
 case 9: 
 var $66=$cia;
 var $67=$j;
 var $68=$a;
 var $69=((($67)+($68))|0);
 var $70=$size;
 var $71=(Math_imul($69,$70)|0);
 var $72=(($66+$71)|0);
 $cib=$72;
 var $73=$coa;
 var $74=$j;
 var $75=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $76=((($74)-($75))|0);
 var $77=$size;
 var $78=(Math_imul($76,$77)|0);
 var $79=(($73+$78)|0);
 $cob=$79;
 var $80=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 $k=$80;
 label=10;break;
 case 10: 
 var $82=$k;
 var $83=($82|0)>0;
 if($83){label=11;break;}else{label=13;break;}
 case 11: 
 var $85=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $86=$size;
 var $87=(Math_imul($85,$86)|0);
 var $88=$cob;
 var $89=(($88+$87)|0);
 $cob=$89;
 var $90=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $91=$size;
 var $92=(Math_imul($90,$91)|0);
 var $93=$cib;
 var $94=(((-$92))|0);
 var $95=(($93+$94)|0);
 $cib=$95;
 var $96=$datatyp;
 var $97=_dtacopy($89,$95,1,1,$96);
 $cop=$97;
 label=12;break;
 case 12: 
 var $99=$k;
 var $100=((($99)-(1))|0);
 $k=$100;
 label=10;break;
 case 13: 
 label=14;break;
 case 14: 
 var $103=$j;
 var $104=((($103)+(1))|0);
 $j=$104;
 label=8;break;
 case 15: 
 label=16;break;
 case 16: 
 var $107=$i;
 var $108=((($107)+(1))|0);
 $i=$108;
 label=6;break;
 case 17: 
 var $110=$2;
 var $111=$out;
 var $112=_errstop(0,0,$110,$111);
 $1=$112;
 label=18;break;
 case 18: 
 var $114=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $114;
  default: assert(0, "bad label: " + label);
 }

}


function _revrot($rite,$axis,$axicnt,$botcnt,$topcnt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $ip;
 var $out;
 $2=$rite;
 $3=$axis;
 $4=$axicnt;
 $5=$botcnt;
 $6=$topcnt;
 var $7=_errinit();
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 var $11=$2;
 var $12=$3;
 var $13=$4;
 var $14=$5;
 var $15=$6;
 var $16=_axispre($11,$12,$13,$14,$15);
 var $17=1!=($16|0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=8;break;
 case 5: 
 var $20=$2;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$2;
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=$25&110;
 var $27=((($26)+(1))|0);
 var $28=$2;
 var $29=(($28+12)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=_getcb(0,$22,$27,$30,0);
 $out=$31;
 var $32=$out;
 var $33=($32|0)==0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=8;break;
 case 7: 
 var $36=$out;
 var $37=(($36+16)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32*", 0, 0);
 var $39=$38;
 var $40=$2;
 var $41=(($40+16)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32*", 0, 0);
 var $43=$42;
 var $44=$2;
 var $45=(($44+12)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=_intcopy($39,$43,$46,1);
 var $48=$47;
 $ip=$48;
 var $49=$out;
 $1=$49;
 label=8;break;
 case 8: 
 var $51=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function _roll($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $r;
 var $divisor;
 $2=$n;
 $divisor=2147483647;
 var $3=$2;
 var $4=$3==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $7=$2;
 var $8=$7<0;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 37, "i32", 0);
 $1=0;
 label=6;break;
 case 5: 
 var $11=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $12=($11|0);
 $r=$12;
 var $13=$r;
 var $14=_rand();
 var $15=($14|0);
 var $16=$divisor;
 var $17=($15)/($16);
 var $18=$2;
 var $19=($17)*($18);
 var $20=($13)+($19);
 $1=$20;
 label=6;break;
 case 6: 
 var $22=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _rollp($narg,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $n;
 var $r;
 var $divisor;
 $1=$narg;
 $2=$ret;
 $divisor=2147483647;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 $n=$4;
 var $5=$n;
 var $6=$5==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 SAFE_HEAP_STORE($8, 0, "double", 0);
 label=7;break;
 case 3: 
 var $10=$n;
 var $11=$10<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 37, "i32", 0);
 var $13=$2;
 SAFE_HEAP_STORE($13, 0, "double", 0);
 label=6;break;
 case 5: 
 var $15=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $16=($15|0);
 $r=$16;
 var $17=$r;
 var $18=_rand();
 var $19=($18|0);
 var $20=$divisor;
 var $21=($19)/($20);
 var $22=$n;
 var $23=($21)*($22);
 var $24=($17)+($23);
 var $25=$2;
 SAFE_HEAP_STORE($25, $24, "double", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _rotate($left,$rite,$axis){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $axicnt=sp;
 var $botcnt=(sp)+(8);
 var $topcnt=(sp)+(16);
 var $i;
 var $lp;
 var $rp;
 var $lincr=(sp)+(24);
 var $out;
 $2=$left;
 $3=$rite;
 $4=$axis;
 $out=0;
 var $5=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $6=($5|0)==0;
 var $7=($6&1);
 var $8=$4;
 var $9=((($8)+($7))|0);
 $4=$9;
 var $10=$3;
 var $11=$4;
 var $12=_revrot($10,$11,$axicnt,$botcnt,$topcnt);
 $out=$12;
 var $13=0==($12|0);
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$2;
 var $16=$3;
 var $17=_errstop(0,$15,$16,0);
 $1=$17;
 label=28;break;
 case 3: 
 var $19=$2;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)==1;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE($lincr, 0, "i32", 0);
 label=21;break;
 case 5: 
 var $25=$3;
 var $26=(($25+12)|0);
 var $27=SAFE_HEAP_LOAD($26, "i32", 0, 0);
 var $28=($27|0)>1;
 if($28){label=6;break;}else{label=8;break;}
 case 6: 
 var $30=$3;
 var $31=(($30+12)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=$2;
 var $34=(($33+12)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 var $36=_imax(1,$35);
 var $37=((($32)-($36))|0);
 var $38=1!=($37|0);
 if($38){label=7;break;}else{label=8;break;}
 case 7: 
 var $40=$2;
 var $41=$3;
 var $42=$out;
 var $43=_errstop(48,$40,$41,$42);
 $1=$43;
 label=28;break;
 case 8: 
 SAFE_HEAP_STORE($lincr, 1, "i32", 0);
 var $45=$2;
 var $46=(($45+12)|0);
 var $47=SAFE_HEAP_LOAD($46, "i32", 0, 0);
 var $48=($47|0)!=0;
 if($48){label=9;break;}else{label=10;break;}
 case 9: 
 var $50=$2;
 var $51=(($50+16)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32*", 0, 0);
 $lp=$52;
 label=11;break;
 case 10: 
 $lp=$lincr;
 label=11;break;
 case 11: 
 var $55=$3;
 var $56=(($55+16)|0);
 var $57=SAFE_HEAP_LOAD($56, "i32*", 0, 0);
 $rp=$57;
 $i=1;
 label=12;break;
 case 12: 
 var $59=$i;
 var $60=$3;
 var $61=(($60+12)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=($59|0)<($62|0);
 if($63){label=13;break;}else{label=20;break;}
 case 13: 
 var $65=$i;
 var $66=$4;
 var $67=($65|0)==($66|0);
 if($67){label=14;break;}else{label=15;break;}
 case 14: 
 var $69=$rp;
 var $70=(($69+4)|0);
 $rp=$70;
 label=18;break;
 case 15: 
 var $72=$lp;
 var $73=(($72+4)|0);
 $lp=$73;
 var $74=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $75=$rp;
 var $76=(($75+4)|0);
 $rp=$76;
 var $77=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $78=($74|0)!=($77|0);
 if($78){label=16;break;}else{label=17;break;}
 case 16: 
 var $80=$2;
 var $81=$3;
 var $82=$out;
 var $83=_errstop(49,$80,$81,$82);
 $1=$83;
 label=28;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $87=$i;
 var $88=((($87)+(1))|0);
 $i=$88;
 label=12;break;
 case 20: 
 label=21;break;
 case 21: 
 var $91=$2;
 var $92=(($91+4)|0);
 var $93=SAFE_HEAP_LOAD($92, "i32", 0, 0);
 var $94=$93&78;
 var $95=4!=($94|0);
 if($95){label=22;break;}else{label=23;break;}
 case 22: 
 var $97=$2;
 var $98=_integer($97);
 $2=$98;
 label=23;break;
 case 23: 
 var $100=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $101=($100|0)!=0;
 if($101){label=24;break;}else{label=25;break;}
 case 24: 
 var $103=$2;
 var $104=$3;
 var $105=$out;
 var $106=_errstop(0,$103,$104,$105);
 $1=$106;
 label=28;break;
 case 25: 
 var $108=$out;
 var $109=(($108+8)|0);
 var $110=SAFE_HEAP_LOAD($109, "i32", 0, 0);
 var $111=0==($110|0);
 if($111){label=26;break;}else{label=27;break;}
 case 26: 
 var $113=$2;
 var $114=$3;
 var $115=$out;
 var $116=_errstop(0,$113,$114,$115);
 $1=$116;
 label=28;break;
 case 27: 
 var $118=$2;
 var $119=$3;
 var $120=$out;
 var $121=$4;
 var $122=SAFE_HEAP_LOAD($axicnt, "i32", 0, 0);
 var $123=SAFE_HEAP_LOAD($botcnt, "i32", 0, 0);
 var $124=SAFE_HEAP_LOAD($topcnt, "i32", 0, 0);
 var $125=SAFE_HEAP_LOAD($lincr, "i32", 0, 0);
 var $126=_rotatesb($118,$119,$120,$121,$122,$123,$124,$125);
 $1=$126;
 label=28;break;
 case 28: 
 var $128=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $128;
  default: assert(0, "bad label: " + label);
 }

}


function _rotatesb($left,$rite,$out,$axis,$axicnt,$botcnt,$topcnt,$lincr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $a;
 var $b;
 var $c;
 var $datatyp;
 var $ep;
 var $i;
 var $j;
 var $k;
 var $l;
 var $lp;
 var $m;
 var $n;
 var $p;
 var $size;
 var $ip;
 var $op;
 $1=$left;
 $2=$rite;
 $3=$out;
 $4=$axis;
 $5=$axicnt;
 $6=$botcnt;
 $7=$topcnt;
 $8=$lincr;
 var $9=$2;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$11&110;
 $datatyp=$12;
 var $13=$2;
 var $14=(($13+20)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 $size=$15;
 var $16=$3;
 var $17=(($16)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "i8*", 0, 0);
 $op=$19;
 var $20=$size;
 var $21=$6;
 var $22=(Math_imul($20,$21)|0);
 $m=$22;
 var $23=$1;
 var $24=(($23)|0);
 var $25=$24;
 var $26=SAFE_HEAP_LOAD($25, "i32*", 0, 0);
 $lp=$26;
 var $27=$1;
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$1;
 var $32=(($31+8)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=(($30+($33<<2))|0);
 $ep=$34;
 $i=0;
 label=2;break;
 case 2: 
 var $36=$i;
 var $37=$7;
 var $38=($36|0)<($37|0);
 if($38){label=3;break;}else{label=21;break;}
 case 3: 
 var $40=$2;
 var $41=(($40)|0);
 var $42=$41;
 var $43=SAFE_HEAP_LOAD($42, "i8*", 0, 0);
 var $44=$i;
 var $45=$5;
 var $46=(Math_imul($44,$45)|0);
 var $47=$m;
 var $48=(Math_imul($46,$47)|0);
 var $49=(($43+$48)|0);
 $ip=$49;
 $j=0;
 label=4;break;
 case 4: 
 var $51=$j;
 var $52=$5;
 var $53=($51|0)<($52|0);
 if($53){label=5;break;}else{label=15;break;}
 case 5: 
 $k=0;
 label=6;break;
 case 6: 
 var $56=$k;
 var $57=$6;
 var $58=($56|0)<($57|0);
 if($58){label=7;break;}else{label=13;break;}
 case 7: 
 var $60=$op;
 var $61=$ip;
 var $62=$m;
 var $63=$lp;
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=$j;
 var $66=((($64)+($65))|0);
 var $67=$5;
 var $68=_imod($66,$67);
 var $69=(Math_imul($62,$68)|0);
 var $70=(($61+$69)|0);
 var $71=$k;
 var $72=$size;
 var $73=(Math_imul($71,$72)|0);
 var $74=(($70+$73)|0);
 var $75=$datatyp;
 var $76=_dtacopy($60,$74,1,1,$75);
 $op=$76;
 var $77=$4;
 var $78=$2;
 var $79=(($78+12)|0);
 var $80=SAFE_HEAP_LOAD($79, "i32", 0, 0);
 var $81=($77|0)!=($80|0);
 if($81){label=8;break;}else{label=11;break;}
 case 8: 
 var $83=$8;
 var $84=$lp;
 var $85=(($84+($83<<2))|0);
 $lp=$85;
 var $86=$lp;
 var $87=$ep;
 var $88=($86|0)==($87|0);
 if($88){label=9;break;}else{label=10;break;}
 case 9: 
 var $90=$1;
 var $91=(($90)|0);
 var $92=$91;
 var $93=SAFE_HEAP_LOAD($92, "i32*", 0, 0);
 $lp=$93;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $97=$k;
 var $98=((($97)+(1))|0);
 $k=$98;
 label=6;break;
 case 13: 
 label=14;break;
 case 14: 
 var $101=$j;
 var $102=((($101)+(1))|0);
 $j=$102;
 label=4;break;
 case 15: 
 var $104=$4;
 var $105=$2;
 var $106=(($105+12)|0);
 var $107=SAFE_HEAP_LOAD($106, "i32", 0, 0);
 var $108=($104|0)==($107|0);
 if($108){label=16;break;}else{label=19;break;}
 case 16: 
 var $110=$8;
 var $111=$lp;
 var $112=(($111+($110<<2))|0);
 $lp=$112;
 var $113=$lp;
 var $114=$ep;
 var $115=($113|0)==($114|0);
 if($115){label=17;break;}else{label=18;break;}
 case 17: 
 var $117=$1;
 var $118=(($117)|0);
 var $119=$118;
 var $120=SAFE_HEAP_LOAD($119, "i32*", 0, 0);
 $lp=$120;
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $124=$i;
 var $125=((($124)+(1))|0);
 $i=$125;
 label=2;break;
 case 21: 
 var $127=$1;
 var $128=$2;
 var $129=$3;
 var $130=_errstop(0,$127,$128,$129);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $130;
  default: assert(0, "bad label: " + label);
 }

}


function _savfscb($fp,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 var $k;
 var $ip;
 var $cp;
 $1=$fp;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=_write($3,$5,4);
 $i=$6;
 var $7=$1;
 var $8=$2;
 var $9=(($8+8)|0);
 var $10=_write($7,$9,4);
 $i=$10;
 var $11=$1;
 var $12=$2;
 var $13=(($12+12)|0);
 var $14=_write($11,$13,4);
 $i=$14;
 var $15=$1;
 var $16=$2;
 var $17=(($16+20)|0);
 var $18=_write($15,$17,4);
 $i=$18;
 var $19=$2;
 var $20=(($19+16)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32*", 0, 0);
 $ip=$21;
 var $22=$2;
 var $23=(($22+12)|0);
 var $24=SAFE_HEAP_LOAD($23, "i32", 0, 0);
 $j=$24;
 label=2;break;
 case 2: 
 var $26=$j;
 var $27=($26|0)>0;
 if($27){label=3;break;}else{label=5;break;}
 case 3: 
 var $29=$1;
 var $30=$ip;
 var $31=(($30+4)|0);
 $ip=$31;
 var $32=_write($29,$30,4);
 $i=$32;
 label=4;break;
 case 4: 
 var $34=$j;
 var $35=((($34)-(1))|0);
 $j=$35;
 label=2;break;
 case 5: 
 var $37=$2;
 var $38=(($37)|0);
 var $39=$38;
 var $40=SAFE_HEAP_LOAD($39, "i8*", 0, 0);
 $cp=$40;
 var $41=$2;
 var $42=(($41+8)|0);
 var $43=SAFE_HEAP_LOAD($42, "i32", 0, 0);
 $j=$43;
 label=6;break;
 case 6: 
 var $45=$j;
 var $46=($45|0)>0;
 if($46){label=7;break;}else{label=12;break;}
 case 7: 
 var $48=$2;
 var $49=(($48+4)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=$50&32;
 var $52=($51|0)!=0;
 if($52){label=8;break;}else{label=9;break;}
 case 8: 
 var $54=$1;
 var $55=$cp;
 var $56=$55;
 var $57=SAFE_HEAP_LOAD($56, "%struct.aplcb*", 0, 0);
 _savfscb($54,$57);
 label=10;break;
 case 9: 
 var $59=$1;
 var $60=$cp;
 var $61=$2;
 var $62=(($61+20)|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 var $64=_write($59,$60,$63);
 $i=$64;
 label=10;break;
 case 10: 
 var $66=$2;
 var $67=(($66+20)|0);
 var $68=SAFE_HEAP_LOAD($67, "i32", 0, 0);
 var $69=$cp;
 var $70=(($69+$68)|0);
 $cp=$70;
 label=11;break;
 case 11: 
 var $72=$j;
 var $73=((($72)-(1))|0);
 $j=$73;
 label=6;break;
 case 12: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _savfsfn($fp,$func){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tok;
 var $tokhdr;
 var $i;
 var $ip;
 var $j=sp;
 var $k=(sp)+(8);
 $1=$fp;
 $2=$func;
 var $3=$1;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=_write($3,$5,4);
 $i=$6;
 var $7=$1;
 var $8=$2;
 var $9=(($8+8)|0);
 var $10=_write($7,$9,4);
 $i=$10;
 var $11=$1;
 var $12=$2;
 var $13=(($12+12)|0);
 var $14=_write($11,$13,4);
 $i=$14;
 var $15=$1;
 var $16=$2;
 var $17=(($16+16)|0);
 var $18=_write($15,$17,4);
 $i=$18;
 var $19=$1;
 var $20=$2;
 var $21=(($20+20)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32*", 0, 0);
 var $23=$2;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25<<2);
 var $27=_write($19,$22,$26);
 $i=$27;
 var $28=$2;
 var $29=(($28+36)|0);
 var $30=SAFE_HEAP_LOAD($29, "%struct.apltoken*", 0, 0);
 $tok=$30;
 var $31=$2;
 var $32=(($31+12)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 SAFE_HEAP_STORE($j, $33, "i32", 0);
 label=2;break;
 case 2: 
 var $35=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $36=($35|0)>0;
 if($36){label=3;break;}else{label=5;break;}
 case 3: 
 var $38=$2;
 var $39=(($38+36)|0);
 var $40=SAFE_HEAP_LOAD($39, "%struct.apltoken*", 0, 0);
 var $41=$40;
 var $42=$tok;
 var $43=(($42)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "%struct.apltoken*", 0, 0);
 var $46=$45;
 var $47=_ptrtoff($41,$46);
 var $48=$tok;
 var $49=(($48)|0);
 var $50=$49;
 SAFE_HEAP_STORE($50, $47, "i32", 0);
 var $51=$tok;
 var $52=(($51+24)|0);
 $tok=$52;
 label=4;break;
 case 4: 
 var $54=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $55=((($54)-(1))|0);
 SAFE_HEAP_STORE($j, $55, "i32", 0);
 label=2;break;
 case 5: 
 var $57=$1;
 var $58=$2;
 var $59=(($58+24)|0);
 var $60=SAFE_HEAP_LOAD($59, "%struct.aplcb*", 0, 0);
 _savfscb($57,$60);
 var $61=$2;
 var $62=(($61+36)|0);
 var $63=SAFE_HEAP_LOAD($62, "%struct.apltoken*", 0, 0);
 var $64=$63;
 var $65=$2;
 var $66=(($65+28)|0);
 var $67=SAFE_HEAP_LOAD($66, "%struct.apltoken*", 0, 0);
 var $68=$67;
 var $69=_ptrtoff($64,$68);
 SAFE_HEAP_STORE($j, $69, "i32", 0);
 var $70=$1;
 var $71=_write($70,$j,4);
 $i=$71;
 var $72=$1;
 var $73=$2;
 var $74=(($73+36)|0);
 var $75=SAFE_HEAP_LOAD($74, "%struct.apltoken*", 0, 0);
 var $76=$2;
 var $77=(($76+12)|0);
 var $78=SAFE_HEAP_LOAD($77, "i32", 0, 0);
 var $79=((($78)*(24))&-1);
 var $80=_write($72,$75,$79);
 $i=$80;
 var $81=$2;
 var $82=(($81+32)|0);
 var $83=SAFE_HEAP_LOAD($82, "%struct.apltoken**", 0, 0);
 $tokhdr=$83;
 var $84=$2;
 var $85=(($84+16)|0);
 var $86=SAFE_HEAP_LOAD($85, "i32", 0, 0);
 SAFE_HEAP_STORE($j, $86, "i32", 0);
 label=6;break;
 case 6: 
 var $88=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $89=($88|0)>0;
 if($89){label=7;break;}else{label=9;break;}
 case 7: 
 var $91=$2;
 var $92=(($91+36)|0);
 var $93=SAFE_HEAP_LOAD($92, "%struct.apltoken*", 0, 0);
 var $94=$93;
 var $95=$tokhdr;
 var $96=(($95+4)|0);
 $tokhdr=$96;
 var $97=SAFE_HEAP_LOAD($95, "%struct.apltoken*", 0, 0);
 var $98=$97;
 var $99=_ptrtoff($94,$98);
 SAFE_HEAP_STORE($k, $99, "i32", 0);
 var $100=$1;
 var $101=_write($100,$k,4);
 $i=$101;
 label=8;break;
 case 8: 
 var $103=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $104=((($103)-(1))|0);
 SAFE_HEAP_STORE($j, $104, "i32", 0);
 label=6;break;
 case 9: 
 var $106=$2;
 var $107=(($106+36)|0);
 var $108=SAFE_HEAP_LOAD($107, "%struct.apltoken*", 0, 0);
 var $109=$108;
 var $110=$2;
 var $111=(($110+40)|0);
 var $112=SAFE_HEAP_LOAD($111, "%struct.apltoken*", 0, 0);
 var $113=$112;
 var $114=_ptrtoff($109,$113);
 SAFE_HEAP_STORE($j, $114, "i32", 0);
 var $115=$1;
 var $116=_write($115,$j,4);
 $i=$116;
 var $117=$2;
 var $118=(($117+36)|0);
 var $119=SAFE_HEAP_LOAD($118, "%struct.apltoken*", 0, 0);
 var $120=$119;
 var $121=$2;
 var $122=(($121+44)|0);
 var $123=SAFE_HEAP_LOAD($122, "%struct.apltoken*", 0, 0);
 var $124=$123;
 var $125=_ptrtoff($120,$124);
 SAFE_HEAP_STORE($j, $125, "i32", 0);
 var $126=$1;
 var $127=_write($126,$j,4);
 $i=$127;
 var $128=$1;
 var $129=$2;
 _savfsfo($128,$129);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _savfsfo($fp,$func){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tok;
 var $i;
 var $j;
 $1=$fp;
 $2=$func;
 var $3=$2;
 var $4=(($3+36)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.apltoken*", 0, 0);
 $tok=$5;
 var $6=$2;
 var $7=(($6+12)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32", 0, 0);
 $j=$8;
 label=2;break;
 case 2: 
 var $10=$j;
 var $11=($10|0)>0;
 if($11){label=3;break;}else{label=8;break;}
 case 3: 
 var $13=$tok;
 var $14=(($13+4)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 if(($15|0)==7|($15|0)==-3){ label=4;break;}else if(($15|0)==-4){ label=5;break;}else{label=6;break;}
 case 4: 
 var $17=$1;
 var $18=$tok;
 var $19=(($18+12)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "%struct.aplcb*", 0, 0);
 _savfscb($17,$21);
 label=6;break;
 case 5: 
 var $23=$1;
 var $24=$tok;
 var $25=(($24+12)|0);
 var $26=$25;
 var $27=SAFE_HEAP_LOAD($26, "i8*", 0, 0);
 var $28=_strwrite($23,$27);
 $i=$28;
 label=6;break;
 case 6: 
 var $30=$2;
 var $31=(($30+36)|0);
 var $32=SAFE_HEAP_LOAD($31, "%struct.apltoken*", 0, 0);
 var $33=$32;
 var $34=$tok;
 var $35=(($34)|0);
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=_offtptr($33,$37);
 var $39=$38;
 var $40=$tok;
 var $41=(($40)|0);
 var $42=$41;
 SAFE_HEAP_STORE($42, $39, "%struct.apltoken*", 0);
 var $43=$tok;
 var $44=(($43+24)|0);
 $tok=$44;
 label=7;break;
 case 7: 
 var $46=$j;
 var $47=((($46)-(1))|0);
 $j=$47;
 label=2;break;
 case 8: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _savfsub($fp,$node){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cb;
 var $i;
 var $j;
 $1=$fp;
 $2=$node;
 var $3=$2;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 label=8;break;
 case 3: 
 var $7=$1;
 var $8=$2;
 var $9=(($8)|0);
 var $10=SAFE_HEAP_LOAD($9, "%struct.avlnode*", 0, 0);
 _savfsub($7,$10);
 var $11=$1;
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.avlnode*", 0, 0);
 _savfsub($11,$14);
 var $15=$2;
 var $16=(($15+8)|0);
 var $17=SAFE_HEAP_LOAD($16, "i8*", 0, 0);
 var $18=$17;
 $cb=$18;
 var $19=0==($18|0);
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 label=8;break;
 case 5: 
 var $22=$1;
 var $23=_write($22,2392,1);
 $i=$23;
 var $24=$1;
 var $25=$2;
 var $26=(($25+16)|0);
 var $27=SAFE_HEAP_LOAD($26, "i8*", 0, 0);
 var $28=_strwrite($24,$27);
 $i=$28;
 var $29=$cb;
 var $30=(($29+4)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=$31&256;
 var $33=($32|0)!=0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=$1;
 var $36=$cb;
 var $37=$36;
 _savfsfn($35,$37);
 label=8;break;
 case 7: 
 var $39=$1;
 var $40=$cb;
 _savfscb($39,$40);
 label=8;break;
 case 8: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _scalar($value){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $out;
 $1=$value;
 var $2=_getcb(0,1,3,0,0);
 $out=$2;
 var $3=$out;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$1;
 var $7=$out;
 var $8=(($7)|0);
 var $9=$8;
 var $10=SAFE_HEAP_LOAD($9, "double*", 0, 0);
 SAFE_HEAP_STORE($10, $6, "double", 0);
 label=3;break;
 case 3: 
 var $12=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _scalax($fun,$left,$rite,$axcb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5;
 var $big;
 var $lit;
 var $out;
 var $bigx;
 var $code;
 var $outype=(sp)+(16);
 var $i;
 var $ip;
 var $ltype;
 var $lx=(sp)+(24);
 var $litx;
 var $rtype;
 var $rx=(sp)+(32);
 var $oper;
 $2=$fun;
 SAFE_HEAP_STORE($3, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($4, $rite, "%struct.aplcb*", 0);
 $5=$axcb;
 $oper=0;
 label=2;break;
 case 2: 
 var $7=$2;
 var $8=_dyadset($7,$3,$4,$outype);
 $oper=$8;
 var $9=$oper;
 var $10=($9|0)==0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $13=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $14=_errstop(1,$12,$13,0);
 $1=$14;
 label=15;break;
 case 4: 
 var $16=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $17=(($16+12)|0);
 var $18=SAFE_HEAP_LOAD($17, "i32", 0, 0);
 var $19=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $20=(($19+12)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($18|0)<($21|0);
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 $big=$4;
 $bigx=$rx;
 $lit=$3;
 $litx=$lx;
 label=7;break;
 case 6: 
 $big=$3;
 $bigx=$lx;
 $lit=$4;
 $litx=$rx;
 label=7;break;
 case 7: 
 var $26=$5;
 var $27=$lit;
 var $28=SAFE_HEAP_LOAD($27, "%struct.aplcb*", 0, 0);
 var $29=(($28+12)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=$big;
 var $32=SAFE_HEAP_LOAD($31, "%struct.aplcb*", 0, 0);
 var $33=(($32+12)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=_axesok($26,$30,$34);
 var $36=0==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 label=14;break;
 case 9: 
 var $39=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $40=(($39+4)|0);
 var $41=SAFE_HEAP_LOAD($40, "i32", 0, 0);
 var $42=$41&78;
 $ltype=$42;
 var $43=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $44=(($43+4)|0);
 var $45=SAFE_HEAP_LOAD($44, "i32", 0, 0);
 var $46=$45&78;
 $rtype=$46;
 var $47=$ltype;
 var $48=$rtype;
 var $49=($47|0)!=($48|0);
 if($49){label=10;break;}else{label=13;break;}
 case 10: 
 var $51=$ltype;
 var $52=$rtype;
 var $53=$51|$52;
 var $54=$53&8;
 var $55=($54|0)!=0;
 if($55){label=11;break;}else{label=13;break;}
 case 11: 
 var $57=$2;
 var $58=$57;
 var $59=(($58+4)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=($60|0)==38;
 if($61){label=12;break;}else{label=13;break;}
 case 12: 
 var $63=$5;
 _endoper($63);
 var $64=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $65=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $66=$big;
 var $67=SAFE_HEAP_LOAD($66, "%struct.aplcb*", 0, 0);
 var $68=$2;
 var $69=$68;
 var $70=(($69)|0);
 var $71=SAFE_HEAP_LOAD($70, "i32", 0, 0);
 var $72=($71|0)==62;
 var $73=($72&1);
 var $74=_genint($67,$73);
 var $75=_errstop(0,$64,$65,$74);
 $1=$75;
 label=15;break;
 case 13: 
 var $77=$5;
 _iorder($77);
 var $78=$oper;
 var $79=$78;
 var $80=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $81=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $82=$5;
 var $83=$big;
 var $84=$lit;
 var $85=$bigx;
 var $86=$litx;
 var $87=SAFE_HEAP_LOAD($outype, "i32", 0, 0);
 var $88=_scalaz($79,$80,$81,$82,$83,$84,$85,$86,$lx,$rx,$87);
 $out=$88;
 var $89=$5;
 _endoper($89);
 var $90=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $91=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $92=$out;
 var $93=_errstop(0,$90,$91,$92);
 $1=$93;
 label=15;break;
 case 14: 
 var $95=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $96=SAFE_HEAP_LOAD($4, "%struct.aplcb*", 0, 0);
 var $97=$5;
 var $98=_errstop(123,$95,$96,$97);
 $1=$98;
 label=15;break;
 case 15: 
 var $100=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $100;
  default: assert(0, "bad label: " + label);
 }

}


function _scalay($fun,$code,$intype,$outype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $2=$fun;
 $3=$code;
 $4=$intype;
 $5=$outype;
 var $6=$4;
 if(($6|0)==8){ label=2;break;}else if(($6|0)==4){ label=3;break;}else if(($6|0)==2){ label=7;break;}else{label=19;break;}
 case 2: 
 var $8=$2;
 var $9=$8;
 var $10=(($9+68)|0);
 var $11=SAFE_HEAP_LOAD($10, "void (i8*, i8*, i32*)*", 0, 0);
 var $12=$11;
 $1=$12;
 label=20;break;
 case 3: 
 var $14=$3;
 if(($14|0)==38){ label=4;break;}else if(($14|0)==6){ label=5;break;}else{label=6;break;}
 case 4: 
 var $16=$2;
 var $17=$16;
 var $18=(($17)|0);
 var $19=(($18+8)|0);
 var $20=(($19+16)|0);
 var $21=(($20)|0);
 var $22=SAFE_HEAP_LOAD($21, "void (i32*, i32*, i32*)*", 0, 0);
 var $23=$22;
 $1=$23;
 label=20;break;
 case 5: 
 var $25=$2;
 var $26=$25;
 var $27=(($26+8)|0);
 var $28=(($27+16)|0);
 var $29=(($28)|0);
 var $30=SAFE_HEAP_LOAD($29, "void (i32*, i32*, i32*)*", 0, 0);
 var $31=$30;
 $1=$31;
 label=20;break;
 case 6: 
 label=7;break;
 case 7: 
 var $34=$5;
 var $35=($34|0)==4;
 if($35){label=8;break;}else{label=13;break;}
 case 8: 
 var $37=$3;
 if(($37|0)==6){ label=10;break;}else if(($37|0)==7){ label=11;break;}else if(($37|0)==38){ label=9;break;}else{label=12;break;}
 case 9: 
 var $39=$2;
 var $40=$39;
 var $41=(($40)|0);
 var $42=(($41+8)|0);
 var $43=(($42+16)|0);
 var $44=(($43+8)|0);
 var $45=SAFE_HEAP_LOAD($44, "void (double*, double*, i32*)*", 0, 0);
 var $46=$45;
 $1=$46;
 label=20;break;
 case 10: 
 var $48=$2;
 var $49=$48;
 var $50=(($49+8)|0);
 var $51=(($50+16)|0);
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "void (double*, double*, i32*)*", 0, 0);
 var $54=$53;
 $1=$54;
 label=20;break;
 case 11: 
 var $56=$2;
 var $57=$56;
 var $58=(($57+8)|0);
 var $59=(($58+16)|0);
 var $60=(($59+8)|0);
 var $61=SAFE_HEAP_LOAD($60, "void (double*, double*, i32*)*", 0, 0);
 var $62=$61;
 $1=$62;
 label=20;break;
 case 12: 
 label=18;break;
 case 13: 
 var $65=$3;
 if(($65|0)==38){ label=14;break;}else if(($65|0)==6){ label=15;break;}else if(($65|0)==7){ label=16;break;}else{label=17;break;}
 case 14: 
 var $67=$2;
 var $68=$67;
 var $69=(($68)|0);
 var $70=(($69+8)|0);
 var $71=(($70+16)|0);
 var $72=(($71+4)|0);
 var $73=SAFE_HEAP_LOAD($72, "void (double*, double*, double*)*", 0, 0);
 var $74=$73;
 $1=$74;
 label=20;break;
 case 15: 
 var $76=$2;
 var $77=$76;
 var $78=(($77+8)|0);
 var $79=(($78+16)|0);
 var $80=(($79+4)|0);
 var $81=SAFE_HEAP_LOAD($80, "void (double*, double*, double*)*", 0, 0);
 var $82=$81;
 $1=$82;
 label=20;break;
 case 16: 
 var $84=$2;
 var $85=$84;
 var $86=(($85+8)|0);
 var $87=(($86+16)|0);
 var $88=(($87+4)|0);
 var $89=SAFE_HEAP_LOAD($88, "void (double*, double*, double*)*", 0, 0);
 var $90=$89;
 $1=$90;
 label=20;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 $1=0;
 label=20;break;
 case 20: 
 var $95=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $95;
  default: assert(0, "bad label: " + label);
 }

}


function _scalaz($pep,$left,$rite,$axcb,$big,$lit,$bigx,$litx,$leftx,$ritex,$datatyp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $bigax;
 var $out;
 var $i=sp;
 var $ip;
 var $j=(sp)+(8);
 var $k;
 $2=$pep;
 $3=$left;
 $4=$rite;
 $5=$axcb;
 $6=$big;
 $7=$lit;
 $8=$bigx;
 $9=$litx;
 $10=$leftx;
 $11=$ritex;
 $12=$datatyp;
 var $13=$6;
 var $14=SAFE_HEAP_LOAD($13, "%struct.aplcb*", 0, 0);
 var $15=(($14+8)|0);
 var $16=SAFE_HEAP_LOAD($15, "i32", 0, 0);
 var $17=$12;
 var $18=((($17)+(1))|0);
 var $19=$6;
 var $20=SAFE_HEAP_LOAD($19, "%struct.aplcb*", 0, 0);
 var $21=(($20+12)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=_getcb(0,$16,$18,$22,0);
 $out=$23;
 var $24=$out;
 var $25=($24|0)==0;
 if($25){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=12;break;
 case 3: 
 var $28=$out;
 var $29=(($28+12)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32", 0, 0);
 var $31=($30|0)>1;
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 var $33=$out;
 var $34=(($33+16)|0);
 var $35=SAFE_HEAP_LOAD($34, "i32*", 0, 0);
 var $36=$35;
 var $37=$6;
 var $38=SAFE_HEAP_LOAD($37, "%struct.aplcb*", 0, 0);
 var $39=(($38+16)|0);
 var $40=SAFE_HEAP_LOAD($39, "i32*", 0, 0);
 var $41=$40;
 var $42=$out;
 var $43=(($42+12)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=_intcopy($36,$41,$44,1);
 var $46=$45;
 $ip=$46;
 label=5;break;
 case 5: 
 var $48=$out;
 var $49=(($48+12)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=_getcb(0,$50,5,1,0);
 $bigax=$51;
 var $52=$bigax;
 var $53=($52|0)==0;
 if($53){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=12;break;
 case 7: 
 var $56=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $57=((($56)-(1))|0);
 SAFE_HEAP_STORE($i, $57, "i32", 0);
 var $58=$bigax;
 var $59=(($58)|0);
 var $60=$59;
 var $61=SAFE_HEAP_LOAD($60, "i32*", 0, 0);
 var $62=$61;
 var $63=$i;
 var $64=$bigax;
 var $65=(($64+8)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=_intcopy($62,$63,$66,0);
 var $68=$67;
 $ip=$68;
 SAFE_HEAP_STORE($j, 1, "i32", 0);
 SAFE_HEAP_STORE($i, 0, "i32", 0);
 label=8;break;
 case 8: 
 var $70=SAFE_HEAP_LOAD($i, "i32", 0, 0);
 var $71=$out;
 var $72=(($71+8)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $74=($70|0)<($73|0);
 if($74){label=9;break;}else{label=11;break;}
 case 9: 
 var $76=$bigax;
 var $77=(($76)|0);
 var $78=$77;
 var $79=SAFE_HEAP_LOAD($78, "i32*", 0, 0);
 var $80=$out;
 var $81=(($80+16)|0);
 var $82=SAFE_HEAP_LOAD($81, "i32*", 0, 0);
 var $83=$out;
 var $84=(($83+12)|0);
 var $85=SAFE_HEAP_LOAD($84, "i32", 0, 0);
 var $86=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 _indices($79,$82,$j,$85,$86);
 var $87=$out;
 var $88=(($87+12)|0);
 var $89=SAFE_HEAP_LOAD($88, "i32", 0, 0);
 var $90=$bigax;
 var $91=(($90)|0);
 var $92=$91;
 var $93=SAFE_HEAP_LOAD($92, "i32*", 0, 0);
 var $94=$out;
 var $95=(($94+16)|0);
 var $96=SAFE_HEAP_LOAD($95, "i32*", 0, 0);
 var $97=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $98=_indexno($89,0,$93,$96,$97);
 var $99=$8;
 SAFE_HEAP_STORE($99, $98, "i32", 0);
 var $100=$7;
 var $101=SAFE_HEAP_LOAD($100, "%struct.aplcb*", 0, 0);
 var $102=(($101+12)|0);
 var $103=SAFE_HEAP_LOAD($102, "i32", 0, 0);
 var $104=$5;
 var $105=(($104)|0);
 var $106=$105;
 var $107=SAFE_HEAP_LOAD($106, "i32*", 0, 0);
 var $108=$bigax;
 var $109=(($108)|0);
 var $110=$109;
 var $111=SAFE_HEAP_LOAD($110, "i32*", 0, 0);
 var $112=$7;
 var $113=SAFE_HEAP_LOAD($112, "%struct.aplcb*", 0, 0);
 var $114=(($113+16)|0);
 var $115=SAFE_HEAP_LOAD($114, "i32*", 0, 0);
 var $116=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $117=_indexno($103,$107,$111,$115,$116);
 var $118=$9;
 SAFE_HEAP_STORE($118, $117, "i32", 0);
 var $119=$2;
 var $120=$3;
 var $121=(($120)|0);
 var $122=$121;
 var $123=SAFE_HEAP_LOAD($122, "i8*", 0, 0);
 var $124=$10;
 var $125=SAFE_HEAP_LOAD($124, "i32", 0, 0);
 var $126=$3;
 var $127=(($126+20)|0);
 var $128=SAFE_HEAP_LOAD($127, "i32", 0, 0);
 var $129=(Math_imul($125,$128)|0);
 var $130=(($123+$129)|0);
 var $131=$4;
 var $132=(($131)|0);
 var $133=$132;
 var $134=SAFE_HEAP_LOAD($133, "i8*", 0, 0);
 var $135=$11;
 var $136=SAFE_HEAP_LOAD($135, "i32", 0, 0);
 var $137=$4;
 var $138=(($137+20)|0);
 var $139=SAFE_HEAP_LOAD($138, "i32", 0, 0);
 var $140=(Math_imul($136,$139)|0);
 var $141=(($134+$140)|0);
 var $142=$out;
 var $143=(($142)|0);
 var $144=$143;
 var $145=SAFE_HEAP_LOAD($144, "i8*", 0, 0);
 var $146=SAFE_HEAP_LOAD($i, "i32", 0, 0);
 var $147=$out;
 var $148=(($147+20)|0);
 var $149=SAFE_HEAP_LOAD($148, "i32", 0, 0);
 var $150=(Math_imul($146,$149)|0);
 var $151=(($145+$150)|0);
 FUNCTION_TABLE[$119]($130,$141,$151);
 label=10;break;
 case 10: 
 var $153=SAFE_HEAP_LOAD($i, "i32", 0, 0);
 var $154=((($153)+(1))|0);
 SAFE_HEAP_STORE($i, $154, "i32", 0);
 label=8;break;
 case 11: 
 var $156=$bigax;
 _endoper($156);
 var $157=$out;
 $1=$157;
 label=12;break;
 case 12: 
 var $159=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $159;
  default: assert(0, "bad label: " + label);
 }

}


function _scanfrnt($dp,$left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $axis;
 $2=$dp;
 $3=$left;
 $4=$rite;
 var $5=$3;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$3;
 var $9=$4;
 var $10=_errstop(76,$8,$9,0);
 $1=$10;
 label=6;break;
 case 3: 
 var $12=$2;
 var $13=(($12+4)|0);
 var $14=SAFE_HEAP_LOAD($13, "i32", 0, 0);
 $axis=$14;
 var $15=$axis;
 var $16=($15|0)==-1;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$2;
 var $19=(($18+20)|0);
 var $20=SAFE_HEAP_LOAD($19, "i8*", 0, 0);
 var $21=$20;
 var $22=$4;
 var $23=_axisdft($21,$22);
 $axis=$23;
 label=5;break;
 case 5: 
 var $25=$2;
 var $26=$4;
 var $27=$axis;
 var $28=_redscan(0,$25,$26,$27,264,(124));
 $1=$28;
 label=6;break;
 case 6: 
 var $30=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $30;
  default: assert(0, "bad label: " + label);
 }

}


function _shape($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $dimin;
 var $dimptr;
 var $i;
 var $ip;
 var $out;
 $2=$rite;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=_errstop(0,0,$6,0);
 $1=$7;
 label=6;break;
 case 3: 
 var $9=$2;
 var $10=(($9+12)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=_getcb(0,$11,5,1,0);
 $out=$12;
 var $13=$2;
 var $14=(($13+12)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$out;
 var $19=(($18)|0);
 var $20=$19;
 var $21=SAFE_HEAP_LOAD($20, "i32*", 0, 0);
 var $22=$21;
 var $23=$2;
 var $24=(($23+16)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32*", 0, 0);
 var $26=$25;
 var $27=$2;
 var $28=(($27+12)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=_intcopy($22,$26,$29,1);
 var $31=$30;
 $dimptr=$31;
 label=5;break;
 case 5: 
 var $33=$2;
 var $34=$out;
 var $35=_errstop(0,0,$33,$34);
 $1=$35;
 label=6;break;
 case 6: 
 var $37=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _signdbl($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$x;
 var $3=$2;
 var $4=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $5=(-$4);
 var $6=$3<$5;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=6;break;
 case 3: 
 var $9=$2;
 var $10=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $11=$9>$10;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 $1=1;
 label=6;break;
 case 5: 
 $1=0;
 label=6;break;
 case 6: 
 var $15=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }

}


function _signdblp($x,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$x;
 $2=$ret;
 var $3=$1;
 var $4=SAFE_HEAP_LOAD($3, "double", 0, 0);
 var $5=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $6=(-$5);
 var $7=$4<$6;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$2;
 SAFE_HEAP_STORE($9, -1, "double", 0);
 label=7;break;
 case 3: 
 var $11=$1;
 var $12=SAFE_HEAP_LOAD($11, "double", 0, 0);
 var $13=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $14=$12>$13;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 SAFE_HEAP_STORE($16, 1, "double", 0);
 label=6;break;
 case 5: 
 var $18=$2;
 SAFE_HEAP_STORE($18, 0, "double", 0);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _signdblx($x,$ret){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $r=sp;
 $1=$x;
 $2=$ret;
 var $3=$1;
 var $4=(($r)|0);
 _dabsx($3,$4);
 var $5=$1;
 var $6=SAFE_HEAP_LOAD($5, "double", 0, 0);
 var $7=(($r)|0);
 var $8=SAFE_HEAP_LOAD($7, "double", 0, 0);
 var $9=($6)/($8);
 var $10=$2;
 SAFE_HEAP_STORE($10, $9, "double", 0);
 var $11=$1;
 var $12=(($11+8)|0);
 var $13=SAFE_HEAP_LOAD($12, "double", 0, 0);
 var $14=(($r)|0);
 var $15=SAFE_HEAP_LOAD($14, "double", 0, 0);
 var $16=($13)/($15);
 var $17=$2;
 var $18=(($17+8)|0);
 SAFE_HEAP_STORE($18, $16, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _slasherr($funtok,$axistok,$op,$dp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$funtok;
 $2=$axistok;
 $3=$op;
 $4=$dp;
 var $5=$1;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 _execfree($8);
 label=3;break;
 case 3: 
 var $10=$3;
 var $11=($10|0)!=0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$3;
 _execfree($13);
 label=5;break;
 case 5: 
 var $15=$2;
 var $16=($15|0)!=0;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$2;
 _execfree($18);
 label=7;break;
 case 7: 
 var $20=$4;
 var $21=($20|0)!=0;
 if($21){label=8;break;}else{label=9;break;}
 case 8: 
 var $23=$4;
 _dervfree($23);
 label=9;break;
 case 9: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _slashtra($tok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $noexit;
 var $dp;
 var $axistok=sp;
 var $funtok=(sp)+(8);
 var $op=(sp)+(16);
 var $axcb;
 var $lcb;
 $2=$tok;
 $dp=0;
 $axcb=0;
 $lcb=0;
 var $3=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $4=(($3+40)|0);
 var $5=SAFE_HEAP_LOAD($4, "%struct.execstk*", 0, 0);
 var $6=(($5+8)|0);
 var $7=SAFE_HEAP_LOAD($6, "%struct.apltoken*", 0, 0);
 var $8=_axistest($7);
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $12=(($11+40)|0);
 var $13=SAFE_HEAP_LOAD($12, "%struct.execstk*", 0, 0);
 var $14=(($13+8)|0);
 var $15=$14;
 var $16=_execaxis($15);
 $axcb=$16;
 label=3;break;
 case 3: 
 var $18=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $19=(($18+48)|0);
 SAFE_HEAP_STORE($19, 0, "i32", 0);
 var $20=_execnext($funtok,$axistok,$op,0);
 $noexit=$20;
 label=4;break;
 case 4: 
 var $22=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $23=($22|0)!=0;
 if($23){label=5;break;}else{label=8;break;}
 case 5: 
 var $25=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $26=_execgetp($25);
 $lcb=$26;
 SAFE_HEAP_STORE($op, 0, "%struct.apltoken*", 0);
 var $27=$lcb;
 var $28=($27|0)==0;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 label=16;break;
 case 7: 
 label=8;break;
 case 8: 
 var $32=$axcb;
 var $33=$lcb;
 var $34=_newderiv($32,$33,0);
 $dp=$34;
 var $35=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $36=($35|0)!=0;
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 label=16;break;
 case 10: 
 var $39=$2;
 var $40=(($39+12)|0);
 var $41=$40;
 var $42=SAFE_HEAP_LOAD($41, "i8*", 0, 0);
 var $43=$dp;
 var $44=(($43+20)|0);
 SAFE_HEAP_STORE($44, $42, "i8*", 0);
 var $45=$lcb;
 var $46=($45|0)!=0;
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $48=$2;
 var $49=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $50=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $51=$dp;
 var $52=_slashtrb($48,$49,$50,$51);
 label=15;break;
 case 12: 
 var $54=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $55=($54|0)!=0;
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 SAFE_HEAP_STORE(4592, 89, "i32", 0);
 label=16;break;
 case 14: 
 var $58=$2;
 var $59=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $60=$dp;
 var $61=_slashtrc($58,$59,$60);
 label=15;break;
 case 15: 
 var $63=$noexit;
 $1=$63;
 label=17;break;
 case 16: 
 var $65=SAFE_HEAP_LOAD($funtok, "%struct.apltoken*", 0, 0);
 var $66=SAFE_HEAP_LOAD($axistok, "%struct.apltoken*", 0, 0);
 var $67=SAFE_HEAP_LOAD($op, "%struct.apltoken*", 0, 0);
 var $68=$dp;
 _slasherr($65,$66,$67,$68);
 var $69=$noexit;
 $1=$69;
 label=17;break;
 case 17: 
 var $71=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $71;
  default: assert(0, "bad label: " + label);
 }

}


function _slashtrb($tok,$funtok,$axistok,$dp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$tok;
 $2=$funtok;
 $3=$axistok;
 $4=$dp;
 var $5=$4;
 var $6=(($5+24)|0);
 SAFE_HEAP_STORE($6, (20), "%struct.aplcb* (%struct.aplderiv.2030*, %struct.aplcb*, %struct.aplcb*)*", 0);
 var $7=$4;
 var $8=(($7+20)|0);
 var $9=SAFE_HEAP_LOAD($8, "i8*", 0, 0);
 var $10=$9;
 var $11=(($10)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 if(($12|0)==15|($12|0)==64){ label=2;break;}else if(($12|0)==60|($12|0)==77){ label=3;break;}else{label=4;break;}
 case 2: 
 var $14=$4;
 var $15=(($14+28)|0);
 var $16=(($15+20)|0);
 var $17=$16;
 SAFE_HEAP_STORE($17, 126, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0);
 label=5;break;
 case 3: 
 var $19=$4;
 var $20=(($19+28)|0);
 var $21=(($20+20)|0);
 var $22=$21;
 SAFE_HEAP_STORE($22, 144, "%struct.aplcb* (%struct.aplcb*, %struct.aplcb*, i32)*", 0);
 label=5;break;
 case 4: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 _exit(999);
 throw "Reached an unreachable!";
 case 5: 
 var $25=$1;
 var $26=(($25+4)|0);
 SAFE_HEAP_STORE($26, -7, "i32", 0);
 var $27=$4;
 var $28=$27;
 var $29=$1;
 var $30=(($29+12)|0);
 var $31=$30;
 SAFE_HEAP_STORE($31, $28, "i8*", 0);
 var $32=$2;
 var $33=($32|0)!=0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $36=(($35+44)|0);
 var $37=$36;
 var $38=$2;
 var $39=$38;
 var $40=_lifo($37,$39);
 var $41=$40;
 $2=$41;
 label=7;break;
 case 7: 
 var $43=$3;
 var $44=($43|0)!=0;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $47=(($46+44)|0);
 var $48=$47;
 var $49=$3;
 var $50=$49;
 var $51=_lifo($48,$50);
 var $52=$51;
 $3=$52;
 label=9;break;
 case 9: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _slashtrc($tok,$funtok,$dp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $fun;
 $1=$tok;
 $2=$funtok;
 $3=$dp;
 var $4=$3;
 var $5=(($4+20)|0);
 var $6=SAFE_HEAP_LOAD($5, "i8*", 0, 0);
 var $7=$6;
 var $8=(($7)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 if(($9|0)==15|($9|0)==64){ label=2;break;}else if(($9|0)==60|($9|0)==77){ label=3;break;}else{label=4;break;}
 case 2: 
 var $11=$3;
 var $12=(($11+24)|0);
 SAFE_HEAP_STORE($12, (122), "%struct.aplcb* (%struct.aplderiv.2039*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=5;break;
 case 3: 
 var $14=$3;
 var $15=(($14+24)|0);
 SAFE_HEAP_STORE($15, (18), "%struct.aplcb* (%struct.aplderiv.2039*, %struct.aplcb*, %struct.aplcb*)*", 0);
 label=5;break;
 case 4: 
 SAFE_HEAP_STORE(4592, 999, "i32", 0);
 _exit(999);
 throw "Reached an unreachable!";
 case 5: 
 var $18=$2;
 var $19=($18|0)!=0;
 if($19){label=6;break;}else{label=10;break;}
 case 6: 
 var $21=$3;
 var $22=(($21+28)|0);
 var $23=(($22+4)|0);
 var $24=$2;
 var $25=_getcode($23,$24);
 var $26=$3;
 var $27=(($26+28)|0);
 var $28=(($27)|0);
 SAFE_HEAP_STORE($28, $25, "i32", 0);
 var $29=$2;
 _execfree($29);
 var $30=$3;
 var $31=(($30+28)|0);
 var $32=(($31)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 var $34=-7==($33|0);
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 var $36=$3;
 var $37=(($36+28)|0);
 var $38=(($37+16)|0);
 SAFE_HEAP_STORE($38, 11, "i32", 0);
 var $39=$3;
 var $40=(($39+28)|0);
 var $41=(($40+4)|0);
 var $42=SAFE_HEAP_LOAD($41, "i8*", 0, 0);
 var $43=$42;
 var $44=(($43+24)|0);
 var $45=SAFE_HEAP_LOAD($44, "%struct.aplcb* (%struct.aplderiv.2039*, %struct.aplcb*, %struct.aplcb*)*", 0, 0);
 var $46=$3;
 var $47=(($46+28)|0);
 var $48=(($47+20)|0);
 var $49=$48;
 SAFE_HEAP_STORE($49, $45, "%struct.aplcb* (%struct.aplderiv.2039*, %struct.aplcb*, %struct.aplcb*)*", 0);
 var $50=$3;
 var $51=(($50+28)|0);
 var $52=(($51+4)|0);
 var $53=SAFE_HEAP_LOAD($52, "i8*", 0, 0);
 var $54=$53;
 var $55=(($54)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=$56|1;
 SAFE_HEAP_STORE($55, $57, "i32", 0);
 label=9;break;
 case 8: 
 var $59=$3;
 var $60=(($59+28)|0);
 var $61=(($60+4)|0);
 var $62=SAFE_HEAP_LOAD($61, "i8*", 0, 0);
 var $63=$3;
 var $64=(($63+28)|0);
 var $65=(($64+8)|0);
 var $66=$3;
 var $67=(($66+28)|0);
 var $68=(($67+20)|0);
 var $69=_execdyas($62,$65,$68);
 var $70=$3;
 var $71=(($70+28)|0);
 var $72=(($71+16)|0);
 SAFE_HEAP_STORE($72, $69, "i32", 0);
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 SAFE_HEAP_STORE(4592, 79, "i32", 0);
 label=11;break;
 case 11: 
 var $76=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $77=($76|0)!=0;
 if($77){label=12;break;}else{label=13;break;}
 case 12: 
 label=14;break;
 case 13: 
 var $80=$1;
 var $81=(($80+4)|0);
 SAFE_HEAP_STORE($81, -7, "i32", 0);
 var $82=$3;
 var $83=$82;
 var $84=$1;
 var $85=(($84+12)|0);
 var $86=$85;
 SAFE_HEAP_STORE($86, $83, "i8*", 0);
 label=14;break;
 case 14: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _squadix($left,$rite,$axcb,$new){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $cb;
 var $indices;
 var $i;
 var $ip;
 var $j;
 $2=$left;
 $3=$rite;
 $4=$axcb;
 $5=$new;
 $indices=0;
 label=2;break;
 case 2: 
 var $7=_errinit();
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 label=31;break;
 case 4: 
 var $11=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $12=($11|0)!=0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 label=31;break;
 case 6: 
 var $15=$4;
 var $16=($15|0)==0;
 if($16){label=7;break;}else{label=14;break;}
 case 7: 
 var $18=$2;
 var $19=(($18+8)|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 var $21=$3;
 var $22=(($21+12)|0);
 var $23=SAFE_HEAP_LOAD($22, "i32", 0, 0);
 var $24=($20|0)!=($23|0);
 if($24){label=8;break;}else{label=9;break;}
 case 8: 
 var $26=$2;
 var $27=$3;
 var $28=_errstop(125,$26,$27,0);
 $1=$28;
 label=34;break;
 case 9: 
 var $30=$3;
 var $31=(($30+12)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32", 0, 0);
 var $33=($32|0)==0;
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 var $35=$2;
 var $36=$3;
 var $37=$3;
 var $38=_aplcopy($37);
 var $39=_temp($38);
 var $40=_errstop(0,$35,$36,$39);
 $1=$40;
 label=34;break;
 case 11: 
 var $42=$2;
 var $43=(($42+4)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=$44&32;
 var $46=($45|0)!=0;
 if($46){label=13;break;}else{label=12;break;}
 case 12: 
 var $48=$2;
 var $49=_aplnest($48);
 $2=$49;
 label=13;break;
 case 13: 
 var $51=$3;
 var $52=$2;
 var $53=_indexm($51,$52,0);
 $1=$53;
 label=34;break;
 case 14: 
 var $55=$4;
 var $56=(($55+4)|0);
 var $57=SAFE_HEAP_LOAD($56, "i32", 0, 0);
 var $58=$57&4;
 var $59=($58|0)!=0;
 if($59){label=16;break;}else{label=15;break;}
 case 15: 
 var $61=$4;
 var $62=_integer($61);
 $4=$62;
 label=16;break;
 case 16: 
 var $64=$3;
 var $65=(($64+12)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=_getcb(0,$66,33,1,0);
 $indices=$67;
 var $68=$indices;
 var $69=($68|0)==0;
 if($69){label=17;break;}else{label=18;break;}
 case 17: 
 label=31;break;
 case 18: 
 var $72=$2;
 var $73=(($72+4)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 var $75=$74&32;
 var $76=($75|0)!=0;
 if($76){label=20;break;}else{label=19;break;}
 case 19: 
 var $78=$2;
 var $79=_aplnest($78);
 $2=$79;
 label=20;break;
 case 20: 
 $i=0;
 var $81=$4;
 var $82=(($81)|0);
 var $83=$82;
 var $84=SAFE_HEAP_LOAD($83, "i32*", 0, 0);
 $ip=$84;
 label=21;break;
 case 21: 
 var $86=$i;
 var $87=$4;
 var $88=(($87+8)|0);
 var $89=SAFE_HEAP_LOAD($88, "i32", 0, 0);
 var $90=($86|0)<($89|0);
 if($90){label=22;break;}else{label=28;break;}
 case 22: 
 var $92=$ip;
 var $93=$i;
 var $94=(($92+($93<<2))|0);
 var $95=SAFE_HEAP_LOAD($94, "i32", 0, 0);
 var $96=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $97=((($95)-($96))|0);
 $j=$97;
 var $98=0>($97|0);
 if($98){label=24;break;}else{label=23;break;}
 case 23: 
 var $100=$j;
 var $101=$3;
 var $102=(($101+12)|0);
 var $103=SAFE_HEAP_LOAD($102, "i32", 0, 0);
 var $104=($100|0)>=($103|0);
 if($104){label=24;break;}else{label=25;break;}
 case 24: 
 SAFE_HEAP_STORE(4592, 34, "i32", 0);
 label=26;break;
 case 25: 
 var $107=$indices;
 var $108=(($107)|0);
 var $109=$108;
 var $110=SAFE_HEAP_LOAD($109, "%struct.aplcb**", 0, 0);
 var $111=$j;
 var $112=(($110+($111<<2))|0);
 var $113=$112;
 var $114=$2;
 var $115=(($114)|0);
 var $116=$115;
 var $117=SAFE_HEAP_LOAD($116, "%struct.aplcb**", 0, 0);
 var $118=$i;
 var $119=(($117+($118<<2))|0);
 var $120=$119;
 var $121=_dtacopy($113,$120,1,1,32);
 var $122=$121;
 $cb=$122;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $125=$i;
 var $126=((($125)+(1))|0);
 $i=$126;
 label=21;break;
 case 28: 
 var $128=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $129=($128|0)!=0;
 if($129){label=29;break;}else{label=30;break;}
 case 29: 
 label=31;break;
 case 30: 
 var $132=$2;
 var $133=$4;
 var $134=$3;
 var $135=$indices;
 var $136=_indexm($134,$135,0);
 var $137=_errstop(0,$132,$133,$136);
 $1=$137;
 label=34;break;
 case 31: 
 var $139=$indices;
 var $140=($139|0)!=0;
 if($140){label=32;break;}else{label=33;break;}
 case 32: 
 var $142=$indices;
 _endoper($142);
 label=33;break;
 case 33: 
 var $144=$2;
 var $145=$3;
 var $146=$4;
 var $147=_errstop(0,$144,$145,$146);
 $1=$147;
 label=34;break;
 case 34: 
 var $149=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $149;
  default: assert(0, "bad label: " + label);
 }

}


function _strread($fp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j=sp;
 var $cp;
 $2=$fp;
 var $3=$2;
 var $4=_read($3,$j,4);
 $i=$4;
 var $5=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $9=_aplmall($8);
 $cp=$9;
 var $10=0==($9|0);
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=5;break;
 case 4: 
 var $13=$2;
 var $14=$cp;
 var $15=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $16=_read($13,$14,$15);
 $i=$16;
 var $17=$cp;
 $1=$17;
 label=5;break;
 case 5: 
 var $19=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }

}


function _strwrite($fp,$cp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j=sp;
 $1=$fp;
 $2=$cp;
 var $3=$2;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=0;label=4;break;
 case 3: 
 var $7=$2;
 var $8=_strlen($7);
 var $9=((($8)+(1))|0);
 var $11=$9;label=4;break;
 case 4: 
 var $11;
 SAFE_HEAP_STORE($j, $11, "i32", 0);
 var $12=$1;
 var $13=_write($12,$j,4);
 $i=$13;
 var $14=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $15=($14|0)!=0;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 var $17=$1;
 var $18=$2;
 var $19=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $20=_write($17,$18,$19);
 var $21=$i;
 var $22=((($21)+($20))|0);
 $i=$22;
 label=6;break;
 case 6: 
 var $24=$i;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _take2($left,$rite,$axes){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $newleft;
 var $out;
 var $i;
 var $ip;
 var $j;
 var $k;
 var $rank;
 $2=$left;
 $3=$rite;
 $4=$axes;
 $newleft=0;
 $out=0;
 var $5=$4;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=$3;
 var $10=_take($8,$9);
 $1=$10;
 label=33;break;
 case 3: 
 label=4;break;
 case 4: 
 var $13=_errinit();
 var $14=($13|0)!=0;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 label=32;break;
 case 6: 
 var $17=$2;
 var $18=(($17+12)|0);
 var $19=SAFE_HEAP_LOAD($18, "i32", 0, 0);
 var $20=($19|0)>1;
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 SAFE_HEAP_STORE(4592, 15, "i32", 0);
 label=32;break;
 case 8: 
 var $23=$2;
 var $24=(($23+4)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=4&$25;
 var $27=($26|0)!=0;
 if($27){label=12;break;}else{label=9;break;}
 case 9: 
 var $29=$2;
 var $30=_integer($29);
 $2=$30;
 var $31=0==($30|0);
 if($31){label=10;break;}else{label=11;break;}
 case 10: 
 label=32;break;
 case 11: 
 label=12;break;
 case 12: 
 var $35=$4;
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=4&$37;
 var $39=($38|0)!=0;
 if($39){label=16;break;}else{label=13;break;}
 case 13: 
 var $41=$4;
 var $42=_integer($41);
 $4=$42;
 var $43=0==($42|0);
 if($43){label=14;break;}else{label=15;break;}
 case 14: 
 label=32;break;
 case 15: 
 label=16;break;
 case 16: 
 var $47=$2;
 var $48=(($47+8)|0);
 var $49=SAFE_HEAP_LOAD($48, "i32", 0, 0);
 var $50=$4;
 var $51=(($50+8)|0);
 var $52=SAFE_HEAP_LOAD($51, "i32", 0, 0);
 var $53=($49|0)!=($52|0);
 if($53){label=18;break;}else{label=17;break;}
 case 17: 
 var $55=$2;
 var $56=(($55+8)|0);
 var $57=SAFE_HEAP_LOAD($56, "i32", 0, 0);
 var $58=$3;
 var $59=(($58+12)|0);
 var $60=SAFE_HEAP_LOAD($59, "i32", 0, 0);
 var $61=($57|0)>($60|0);
 if($61){label=18;break;}else{label=19;break;}
 case 18: 
 SAFE_HEAP_STORE(4592, 16, "i32", 0);
 label=32;break;
 case 19: 
 var $64=$3;
 var $65=(($64+12)|0);
 var $66=SAFE_HEAP_LOAD($65, "i32", 0, 0);
 var $67=_getcb(0,$66,5,1,0);
 $newleft=$67;
 var $68=$newleft;
 var $69=($68|0)==0;
 if($69){label=20;break;}else{label=21;break;}
 case 20: 
 label=32;break;
 case 21: 
 var $72=$newleft;
 var $73=(($72)|0);
 var $74=$73;
 var $75=SAFE_HEAP_LOAD($74, "i32*", 0, 0);
 var $76=$75;
 var $77=$3;
 var $78=(($77+16)|0);
 var $79=SAFE_HEAP_LOAD($78, "i32*", 0, 0);
 var $80=$79;
 var $81=$newleft;
 var $82=(($81+8)|0);
 var $83=SAFE_HEAP_LOAD($82, "i32", 0, 0);
 var $84=_intcopy($76,$80,$83,1);
 var $85=$84;
 $ip=$85;
 $i=0;
 label=22;break;
 case 22: 
 var $87=$i;
 var $88=$4;
 var $89=(($88+8)|0);
 var $90=SAFE_HEAP_LOAD($89, "i32", 0, 0);
 var $91=($87|0)<($90|0);
 if($91){label=23;break;}else{label=29;break;}
 case 23: 
 var $93=$4;
 var $94=(($93)|0);
 var $95=$94;
 var $96=SAFE_HEAP_LOAD($95, "i32*", 0, 0);
 var $97=$i;
 var $98=(($96+($97<<2))|0);
 var $99=SAFE_HEAP_LOAD($98, "i32", 0, 0);
 var $100=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $101=((($99)-($100))|0);
 $j=$101;
 var $102=$j;
 var $103=($102|0)<0;
 if($103){label=25;break;}else{label=24;break;}
 case 24: 
 var $105=$j;
 var $106=$3;
 var $107=(($106+12)|0);
 var $108=SAFE_HEAP_LOAD($107, "i32", 0, 0);
 var $109=($105|0)>=($108|0);
 if($109){label=25;break;}else{label=26;break;}
 case 25: 
 SAFE_HEAP_STORE(4592, 9, "i32", 0);
 label=27;break;
 case 26: 
 var $112=$2;
 var $113=(($112)|0);
 var $114=$113;
 var $115=SAFE_HEAP_LOAD($114, "i32*", 0, 0);
 var $116=$i;
 var $117=(($115+($116<<2))|0);
 var $118=SAFE_HEAP_LOAD($117, "i32", 0, 0);
 var $119=$newleft;
 var $120=(($119)|0);
 var $121=$120;
 var $122=SAFE_HEAP_LOAD($121, "i32*", 0, 0);
 var $123=$j;
 var $124=(($122+($123<<2))|0);
 SAFE_HEAP_STORE($124, $118, "i32", 0);
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $127=$i;
 var $128=((($127)+(1))|0);
 $i=$128;
 label=22;break;
 case 29: 
 var $130=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $131=($130|0)!=0;
 if($131){label=30;break;}else{label=31;break;}
 case 30: 
 label=32;break;
 case 31: 
 var $134=$2;
 _endoper($134);
 var $135=$4;
 _endoper($135);
 var $136=$newleft;
 var $137=$3;
 var $138=_take($136,$137);
 $1=$138;
 label=33;break;
 case 32: 
 var $140=$newleft;
 _endoper($140);
 var $141=$4;
 _endoper($141);
 var $142=$2;
 var $143=$3;
 var $144=_errstop(0,$142,$143,0);
 $1=$144;
 label=33;break;
 case 33: 
 var $146=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $146;
  default: assert(0, "bad label: " + label);
 }

}


function _take($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 SAFE_HEAP_STORE($2, $left, "%struct.aplcb*", 0);
 SAFE_HEAP_STORE($3, $rite, "%struct.aplcb*", 0);
 var $4=_takeck($2,$3);
 var $5=1!=($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $8=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=4;break;
 case 3: 
 var $11=SAFE_HEAP_LOAD($2, "%struct.aplcb*", 0, 0);
 var $12=SAFE_HEAP_LOAD($3, "%struct.aplcb*", 0, 0);
 var $13=_takeit($11,$12);
 $1=$13;
 label=4;break;
 case 4: 
 var $15=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $15;
  default: assert(0, "bad label: " + label);
 }

}


function _takeck($pleft,$prite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $dimcb;
 $2=$pleft;
 $3=$prite;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=13;break;
 case 3: 
 var $8=$2;
 var $9=SAFE_HEAP_LOAD($8, "%struct.aplcb*", 0, 0);
 var $10=(($9+12)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=($11|0)>1;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 SAFE_HEAP_STORE(4592, 15, "i32", 0);
 $1=0;
 label=13;break;
 case 5: 
 var $15=$2;
 var $16=SAFE_HEAP_LOAD($15, "%struct.aplcb*", 0, 0);
 var $17=_vectin($16);
 var $18=$2;
 SAFE_HEAP_STORE($18, $17, "%struct.aplcb*", 0);
 var $19=0==($17|0);
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=13;break;
 case 7: 
 var $22=$3;
 var $23=SAFE_HEAP_LOAD($22, "%struct.aplcb*", 0, 0);
 var $24=(($23+12)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)==0;
 if($26){label=8;break;}else{label=9;break;}
 case 8: 
 var $28=$2;
 var $29=SAFE_HEAP_LOAD($28, "%struct.aplcb*", 0, 0);
 var $30=_shape($29);
 var $31=_iscalar(1);
 var $32=_reshape($30,$31);
 var $33=_ravel($32);
 var $34=$3;
 var $35=SAFE_HEAP_LOAD($34, "%struct.aplcb*", 0, 0);
 var $36=_reshape($33,$35);
 var $37=$3;
 SAFE_HEAP_STORE($37, $36, "%struct.aplcb*", 0);
 label=12;break;
 case 9: 
 var $39=$2;
 var $40=SAFE_HEAP_LOAD($39, "%struct.aplcb*", 0, 0);
 var $41=(($40+8)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=$3;
 var $44=SAFE_HEAP_LOAD($43, "%struct.aplcb*", 0, 0);
 var $45=(($44+12)|0);
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=($42|0)!=($46|0);
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 SAFE_HEAP_STORE(4592, 16, "i32", 0);
 $1=0;
 label=13;break;
 case 11: 
 label=12;break;
 case 12: 
 $1=1;
 label=13;break;
 case 13: 
 var $52=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $52;
  default: assert(0, "bad label: " + label);
 }

}


function _takefill($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ret;
 $1=$p;
 var $2=$1;
 var $3=(($2+32)|0);
 var $4=SAFE_HEAP_LOAD($3, "i32", 0, 0);
 switch(($4|0)){case 64:case 2:case 4:case 8:{ label=2;break;}case 32:{ label=3;break;}default:{label=6;break;}}break;
 case 2: 
 var $6=$1;
 var $7=(($6+28)|0);
 var $8=$7;
 var $9=SAFE_HEAP_LOAD($8, "i8*", 0, 0);
 $ret=$9;
 label=6;break;
 case 3: 
 var $11=$1;
 var $12=(($11+28)|0);
 var $13=$12;
 var $14=SAFE_HEAP_LOAD($13, "%struct.aplcb**", 0, 0);
 var $15=$14;
 $ret=$15;
 var $16=0==($15|0);
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$1;
 var $19=(($18+4)|0);
 var $20=SAFE_HEAP_LOAD($19, "%struct.aplcb*", 0, 0);
 var $21=_apltype($20);
 var $22=_perm($21);
 var $23=$1;
 var $24=(($23+56)|0);
 SAFE_HEAP_STORE($24, $22, "%struct.aplcb*", 0);
 var $25=$1;
 var $26=(($25+56)|0);
 var $27=SAFE_HEAP_LOAD($26, "%struct.aplcb*", 0, 0);
 var $28=(($27)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "%struct.aplcb**", 0, 0);
 var $31=$1;
 var $32=(($31+28)|0);
 var $33=$32;
 SAFE_HEAP_STORE($33, $30, "%struct.aplcb**", 0);
 var $34=$30;
 $ret=$34;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 var $37=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _takeit($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $out;
 var $p=sp;
 var $tempsave;
 var $cp;
 $1=$left;
 $2=$rite;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$5&1;
 $tempsave=$6;
 var $7=$tempsave;
 var $8=($7|0)!=0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=SAFE_HEAP_LOAD($11, "i32", 0, 0);
 var $13=((($12)-(1))|0);
 SAFE_HEAP_STORE($11, $13, "i32", 0);
 label=3;break;
 case 3: 
 var $15=(($p+16)|0);
 SAFE_HEAP_STORE($15, 0, "%struct.aplcb*", 0);
 var $16=(($p+12)|0);
 SAFE_HEAP_STORE($16, 0, "%struct.aplcb*", 0);
 var $17=$1;
 var $18=$2;
 var $19=$p;
 var $20=_takepset($17,$18,$19);
 $out=$20;
 var $21=$out;
 var $22=($21|0)!=0;
 if($22){label=4;break;}else{label=12;break;}
 case 4: 
 var $24=$out;
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=($26|0)!=0;
 if($27){label=5;break;}else{label=12;break;}
 case 5: 
 var $29=$out;
 var $30=(($29+12)|0);
 var $31=SAFE_HEAP_LOAD($30, "i32", 0, 0);
 var $32=($31|0)!=0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$p;
 _takesub(0,$34);
 label=11;break;
 case 7: 
 var $36=$2;
 var $37=(($36+8)|0);
 var $38=SAFE_HEAP_LOAD($37, "i32", 0, 0);
 var $39=($38|0)!=0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 var $41=$2;
 var $42=(($41)|0);
 var $43=$42;
 var $44=SAFE_HEAP_LOAD($43, "i8*", 0, 0);
 var $49=$44;label=10;break;
 case 9: 
 var $46=$p;
 var $47=_takefill($46);
 var $49=$47;label=10;break;
 case 10: 
 var $49;
 $cp=$49;
 var $50=$out;
 var $51=(($50)|0);
 var $52=$51;
 var $53=SAFE_HEAP_LOAD($52, "i8*", 0, 0);
 var $54=$cp;
 var $55=(($p+32)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=_dtacopy($53,$54,1,1,$56);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $60=(($p+12)|0);
 var $61=SAFE_HEAP_LOAD($60, "%struct.aplcb*", 0, 0);
 var $62=($61|0)!=0;
 if($62){label=13;break;}else{label=14;break;}
 case 13: 
 var $64=(($p+12)|0);
 var $65=SAFE_HEAP_LOAD($64, "%struct.aplcb*", 0, 0);
 var $66=_temp($65);
 _endoper($66);
 label=14;break;
 case 14: 
 var $68=(($p+16)|0);
 var $69=SAFE_HEAP_LOAD($68, "%struct.aplcb*", 0, 0);
 var $70=($69|0)!=0;
 if($70){label=15;break;}else{label=16;break;}
 case 15: 
 var $72=(($p+16)|0);
 var $73=SAFE_HEAP_LOAD($72, "%struct.aplcb*", 0, 0);
 var $74=_temp($73);
 _endoper($74);
 label=16;break;
 case 16: 
 var $76=(($p+56)|0);
 var $77=SAFE_HEAP_LOAD($76, "%struct.aplcb*", 0, 0);
 var $78=($77|0)!=0;
 if($78){label=17;break;}else{label=18;break;}
 case 17: 
 var $80=(($p+56)|0);
 var $81=SAFE_HEAP_LOAD($80, "%struct.aplcb*", 0, 0);
 var $82=_temp($81);
 _endoper($82);
 label=18;break;
 case 18: 
 var $84=$tempsave;
 var $85=$2;
 var $86=(($85+4)|0);
 var $87=SAFE_HEAP_LOAD($86, "i32", 0, 0);
 var $88=((($87)+($84))|0);
 SAFE_HEAP_STORE($86, $88, "i32", 0);
 var $89=$1;
 var $90=_temp($89);
 var $91=$2;
 var $92=$out;
 var $93=_errstop(0,$90,$91,$92);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $93;
  default: assert(0, "bad label: " + label);
 }

}


function _takepset($left,$rite,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $dimcb;
 var $out;
 var $datatyp;
 var $ip;
 var $itimesid=sp;
 var $tempsave;
 $2=$left;
 $3=$rite;
 $4=$p;
 $out=0;
 SAFE_HEAP_STORE($itimesid, 0, "i32", 0);
 var $5=$4;
 var $6=(($5+16)|0);
 SAFE_HEAP_STORE($6, 0, "%struct.aplcb*", 0);
 var $7=$4;
 var $8=(($7+12)|0);
 SAFE_HEAP_STORE($8, 0, "%struct.aplcb*", 0);
 var $9=$3;
 var $10=(($9+4)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $12=$11&110;
 $datatyp=$12;
 var $13=$2;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "i32", 0, 0);
 var $16=($15|0)==0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=$datatyp;
 var $19=((($18)+(1))|0);
 var $20=_getcb(0,1,$19,0,0);
 $out=$20;
 label=14;break;
 case 3: 
 var $22=$2;
 var $23=_imonadic((384),$22);
 $dimcb=$23;
 var $24=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $25=($24|0)!=0;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=$2;
 var $28=$3;
 var $29=$dimcb;
 var $30=_errstop(0,$27,$28,$29);
 $1=$30;
 label=20;break;
 case 5: 
 var $32=$dimcb;
 var $33=(($32+4)|0);
 var $34=SAFE_HEAP_LOAD($33, "i32", 0, 0);
 var $35=((($34)-(1))|0);
 SAFE_HEAP_STORE($33, $35, "i32", 0);
 var $36=$dimcb;
 var $37=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $38=_ireduce((72),$itimesid,$36,$37);
 var $39=_ivalue($38);
 var $40=$datatyp;
 var $41=((($40)+(1))|0);
 var $42=$dimcb;
 var $43=(($42+8)|0);
 var $44=SAFE_HEAP_LOAD($43, "i32", 0, 0);
 var $45=_getcb(0,$39,$41,$44,0);
 $out=$45;
 var $46=$out;
 var $47=($46|0)==0;
 if($47){label=6;break;}else{label=7;break;}
 case 6: 
 var $49=$2;
 var $50=$3;
 var $51=$out;
 var $52=_errstop(0,$49,$50,$51);
 $1=$52;
 label=20;break;
 case 7: 
 var $54=$dimcb;
 var $55=(($54+8)|0);
 var $56=SAFE_HEAP_LOAD($55, "i32", 0, 0);
 var $57=($56|0)!=0;
 if($57){label=8;break;}else{label=9;break;}
 case 8: 
 var $59=$out;
 var $60=(($59+16)|0);
 var $61=SAFE_HEAP_LOAD($60, "i32*", 0, 0);
 var $62=$61;
 var $63=$dimcb;
 var $64=(($63)|0);
 var $65=$64;
 var $66=SAFE_HEAP_LOAD($65, "i32*", 0, 0);
 var $67=$66;
 var $68=$dimcb;
 var $69=(($68+8)|0);
 var $70=SAFE_HEAP_LOAD($69, "i32", 0, 0);
 var $71=_intcopy($62,$67,$70,1);
 var $72=$71;
 $ip=$72;
 label=9;break;
 case 9: 
 var $74=$dimcb;
 var $75=(($74+4)|0);
 var $76=SAFE_HEAP_LOAD($75, "i32", 0, 0);
 var $77=((($76)+(1))|0);
 SAFE_HEAP_STORE($75, $77, "i32", 0);
 var $78=_iscalar(1);
 var $79=$dimcb;
 var $80=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $81=_reverse($79,$80);
 var $82=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $83=_iscan((72),$itimesid,$81,$82);
 var $84=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $85=_cat($78,$83,$84);
 var $86=$4;
 var $87=(($86+16)|0);
 SAFE_HEAP_STORE($87, $85, "%struct.aplcb*", 0);
 var $88=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $89=($88|0)!=0;
 if($89){label=10;break;}else{label=11;break;}
 case 10: 
 var $91=$2;
 var $92=$3;
 var $93=$out;
 var $94=_errstop(0,$91,$92,$93);
 $1=$94;
 label=20;break;
 case 11: 
 var $96=_iscalar(1);
 var $97=$3;
 var $98=_shape($97);
 var $99=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $100=_reverse($98,$99);
 var $101=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $102=_iscan((72),$itimesid,$100,$101);
 var $103=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $104=_cat($96,$102,$103);
 var $105=$4;
 var $106=(($105+12)|0);
 SAFE_HEAP_STORE($106, $104, "%struct.aplcb*", 0);
 var $107=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $108=($107|0)!=0;
 if($108){label=12;break;}else{label=13;break;}
 case 12: 
 var $110=$2;
 var $111=$3;
 var $112=$out;
 var $113=_errstop(0,$110,$111,$112);
 $1=$113;
 label=20;break;
 case 13: 
 label=14;break;
 case 14: 
 var $116=$2;
 var $117=$4;
 var $118=(($117)|0);
 SAFE_HEAP_STORE($118, $116, "%struct.aplcb*", 0);
 var $119=$3;
 var $120=$4;
 var $121=(($120+4)|0);
 SAFE_HEAP_STORE($121, $119, "%struct.aplcb*", 0);
 var $122=$out;
 var $123=$4;
 var $124=(($123+8)|0);
 SAFE_HEAP_STORE($124, $122, "%struct.aplcb*", 0);
 var $125=$3;
 var $126=(($125)|0);
 var $127=$126;
 var $128=SAFE_HEAP_LOAD($127, "double*", 0, 0);
 var $129=$4;
 var $130=(($129+20)|0);
 var $131=$130;
 SAFE_HEAP_STORE($131, $128, "double*", 0);
 var $132=$out;
 var $133=(($132)|0);
 var $134=$133;
 var $135=SAFE_HEAP_LOAD($134, "double*", 0, 0);
 var $136=$4;
 var $137=(($136+24)|0);
 var $138=$137;
 SAFE_HEAP_STORE($138, $135, "double*", 0);
 var $139=$out;
 var $140=(($139+4)|0);
 var $141=SAFE_HEAP_LOAD($140, "i32", 0, 0);
 var $142=$141&110;
 var $143=$4;
 var $144=(($143+32)|0);
 SAFE_HEAP_STORE($144, $142, "i32", 0);
 var $145=$4;
 var $146=(($145+40)|0);
 SAFE_HEAP_STORE($146, 0, "double", 0);
 var $147=$4;
 var $148=(($147+48)|0);
 SAFE_HEAP_STORE($148, 0, "i32", 0);
 var $149=$4;
 var $150=(($149+52)|0);
 SAFE_HEAP_STORE($150, 32, "i8", 0);
 var $151=$4;
 var $152=(($151+56)|0);
 SAFE_HEAP_STORE($152, 0, "%struct.aplcb*", 0);
 var $153=$4;
 var $154=(($153+32)|0);
 var $155=SAFE_HEAP_LOAD($154, "i32", 0, 0);
 if(($155|0)==2){ label=15;break;}else if(($155|0)==4){ label=16;break;}else if(($155|0)==8){ label=17;break;}else if(($155|0)==32){ label=18;break;}else{label=19;break;}
 case 15: 
 var $157=$4;
 var $158=(($157+40)|0);
 var $159=$4;
 var $160=(($159+28)|0);
 var $161=$160;
 SAFE_HEAP_STORE($161, $158, "double*", 0);
 label=19;break;
 case 16: 
 var $163=$4;
 var $164=(($163+48)|0);
 var $165=$4;
 var $166=(($165+28)|0);
 var $167=$166;
 SAFE_HEAP_STORE($167, $164, "i32*", 0);
 label=19;break;
 case 17: 
 var $169=$4;
 var $170=(($169+52)|0);
 var $171=$4;
 var $172=(($171+28)|0);
 var $173=$172;
 SAFE_HEAP_STORE($173, $170, "i8*", 0);
 label=19;break;
 case 18: 
 var $175=$4;
 var $176=(($175+28)|0);
 var $177=$176;
 SAFE_HEAP_STORE($177, 0, "%struct.aplcb**", 0);
 label=19;break;
 case 19: 
 var $179=$out;
 $1=$179;
 label=20;break;
 case 20: 
 var $181=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $181;
  default: assert(0, "bad label: " + label);
 }

}


function _takesub($level,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $headcnt;
 var $headmax;
 var $iels;
 var $inamt;
 var $incnt;
 var $ix;
 var $oels;
 var $outcnt;
 var $rix;
 var $subcnt;
 var $takecnt;
 var $cp;
 var $dp;
 var $ep;
 var $fp;
 var $gp;
 var $hp;
 $2=$level;
 $3=$p;
 var $4=$3;
 var $5=(($4+8)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.aplcb*", 0, 0);
 var $7=(($6+16)|0);
 var $8=SAFE_HEAP_LOAD($7, "i32*", 0, 0);
 var $9=$2;
 var $10=(($8+($9<<2))|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 $outcnt=$11;
 var $12=$3;
 var $13=(($12)|0);
 var $14=SAFE_HEAP_LOAD($13, "%struct.aplcb*", 0, 0);
 var $15=(($14)|0);
 var $16=$15;
 var $17=SAFE_HEAP_LOAD($16, "i32*", 0, 0);
 var $18=$2;
 var $19=(($17+($18<<2))|0);
 var $20=SAFE_HEAP_LOAD($19, "i32", 0, 0);
 $takecnt=$20;
 var $21=$3;
 var $22=(($21+4)|0);
 var $23=SAFE_HEAP_LOAD($22, "%struct.aplcb*", 0, 0);
 var $24=(($23+12)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=($25|0)!=0;
 if($26){label=2;break;}else{label=3;break;}
 case 2: 
 var $28=$3;
 var $29=(($28+4)|0);
 var $30=SAFE_HEAP_LOAD($29, "%struct.aplcb*", 0, 0);
 var $31=(($30+16)|0);
 var $32=SAFE_HEAP_LOAD($31, "i32*", 0, 0);
 var $33=$2;
 var $34=(($32+($33<<2))|0);
 var $35=SAFE_HEAP_LOAD($34, "i32", 0, 0);
 $incnt=$35;
 label=4;break;
 case 3: 
 $incnt=1;
 label=4;break;
 case 4: 
 var $38=$3;
 var $39=(($38+8)|0);
 var $40=SAFE_HEAP_LOAD($39, "%struct.aplcb*", 0, 0);
 var $41=(($40+12)|0);
 var $42=SAFE_HEAP_LOAD($41, "i32", 0, 0);
 var $43=((($42)-(1))|0);
 var $44=$2;
 var $45=((($43)-($44))|0);
 $ix=$45;
 var $46=$3;
 var $47=(($46+12)|0);
 var $48=SAFE_HEAP_LOAD($47, "%struct.aplcb*", 0, 0);
 var $49=(($48)|0);
 var $50=$49;
 var $51=SAFE_HEAP_LOAD($50, "i32*", 0, 0);
 var $52=$ix;
 var $53=(($51+($52<<2))|0);
 var $54=SAFE_HEAP_LOAD($53, "i32", 0, 0);
 $iels=$54;
 var $55=$3;
 var $56=(($55+16)|0);
 var $57=SAFE_HEAP_LOAD($56, "%struct.aplcb*", 0, 0);
 var $58=(($57)|0);
 var $59=$58;
 var $60=SAFE_HEAP_LOAD($59, "i32*", 0, 0);
 var $61=$ix;
 var $62=(($60+($61<<2))|0);
 var $63=SAFE_HEAP_LOAD($62, "i32", 0, 0);
 $oels=$63;
 var $64=$3;
 var $65=(($64+20)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "i8*", 0, 0);
 $cp=$67;
 var $68=$takecnt;
 var $69=0>($68|0);
 if($69){label=5;break;}else{label=9;break;}
 case 5: 
 var $71=$incnt;
 var $72=$takecnt;
 var $73=((($72)+($71))|0);
 $takecnt=$73;
 var $74=0>($73|0);
 if($74){label=6;break;}else{label=7;break;}
 case 6: 
 var $76=$3;
 var $77=(($76+24)|0);
 var $78=$77;
 var $79=SAFE_HEAP_LOAD($78, "i8*", 0, 0);
 var $80=$3;
 var $81=$80;
 var $82=_takefill($81);
 var $83=$takecnt;
 var $84=(((-$83))|0);
 var $85=$oels;
 var $86=(Math_imul($84,$85)|0);
 var $87=$3;
 var $88=(($87+32)|0);
 var $89=SAFE_HEAP_LOAD($88, "i32", 0, 0);
 var $90=_dtacopy($79,$82,$86,0,$89);
 var $91=$3;
 var $92=(($91+24)|0);
 var $93=$92;
 SAFE_HEAP_STORE($93, $90, "i8*", 0);
 var $94=$takecnt;
 var $95=$outcnt;
 var $96=((($95)+($94))|0);
 $outcnt=$96;
 label=8;break;
 case 7: 
 var $98=$takecnt;
 var $99=$iels;
 var $100=(Math_imul($98,$99)|0);
 var $101=$3;
 var $102=(($101+8)|0);
 var $103=SAFE_HEAP_LOAD($102, "%struct.aplcb*", 0, 0);
 var $104=(($103+20)|0);
 var $105=SAFE_HEAP_LOAD($104, "i32", 0, 0);
 var $106=(Math_imul($100,$105)|0);
 var $107=$cp;
 var $108=(($107+$106)|0);
 $cp=$108;
 var $109=$takecnt;
 var $110=$incnt;
 var $111=((($110)-($109))|0);
 $incnt=$111;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $114=$outcnt;
 var $115=$incnt;
 var $116=_imin($114,$115);
 $inamt=$116;
 var $117=$2;
 var $118=((($117)+(1))|0);
 var $119=$3;
 var $120=(($119+8)|0);
 var $121=SAFE_HEAP_LOAD($120, "%struct.aplcb*", 0, 0);
 var $122=(($121+12)|0);
 var $123=SAFE_HEAP_LOAD($122, "i32", 0, 0);
 var $124=($118|0)<($123|0);
 if($124){label=10;break;}else{label=15;break;}
 case 10: 
 $rix=0;
 label=11;break;
 case 11: 
 var $127=$rix;
 var $128=$inamt;
 var $129=($127|0)<($128|0);
 if($129){label=12;break;}else{label=14;break;}
 case 12: 
 var $131=$cp;
 var $132=$rix;
 var $133=$iels;
 var $134=(Math_imul($132,$133)|0);
 var $135=$3;
 var $136=(($135+8)|0);
 var $137=SAFE_HEAP_LOAD($136, "%struct.aplcb*", 0, 0);
 var $138=(($137+20)|0);
 var $139=SAFE_HEAP_LOAD($138, "i32", 0, 0);
 var $140=(Math_imul($134,$139)|0);
 var $141=(($131+$140)|0);
 var $142=$3;
 var $143=(($142+20)|0);
 var $144=$143;
 SAFE_HEAP_STORE($144, $141, "i8*", 0);
 var $145=$2;
 var $146=((($145)+(1))|0);
 var $147=$3;
 var $148=_takesub($146,$147);
 label=13;break;
 case 13: 
 var $150=$rix;
 var $151=((($150)+(1))|0);
 $rix=$151;
 label=11;break;
 case 14: 
 label=16;break;
 case 15: 
 var $154=$3;
 var $155=(($154+24)|0);
 var $156=$155;
 var $157=SAFE_HEAP_LOAD($156, "i8*", 0, 0);
 var $158=$cp;
 var $159=$inamt;
 var $160=$3;
 var $161=(($160+32)|0);
 var $162=SAFE_HEAP_LOAD($161, "i32", 0, 0);
 var $163=_dtacopy($157,$158,$159,1,$162);
 var $164=$3;
 var $165=(($164+24)|0);
 var $166=$165;
 SAFE_HEAP_STORE($166, $163, "i8*", 0);
 label=16;break;
 case 16: 
 var $168=$inamt;
 var $169=$outcnt;
 var $170=((($169)-($168))|0);
 $outcnt=$170;
 var $171=($170|0)!=0;
 if($171){label=17;break;}else{label=18;break;}
 case 17: 
 var $173=$3;
 var $174=(($173+24)|0);
 var $175=$174;
 var $176=SAFE_HEAP_LOAD($175, "i8*", 0, 0);
 var $177=$3;
 var $178=$177;
 var $179=_takefill($178);
 var $180=$outcnt;
 var $181=$oels;
 var $182=(Math_imul($180,$181)|0);
 var $183=$3;
 var $184=(($183+32)|0);
 var $185=SAFE_HEAP_LOAD($184, "i32", 0, 0);
 var $186=_dtacopy($176,$179,$182,0,$185);
 var $187=$3;
 var $188=(($187+24)|0);
 var $189=$188;
 SAFE_HEAP_STORE($189, $186, "i8*", 0);
 label=18;break;
 case 18: 
 var $191=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $191;
  default: assert(0, "bad label: " + label);
 }

}


function _temp($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$rite;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$1;
 var $6=(($5+4)|0);
 var $7=SAFE_HEAP_LOAD($6, "i32", 0, 0);
 var $8=$7|1;
 SAFE_HEAP_STORE($6, $8, "i32", 0);
 label=3;break;
 case 3: 
 var $10=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $10;
  default: assert(0, "bad label: " + label);
 }

}


function _times($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$left;
 $2=$rite;
 var $3=$1;
 var $4=$2;
 var $5=($3)*($4);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $5;
}


function _timesp($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)*($7);
 var $9=$3;
 SAFE_HEAP_STORE($9, $8, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _timesx($left,$rite,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$left;
 $2=$rite;
 $3=$ret;
 var $4=$1;
 var $5=SAFE_HEAP_LOAD($4, "double", 0, 0);
 var $6=$2;
 var $7=SAFE_HEAP_LOAD($6, "double", 0, 0);
 var $8=($5)*($7);
 var $9=$1;
 var $10=(($9+8)|0);
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 var $12=$2;
 var $13=(($12+8)|0);
 var $14=SAFE_HEAP_LOAD($13, "double", 0, 0);
 var $15=($11)*($14);
 var $16=($8)-($15);
 var $17=$3;
 SAFE_HEAP_STORE($17, $16, "double", 0);
 var $18=$2;
 var $19=SAFE_HEAP_LOAD($18, "double", 0, 0);
 var $20=$1;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "double", 0, 0);
 var $23=($19)*($22);
 var $24=$1;
 var $25=SAFE_HEAP_LOAD($24, "double", 0, 0);
 var $26=$2;
 var $27=(($26+8)|0);
 var $28=SAFE_HEAP_LOAD($27, "double", 0, 0);
 var $29=($25)*($28);
 var $30=($23)+($29);
 var $31=$3;
 var $32=(($31+8)|0);
 SAFE_HEAP_STORE($32, $30, "double", 0);
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
}


function _tokcopy($totok,$fromtok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cb;
 var $cp;
 $1=$totok;
 $2=$fromtok;
 var $3=$2;
 var $4=(($3)|0);
 var $5=$4;
 var $6=SAFE_HEAP_LOAD($5, "%struct.apltoken*", 0, 0);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$1;
 var $10=(($9)|0);
 var $11=$10;
 SAFE_HEAP_STORE($11, 0, "%struct.apltoken*", 0);
 label=4;break;
 case 3: 
 var $13=$1;
 var $14=(($13+24)|0);
 var $15=$1;
 var $16=(($15)|0);
 var $17=$16;
 SAFE_HEAP_STORE($17, $14, "%struct.apltoken*", 0);
 label=4;break;
 case 4: 
 var $19=$2;
 var $20=(($19+4)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=$1;
 var $23=(($22+4)|0);
 SAFE_HEAP_STORE($23, $21, "i32", 0);
 var $24=$2;
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=$1;
 var $28=(($27+8)|0);
 SAFE_HEAP_STORE($28, $26, "i32", 0);
 var $29=$1;
 var $30=(($29+16)|0);
 SAFE_HEAP_STORE($30, 1, "i32", 0);
 var $31=$2;
 var $32=(($31+4)|0);
 var $33=SAFE_HEAP_LOAD($32, "i32", 0, 0);
 if(($33|0)==7|($33|0)==-3){ label=5;break;}else if(($33|0)==-4){ label=6;break;}else{label=9;break;}
 case 5: 
 var $35=$2;
 var $36=(($35+12)|0);
 var $37=$36;
 var $38=SAFE_HEAP_LOAD($37, "%struct.aplcb*", 0, 0);
 var $39=_aplcopy($38);
 var $40=$1;
 var $41=(($40+12)|0);
 var $42=$41;
 SAFE_HEAP_STORE($42, $39, "%struct.aplcb*", 0);
 $cb=$39;
 label=10;break;
 case 6: 
 var $44=$2;
 var $45=(($44+12)|0);
 var $46=$45;
 var $47=SAFE_HEAP_LOAD($46, "i8*", 0, 0);
 var $48=_strlen($47);
 var $49=((($48)+(1))|0);
 var $50=_aplmall($49);
 var $51=$1;
 var $52=(($51+12)|0);
 var $53=$52;
 SAFE_HEAP_STORE($53, $50, "i8*", 0);
 $cp=$50;
 var $54=$cp;
 var $55=($54|0)==0;
 if($55){label=7;break;}else{label=8;break;}
 case 7: 
 label=10;break;
 case 8: 
 var $58=$cp;
 var $59=$2;
 var $60=(($59+12)|0);
 var $61=$60;
 var $62=SAFE_HEAP_LOAD($61, "i8*", 0, 0);
 var $63=_strcpy($58,$62);
 label=10;break;
 case 9: 
 var $65=$1;
 var $66=(($65+12)|0);
 var $67=$66;
 SAFE_HEAP_STORE($67, 0, "i8*", 0);
 label=10;break;
 case 10: 
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _transpos($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $indxsave;
 var $tempsave;
 var $out;
 $2=$left;
 $3=$rite;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=8;break;
 case 3: 
 var $11=$3;
 var $12=(($11+12)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=0==($13|0);
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$3;
 var $17=_vectin($16);
 var $18=_temp($17);
 $3=$18;
 label=5;break;
 case 5: 
 var $20=$3;
 var $21=(($20+4)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=$22&1;
 $tempsave=$23;
 var $24=($23|0)!=0;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$3;
 var $27=(($26+4)|0);
 var $28=SAFE_HEAP_LOAD($27, "i32", 0, 0);
 var $29=((($28)-(1))|0);
 SAFE_HEAP_STORE($27, $29, "i32", 0);
 label=7;break;
 case 7: 
 var $31=$2;
 var $32=$3;
 var $33=_transpot($31,$32);
 $out=$33;
 var $34=$tempsave;
 var $35=$3;
 var $36=(($35+4)|0);
 var $37=SAFE_HEAP_LOAD($36, "i32", 0, 0);
 var $38=((($37)+($34))|0);
 SAFE_HEAP_STORE($36, $38, "i32", 0);
 var $39=$3;
 var $40=$out;
 var $41=_errstop(0,0,$39,$40);
 $1=$41;
 label=8;break;
 case 8: 
 var $43=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $43;
  default: assert(0, "bad label: " + label);
 }

}


function _transpot($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $dimcb;
 var $testcb;
 var $factor;
 var $axis;
 var $dp;
 var $i;
 var $iorid=sp;
 var $ip;
 var $iplusid=(sp)+(8);
 var $j;
 var $k;
 var $m;
 var $n;
 var $outrank;
 var $riterank;
 var $icp;
 var $ocp;
 $2=$left;
 $3=$rite;
 SAFE_HEAP_STORE($iorid, 0, "i32", 0);
 SAFE_HEAP_STORE($iplusid, 0, "i32", 0);
 var $4=$3;
 var $5=(($4+12)|0);
 var $6=SAFE_HEAP_LOAD($5, "i32", 0, 0);
 var $7=($6|0)>1;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$3;
 var $10=(($9+12)|0);
 var $11=SAFE_HEAP_LOAD($10, "i32", 0, 0);
 var $14=$11;label=4;break;
 case 3: 
 var $14=1;label=4;break;
 case 4: 
 var $14;
 $riterank=$14;
 var $15=$2;
 var $16=0==($15|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 var $18=$riterank;
 var $19=(((-$18))|0);
 var $20=_indxsub($19);
 var $21=_perm($20);
 $2=$21;
 label=11;break;
 case 6: 
 var $23=$2;
 var $24=(($23+8)|0);
 var $25=SAFE_HEAP_LOAD($24, "i32", 0, 0);
 var $26=$riterank;
 var $27=($25|0)!=($26|0);
 if($27){label=7;break;}else{label=8;break;}
 case 7: 
 var $29=$2;
 var $30=$3;
 var $31=_errstop(32,$29,$30,0);
 $1=$31;
 label=28;break;
 case 8: 
 var $33=$2;
 var $34=_vectin($33);
 $2=$34;
 var $35=0==($34|0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$2;
 var $38=$3;
 var $39=_errstop(0,$37,$38,0);
 $1=$39;
 label=28;break;
 case 10: 
 label=11;break;
 case 11: 
 var $42=$2;
 var $43=_shape($42);
 var $44=_iscalar(1);
 var $45=_reshape($43,$44);
 var $46=_perm($45);
 $testcb=$46;
 var $47=$testcb;
 var $48=$2;
 var $49=_iscalar(0);
 var $50=_indexv($47,$48,$49);
 var $51=_endoper($50);
 var $52=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $53=($52|0)!=0;
 if($53){label=12;break;}else{label=13;break;}
 case 12: 
 var $55=$2;
 var $56=_temp($55);
 var $57=$testcb;
 var $58=_temp($57);
 var $59=$3;
 var $60=_errstop(0,$56,$58,$59);
 $1=$60;
 label=28;break;
 case 13: 
 var $62=$2;
 var $63=(($62+8)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 var $65=$testcb;
 var $66=$testcb;
 var $67=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $68=_iscan((352),$iorid,$66,$67);
 var $69=_idyadic((88),$65,$68);
 var $70=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $71=_ireduce((344),$iplusid,$69,$70);
 var $72=_ivalue($71);
 var $73=($64|0)!=($72|0);
 if($73){label=14;break;}else{label=15;break;}
 case 14: 
 var $75=$2;
 var $76=_temp($75);
 var $77=$testcb;
 var $78=_temp($77);
 var $79=$3;
 var $80=_errstop(33,$76,$78,$79);
 $1=$80;
 label=28;break;
 case 15: 
 var $82=$testcb;
 var $83=_temp($82);
 var $84=_imonadic((138),$83);
 var $85=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $86=_ireduce((344),$iplusid,$84,$85);
 var $87=_ivalue($86);
 $outrank=$87;
 var $88=$outrank;
 var $89=_getcb(0,$88,4,1,0);
 $dimcb=$89;
 var $90=$dimcb;
 var $91=($90|0)==0;
 if($91){label=16;break;}else{label=17;break;}
 case 16: 
 var $93=$2;
 var $94=$3;
 var $95=_errstop(0,$93,$94,0);
 $1=$95;
 label=28;break;
 case 17: 
 var $97=$dimcb;
 var $98=(($97)|0);
 var $99=$98;
 var $100=SAFE_HEAP_LOAD($99, "i32*", 0, 0);
 var $101=$100;
 var $102=$outrank;
 var $103=_intcopy($101,2384,$102,0);
 var $104=$3;
 var $105=(($104+12)|0);
 var $106=SAFE_HEAP_LOAD($105, "i32", 0, 0);
 var $107=($106|0)!=0;
 if($107){label=18;break;}else{label=27;break;}
 case 18: 
 $i=0;
 label=19;break;
 case 19: 
 var $110=$i;
 var $111=$riterank;
 var $112=($110|0)<($111|0);
 if($112){label=20;break;}else{label=26;break;}
 case 20: 
 var $114=$3;
 var $115=(($114+16)|0);
 var $116=SAFE_HEAP_LOAD($115, "i32*", 0, 0);
 var $117=$i;
 var $118=(($116+($117<<2))|0);
 var $119=SAFE_HEAP_LOAD($118, "i32", 0, 0);
 $m=$119;
 var $120=$2;
 var $121=(($120)|0);
 var $122=$121;
 var $123=SAFE_HEAP_LOAD($122, "i32*", 0, 0);
 var $124=$i;
 var $125=(($123+($124<<2))|0);
 var $126=SAFE_HEAP_LOAD($125, "i32", 0, 0);
 var $127=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $128=((($126)-($127))|0);
 $j=$128;
 var $129=$dimcb;
 var $130=(($129)|0);
 var $131=$130;
 var $132=SAFE_HEAP_LOAD($131, "i32*", 0, 0);
 var $133=$j;
 var $134=(($132+($133<<2))|0);
 var $135=SAFE_HEAP_LOAD($134, "i32", 0, 0);
 $n=$135;
 var $136=$n;
 var $137=($136|0)==-1;
 if($137){label=22;break;}else{label=21;break;}
 case 21: 
 var $139=$m;
 var $140=$n;
 var $141=($139|0)<($140|0);
 if($141){label=22;break;}else{label=23;break;}
 case 22: 
 var $143=$m;
 var $147=$143;label=24;break;
 case 23: 
 var $145=$n;
 var $147=$145;label=24;break;
 case 24: 
 var $147;
 var $148=$dimcb;
 var $149=(($148)|0);
 var $150=$149;
 var $151=SAFE_HEAP_LOAD($150, "i32*", 0, 0);
 var $152=$j;
 var $153=(($151+($152<<2))|0);
 SAFE_HEAP_STORE($153, $147, "i32", 0);
 label=25;break;
 case 25: 
 var $155=$i;
 var $156=((($155)+(1))|0);
 $i=$156;
 label=19;break;
 case 26: 
 label=27;break;
 case 27: 
 var $159=$3;
 var $160=_shape($159);
 var $161=_getfact($160);
 $factor=$161;
 var $162=$2;
 var $163=$3;
 var $164=$dimcb;
 var $165=$factor;
 var $166=$outrank;
 var $167=_transpou($162,$163,$164,$165,$166);
 $1=$167;
 label=28;break;
 case 28: 
 var $169=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $169;
  default: assert(0, "bad label: " + label);
 }

}


function _transpou($left,$rite,$dimcb,$factor,$newrank){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $axis;
 var $datacnt;
 var $datatyp;
 var $dimptr;
 var $dp;
 var $i;
 var $ip;
 var $iplusid;
 var $itimesid=sp;
 var $ix;
 var $j;
 var $k;
 var $maxaxis;
 var $size;
 var $icp;
 var $ocp;
 var $out;
 $2=$left;
 $3=$rite;
 $4=$dimcb;
 $5=$factor;
 $6=$newrank;
 $iplusid=0;
 SAFE_HEAP_STORE($itimesid, 1, "i32", 0);
 var $7=$3;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&110;
 $datatyp=$10;
 var $11=$4;
 var $12=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $13=_ireduce((72),$itimesid,$11,$12);
 var $14=_ivalue($13);
 $datacnt=$14;
 var $15=$datacnt;
 var $16=$datatyp;
 var $17=((($16)+(1))|0);
 var $18=$6;
 var $19=_getcb(0,$15,$17,$18,0);
 $out=$19;
 var $20=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $21=($20|0)!=0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 var $23=$2;
 var $24=$3;
 var $25=$out;
 var $26=_errstop(0,$23,$24,$25);
 $1=$26;
 label=22;break;
 case 3: 
 var $28=$out;
 var $29=(($28+16)|0);
 var $30=SAFE_HEAP_LOAD($29, "i32*", 0, 0);
 var $31=$30;
 var $32=$4;
 var $33=(($32)|0);
 var $34=$33;
 var $35=SAFE_HEAP_LOAD($34, "i32*", 0, 0);
 var $36=$35;
 var $37=$out;
 var $38=(($37+12)|0);
 var $39=SAFE_HEAP_LOAD($38, "i32", 0, 0);
 var $40=_intcopy($31,$36,$39,1);
 var $41=$40;
 $ip=$41;
 var $42=$4;
 var $43=(($42)|0);
 var $44=$43;
 var $45=SAFE_HEAP_LOAD($44, "i32*", 0, 0);
 $dimptr=$45;
 $i=0;
 label=4;break;
 case 4: 
 var $47=$i;
 var $48=$4;
 var $49=(($48+8)|0);
 var $50=SAFE_HEAP_LOAD($49, "i32", 0, 0);
 var $51=($47|0)<($50|0);
 if($51){label=5;break;}else{label=7;break;}
 case 5: 
 var $53=$dimptr;
 var $54=$i;
 var $55=(($53+($54<<2))|0);
 SAFE_HEAP_STORE($55, 0, "i32", 0);
 label=6;break;
 case 6: 
 var $57=$i;
 var $58=((($57)+(1))|0);
 $i=$58;
 label=4;break;
 case 7: 
 var $60=$4;
 var $61=(($60+8)|0);
 var $62=SAFE_HEAP_LOAD($61, "i32", 0, 0);
 var $63=((($62)-(1))|0);
 $maxaxis=$63;
 $axis=$63;
 var $64=$3;
 var $65=(($64)|0);
 var $66=$65;
 var $67=SAFE_HEAP_LOAD($66, "i8*", 0, 0);
 $icp=$67;
 var $68=$out;
 var $69=(($68)|0);
 var $70=$69;
 var $71=SAFE_HEAP_LOAD($70, "i8*", 0, 0);
 $ocp=$71;
 var $72=$out;
 var $73=(($72+20)|0);
 var $74=SAFE_HEAP_LOAD($73, "i32", 0, 0);
 $size=$74;
 $ix=0;
 $i=0;
 label=8;break;
 case 8: 
 var $76=$ocp;
 var $77=$icp;
 var $78=$ix;
 var $79=$size;
 var $80=(Math_imul($78,$79)|0);
 var $81=(($77+$80)|0);
 var $82=$datatyp;
 var $83=_dtacopy($76,$81,1,1,$82);
 $ocp=$83;
 var $84=$out;
 var $85=(($84+8)|0);
 var $86=SAFE_HEAP_LOAD($85, "i32", 0, 0);
 var $87=$i;
 var $88=((($87)+(1))|0);
 $i=$88;
 var $89=($86|0)==($88|0);
 if($89){label=9;break;}else{label=10;break;}
 case 9: 
 label=21;break;
 case 10: 
 label=11;break;
 case 11: 
 var $93=$dimptr;
 var $94=$axis;
 var $95=(($93+($94<<2))|0);
 var $96=SAFE_HEAP_LOAD($95, "i32", 0, 0);
 var $97=((($96)+(1))|0);
 SAFE_HEAP_STORE($95, $97, "i32", 0);
 $j=$97;
 var $98=$j;
 var $99=$out;
 var $100=(($99+16)|0);
 var $101=SAFE_HEAP_LOAD($100, "i32*", 0, 0);
 var $102=$axis;
 var $103=(($101+($102<<2))|0);
 var $104=SAFE_HEAP_LOAD($103, "i32", 0, 0);
 var $105=($98|0)==($104|0);
 if($105){label=12;break;}else{label=13;break;}
 case 12: 
 var $107=$dimptr;
 var $108=$axis;
 var $109=((($108)-(1))|0);
 $axis=$109;
 var $110=(($107+($108<<2))|0);
 SAFE_HEAP_STORE($110, 0, "i32", 0);
 label=14;break;
 case 13: 
 var $112=$maxaxis;
 $axis=$112;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 var $115=$axis;
 var $116=$maxaxis;
 var $117=($115|0)<($116|0);
 if($117){label=11;break;}else{label=16;break;}
 case 16: 
 $ix=0;
 $j=0;
 label=17;break;
 case 17: 
 var $120=$j;
 var $121=$2;
 var $122=(($121+8)|0);
 var $123=SAFE_HEAP_LOAD($122, "i32", 0, 0);
 var $124=($120|0)<($123|0);
 if($124){label=18;break;}else{label=20;break;}
 case 18: 
 var $126=$2;
 var $127=(($126)|0);
 var $128=$127;
 var $129=SAFE_HEAP_LOAD($128, "i32*", 0, 0);
 var $130=$j;
 var $131=(($129+($130<<2))|0);
 var $132=SAFE_HEAP_LOAD($131, "i32", 0, 0);
 var $133=SAFE_HEAP_LOAD(2648, "i32", 0, 0);
 var $134=((($132)-($133))|0);
 $k=$134;
 var $135=$dimptr;
 var $136=$k;
 var $137=(($135+($136<<2))|0);
 var $138=SAFE_HEAP_LOAD($137, "i32", 0, 0);
 var $139=$5;
 var $140=(($139)|0);
 var $141=$140;
 var $142=SAFE_HEAP_LOAD($141, "i32*", 0, 0);
 var $143=$j;
 var $144=(($142+($143<<2))|0);
 var $145=SAFE_HEAP_LOAD($144, "i32", 0, 0);
 var $146=(Math_imul($138,$145)|0);
 var $147=$ix;
 var $148=((($147)+($146))|0);
 $ix=$148;
 label=19;break;
 case 19: 
 var $150=$j;
 var $151=((($150)+(1))|0);
 $j=$151;
 label=17;break;
 case 20: 
 label=8;break;
 case 21: 
 var $154=$5;
 var $155=_temp($154);
 _endoper($155);
 var $156=$4;
 var $157=_temp($156);
 _endoper($157);
 var $158=$2;
 var $159=_temp($158);
 var $160=$3;
 var $161=$out;
 var $162=_errstop(0,$159,$160,$161);
 $1=$162;
 label=22;break;
 case 22: 
 var $164=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $164;
  default: assert(0, "bad label: " + label);
 }

}


function _treenode($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $symp;
 var $p;
 $1=$s;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $symp=$2;
 label=2;break;
 case 2: 
 var $4=$symp;
 var $5=(($4+4)|0);
 var $6=SAFE_HEAP_LOAD($5, "%struct.avlnode*", 0, 0);
 var $7=$1;
 var $8=_avlsrch($6,$7);
 $p=$8;
 var $9=$p;
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 label=8;break;
 case 4: 
 var $13=$symp;
 var $14=(($13)|0);
 var $15=SAFE_HEAP_LOAD($14, "%struct.treelist*", 0, 0);
 var $16=($15|0)==0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 label=8;break;
 case 6: 
 label=7;break;
 case 7: 
 var $20=$symp;
 var $21=(($20)|0);
 var $22=SAFE_HEAP_LOAD($21, "%struct.treelist*", 0, 0);
 $symp=$22;
 label=2;break;
 case 8: 
 var $24=$p;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _treeroot($fp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $new;
 var $treesave;
 $1=$fp;
 var $2=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 $treesave=$2;
 var $3=_aplmall(64);
 var $4=$3;
 $new=$4;
 var $5=$new;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=8;break;}
 case 2: 
 var $8=$new;
 var $9=(($8+4)|0);
 SAFE_HEAP_STORE($9, 0, "%struct.avlnode*", 0);
 var $10=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $11=$new;
 var $12=(($11)|0);
 SAFE_HEAP_STORE($12, $10, "%struct.treelist*", 0);
 var $13=$new;
 SAFE_HEAP_STORE(2376, $13, "%struct.treelist*", 0);
 var $14=$1;
 var $15=$new;
 var $16=(($15+8)|0);
 SAFE_HEAP_STORE($16, $14, "%struct.aplfunc*", 0);
 var $17=$new;
 var $18=(($17+16)|0);
 SAFE_HEAP_STORE($18, 0, "i32", 0);
 var $19=$1;
 var $20=($19|0)==0;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 var $22=$new;
 var $23=(($22+12)|0);
 SAFE_HEAP_STORE($23, 0, "i8*", 0);
 label=7;break;
 case 4: 
 var $25=$1;
 var $26=(($25+28)|0);
 var $27=SAFE_HEAP_LOAD($26, "%struct.apltoken*", 0, 0);
 var $28=(($27+12)|0);
 var $29=$28;
 var $30=SAFE_HEAP_LOAD($29, "i8*", 0, 0);
 var $31=_strlen($30);
 var $32=((($31)+(1))|0);
 var $33=_aplmall($32);
 var $34=$new;
 var $35=(($34+12)|0);
 SAFE_HEAP_STORE($35, $33, "i8*", 0);
 var $36=$new;
 var $37=(($36+12)|0);
 var $38=SAFE_HEAP_LOAD($37, "i8*", 0, 0);
 var $39=($38|0)!=0;
 if($39){label=5;break;}else{label=6;break;}
 case 5: 
 var $41=$new;
 var $42=(($41+12)|0);
 var $43=SAFE_HEAP_LOAD($42, "i8*", 0, 0);
 var $44=$1;
 var $45=(($44+28)|0);
 var $46=SAFE_HEAP_LOAD($45, "%struct.apltoken*", 0, 0);
 var $47=(($46+12)|0);
 var $48=$47;
 var $49=SAFE_HEAP_LOAD($48, "i8*", 0, 0);
 var $50=_strcpy($43,$49);
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $53=$new;
 var $54=(($53+20)|0);
 SAFE_HEAP_STORE($54, 0, "i32", 0);
 var $55=$new;
 var $56=(($55+24)|0);
 SAFE_HEAP_STORE($56, 0, "i32", 0);
 var $57=$new;
 var $58=(($57+28)|0);
 SAFE_HEAP_STORE($58, 0, "i32", 0);
 var $59=$new;
 var $60=(($59+32)|0);
 SAFE_HEAP_STORE($60, 0, "double", 0);
 var $61=$new;
 var $62=(($61+40)|0);
 SAFE_HEAP_STORE($62, 0, "%struct.execstk*", 0);
 var $63=$new;
 var $64=(($63+44)|0);
 SAFE_HEAP_STORE($64, 0, "%struct.apltoken*", 0);
 var $65=$new;
 var $66=(($65+48)|0);
 SAFE_HEAP_STORE($66, 0, "i32", 0);
 var $67=$new;
 var $68=(($67+52)|0);
 SAFE_HEAP_STORE($68, 0, "i32", 0);
 var $69=$new;
 var $70=(($69+56)|0);
 SAFE_HEAP_STORE($70, 0, "i32", 0);
 label=8;break;
 case 8: 
 var $72=$new;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $72;
  default: assert(0, "bad label: " + label);
 }

}


function _treesrch($name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $symp;
 var $avlhit;
 $2=$name;
 var $3=SAFE_HEAP_LOAD(2376, "%struct.treelist*", 0, 0);
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=6;break;
 case 3: 
 var $7=$2;
 var $8=_treenode($7);
 $avlhit=$8;
 var $9=$avlhit;
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=6;break;
 case 5: 
 var $13=$avlhit;
 var $14=(($13+8)|0);
 var $15=SAFE_HEAP_LOAD($14, "i8*", 0, 0);
 $1=$15;
 label=6;break;
 case 6: 
 var $17=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function _typeget($old,$new){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$old;
 $2=$new;
 var $3=$1;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 $1=$6;
 label=17;break;
 case 3: 
 var $8=$2;
 var $9=($8|0)==32;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 $1=32;
 label=16;break;
 case 5: 
 var $12=$1;
 var $13=$2;
 var $14=($12|0)!=($13|0);
 if($14){label=6;break;}else{label=15;break;}
 case 6: 
 var $16=$2;
 var $17=$16&70;
 var $18=($17|0)!=0;
 if($18){label=7;break;}else{label=13;break;}
 case 7: 
 var $20=$1;
 var $21=$20&70;
 var $22=($21|0)!=0;
 if($22){label=8;break;}else{label=13;break;}
 case 8: 
 var $24=$1;
 var $25=($24|0)==64;
 if($25){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=$2;
 var $28=($27|0)==64;
 if($28){label=10;break;}else{label=11;break;}
 case 10: 
 $1=64;
 label=12;break;
 case 11: 
 $1=2;
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 $1=32;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $37=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _value($rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ret;
 $2=$rite;
 var $3=_errinit();
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-.0;
 label=11;break;
 case 3: 
 var $7=$2;
 var $8=(($7+4)|0);
 var $9=SAFE_HEAP_LOAD($8, "i32", 0, 0);
 var $10=$9&2;
 var $11=($10|0)!=0;
 if($11){label=7;break;}else{label=4;break;}
 case 4: 
 var $13=$2;
 var $14=_real($13);
 $2=$14;
 var $15=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-.0;
 label=11;break;
 case 6: 
 label=7;break;
 case 7: 
 var $20=$2;
 var $21=(($20+8)|0);
 var $22=SAFE_HEAP_LOAD($21, "i32", 0, 0);
 var $23=($22|0)!=0;
 if($23){label=9;break;}else{label=8;break;}
 case 8: 
 SAFE_HEAP_STORE(4592, 23, "i32", 0);
 $ret=-.0;
 label=10;break;
 case 9: 
 var $26=$2;
 var $27=(($26)|0);
 var $28=$27;
 var $29=SAFE_HEAP_LOAD($28, "double*", 0, 0);
 var $30=SAFE_HEAP_LOAD($29, "double", 0, 0);
 $ret=$30;
 label=10;break;
 case 10: 
 var $32=$2;
 _endoper($32);
 var $33=$ret;
 $1=$33;
 label=11;break;
 case 11: 
 var $35=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _vectin($left){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$left;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=SAFE_HEAP_LOAD($4, "i32", 0, 0);
 var $6=$5&4;
 var $7=($6|0)!=0;
 if($7){label=5;break;}else{label=2;break;}
 case 2: 
 var $9=$2;
 var $10=_integer($9);
 $2=$10;
 var $11=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=$2;
 var $15=_errstop(0,$14,0,0);
 $1=$15;
 label=6;break;
 case 4: 
 label=5;break;
 case 5: 
 var $18=$2;
 var $19=_ravel($18);
 var $20=_perm($19);
 $1=$20;
 label=6;break;
 case 6: 
 var $22=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _vector($sp,$spend,$single){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $fhdr=sp;
 var $fcur;
 var $fnxt;
 var $datacnt;
 var $datatyp;
 var $i;
 var $ip;
 var $j=(sp)+(8);
 var $k=(sp)+(16);
 var $m;
 var $n;
 var $s;
 var $t;
 var $u;
 var $f=(sp)+(24);
 var $fp;
 var $out;
 $2=$sp;
 $3=$spend;
 $4=$single;
 var $5=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=18;break;
 case 3: 
 var $9=$2;
 var $10=(($9)|0);
 var $11=SAFE_HEAP_LOAD($10, "i8*", 0, 0);
 $s=$11;
 $datacnt=0;
 $n=0;
 $m=0;
 var $12=$s;
 $t=$12;
 $fcur=0;
 label=4;break;
 case 4: 
 var $14=$t;
 var $15=(($f)|0);
 var $16=$3;
 var $17=_cplxin($14,$15,$j,$k,$16);
 $i=$17;
 var $18=0<($17|0);
 if($18){label=5;break;}else{label=11;break;}
 case 5: 
 var $20=$fhdr;
 var $21=$fcur;
 var $22=$21;
 var $23=_aplmall(32);
 var $24=_fifo($20,$22,$23);
 var $25=$24;
 $fcur=$25;
 var $26=(($f)|0);
 var $27=SAFE_HEAP_LOAD($26, "double", 0, 0);
 var $28=$fcur;
 var $29=(($28+8)|0);
 var $30=(($29)|0);
 SAFE_HEAP_STORE($30, $27, "double", 0);
 var $31=(($f+8)|0);
 var $32=SAFE_HEAP_LOAD($31, "double", 0, 0);
 var $33=$fcur;
 var $34=(($33+8)|0);
 var $35=(($34+8)|0);
 SAFE_HEAP_STORE($35, $32, "double", 0);
 var $36=SAFE_HEAP_LOAD($j, "i32", 0, 0);
 var $37=$fcur;
 var $38=(($37+24)|0);
 SAFE_HEAP_STORE($38, $36, "i32", 0);
 var $39=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $40=$fcur;
 var $41=(($40+28)|0);
 SAFE_HEAP_STORE($41, $39, "i32", 0);
 var $42=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $43=$m;
 var $44=((($43)+($42))|0);
 $m=$44;
 var $45=SAFE_HEAP_LOAD($k, "i32", 0, 0);
 var $46=($45|0)!=0;
 if($46){label=6;break;}else{label=8;break;}
 case 6: 
 var $48=(($f+8)|0);
 var $49=SAFE_HEAP_LOAD($48, "double", 0, 0);
 var $50=$49!=0;
 if($50){label=7;break;}else{label=8;break;}
 case 7: 
 var $52=$n;
 var $53=((($52)+(1))|0);
 $n=$53;
 label=8;break;
 case 8: 
 var $55=$datacnt;
 var $56=((($55)+(1))|0);
 $datacnt=$56;
 var $57=$i;
 var $58=$t;
 var $59=(($58+$57)|0);
 $t=$59;
 var $60=$4;
 var $61=($60|0)!=0;
 if($61){label=9;break;}else{label=10;break;}
 case 9: 
 label=11;break;
 case 10: 
 label=4;break;
 case 11: 
 var $65=$t;
 var $66=$2;
 var $67=(($66)|0);
 SAFE_HEAP_STORE($67, $65, "i8*", 0);
 var $68=$n;
 var $69=($68|0)!=0;
 if($69){label=12;break;}else{label=13;break;}
 case 12: 
 $datatyp=64;
 label=17;break;
 case 13: 
 var $72=$m;
 var $73=($72|0)!=0;
 if($73){label=14;break;}else{label=15;break;}
 case 14: 
 $datatyp=2;
 label=16;break;
 case 15: 
 $datatyp=4;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $78=$datacnt;
 var $79=$datatyp;
 var $80=_vectors($78,$79,$fhdr);
 $1=$80;
 label=18;break;
 case 18: 
 var $82=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $82;
  default: assert(0, "bad label: " + label);
 }

}


function _vectors($datacnt,$datatyp,$pfhdr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $fcur;
 var $i;
 var $ip;
 var $fp;
 var $out;
 $1=$datacnt;
 $2=$datatyp;
 $3=$pfhdr;
 var $4=$1;
 var $5=$2;
 var $6=((($5)+(1))|0);
 var $7=_getcb(0,$4,$6,1,0);
 $out=$7;
 var $8=$out;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=18;break;}
 case 2: 
 var $11=$1;
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=18;break;}
 case 3: 
 var $14=$2;
 if(($14|0)==4){ label=13;break;}else if(($14|0)==64|($14|0)==2){ label=4;break;}else{label=17;break;}
 case 4: 
 var $16=$out;
 var $17=(($16)|0);
 var $18=$17;
 var $19=SAFE_HEAP_LOAD($18, "double*", 0, 0);
 $fp=$19;
 label=5;break;
 case 5: 
 var $21=$3;
 var $22=$21;
 var $23=_pop($22);
 var $24=$23;
 $fcur=$24;
 var $25=0!=($24|0);
 if($25){label=6;break;}else{label=12;break;}
 case 6: 
 var $27=$fcur;
 var $28=(($27+28)|0);
 var $29=SAFE_HEAP_LOAD($28, "i32", 0, 0);
 var $30=($29|0)!=0;
 if($30){label=7;break;}else{label=10;break;}
 case 7: 
 var $32=$fcur;
 var $33=(($32+8)|0);
 var $34=(($33)|0);
 var $35=SAFE_HEAP_LOAD($34, "double", 0, 0);
 var $36=$fp;
 var $37=(($36+8)|0);
 $fp=$37;
 SAFE_HEAP_STORE($36, $35, "double", 0);
 var $38=$2;
 var $39=($38|0)==64;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 var $41=$fcur;
 var $42=(($41+8)|0);
 var $43=(($42+8)|0);
 var $44=SAFE_HEAP_LOAD($43, "double", 0, 0);
 var $45=$fp;
 var $46=(($45+8)|0);
 $fp=$46;
 SAFE_HEAP_STORE($45, $44, "double", 0);
 label=9;break;
 case 9: 
 label=11;break;
 case 10: 
 var $49=$fcur;
 var $50=(($49+24)|0);
 var $51=SAFE_HEAP_LOAD($50, "i32", 0, 0);
 var $52=($51|0);
 var $53=$fp;
 var $54=(($53+8)|0);
 $fp=$54;
 SAFE_HEAP_STORE($53, $52, "double", 0);
 label=11;break;
 case 11: 
 var $56=$fcur;
 var $57=$56;
 _aplfree($57);
 label=5;break;
 case 12: 
 label=17;break;
 case 13: 
 var $60=$out;
 var $61=(($60)|0);
 var $62=$61;
 var $63=SAFE_HEAP_LOAD($62, "i32*", 0, 0);
 $ip=$63;
 label=14;break;
 case 14: 
 var $65=$3;
 var $66=$65;
 var $67=_pop($66);
 var $68=$67;
 $fcur=$68;
 var $69=0!=($68|0);
 if($69){label=15;break;}else{label=16;break;}
 case 15: 
 var $71=$fcur;
 var $72=(($71+24)|0);
 var $73=SAFE_HEAP_LOAD($72, "i32", 0, 0);
 var $74=$ip;
 var $75=(($74+4)|0);
 $ip=$75;
 SAFE_HEAP_STORE($74, $73, "i32", 0);
 var $76=$fcur;
 var $77=$76;
 _aplfree($77);
 label=14;break;
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $81=$out;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $81;
  default: assert(0, "bad label: " + label);
 }

}


function _without($left,$rite){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $qhdr=sp;
 var $qcur;
 var $qnxt;
 var $datacnt;
 var $i;
 var $j;
 var $lefttype;
 var $ritetype;
 var $ld=(sp)+(8);
 var $rd=(sp)+(16);
 var $out;
 $2=$left;
 $3=$rite;
 var $4=_errinit();
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 var $9=_errstop(0,$7,$8,0);
 $1=$9;
 label=34;break;
 case 3: 
 var $11=$2;
 var $12=(($11+4)|0);
 var $13=SAFE_HEAP_LOAD($12, "i32", 0, 0);
 var $14=$13&110;
 $lefttype=$14;
 var $15=$3;
 var $16=(($15+4)|0);
 var $17=SAFE_HEAP_LOAD($16, "i32", 0, 0);
 var $18=$17&110;
 $ritetype=$18;
 var $19=$2;
 var $20=(($19+8)|0);
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($21|0)==0;
 if($22){label=8;break;}else{label=4;break;}
 case 4: 
 var $24=$3;
 var $25=(($24+8)|0);
 var $26=SAFE_HEAP_LOAD($25, "i32", 0, 0);
 var $27=($26|0)==0;
 if($27){label=8;break;}else{label=5;break;}
 case 5: 
 var $29=$lefttype;
 var $30=$ritetype;
 var $31=($29|0)!=($30|0);
 if($31){label=6;break;}else{label=9;break;}
 case 6: 
 var $33=$lefttype;
 var $34=$ritetype;
 var $35=$34&32;
 var $36=$33|$35;
 var $37=($36|0)!=0;
 if($37){label=9;break;}else{label=7;break;}
 case 7: 
 var $39=$lefttype;
 var $40=$ritetype;
 var $41=$39|$40;
 var $42=($41|0)==6;
 if($42){label=9;break;}else{label=8;break;}
 case 8: 
 var $44=$2;
 var $45=$3;
 var $46=$2;
 var $47=_aplcopy($46);
 var $48=_temp($47);
 var $49=_errstop(0,$44,$45,$48);
 $1=$49;
 label=34;break;
 case 9: 
 $datacnt=0;
 SAFE_HEAP_STORE($qhdr, 0, "%struct.qlist*", 0);
 $qcur=0;
 var $51=$2;
 var $52=(($51+8)|0);
 var $53=SAFE_HEAP_LOAD($52, "i32", 0, 0);
 $i=$53;
 var $54=$2;
 var $55=(($54)|0);
 var $56=$ld;
 var $57=$55;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($56, SAFE_HEAP_LOAD($57, "i32", 0, 0), "i32", 0);
 label=10;break;
 case 10: 
 var $59=$i;
 var $60=($59|0)!=0;
 if($60){label=11;break;}else{label=23;break;}
 case 11: 
 var $62=$3;
 var $63=(($62+8)|0);
 var $64=SAFE_HEAP_LOAD($63, "i32", 0, 0);
 $j=$64;
 var $65=$3;
 var $66=(($65)|0);
 var $67=$rd;
 var $68=$66;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($67, SAFE_HEAP_LOAD($68, "i32", 0, 0), "i32", 0);
 label=12;break;
 case 12: 
 var $70=$j;
 var $71=($70|0)!=0;
 if($71){label=13;break;}else{label=17;break;}
 case 13: 
 var $73=$lefttype;
 var $74=$ritetype;
 var $75=_aplmatci($ld,$rd,$73,$74);
 var $76=($75|0)!=0;
 if($76){label=14;break;}else{label=15;break;}
 case 14: 
 label=17;break;
 case 15: 
 var $79=$3;
 var $80=(($79+20)|0);
 var $81=SAFE_HEAP_LOAD($80, "i32", 0, 0);
 var $82=$rd;
 var $83=SAFE_HEAP_LOAD($82, "i8*", 0, 0);
 var $84=(($83+$81)|0);
 SAFE_HEAP_STORE($82, $84, "i8*", 0);
 label=16;break;
 case 16: 
 var $86=$j;
 var $87=((($86)-(1))|0);
 $j=$87;
 label=12;break;
 case 17: 
 var $89=$j;
 var $90=($89|0)==0;
 if($90){label=18;break;}else{label=21;break;}
 case 18: 
 var $92=$datacnt;
 var $93=((($92)+(1))|0);
 $datacnt=$93;
 var $94=$qhdr;
 var $95=$qcur;
 var $96=$95;
 var $97=_aplmall(8);
 var $98=_fifo($94,$96,$97);
 var $99=$98;
 $qcur=$99;
 var $100=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $101=($100|0)!=0;
 if($101){label=19;break;}else{label=20;break;}
 case 19: 
 label=23;break;
 case 20: 
 var $104=$qcur;
 var $105=(($104+4)|0);
 var $106=$105;
 var $107=$ld;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($106, SAFE_HEAP_LOAD($107, "i32", 0, 0), "i32", 0);
 label=21;break;
 case 21: 
 var $109=$2;
 var $110=(($109+20)|0);
 var $111=SAFE_HEAP_LOAD($110, "i32", 0, 0);
 var $112=$ld;
 var $113=SAFE_HEAP_LOAD($112, "i8*", 0, 0);
 var $114=(($113+$111)|0);
 SAFE_HEAP_STORE($112, $114, "i8*", 0);
 label=22;break;
 case 22: 
 var $116=$i;
 var $117=((($116)-(1))|0);
 $i=$117;
 label=10;break;
 case 23: 
 var $119=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $120=($119|0)!=0;
 if($120){label=24;break;}else{label=25;break;}
 case 24: 
 $out=0;
 label=26;break;
 case 25: 
 var $123=$datacnt;
 var $124=$lefttype;
 var $125=((($124)+(1))|0);
 var $126=_getcb(0,$123,$125,1,0);
 $out=$126;
 label=26;break;
 case 26: 
 var $128=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $129=($128|0)!=0;
 if($129){label=28;break;}else{label=27;break;}
 case 27: 
 var $131=$out;
 var $132=(($131)|0);
 var $133=$ld;
 var $134=$132;
 assert(4 % 1 === 0);SAFE_HEAP_STORE($133, SAFE_HEAP_LOAD($134, "i32", 0, 0), "i32", 0);
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $137=$qhdr;
 var $138=_pop($137);
 var $139=$138;
 $qcur=$139;
 var $140=0!=($139|0);
 if($140){label=30;break;}else{label=33;break;}
 case 30: 
 var $142=SAFE_HEAP_LOAD(4592, "i32", 0, 0);
 var $143=($142|0)!=0;
 if($143){label=32;break;}else{label=31;break;}
 case 31: 
 var $145=$ld;
 var $146=SAFE_HEAP_LOAD($145, "i8*", 0, 0);
 var $147=$qcur;
 var $148=(($147+4)|0);
 var $149=$148;
 var $150=SAFE_HEAP_LOAD($149, "i8*", 0, 0);
 var $151=$lefttype;
 var $152=_dtacopy($146,$150,1,1,$151);
 var $153=$ld;
 SAFE_HEAP_STORE($153, $152, "i8*", 0);
 label=32;break;
 case 32: 
 var $155=$qcur;
 var $156=$155;
 _aplfree($156);
 label=29;break;
 case 33: 
 var $158=$2;
 var $159=$3;
 var $160=$out;
 var $161=_errstop(0,$158,$159,$160);
 $1=$161;
 label=34;break;
 case 34: 
 var $163=$1;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $163;
  default: assert(0, "bad label: " + label);
 }

}


function _xeq($left,$rite){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $diff;
 var $lef;
 var $rit;
 var $ret;
 var $i;
 $1=$left;
 $2=$rite;
 $ret=1;
 $i=2;
 label=2;break;
 case 2: 
 var $4=$i;
 var $5=((($4)-(1))|0);
 $i=$5;
 var $6=($4|0)!=0;
 if($6){label=3;break;}else{label=9;break;}
 case 3: 
 var $8=$1;
 var $9=$i;
 var $10=(($8+($9<<3))|0);
 var $11=SAFE_HEAP_LOAD($10, "double", 0, 0);
 $lef=$11;
 var $12=$2;
 var $13=$i;
 var $14=(($12+($13<<3))|0);
 var $15=SAFE_HEAP_LOAD($14, "double", 0, 0);
 $rit=$15;
 var $16=$lef;
 var $17=$rit;
 var $18=$16>$17;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 var $20=$lef;
 var $21=$rit;
 var $22=($20)-($21);
 var $28=$22;label=6;break;
 case 5: 
 var $24=$rit;
 var $25=$lef;
 var $26=($24)-($25);
 var $28=$26;label=6;break;
 case 6: 
 var $28;
 $diff=$28;
 var $29=$diff;
 var $30=SAFE_HEAP_LOAD(2784, "double", 0, 0);
 var $31=$29>$30;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 $ret=0;
 label=9;break;
 case 8: 
 label=2;break;
 case 9: 
 var $35=$ret;
 var i = sp; while ((i|0) < (STACKTOP|0)) { SAFE_HEAP_CLEAR(i|0); i = (i+1)|0 }STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((16120+($18<<2))|0);
 var $20=$19;
 var $_sum111=((($18)+(2))|0);
 var $21=((16120+($_sum111<<2))|0);
 var $22=SAFE_HEAP_LOAD($21, "%struct.malloc_chunk*", 0, 0);
 var $23=(($22+8)|0);
 var $24=SAFE_HEAP_LOAD($23, "%struct.malloc_chunk*", 0, 0);
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 SAFE_HEAP_STORE(16080, $29, "i32", 0);
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=SAFE_HEAP_LOAD($35, "%struct.malloc_chunk*", 0, 0);
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 SAFE_HEAP_STORE($35, $20, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE($21, $24, "%struct.malloc_chunk*", 0);
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 SAFE_HEAP_STORE($42, $41, "i32", 0);
 var $43=$22;
 var $_sum113114=$40|4;
 var $44=(($43+$_sum113114)|0);
 var $45=$44;
 var $46=SAFE_HEAP_LOAD($45, "i32", 0, 0);
 var $47=$46|1;
 SAFE_HEAP_STORE($45, $47, "i32", 0);
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=SAFE_HEAP_LOAD(16088, "i32", 0, 0);
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((16120+($83<<2))|0);
 var $85=$84;
 var $_sum104=((($83)+(2))|0);
 var $86=((16120+($_sum104<<2))|0);
 var $87=SAFE_HEAP_LOAD($86, "%struct.malloc_chunk*", 0, 0);
 var $88=(($87+8)|0);
 var $89=SAFE_HEAP_LOAD($88, "%struct.malloc_chunk*", 0, 0);
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 SAFE_HEAP_STORE(16080, $94, "i32", 0);
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=SAFE_HEAP_LOAD($100, "%struct.malloc_chunk*", 0, 0);
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 SAFE_HEAP_STORE($100, $85, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE($86, $89, "%struct.malloc_chunk*", 0);
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 SAFE_HEAP_STORE($108, $107, "i32", 0);
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum106107=$8|4;
 var $113=(($109+$_sum106107)|0);
 var $114=$113;
 SAFE_HEAP_STORE($114, $112, "i32", 0);
 var $115=(($109+$105)|0);
 var $116=$115;
 SAFE_HEAP_STORE($116, $106, "i32", 0);
 var $117=SAFE_HEAP_LOAD(16088, "i32", 0, 0);
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=SAFE_HEAP_LOAD(16100, "%struct.malloc_chunk*", 0, 0);
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((16120+($122<<2))|0);
 var $124=$123;
 var $125=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 SAFE_HEAP_STORE(16080, $130, "i32", 0);
 var $_sum109_pre=((($122)+(2))|0);
 var $_pre=((16120+($_sum109_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum110=((($122)+(2))|0);
 var $132=((16120+($_sum110<<2))|0);
 var $133=SAFE_HEAP_LOAD($132, "%struct.malloc_chunk*", 0, 0);
 var $134=$133;
 var $135=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 SAFE_HEAP_STORE($_pre_phi, $120, "%struct.malloc_chunk*", 0);
 var $139=(($F4_0+12)|0);
 SAFE_HEAP_STORE($139, $120, "%struct.malloc_chunk*", 0);
 var $140=(($120+8)|0);
 SAFE_HEAP_STORE($140, $F4_0, "%struct.malloc_chunk*", 0);
 var $141=(($120+12)|0);
 SAFE_HEAP_STORE($141, $124, "%struct.malloc_chunk*", 0);
 label=26;break;
 case 26: 
 SAFE_HEAP_STORE(16088, $106, "i32", 0);
 SAFE_HEAP_STORE(16100, $111, "%struct.malloc_chunk*", 0);
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((16384+($170<<2))|0);
 var $172=SAFE_HEAP_LOAD($171, "%struct.malloc_tree_chunk*", 0, 0);
 var $173=(($172+4)|0);
 var $174=SAFE_HEAP_LOAD($173, "i32", 0, 0);
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=SAFE_HEAP_LOAD($178, "%struct.malloc_tree_chunk*", 0, 0);
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=SAFE_HEAP_LOAD($182, "%struct.malloc_tree_chunk*", 0, 0);
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=SAFE_HEAP_LOAD($186, "i32", 0, 0);
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=SAFE_HEAP_LOAD($200, "%struct.malloc_tree_chunk*", 0, 0);
 var $202=(($v_0_i+12)|0);
 var $203=SAFE_HEAP_LOAD($202, "%struct.malloc_tree_chunk*", 0, 0);
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=SAFE_HEAP_LOAD($206, "%struct.malloc_tree_chunk*", 0, 0);
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=SAFE_HEAP_LOAD($211, "%struct.malloc_tree_chunk*", 0, 0);
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=SAFE_HEAP_LOAD($215, "%struct.malloc_tree_chunk*", 0, 0);
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 SAFE_HEAP_STORE($211, $203, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($215, $207, "%struct.malloc_tree_chunk*", 0);
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=SAFE_HEAP_LOAD($220, "%struct.malloc_tree_chunk*", 0, 0);
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=SAFE_HEAP_LOAD($224, "%struct.malloc_tree_chunk*", 0, 0);
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=SAFE_HEAP_LOAD($227, "%struct.malloc_tree_chunk*", 0, 0);
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=SAFE_HEAP_LOAD($231, "%struct.malloc_tree_chunk*", 0, 0);
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 SAFE_HEAP_STORE($RP_0_i, 0, "%struct.malloc_tree_chunk*", 0);
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=SAFE_HEAP_LOAD($242, "i32", 0, 0);
 var $244=((16384+($243<<2))|0);
 var $245=SAFE_HEAP_LOAD($244, "%struct.malloc_tree_chunk*", 0, 0);
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 SAFE_HEAP_STORE($244, $R_1_i, "%struct.malloc_tree_chunk*", 0);
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=1<<$243;
 var $249=$248^-1;
 var $250=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $251=$250&$249;
 SAFE_HEAP_STORE(16084, $251, "i32", 0);
 label=67;break;
 case 51: 
 var $253=$201;
 var $254=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $255=($253>>>0)<($254>>>0);
 if($255){label=55;break;}else{label=52;break;}
 case 52: 
 var $257=(($201+16)|0);
 var $258=SAFE_HEAP_LOAD($257, "%struct.malloc_tree_chunk*", 0, 0);
 var $259=($258|0)==($v_0_i|0);
 if($259){label=53;break;}else{label=54;break;}
 case 53: 
 SAFE_HEAP_STORE($257, $R_1_i, "%struct.malloc_tree_chunk*", 0);
 label=56;break;
 case 54: 
 var $262=(($201+20)|0);
 SAFE_HEAP_STORE($262, $R_1_i, "%struct.malloc_tree_chunk*", 0);
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $265=($R_1_i|0)==0;
 if($265){label=67;break;}else{label=57;break;}
 case 57: 
 var $267=$R_1_i;
 var $268=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $269=($267>>>0)<($268>>>0);
 if($269){label=66;break;}else{label=58;break;}
 case 58: 
 var $271=(($R_1_i+24)|0);
 SAFE_HEAP_STORE($271, $201, "%struct.malloc_tree_chunk*", 0);
 var $272=(($v_0_i+16)|0);
 var $273=SAFE_HEAP_LOAD($272, "%struct.malloc_tree_chunk*", 0, 0);
 var $274=($273|0)==0;
 if($274){label=62;break;}else{label=59;break;}
 case 59: 
 var $276=$273;
 var $277=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $278=($276>>>0)<($277>>>0);
 if($278){label=61;break;}else{label=60;break;}
 case 60: 
 var $280=(($R_1_i+16)|0);
 SAFE_HEAP_STORE($280, $273, "%struct.malloc_tree_chunk*", 0);
 var $281=(($273+24)|0);
 SAFE_HEAP_STORE($281, $R_1_i, "%struct.malloc_tree_chunk*", 0);
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $284=(($v_0_i+20)|0);
 var $285=SAFE_HEAP_LOAD($284, "%struct.malloc_tree_chunk*", 0, 0);
 var $286=($285|0)==0;
 if($286){label=67;break;}else{label=63;break;}
 case 63: 
 var $288=$285;
 var $289=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $290=($288>>>0)<($289>>>0);
 if($290){label=65;break;}else{label=64;break;}
 case 64: 
 var $292=(($R_1_i+20)|0);
 SAFE_HEAP_STORE($292, $285, "%struct.malloc_tree_chunk*", 0);
 var $293=(($285+24)|0);
 SAFE_HEAP_STORE($293, $R_1_i, "%struct.malloc_tree_chunk*", 0);
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $297=($rsize_0_i>>>0)<16;
 if($297){label=68;break;}else{label=69;break;}
 case 68: 
 var $299=((($rsize_0_i)+($8))|0);
 var $300=$299|3;
 var $301=(($v_0_i+4)|0);
 SAFE_HEAP_STORE($301, $300, "i32", 0);
 var $_sum4_i=((($299)+(4))|0);
 var $302=(($192+$_sum4_i)|0);
 var $303=$302;
 var $304=SAFE_HEAP_LOAD($303, "i32", 0, 0);
 var $305=$304|1;
 SAFE_HEAP_STORE($303, $305, "i32", 0);
 label=77;break;
 case 69: 
 var $307=$8|3;
 var $308=(($v_0_i+4)|0);
 SAFE_HEAP_STORE($308, $307, "i32", 0);
 var $309=$rsize_0_i|1;
 var $_sum_i137=$8|4;
 var $310=(($192+$_sum_i137)|0);
 var $311=$310;
 SAFE_HEAP_STORE($311, $309, "i32", 0);
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $312=(($192+$_sum1_i)|0);
 var $313=$312;
 SAFE_HEAP_STORE($313, $rsize_0_i, "i32", 0);
 var $314=SAFE_HEAP_LOAD(16088, "i32", 0, 0);
 var $315=($314|0)==0;
 if($315){label=75;break;}else{label=70;break;}
 case 70: 
 var $317=SAFE_HEAP_LOAD(16100, "%struct.malloc_chunk*", 0, 0);
 var $318=$314>>>3;
 var $319=$318<<1;
 var $320=((16120+($319<<2))|0);
 var $321=$320;
 var $322=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $323=1<<$318;
 var $324=$322&$323;
 var $325=($324|0)==0;
 if($325){label=71;break;}else{label=72;break;}
 case 71: 
 var $327=$322|$323;
 SAFE_HEAP_STORE(16080, $327, "i32", 0);
 var $_sum2_pre_i=((($319)+(2))|0);
 var $_pre_i=((16120+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$321;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($319)+(2))|0);
 var $329=((16120+($_sum3_i<<2))|0);
 var $330=SAFE_HEAP_LOAD($329, "%struct.malloc_chunk*", 0, 0);
 var $331=$330;
 var $332=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $333=($331>>>0)<($332>>>0);
 if($333){label=73;break;}else{var $F1_0_i=$330;var $_pre_phi_i=$329;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 SAFE_HEAP_STORE($_pre_phi_i, $317, "%struct.malloc_chunk*", 0);
 var $336=(($F1_0_i+12)|0);
 SAFE_HEAP_STORE($336, $317, "%struct.malloc_chunk*", 0);
 var $337=(($317+8)|0);
 SAFE_HEAP_STORE($337, $F1_0_i, "%struct.malloc_chunk*", 0);
 var $338=(($317+12)|0);
 SAFE_HEAP_STORE($338, $321, "%struct.malloc_chunk*", 0);
 label=75;break;
 case 75: 
 SAFE_HEAP_STORE(16088, $rsize_0_i, "i32", 0);
 SAFE_HEAP_STORE(16100, $197, "%struct.malloc_chunk*", 0);
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $341=(($v_0_i+8)|0);
 var $342=$341;
 var $343=($341|0)==0;
 if($343){var $nb_0=$8;label=160;break;}else{var $mem_0=$342;label=341;break;}
 case 78: 
 var $345=($bytes>>>0)>4294967231;
 if($345){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $347=((($bytes)+(11))|0);
 var $348=$347&-8;
 var $349=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $350=($349|0)==0;
 if($350){var $nb_0=$348;label=160;break;}else{label=80;break;}
 case 80: 
 var $352=(((-$348))|0);
 var $353=$347>>>8;
 var $354=($353|0)==0;
 if($354){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $356=($348>>>0)>16777215;
 if($356){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $358=((($353)+(1048320))|0);
 var $359=$358>>>16;
 var $360=$359&8;
 var $361=$353<<$360;
 var $362=((($361)+(520192))|0);
 var $363=$362>>>16;
 var $364=$363&4;
 var $365=$364|$360;
 var $366=$361<<$364;
 var $367=((($366)+(245760))|0);
 var $368=$367>>>16;
 var $369=$368&2;
 var $370=$365|$369;
 var $371=(((14)-($370))|0);
 var $372=$366<<$369;
 var $373=$372>>>15;
 var $374=((($371)+($373))|0);
 var $375=$374<<1;
 var $376=((($374)+(7))|0);
 var $377=$348>>>($376>>>0);
 var $378=$377&1;
 var $379=$378|$375;
 var $idx_0_i=$379;label=83;break;
 case 83: 
 var $idx_0_i;
 var $381=((16384+($idx_0_i<<2))|0);
 var $382=SAFE_HEAP_LOAD($381, "%struct.malloc_tree_chunk*", 0, 0);
 var $383=($382|0)==0;
 if($383){var $v_2_i=0;var $rsize_2_i=$352;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $385=($idx_0_i|0)==31;
 if($385){var $390=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $387=$idx_0_i>>>1;
 var $388=(((25)-($387))|0);
 var $390=$388;label=86;break;
 case 86: 
 var $390;
 var $391=$348<<$390;
 var $v_0_i118=0;var $rsize_0_i117=$352;var $t_0_i116=$382;var $sizebits_0_i=$391;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i116;
 var $rsize_0_i117;
 var $v_0_i118;
 var $393=(($t_0_i116+4)|0);
 var $394=SAFE_HEAP_LOAD($393, "i32", 0, 0);
 var $395=$394&-8;
 var $396=((($395)-($348))|0);
 var $397=($396>>>0)<($rsize_0_i117>>>0);
 if($397){label=88;break;}else{var $v_1_i=$v_0_i118;var $rsize_1_i=$rsize_0_i117;label=89;break;}
 case 88: 
 var $399=($395|0)==($348|0);
 if($399){var $v_2_i=$t_0_i116;var $rsize_2_i=$396;var $t_1_i=$t_0_i116;label=90;break;}else{var $v_1_i=$t_0_i116;var $rsize_1_i=$396;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $401=(($t_0_i116+20)|0);
 var $402=SAFE_HEAP_LOAD($401, "%struct.malloc_tree_chunk*", 0, 0);
 var $403=$sizebits_0_i>>>31;
 var $404=(($t_0_i116+16+($403<<2))|0);
 var $405=SAFE_HEAP_LOAD($404, "%struct.malloc_tree_chunk*", 0, 0);
 var $406=($402|0)==0;
 var $407=($402|0)==($405|0);
 var $or_cond_i=$406|$407;
 var $rst_1_i=($or_cond_i?$rst_0_i:$402);
 var $408=($405|0)==0;
 var $409=$sizebits_0_i<<1;
 if($408){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i118=$v_1_i;var $rsize_0_i117=$rsize_1_i;var $t_0_i116=$405;var $sizebits_0_i=$409;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $410=($t_1_i|0)==0;
 var $411=($v_2_i|0)==0;
 var $or_cond21_i=$410&$411;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $413=2<<$idx_0_i;
 var $414=(((-$413))|0);
 var $415=$413|$414;
 var $416=$349&$415;
 var $417=($416|0)==0;
 if($417){var $nb_0=$348;label=160;break;}else{label=92;break;}
 case 92: 
 var $419=(((-$416))|0);
 var $420=$416&$419;
 var $421=((($420)-(1))|0);
 var $422=$421>>>12;
 var $423=$422&16;
 var $424=$421>>>($423>>>0);
 var $425=$424>>>5;
 var $426=$425&8;
 var $427=$426|$423;
 var $428=$424>>>($426>>>0);
 var $429=$428>>>2;
 var $430=$429&4;
 var $431=$427|$430;
 var $432=$428>>>($430>>>0);
 var $433=$432>>>1;
 var $434=$433&2;
 var $435=$431|$434;
 var $436=$432>>>($434>>>0);
 var $437=$436>>>1;
 var $438=$437&1;
 var $439=$435|$438;
 var $440=$436>>>($438>>>0);
 var $441=((($439)+($440))|0);
 var $442=((16384+($441<<2))|0);
 var $443=SAFE_HEAP_LOAD($442, "%struct.malloc_tree_chunk*", 0, 0);
 var $t_2_ph_i=$443;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $444=($t_2_ph_i|0)==0;
 if($444){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_228_i=$t_2_ph_i;var $rsize_329_i=$rsize_2_i;var $v_330_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_330_i;
 var $rsize_329_i;
 var $t_228_i;
 var $445=(($t_228_i+4)|0);
 var $446=SAFE_HEAP_LOAD($445, "i32", 0, 0);
 var $447=$446&-8;
 var $448=((($447)-($348))|0);
 var $449=($448>>>0)<($rsize_329_i>>>0);
 var $_rsize_3_i=($449?$448:$rsize_329_i);
 var $t_2_v_3_i=($449?$t_228_i:$v_330_i);
 var $450=(($t_228_i+16)|0);
 var $451=SAFE_HEAP_LOAD($450, "%struct.malloc_tree_chunk*", 0, 0);
 var $452=($451|0)==0;
 if($452){label=95;break;}else{var $t_228_i=$451;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $453=(($t_228_i+20)|0);
 var $454=SAFE_HEAP_LOAD($453, "%struct.malloc_tree_chunk*", 0, 0);
 var $455=($454|0)==0;
 if($455){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_228_i=$454;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $456=($v_3_lcssa_i|0)==0;
 if($456){var $nb_0=$348;label=160;break;}else{label=97;break;}
 case 97: 
 var $458=SAFE_HEAP_LOAD(16088, "i32", 0, 0);
 var $459=((($458)-($348))|0);
 var $460=($rsize_3_lcssa_i>>>0)<($459>>>0);
 if($460){label=98;break;}else{var $nb_0=$348;label=160;break;}
 case 98: 
 var $462=$v_3_lcssa_i;
 var $463=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $464=($462>>>0)<($463>>>0);
 if($464){label=158;break;}else{label=99;break;}
 case 99: 
 var $466=(($462+$348)|0);
 var $467=$466;
 var $468=($462>>>0)<($466>>>0);
 if($468){label=100;break;}else{label=158;break;}
 case 100: 
 var $470=(($v_3_lcssa_i+24)|0);
 var $471=SAFE_HEAP_LOAD($470, "%struct.malloc_tree_chunk*", 0, 0);
 var $472=(($v_3_lcssa_i+12)|0);
 var $473=SAFE_HEAP_LOAD($472, "%struct.malloc_tree_chunk*", 0, 0);
 var $474=($473|0)==($v_3_lcssa_i|0);
 if($474){label=106;break;}else{label=101;break;}
 case 101: 
 var $476=(($v_3_lcssa_i+8)|0);
 var $477=SAFE_HEAP_LOAD($476, "%struct.malloc_tree_chunk*", 0, 0);
 var $478=$477;
 var $479=($478>>>0)<($463>>>0);
 if($479){label=105;break;}else{label=102;break;}
 case 102: 
 var $481=(($477+12)|0);
 var $482=SAFE_HEAP_LOAD($481, "%struct.malloc_tree_chunk*", 0, 0);
 var $483=($482|0)==($v_3_lcssa_i|0);
 if($483){label=103;break;}else{label=105;break;}
 case 103: 
 var $485=(($473+8)|0);
 var $486=SAFE_HEAP_LOAD($485, "%struct.malloc_tree_chunk*", 0, 0);
 var $487=($486|0)==($v_3_lcssa_i|0);
 if($487){label=104;break;}else{label=105;break;}
 case 104: 
 SAFE_HEAP_STORE($481, $473, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($485, $477, "%struct.malloc_tree_chunk*", 0);
 var $R_1_i122=$473;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $490=(($v_3_lcssa_i+20)|0);
 var $491=SAFE_HEAP_LOAD($490, "%struct.malloc_tree_chunk*", 0, 0);
 var $492=($491|0)==0;
 if($492){label=107;break;}else{var $R_0_i120=$491;var $RP_0_i119=$490;label=108;break;}
 case 107: 
 var $494=(($v_3_lcssa_i+16)|0);
 var $495=SAFE_HEAP_LOAD($494, "%struct.malloc_tree_chunk*", 0, 0);
 var $496=($495|0)==0;
 if($496){var $R_1_i122=0;label=113;break;}else{var $R_0_i120=$495;var $RP_0_i119=$494;label=108;break;}
 case 108: 
 var $RP_0_i119;
 var $R_0_i120;
 var $497=(($R_0_i120+20)|0);
 var $498=SAFE_HEAP_LOAD($497, "%struct.malloc_tree_chunk*", 0, 0);
 var $499=($498|0)==0;
 if($499){label=109;break;}else{var $R_0_i120=$498;var $RP_0_i119=$497;label=108;break;}
 case 109: 
 var $501=(($R_0_i120+16)|0);
 var $502=SAFE_HEAP_LOAD($501, "%struct.malloc_tree_chunk*", 0, 0);
 var $503=($502|0)==0;
 if($503){label=110;break;}else{var $R_0_i120=$502;var $RP_0_i119=$501;label=108;break;}
 case 110: 
 var $505=$RP_0_i119;
 var $506=($505>>>0)<($463>>>0);
 if($506){label=112;break;}else{label=111;break;}
 case 111: 
 SAFE_HEAP_STORE($RP_0_i119, 0, "%struct.malloc_tree_chunk*", 0);
 var $R_1_i122=$R_0_i120;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i122;
 var $510=($471|0)==0;
 if($510){label=133;break;}else{label=114;break;}
 case 114: 
 var $512=(($v_3_lcssa_i+28)|0);
 var $513=SAFE_HEAP_LOAD($512, "i32", 0, 0);
 var $514=((16384+($513<<2))|0);
 var $515=SAFE_HEAP_LOAD($514, "%struct.malloc_tree_chunk*", 0, 0);
 var $516=($v_3_lcssa_i|0)==($515|0);
 if($516){label=115;break;}else{label=117;break;}
 case 115: 
 SAFE_HEAP_STORE($514, $R_1_i122, "%struct.malloc_tree_chunk*", 0);
 var $cond_i123=($R_1_i122|0)==0;
 if($cond_i123){label=116;break;}else{label=123;break;}
 case 116: 
 var $518=1<<$513;
 var $519=$518^-1;
 var $520=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $521=$520&$519;
 SAFE_HEAP_STORE(16084, $521, "i32", 0);
 label=133;break;
 case 117: 
 var $523=$471;
 var $524=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $525=($523>>>0)<($524>>>0);
 if($525){label=121;break;}else{label=118;break;}
 case 118: 
 var $527=(($471+16)|0);
 var $528=SAFE_HEAP_LOAD($527, "%struct.malloc_tree_chunk*", 0, 0);
 var $529=($528|0)==($v_3_lcssa_i|0);
 if($529){label=119;break;}else{label=120;break;}
 case 119: 
 SAFE_HEAP_STORE($527, $R_1_i122, "%struct.malloc_tree_chunk*", 0);
 label=122;break;
 case 120: 
 var $532=(($471+20)|0);
 SAFE_HEAP_STORE($532, $R_1_i122, "%struct.malloc_tree_chunk*", 0);
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $535=($R_1_i122|0)==0;
 if($535){label=133;break;}else{label=123;break;}
 case 123: 
 var $537=$R_1_i122;
 var $538=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $539=($537>>>0)<($538>>>0);
 if($539){label=132;break;}else{label=124;break;}
 case 124: 
 var $541=(($R_1_i122+24)|0);
 SAFE_HEAP_STORE($541, $471, "%struct.malloc_tree_chunk*", 0);
 var $542=(($v_3_lcssa_i+16)|0);
 var $543=SAFE_HEAP_LOAD($542, "%struct.malloc_tree_chunk*", 0, 0);
 var $544=($543|0)==0;
 if($544){label=128;break;}else{label=125;break;}
 case 125: 
 var $546=$543;
 var $547=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $548=($546>>>0)<($547>>>0);
 if($548){label=127;break;}else{label=126;break;}
 case 126: 
 var $550=(($R_1_i122+16)|0);
 SAFE_HEAP_STORE($550, $543, "%struct.malloc_tree_chunk*", 0);
 var $551=(($543+24)|0);
 SAFE_HEAP_STORE($551, $R_1_i122, "%struct.malloc_tree_chunk*", 0);
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $554=(($v_3_lcssa_i+20)|0);
 var $555=SAFE_HEAP_LOAD($554, "%struct.malloc_tree_chunk*", 0, 0);
 var $556=($555|0)==0;
 if($556){label=133;break;}else{label=129;break;}
 case 129: 
 var $558=$555;
 var $559=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $560=($558>>>0)<($559>>>0);
 if($560){label=131;break;}else{label=130;break;}
 case 130: 
 var $562=(($R_1_i122+20)|0);
 SAFE_HEAP_STORE($562, $555, "%struct.malloc_tree_chunk*", 0);
 var $563=(($555+24)|0);
 SAFE_HEAP_STORE($563, $R_1_i122, "%struct.malloc_tree_chunk*", 0);
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $567=($rsize_3_lcssa_i>>>0)<16;
 if($567){label=134;break;}else{label=135;break;}
 case 134: 
 var $569=((($rsize_3_lcssa_i)+($348))|0);
 var $570=$569|3;
 var $571=(($v_3_lcssa_i+4)|0);
 SAFE_HEAP_STORE($571, $570, "i32", 0);
 var $_sum19_i=((($569)+(4))|0);
 var $572=(($462+$_sum19_i)|0);
 var $573=$572;
 var $574=SAFE_HEAP_LOAD($573, "i32", 0, 0);
 var $575=$574|1;
 SAFE_HEAP_STORE($573, $575, "i32", 0);
 label=159;break;
 case 135: 
 var $577=$348|3;
 var $578=(($v_3_lcssa_i+4)|0);
 SAFE_HEAP_STORE($578, $577, "i32", 0);
 var $579=$rsize_3_lcssa_i|1;
 var $_sum_i125136=$348|4;
 var $580=(($462+$_sum_i125136)|0);
 var $581=$580;
 SAFE_HEAP_STORE($581, $579, "i32", 0);
 var $_sum1_i126=((($rsize_3_lcssa_i)+($348))|0);
 var $582=(($462+$_sum1_i126)|0);
 var $583=$582;
 SAFE_HEAP_STORE($583, $rsize_3_lcssa_i, "i32", 0);
 var $584=$rsize_3_lcssa_i>>>3;
 var $585=($rsize_3_lcssa_i>>>0)<256;
 if($585){label=136;break;}else{label=141;break;}
 case 136: 
 var $587=$584<<1;
 var $588=((16120+($587<<2))|0);
 var $589=$588;
 var $590=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $591=1<<$584;
 var $592=$590&$591;
 var $593=($592|0)==0;
 if($593){label=137;break;}else{label=138;break;}
 case 137: 
 var $595=$590|$591;
 SAFE_HEAP_STORE(16080, $595, "i32", 0);
 var $_sum15_pre_i=((($587)+(2))|0);
 var $_pre_i127=((16120+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$589;var $_pre_phi_i128=$_pre_i127;label=140;break;
 case 138: 
 var $_sum18_i=((($587)+(2))|0);
 var $597=((16120+($_sum18_i<<2))|0);
 var $598=SAFE_HEAP_LOAD($597, "%struct.malloc_chunk*", 0, 0);
 var $599=$598;
 var $600=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $601=($599>>>0)<($600>>>0);
 if($601){label=139;break;}else{var $F5_0_i=$598;var $_pre_phi_i128=$597;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i128;
 var $F5_0_i;
 SAFE_HEAP_STORE($_pre_phi_i128, $467, "%struct.malloc_chunk*", 0);
 var $604=(($F5_0_i+12)|0);
 SAFE_HEAP_STORE($604, $467, "%struct.malloc_chunk*", 0);
 var $_sum16_i=((($348)+(8))|0);
 var $605=(($462+$_sum16_i)|0);
 var $606=$605;
 SAFE_HEAP_STORE($606, $F5_0_i, "%struct.malloc_chunk*", 0);
 var $_sum17_i=((($348)+(12))|0);
 var $607=(($462+$_sum17_i)|0);
 var $608=$607;
 SAFE_HEAP_STORE($608, $589, "%struct.malloc_chunk*", 0);
 label=159;break;
 case 141: 
 var $610=$466;
 var $611=$rsize_3_lcssa_i>>>8;
 var $612=($611|0)==0;
 if($612){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $614=($rsize_3_lcssa_i>>>0)>16777215;
 if($614){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $616=((($611)+(1048320))|0);
 var $617=$616>>>16;
 var $618=$617&8;
 var $619=$611<<$618;
 var $620=((($619)+(520192))|0);
 var $621=$620>>>16;
 var $622=$621&4;
 var $623=$622|$618;
 var $624=$619<<$622;
 var $625=((($624)+(245760))|0);
 var $626=$625>>>16;
 var $627=$626&2;
 var $628=$623|$627;
 var $629=(((14)-($628))|0);
 var $630=$624<<$627;
 var $631=$630>>>15;
 var $632=((($629)+($631))|0);
 var $633=$632<<1;
 var $634=((($632)+(7))|0);
 var $635=$rsize_3_lcssa_i>>>($634>>>0);
 var $636=$635&1;
 var $637=$636|$633;
 var $I7_0_i=$637;label=144;break;
 case 144: 
 var $I7_0_i;
 var $639=((16384+($I7_0_i<<2))|0);
 var $_sum2_i=((($348)+(28))|0);
 var $640=(($462+$_sum2_i)|0);
 var $641=$640;
 SAFE_HEAP_STORE($641, $I7_0_i, "i32", 0);
 var $_sum3_i129=((($348)+(16))|0);
 var $642=(($462+$_sum3_i129)|0);
 var $_sum4_i130=((($348)+(20))|0);
 var $643=(($462+$_sum4_i130)|0);
 var $644=$643;
 SAFE_HEAP_STORE($644, 0, "%struct.malloc_tree_chunk*", 0);
 var $645=$642;
 SAFE_HEAP_STORE($645, 0, "%struct.malloc_tree_chunk*", 0);
 var $646=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $647=1<<$I7_0_i;
 var $648=$646&$647;
 var $649=($648|0)==0;
 if($649){label=145;break;}else{label=146;break;}
 case 145: 
 var $651=$646|$647;
 SAFE_HEAP_STORE(16084, $651, "i32", 0);
 SAFE_HEAP_STORE($639, $610, "%struct.malloc_tree_chunk*", 0);
 var $652=$639;
 var $_sum5_i=((($348)+(24))|0);
 var $653=(($462+$_sum5_i)|0);
 var $654=$653;
 SAFE_HEAP_STORE($654, $652, "%struct.malloc_tree_chunk*", 0);
 var $_sum6_i=((($348)+(12))|0);
 var $655=(($462+$_sum6_i)|0);
 var $656=$655;
 SAFE_HEAP_STORE($656, $610, "%struct.malloc_tree_chunk*", 0);
 var $_sum7_i=((($348)+(8))|0);
 var $657=(($462+$_sum7_i)|0);
 var $658=$657;
 SAFE_HEAP_STORE($658, $610, "%struct.malloc_tree_chunk*", 0);
 label=159;break;
 case 146: 
 var $660=SAFE_HEAP_LOAD($639, "%struct.malloc_tree_chunk*", 0, 0);
 var $661=($I7_0_i|0)==31;
 if($661){var $666=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $663=$I7_0_i>>>1;
 var $664=(((25)-($663))|0);
 var $666=$664;label=148;break;
 case 148: 
 var $666;
 var $667=$rsize_3_lcssa_i<<$666;
 var $K12_0_i=$667;var $T_0_i=$660;label=149;break;
 case 149: 
 var $T_0_i;
 var $K12_0_i;
 var $669=(($T_0_i+4)|0);
 var $670=SAFE_HEAP_LOAD($669, "i32", 0, 0);
 var $671=$670&-8;
 var $672=($671|0)==($rsize_3_lcssa_i|0);
 if($672){label=154;break;}else{label=150;break;}
 case 150: 
 var $674=$K12_0_i>>>31;
 var $675=(($T_0_i+16+($674<<2))|0);
 var $676=SAFE_HEAP_LOAD($675, "%struct.malloc_tree_chunk*", 0, 0);
 var $677=($676|0)==0;
 var $678=$K12_0_i<<1;
 if($677){label=151;break;}else{var $K12_0_i=$678;var $T_0_i=$676;label=149;break;}
 case 151: 
 var $680=$675;
 var $681=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $682=($680>>>0)<($681>>>0);
 if($682){label=153;break;}else{label=152;break;}
 case 152: 
 SAFE_HEAP_STORE($675, $610, "%struct.malloc_tree_chunk*", 0);
 var $_sum12_i=((($348)+(24))|0);
 var $684=(($462+$_sum12_i)|0);
 var $685=$684;
 SAFE_HEAP_STORE($685, $T_0_i, "%struct.malloc_tree_chunk*", 0);
 var $_sum13_i=((($348)+(12))|0);
 var $686=(($462+$_sum13_i)|0);
 var $687=$686;
 SAFE_HEAP_STORE($687, $610, "%struct.malloc_tree_chunk*", 0);
 var $_sum14_i=((($348)+(8))|0);
 var $688=(($462+$_sum14_i)|0);
 var $689=$688;
 SAFE_HEAP_STORE($689, $610, "%struct.malloc_tree_chunk*", 0);
 label=159;break;
 case 153: 
 _abort();
 throw "Reached an unreachable!";
 case 154: 
 var $692=(($T_0_i+8)|0);
 var $693=SAFE_HEAP_LOAD($692, "%struct.malloc_tree_chunk*", 0, 0);
 var $694=$T_0_i;
 var $695=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $696=($694>>>0)<($695>>>0);
 if($696){label=157;break;}else{label=155;break;}
 case 155: 
 var $698=$693;
 var $699=($698>>>0)<($695>>>0);
 if($699){label=157;break;}else{label=156;break;}
 case 156: 
 var $701=(($693+12)|0);
 SAFE_HEAP_STORE($701, $610, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($692, $610, "%struct.malloc_tree_chunk*", 0);
 var $_sum9_i=((($348)+(8))|0);
 var $702=(($462+$_sum9_i)|0);
 var $703=$702;
 SAFE_HEAP_STORE($703, $693, "%struct.malloc_tree_chunk*", 0);
 var $_sum10_i=((($348)+(12))|0);
 var $704=(($462+$_sum10_i)|0);
 var $705=$704;
 SAFE_HEAP_STORE($705, $T_0_i, "%struct.malloc_tree_chunk*", 0);
 var $_sum11_i=((($348)+(24))|0);
 var $706=(($462+$_sum11_i)|0);
 var $707=$706;
 SAFE_HEAP_STORE($707, 0, "%struct.malloc_tree_chunk*", 0);
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $709=(($v_3_lcssa_i+8)|0);
 var $710=$709;
 var $711=($709|0)==0;
 if($711){var $nb_0=$348;label=160;break;}else{var $mem_0=$710;label=341;break;}
 case 160: 
 var $nb_0;
 var $712=SAFE_HEAP_LOAD(16088, "i32", 0, 0);
 var $713=($nb_0>>>0)>($712>>>0);
 if($713){label=165;break;}else{label=161;break;}
 case 161: 
 var $715=((($712)-($nb_0))|0);
 var $716=SAFE_HEAP_LOAD(16100, "%struct.malloc_chunk*", 0, 0);
 var $717=($715>>>0)>15;
 if($717){label=162;break;}else{label=163;break;}
 case 162: 
 var $719=$716;
 var $720=(($719+$nb_0)|0);
 var $721=$720;
 SAFE_HEAP_STORE(16100, $721, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE(16088, $715, "i32", 0);
 var $722=$715|1;
 var $_sum102=((($nb_0)+(4))|0);
 var $723=(($719+$_sum102)|0);
 var $724=$723;
 SAFE_HEAP_STORE($724, $722, "i32", 0);
 var $725=(($719+$712)|0);
 var $726=$725;
 SAFE_HEAP_STORE($726, $715, "i32", 0);
 var $727=$nb_0|3;
 var $728=(($716+4)|0);
 SAFE_HEAP_STORE($728, $727, "i32", 0);
 label=164;break;
 case 163: 
 SAFE_HEAP_STORE(16088, 0, "i32", 0);
 SAFE_HEAP_STORE(16100, 0, "%struct.malloc_chunk*", 0);
 var $730=$712|3;
 var $731=(($716+4)|0);
 SAFE_HEAP_STORE($731, $730, "i32", 0);
 var $732=$716;
 var $_sum101=((($712)+(4))|0);
 var $733=(($732+$_sum101)|0);
 var $734=$733;
 var $735=SAFE_HEAP_LOAD($734, "i32", 0, 0);
 var $736=$735|1;
 SAFE_HEAP_STORE($734, $736, "i32", 0);
 label=164;break;
 case 164: 
 var $738=(($716+8)|0);
 var $739=$738;
 var $mem_0=$739;label=341;break;
 case 165: 
 var $741=SAFE_HEAP_LOAD(16092, "i32", 0, 0);
 var $742=($nb_0>>>0)<($741>>>0);
 if($742){label=166;break;}else{label=167;break;}
 case 166: 
 var $744=((($741)-($nb_0))|0);
 SAFE_HEAP_STORE(16092, $744, "i32", 0);
 var $745=SAFE_HEAP_LOAD(16104, "%struct.malloc_chunk*", 0, 0);
 var $746=$745;
 var $747=(($746+$nb_0)|0);
 var $748=$747;
 SAFE_HEAP_STORE(16104, $748, "%struct.malloc_chunk*", 0);
 var $749=$744|1;
 var $_sum=((($nb_0)+(4))|0);
 var $750=(($746+$_sum)|0);
 var $751=$750;
 SAFE_HEAP_STORE($751, $749, "i32", 0);
 var $752=$nb_0|3;
 var $753=(($745+4)|0);
 SAFE_HEAP_STORE($753, $752, "i32", 0);
 var $754=(($745+8)|0);
 var $755=$754;
 var $mem_0=$755;label=341;break;
 case 167: 
 var $757=SAFE_HEAP_LOAD(2616, "i32", 0, 0);
 var $758=($757|0)==0;
 if($758){label=168;break;}else{label=171;break;}
 case 168: 
 var $760=_sysconf(30);
 var $761=((($760)-(1))|0);
 var $762=$761&$760;
 var $763=($762|0)==0;
 if($763){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 SAFE_HEAP_STORE(2624, $760, "i32", 0);
 SAFE_HEAP_STORE(2620, $760, "i32", 0);
 SAFE_HEAP_STORE(2628, -1, "i32", 0);
 SAFE_HEAP_STORE(2632, -1, "i32", 0);
 SAFE_HEAP_STORE(2636, 0, "i32", 0);
 SAFE_HEAP_STORE(16524, 0, "i32", 0);
 var $765=_time(0);
 var $766=$765&-16;
 var $767=$766^1431655768;
 SAFE_HEAP_STORE(2616, $767, "i32", 0);
 label=171;break;
 case 171: 
 var $769=((($nb_0)+(48))|0);
 var $770=SAFE_HEAP_LOAD(2624, "i32", 0, 0);
 var $771=((($nb_0)+(47))|0);
 var $772=((($770)+($771))|0);
 var $773=(((-$770))|0);
 var $774=$772&$773;
 var $775=($774>>>0)>($nb_0>>>0);
 if($775){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $777=SAFE_HEAP_LOAD(16520, "i32", 0, 0);
 var $778=($777|0)==0;
 if($778){label=174;break;}else{label=173;break;}
 case 173: 
 var $780=SAFE_HEAP_LOAD(16512, "i32", 0, 0);
 var $781=((($780)+($774))|0);
 var $782=($781>>>0)<=($780>>>0);
 var $783=($781>>>0)>($777>>>0);
 var $or_cond1_i=$782|$783;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $785=SAFE_HEAP_LOAD(16524, "i32", 0, 0);
 var $786=$785&4;
 var $787=($786|0)==0;
 if($787){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $789=SAFE_HEAP_LOAD(16104, "%struct.malloc_chunk*", 0, 0);
 var $790=($789|0)==0;
 if($790){label=181;break;}else{label=176;break;}
 case 176: 
 var $792=$789;
 var $sp_0_i_i=16528;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $794=(($sp_0_i_i)|0);
 var $795=SAFE_HEAP_LOAD($794, "i8*", 0, 0);
 var $796=($795>>>0)>($792>>>0);
 if($796){label=179;break;}else{label=178;break;}
 case 178: 
 var $798=(($sp_0_i_i+4)|0);
 var $799=SAFE_HEAP_LOAD($798, "i32", 0, 0);
 var $800=(($795+$799)|0);
 var $801=($800>>>0)>($792>>>0);
 if($801){label=180;break;}else{label=179;break;}
 case 179: 
 var $803=(($sp_0_i_i+8)|0);
 var $804=SAFE_HEAP_LOAD($803, "%struct.malloc_segment*", 0, 0);
 var $805=($804|0)==0;
 if($805){label=181;break;}else{var $sp_0_i_i=$804;label=177;break;}
 case 180: 
 var $806=($sp_0_i_i|0)==0;
 if($806){label=181;break;}else{label=188;break;}
 case 181: 
 var $807=_sbrk(0);
 var $808=($807|0)==-1;
 if($808){var $tsize_0303639_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $810=$807;
 var $811=SAFE_HEAP_LOAD(2620, "i32", 0, 0);
 var $812=((($811)-(1))|0);
 var $813=$812&$810;
 var $814=($813|0)==0;
 if($814){var $ssize_0_i=$774;label=184;break;}else{label=183;break;}
 case 183: 
 var $816=((($812)+($810))|0);
 var $817=(((-$811))|0);
 var $818=$816&$817;
 var $819=((($774)-($810))|0);
 var $820=((($819)+($818))|0);
 var $ssize_0_i=$820;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $822=SAFE_HEAP_LOAD(16512, "i32", 0, 0);
 var $823=((($822)+($ssize_0_i))|0);
 var $824=($ssize_0_i>>>0)>($nb_0>>>0);
 var $825=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i131=$824&$825;
 if($or_cond_i131){label=185;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 185: 
 var $827=SAFE_HEAP_LOAD(16520, "i32", 0, 0);
 var $828=($827|0)==0;
 if($828){label=187;break;}else{label=186;break;}
 case 186: 
 var $830=($823>>>0)<=($822>>>0);
 var $831=($823>>>0)>($827>>>0);
 var $or_cond2_i=$830|$831;
 if($or_cond2_i){var $tsize_0303639_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $833=_sbrk($ssize_0_i);
 var $834=($833|0)==($807|0);
 var $ssize_0__i=($834?$ssize_0_i:0);
 var $__i=($834?$807:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$833;var $ssize_1_i=$ssize_0_i;label=190;break;
 case 188: 
 var $836=SAFE_HEAP_LOAD(16092, "i32", 0, 0);
 var $837=((($772)-($836))|0);
 var $838=$837&$773;
 var $839=($838>>>0)<2147483647;
 if($839){label=189;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 189: 
 var $841=_sbrk($838);
 var $842=SAFE_HEAP_LOAD($794, "i8*", 0, 0);
 var $843=SAFE_HEAP_LOAD($798, "i32", 0, 0);
 var $844=(($842+$843)|0);
 var $845=($841|0)==($844|0);
 var $_3_i=($845?$838:0);
 var $_4_i=($845?$841:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$841;var $ssize_1_i=$838;label=190;break;
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $847=(((-$ssize_1_i))|0);
 var $848=($tbase_0_i|0)==-1;
 if($848){label=191;break;}else{var $tsize_244_i=$tsize_0_i;var $tbase_245_i=$tbase_0_i;label=201;break;}
 case 191: 
 var $850=($br_0_i|0)!=-1;
 var $851=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$850&$851;
 var $852=($ssize_1_i>>>0)<($769>>>0);
 var $or_cond6_i=$or_cond5_i&$852;
 if($or_cond6_i){label=192;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 192: 
 var $854=SAFE_HEAP_LOAD(2624, "i32", 0, 0);
 var $855=((($771)-($ssize_1_i))|0);
 var $856=((($855)+($854))|0);
 var $857=(((-$854))|0);
 var $858=$856&$857;
 var $859=($858>>>0)<2147483647;
 if($859){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 193: 
 var $861=_sbrk($858);
 var $862=($861|0)==-1;
 if($862){label=195;break;}else{label=194;break;}
 case 194: 
 var $864=((($858)+($ssize_1_i))|0);
 var $ssize_2_i=$864;label=196;break;
 case 195: 
 var $866=_sbrk($847);
 var $tsize_0303639_i=$tsize_0_i;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $868=($br_0_i|0)==-1;
 if($868){var $tsize_0303639_i=$tsize_0_i;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 197: 
 var $tsize_0303639_i;
 var $869=SAFE_HEAP_LOAD(16524, "i32", 0, 0);
 var $870=$869|4;
 SAFE_HEAP_STORE(16524, $870, "i32", 0);
 var $tsize_1_i=$tsize_0303639_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $872=($774>>>0)<2147483647;
 if($872){label=199;break;}else{label=340;break;}
 case 199: 
 var $874=_sbrk($774);
 var $875=_sbrk(0);
 var $notlhs_i=($874|0)!=-1;
 var $notrhs_i=($875|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $876=($874>>>0)<($875>>>0);
 var $or_cond9_i=$or_cond8_not_i&$876;
 if($or_cond9_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $877=$875;
 var $878=$874;
 var $879=((($877)-($878))|0);
 var $880=((($nb_0)+(40))|0);
 var $881=($879>>>0)>($880>>>0);
 var $_tsize_1_i=($881?$879:$tsize_1_i);
 var $_tbase_1_i=($881?$874:-1);
 var $882=($_tbase_1_i|0)==-1;
 if($882){label=340;break;}else{var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$_tbase_1_i;label=201;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $883=SAFE_HEAP_LOAD(16512, "i32", 0, 0);
 var $884=((($883)+($tsize_244_i))|0);
 SAFE_HEAP_STORE(16512, $884, "i32", 0);
 var $885=SAFE_HEAP_LOAD(16516, "i32", 0, 0);
 var $886=($884>>>0)>($885>>>0);
 if($886){label=202;break;}else{label=203;break;}
 case 202: 
 SAFE_HEAP_STORE(16516, $884, "i32", 0);
 label=203;break;
 case 203: 
 var $888=SAFE_HEAP_LOAD(16104, "%struct.malloc_chunk*", 0, 0);
 var $889=($888|0)==0;
 if($889){label=204;break;}else{var $sp_067_i=16528;label=211;break;}
 case 204: 
 var $891=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $892=($891|0)==0;
 var $893=($tbase_245_i>>>0)<($891>>>0);
 var $or_cond10_i=$892|$893;
 if($or_cond10_i){label=205;break;}else{label=206;break;}
 case 205: 
 SAFE_HEAP_STORE(16096, $tbase_245_i, "i8*", 0);
 label=206;break;
 case 206: 
 SAFE_HEAP_STORE(16528, $tbase_245_i, "i8*", 0);
 SAFE_HEAP_STORE(16532, $tsize_244_i, "i32", 0);
 SAFE_HEAP_STORE(16540, 0, "i32", 0);
 var $895=SAFE_HEAP_LOAD(2616, "i32", 0, 0);
 SAFE_HEAP_STORE(16116, $895, "i32", 0);
 SAFE_HEAP_STORE(16112, -1, "i32", 0);
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $897=$i_02_i_i<<1;
 var $898=((16120+($897<<2))|0);
 var $899=$898;
 var $_sum_i_i=((($897)+(3))|0);
 var $900=((16120+($_sum_i_i<<2))|0);
 SAFE_HEAP_STORE($900, $899, "%struct.malloc_chunk*", 0);
 var $_sum1_i_i=((($897)+(2))|0);
 var $901=((16120+($_sum1_i_i<<2))|0);
 SAFE_HEAP_STORE($901, $899, "%struct.malloc_chunk*", 0);
 var $902=((($i_02_i_i)+(1))|0);
 var $903=($902>>>0)<32;
 if($903){var $i_02_i_i=$902;label=207;break;}else{label=208;break;}
 case 208: 
 var $904=((($tsize_244_i)-(40))|0);
 var $905=(($tbase_245_i+8)|0);
 var $906=$905;
 var $907=$906&7;
 var $908=($907|0)==0;
 if($908){var $912=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $910=(((-$906))|0);
 var $911=$910&7;
 var $912=$911;label=210;break;
 case 210: 
 var $912;
 var $913=(($tbase_245_i+$912)|0);
 var $914=$913;
 var $915=((($904)-($912))|0);
 SAFE_HEAP_STORE(16104, $914, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE(16092, $915, "i32", 0);
 var $916=$915|1;
 var $_sum_i14_i=((($912)+(4))|0);
 var $917=(($tbase_245_i+$_sum_i14_i)|0);
 var $918=$917;
 SAFE_HEAP_STORE($918, $916, "i32", 0);
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $919=(($tbase_245_i+$_sum2_i_i)|0);
 var $920=$919;
 SAFE_HEAP_STORE($920, 40, "i32", 0);
 var $921=SAFE_HEAP_LOAD(2632, "i32", 0, 0);
 SAFE_HEAP_STORE(16108, $921, "i32", 0);
 label=338;break;
 case 211: 
 var $sp_067_i;
 var $922=(($sp_067_i)|0);
 var $923=SAFE_HEAP_LOAD($922, "i8*", 0, 0);
 var $924=(($sp_067_i+4)|0);
 var $925=SAFE_HEAP_LOAD($924, "i32", 0, 0);
 var $926=(($923+$925)|0);
 var $927=($tbase_245_i|0)==($926|0);
 if($927){label=213;break;}else{label=212;break;}
 case 212: 
 var $929=(($sp_067_i+8)|0);
 var $930=SAFE_HEAP_LOAD($929, "%struct.malloc_segment*", 0, 0);
 var $931=($930|0)==0;
 if($931){label=218;break;}else{var $sp_067_i=$930;label=211;break;}
 case 213: 
 var $932=(($sp_067_i+12)|0);
 var $933=SAFE_HEAP_LOAD($932, "i32", 0, 0);
 var $934=$933&8;
 var $935=($934|0)==0;
 if($935){label=214;break;}else{label=218;break;}
 case 214: 
 var $937=$888;
 var $938=($937>>>0)>=($923>>>0);
 var $939=($937>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$938&$939;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $941=((($925)+($tsize_244_i))|0);
 SAFE_HEAP_STORE($924, $941, "i32", 0);
 var $942=SAFE_HEAP_LOAD(16092, "i32", 0, 0);
 var $943=((($942)+($tsize_244_i))|0);
 var $944=(($888+8)|0);
 var $945=$944;
 var $946=$945&7;
 var $947=($946|0)==0;
 if($947){var $951=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $949=(((-$945))|0);
 var $950=$949&7;
 var $951=$950;label=217;break;
 case 217: 
 var $951;
 var $952=(($937+$951)|0);
 var $953=$952;
 var $954=((($943)-($951))|0);
 SAFE_HEAP_STORE(16104, $953, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE(16092, $954, "i32", 0);
 var $955=$954|1;
 var $_sum_i18_i=((($951)+(4))|0);
 var $956=(($937+$_sum_i18_i)|0);
 var $957=$956;
 SAFE_HEAP_STORE($957, $955, "i32", 0);
 var $_sum2_i19_i=((($943)+(4))|0);
 var $958=(($937+$_sum2_i19_i)|0);
 var $959=$958;
 SAFE_HEAP_STORE($959, 40, "i32", 0);
 var $960=SAFE_HEAP_LOAD(2632, "i32", 0, 0);
 SAFE_HEAP_STORE(16108, $960, "i32", 0);
 label=338;break;
 case 218: 
 var $961=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $962=($tbase_245_i>>>0)<($961>>>0);
 if($962){label=219;break;}else{label=220;break;}
 case 219: 
 SAFE_HEAP_STORE(16096, $tbase_245_i, "i8*", 0);
 label=220;break;
 case 220: 
 var $964=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_160_i=16528;label=221;break;
 case 221: 
 var $sp_160_i;
 var $966=(($sp_160_i)|0);
 var $967=SAFE_HEAP_LOAD($966, "i8*", 0, 0);
 var $968=($967|0)==($964|0);
 if($968){label=223;break;}else{label=222;break;}
 case 222: 
 var $970=(($sp_160_i+8)|0);
 var $971=SAFE_HEAP_LOAD($970, "%struct.malloc_segment*", 0, 0);
 var $972=($971|0)==0;
 if($972){label=304;break;}else{var $sp_160_i=$971;label=221;break;}
 case 223: 
 var $973=(($sp_160_i+12)|0);
 var $974=SAFE_HEAP_LOAD($973, "i32", 0, 0);
 var $975=$974&8;
 var $976=($975|0)==0;
 if($976){label=224;break;}else{label=304;break;}
 case 224: 
 SAFE_HEAP_STORE($966, $tbase_245_i, "i8*", 0);
 var $978=(($sp_160_i+4)|0);
 var $979=SAFE_HEAP_LOAD($978, "i32", 0, 0);
 var $980=((($979)+($tsize_244_i))|0);
 SAFE_HEAP_STORE($978, $980, "i32", 0);
 var $981=(($tbase_245_i+8)|0);
 var $982=$981;
 var $983=$982&7;
 var $984=($983|0)==0;
 if($984){var $989=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $986=(((-$982))|0);
 var $987=$986&7;
 var $989=$987;label=226;break;
 case 226: 
 var $989;
 var $990=(($tbase_245_i+$989)|0);
 var $_sum93_i=((($tsize_244_i)+(8))|0);
 var $991=(($tbase_245_i+$_sum93_i)|0);
 var $992=$991;
 var $993=$992&7;
 var $994=($993|0)==0;
 if($994){var $999=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $996=(((-$992))|0);
 var $997=$996&7;
 var $999=$997;label=228;break;
 case 228: 
 var $999;
 var $_sum94_i=((($999)+($tsize_244_i))|0);
 var $1000=(($tbase_245_i+$_sum94_i)|0);
 var $1001=$1000;
 var $1002=$1000;
 var $1003=$990;
 var $1004=((($1002)-($1003))|0);
 var $_sum_i21_i=((($989)+($nb_0))|0);
 var $1005=(($tbase_245_i+$_sum_i21_i)|0);
 var $1006=$1005;
 var $1007=((($1004)-($nb_0))|0);
 var $1008=$nb_0|3;
 var $_sum1_i22_i=((($989)+(4))|0);
 var $1009=(($tbase_245_i+$_sum1_i22_i)|0);
 var $1010=$1009;
 SAFE_HEAP_STORE($1010, $1008, "i32", 0);
 var $1011=SAFE_HEAP_LOAD(16104, "%struct.malloc_chunk*", 0, 0);
 var $1012=($1001|0)==($1011|0);
 if($1012){label=229;break;}else{label=230;break;}
 case 229: 
 var $1014=SAFE_HEAP_LOAD(16092, "i32", 0, 0);
 var $1015=((($1014)+($1007))|0);
 SAFE_HEAP_STORE(16092, $1015, "i32", 0);
 SAFE_HEAP_STORE(16104, $1006, "%struct.malloc_chunk*", 0);
 var $1016=$1015|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1017=(($tbase_245_i+$_sum46_i_i)|0);
 var $1018=$1017;
 SAFE_HEAP_STORE($1018, $1016, "i32", 0);
 label=303;break;
 case 230: 
 var $1020=SAFE_HEAP_LOAD(16100, "%struct.malloc_chunk*", 0, 0);
 var $1021=($1001|0)==($1020|0);
 if($1021){label=231;break;}else{label=232;break;}
 case 231: 
 var $1023=SAFE_HEAP_LOAD(16088, "i32", 0, 0);
 var $1024=((($1023)+($1007))|0);
 SAFE_HEAP_STORE(16088, $1024, "i32", 0);
 SAFE_HEAP_STORE(16100, $1006, "%struct.malloc_chunk*", 0);
 var $1025=$1024|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1026=(($tbase_245_i+$_sum44_i_i)|0);
 var $1027=$1026;
 SAFE_HEAP_STORE($1027, $1025, "i32", 0);
 var $_sum45_i_i=((($1024)+($_sum_i21_i))|0);
 var $1028=(($tbase_245_i+$_sum45_i_i)|0);
 var $1029=$1028;
 SAFE_HEAP_STORE($1029, $1024, "i32", 0);
 label=303;break;
 case 232: 
 var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
 var $_sum95_i=((($_sum2_i23_i)+($999))|0);
 var $1031=(($tbase_245_i+$_sum95_i)|0);
 var $1032=$1031;
 var $1033=SAFE_HEAP_LOAD($1032, "i32", 0, 0);
 var $1034=$1033&3;
 var $1035=($1034|0)==1;
 if($1035){label=233;break;}else{var $oldfirst_0_i_i=$1001;var $qsize_0_i_i=$1007;label=280;break;}
 case 233: 
 var $1037=$1033&-8;
 var $1038=$1033>>>3;
 var $1039=($1033>>>0)<256;
 if($1039){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$999|8;
 var $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1041=(($tbase_245_i+$_sum105_i)|0);
 var $1042=$1041;
 var $1043=SAFE_HEAP_LOAD($1042, "%struct.malloc_chunk*", 0, 0);
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum41_i_i)+($999))|0);
 var $1044=(($tbase_245_i+$_sum106_i)|0);
 var $1045=$1044;
 var $1046=SAFE_HEAP_LOAD($1045, "%struct.malloc_chunk*", 0, 0);
 var $1047=$1038<<1;
 var $1048=((16120+($1047<<2))|0);
 var $1049=$1048;
 var $1050=($1043|0)==($1049|0);
 if($1050){label=237;break;}else{label=235;break;}
 case 235: 
 var $1052=$1043;
 var $1053=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1054=($1052>>>0)<($1053>>>0);
 if($1054){label=245;break;}else{label=236;break;}
 case 236: 
 var $1056=(($1043+12)|0);
 var $1057=SAFE_HEAP_LOAD($1056, "%struct.malloc_chunk*", 0, 0);
 var $1058=($1057|0)==($1001|0);
 if($1058){label=237;break;}else{label=245;break;}
 case 237: 
 var $1059=($1046|0)==($1043|0);
 if($1059){label=238;break;}else{label=239;break;}
 case 238: 
 var $1061=1<<$1038;
 var $1062=$1061^-1;
 var $1063=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $1064=$1063&$1062;
 SAFE_HEAP_STORE(16080, $1064, "i32", 0);
 label=279;break;
 case 239: 
 var $1066=($1046|0)==($1049|0);
 if($1066){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre56_i_i=(($1046+8)|0);
 var $_pre_phi57_i_i=$_pre56_i_i;label=243;break;
 case 241: 
 var $1068=$1046;
 var $1069=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1070=($1068>>>0)<($1069>>>0);
 if($1070){label=244;break;}else{label=242;break;}
 case 242: 
 var $1072=(($1046+8)|0);
 var $1073=SAFE_HEAP_LOAD($1072, "%struct.malloc_chunk*", 0, 0);
 var $1074=($1073|0)==($1001|0);
 if($1074){var $_pre_phi57_i_i=$1072;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi57_i_i;
 var $1075=(($1043+12)|0);
 SAFE_HEAP_STORE($1075, $1046, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE($_pre_phi57_i_i, $1043, "%struct.malloc_chunk*", 0);
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1077=$1000;
 var $_sum34_i_i=$999|24;
 var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1078=(($tbase_245_i+$_sum96_i)|0);
 var $1079=$1078;
 var $1080=SAFE_HEAP_LOAD($1079, "%struct.malloc_tree_chunk*", 0, 0);
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum97_i=((($_sum5_i_i)+($999))|0);
 var $1081=(($tbase_245_i+$_sum97_i)|0);
 var $1082=$1081;
 var $1083=SAFE_HEAP_LOAD($1082, "%struct.malloc_tree_chunk*", 0, 0);
 var $1084=($1083|0)==($1077|0);
 if($1084){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$999|8;
 var $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1086=(($tbase_245_i+$_sum98_i)|0);
 var $1087=$1086;
 var $1088=SAFE_HEAP_LOAD($1087, "%struct.malloc_tree_chunk*", 0, 0);
 var $1089=$1088;
 var $1090=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1091=($1089>>>0)<($1090>>>0);
 if($1091){label=251;break;}else{label=248;break;}
 case 248: 
 var $1093=(($1088+12)|0);
 var $1094=SAFE_HEAP_LOAD($1093, "%struct.malloc_tree_chunk*", 0, 0);
 var $1095=($1094|0)==($1077|0);
 if($1095){label=249;break;}else{label=251;break;}
 case 249: 
 var $1097=(($1083+8)|0);
 var $1098=SAFE_HEAP_LOAD($1097, "%struct.malloc_tree_chunk*", 0, 0);
 var $1099=($1098|0)==($1077|0);
 if($1099){label=250;break;}else{label=251;break;}
 case 250: 
 SAFE_HEAP_STORE($1093, $1083, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($1097, $1088, "%struct.malloc_tree_chunk*", 0);
 var $R_1_i_i=$1083;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$999|16;
 var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1102=(($tbase_245_i+$_sum103_i)|0);
 var $1103=$1102;
 var $1104=SAFE_HEAP_LOAD($1103, "%struct.malloc_tree_chunk*", 0, 0);
 var $1105=($1104|0)==0;
 if($1105){label=253;break;}else{var $R_0_i_i=$1104;var $RP_0_i_i=$1103;label=254;break;}
 case 253: 
 var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1107=(($tbase_245_i+$_sum104_i)|0);
 var $1108=$1107;
 var $1109=SAFE_HEAP_LOAD($1108, "%struct.malloc_tree_chunk*", 0, 0);
 var $1110=($1109|0)==0;
 if($1110){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1109;var $RP_0_i_i=$1108;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1111=(($R_0_i_i+20)|0);
 var $1112=SAFE_HEAP_LOAD($1111, "%struct.malloc_tree_chunk*", 0, 0);
 var $1113=($1112|0)==0;
 if($1113){label=255;break;}else{var $R_0_i_i=$1112;var $RP_0_i_i=$1111;label=254;break;}
 case 255: 
 var $1115=(($R_0_i_i+16)|0);
 var $1116=SAFE_HEAP_LOAD($1115, "%struct.malloc_tree_chunk*", 0, 0);
 var $1117=($1116|0)==0;
 if($1117){label=256;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=254;break;}
 case 256: 
 var $1119=$RP_0_i_i;
 var $1120=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1121=($1119>>>0)<($1120>>>0);
 if($1121){label=258;break;}else{label=257;break;}
 case 257: 
 SAFE_HEAP_STORE($RP_0_i_i, 0, "%struct.malloc_tree_chunk*", 0);
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1125=($1080|0)==0;
 if($1125){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum99_i=((($_sum31_i_i)+($999))|0);
 var $1127=(($tbase_245_i+$_sum99_i)|0);
 var $1128=$1127;
 var $1129=SAFE_HEAP_LOAD($1128, "i32", 0, 0);
 var $1130=((16384+($1129<<2))|0);
 var $1131=SAFE_HEAP_LOAD($1130, "%struct.malloc_tree_chunk*", 0, 0);
 var $1132=($1077|0)==($1131|0);
 if($1132){label=261;break;}else{label=263;break;}
 case 261: 
 SAFE_HEAP_STORE($1130, $R_1_i_i, "%struct.malloc_tree_chunk*", 0);
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1134=1<<$1129;
 var $1135=$1134^-1;
 var $1136=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $1137=$1136&$1135;
 SAFE_HEAP_STORE(16084, $1137, "i32", 0);
 label=279;break;
 case 263: 
 var $1139=$1080;
 var $1140=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1141=($1139>>>0)<($1140>>>0);
 if($1141){label=267;break;}else{label=264;break;}
 case 264: 
 var $1143=(($1080+16)|0);
 var $1144=SAFE_HEAP_LOAD($1143, "%struct.malloc_tree_chunk*", 0, 0);
 var $1145=($1144|0)==($1077|0);
 if($1145){label=265;break;}else{label=266;break;}
 case 265: 
 SAFE_HEAP_STORE($1143, $R_1_i_i, "%struct.malloc_tree_chunk*", 0);
 label=268;break;
 case 266: 
 var $1148=(($1080+20)|0);
 SAFE_HEAP_STORE($1148, $R_1_i_i, "%struct.malloc_tree_chunk*", 0);
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1151=($R_1_i_i|0)==0;
 if($1151){label=279;break;}else{label=269;break;}
 case 269: 
 var $1153=$R_1_i_i;
 var $1154=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1155=($1153>>>0)<($1154>>>0);
 if($1155){label=278;break;}else{label=270;break;}
 case 270: 
 var $1157=(($R_1_i_i+24)|0);
 SAFE_HEAP_STORE($1157, $1080, "%struct.malloc_tree_chunk*", 0);
 var $_sum3233_i_i=$999|16;
 var $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1158=(($tbase_245_i+$_sum100_i)|0);
 var $1159=$1158;
 var $1160=SAFE_HEAP_LOAD($1159, "%struct.malloc_tree_chunk*", 0, 0);
 var $1161=($1160|0)==0;
 if($1161){label=274;break;}else{label=271;break;}
 case 271: 
 var $1163=$1160;
 var $1164=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1165=($1163>>>0)<($1164>>>0);
 if($1165){label=273;break;}else{label=272;break;}
 case 272: 
 var $1167=(($R_1_i_i+16)|0);
 SAFE_HEAP_STORE($1167, $1160, "%struct.malloc_tree_chunk*", 0);
 var $1168=(($1160+24)|0);
 SAFE_HEAP_STORE($1168, $R_1_i_i, "%struct.malloc_tree_chunk*", 0);
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1171=(($tbase_245_i+$_sum101_i)|0);
 var $1172=$1171;
 var $1173=SAFE_HEAP_LOAD($1172, "%struct.malloc_tree_chunk*", 0, 0);
 var $1174=($1173|0)==0;
 if($1174){label=279;break;}else{label=275;break;}
 case 275: 
 var $1176=$1173;
 var $1177=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1178=($1176>>>0)<($1177>>>0);
 if($1178){label=277;break;}else{label=276;break;}
 case 276: 
 var $1180=(($R_1_i_i+20)|0);
 SAFE_HEAP_STORE($1180, $1173, "%struct.malloc_tree_chunk*", 0);
 var $1181=(($1173+24)|0);
 SAFE_HEAP_STORE($1181, $R_1_i_i, "%struct.malloc_tree_chunk*", 0);
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1037|$999;
 var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1185=(($tbase_245_i+$_sum102_i)|0);
 var $1186=$1185;
 var $1187=((($1037)+($1007))|0);
 var $oldfirst_0_i_i=$1186;var $qsize_0_i_i=$1187;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1189=(($oldfirst_0_i_i+4)|0);
 var $1190=SAFE_HEAP_LOAD($1189, "i32", 0, 0);
 var $1191=$1190&-2;
 SAFE_HEAP_STORE($1189, $1191, "i32", 0);
 var $1192=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1193=(($tbase_245_i+$_sum10_i_i)|0);
 var $1194=$1193;
 SAFE_HEAP_STORE($1194, $1192, "i32", 0);
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1195=(($tbase_245_i+$_sum11_i_i)|0);
 var $1196=$1195;
 SAFE_HEAP_STORE($1196, $qsize_0_i_i, "i32", 0);
 var $1197=$qsize_0_i_i>>>3;
 var $1198=($qsize_0_i_i>>>0)<256;
 if($1198){label=281;break;}else{label=286;break;}
 case 281: 
 var $1200=$1197<<1;
 var $1201=((16120+($1200<<2))|0);
 var $1202=$1201;
 var $1203=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $1204=1<<$1197;
 var $1205=$1203&$1204;
 var $1206=($1205|0)==0;
 if($1206){label=282;break;}else{label=283;break;}
 case 282: 
 var $1208=$1203|$1204;
 SAFE_HEAP_STORE(16080, $1208, "i32", 0);
 var $_sum27_pre_i_i=((($1200)+(2))|0);
 var $_pre_i24_i=((16120+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1202;var $_pre_phi_i25_i=$_pre_i24_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1200)+(2))|0);
 var $1210=((16120+($_sum30_i_i<<2))|0);
 var $1211=SAFE_HEAP_LOAD($1210, "%struct.malloc_chunk*", 0, 0);
 var $1212=$1211;
 var $1213=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1214=($1212>>>0)<($1213>>>0);
 if($1214){label=284;break;}else{var $F4_0_i_i=$1211;var $_pre_phi_i25_i=$1210;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 SAFE_HEAP_STORE($_pre_phi_i25_i, $1006, "%struct.malloc_chunk*", 0);
 var $1217=(($F4_0_i_i+12)|0);
 SAFE_HEAP_STORE($1217, $1006, "%struct.malloc_chunk*", 0);
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1218=(($tbase_245_i+$_sum28_i_i)|0);
 var $1219=$1218;
 SAFE_HEAP_STORE($1219, $F4_0_i_i, "%struct.malloc_chunk*", 0);
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1220=(($tbase_245_i+$_sum29_i_i)|0);
 var $1221=$1220;
 SAFE_HEAP_STORE($1221, $1202, "%struct.malloc_chunk*", 0);
 label=303;break;
 case 286: 
 var $1223=$1005;
 var $1224=$qsize_0_i_i>>>8;
 var $1225=($1224|0)==0;
 if($1225){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1227=($qsize_0_i_i>>>0)>16777215;
 if($1227){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1229=((($1224)+(1048320))|0);
 var $1230=$1229>>>16;
 var $1231=$1230&8;
 var $1232=$1224<<$1231;
 var $1233=((($1232)+(520192))|0);
 var $1234=$1233>>>16;
 var $1235=$1234&4;
 var $1236=$1235|$1231;
 var $1237=$1232<<$1235;
 var $1238=((($1237)+(245760))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&2;
 var $1241=$1236|$1240;
 var $1242=(((14)-($1241))|0);
 var $1243=$1237<<$1240;
 var $1244=$1243>>>15;
 var $1245=((($1242)+($1244))|0);
 var $1246=$1245<<1;
 var $1247=((($1245)+(7))|0);
 var $1248=$qsize_0_i_i>>>($1247>>>0);
 var $1249=$1248&1;
 var $1250=$1249|$1246;
 var $I7_0_i_i=$1250;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1252=((16384+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1253=(($tbase_245_i+$_sum12_i26_i)|0);
 var $1254=$1253;
 SAFE_HEAP_STORE($1254, $I7_0_i_i, "i32", 0);
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1255=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1256=(($tbase_245_i+$_sum14_i_i)|0);
 var $1257=$1256;
 SAFE_HEAP_STORE($1257, 0, "%struct.malloc_tree_chunk*", 0);
 var $1258=$1255;
 SAFE_HEAP_STORE($1258, 0, "%struct.malloc_tree_chunk*", 0);
 var $1259=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $1260=1<<$I7_0_i_i;
 var $1261=$1259&$1260;
 var $1262=($1261|0)==0;
 if($1262){label=290;break;}else{label=291;break;}
 case 290: 
 var $1264=$1259|$1260;
 SAFE_HEAP_STORE(16084, $1264, "i32", 0);
 SAFE_HEAP_STORE($1252, $1223, "%struct.malloc_tree_chunk*", 0);
 var $1265=$1252;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1266=(($tbase_245_i+$_sum15_i_i)|0);
 var $1267=$1266;
 SAFE_HEAP_STORE($1267, $1265, "%struct.malloc_tree_chunk*", 0);
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1268=(($tbase_245_i+$_sum16_i_i)|0);
 var $1269=$1268;
 SAFE_HEAP_STORE($1269, $1223, "%struct.malloc_tree_chunk*", 0);
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1270=(($tbase_245_i+$_sum17_i_i)|0);
 var $1271=$1270;
 SAFE_HEAP_STORE($1271, $1223, "%struct.malloc_tree_chunk*", 0);
 label=303;break;
 case 291: 
 var $1273=SAFE_HEAP_LOAD($1252, "%struct.malloc_tree_chunk*", 0, 0);
 var $1274=($I7_0_i_i|0)==31;
 if($1274){var $1279=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1276=$I7_0_i_i>>>1;
 var $1277=(((25)-($1276))|0);
 var $1279=$1277;label=293;break;
 case 293: 
 var $1279;
 var $1280=$qsize_0_i_i<<$1279;
 var $K8_0_i_i=$1280;var $T_0_i27_i=$1273;label=294;break;
 case 294: 
 var $T_0_i27_i;
 var $K8_0_i_i;
 var $1282=(($T_0_i27_i+4)|0);
 var $1283=SAFE_HEAP_LOAD($1282, "i32", 0, 0);
 var $1284=$1283&-8;
 var $1285=($1284|0)==($qsize_0_i_i|0);
 if($1285){label=299;break;}else{label=295;break;}
 case 295: 
 var $1287=$K8_0_i_i>>>31;
 var $1288=(($T_0_i27_i+16+($1287<<2))|0);
 var $1289=SAFE_HEAP_LOAD($1288, "%struct.malloc_tree_chunk*", 0, 0);
 var $1290=($1289|0)==0;
 var $1291=$K8_0_i_i<<1;
 if($1290){label=296;break;}else{var $K8_0_i_i=$1291;var $T_0_i27_i=$1289;label=294;break;}
 case 296: 
 var $1293=$1288;
 var $1294=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1295=($1293>>>0)<($1294>>>0);
 if($1295){label=298;break;}else{label=297;break;}
 case 297: 
 SAFE_HEAP_STORE($1288, $1223, "%struct.malloc_tree_chunk*", 0);
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1297=(($tbase_245_i+$_sum24_i_i)|0);
 var $1298=$1297;
 SAFE_HEAP_STORE($1298, $T_0_i27_i, "%struct.malloc_tree_chunk*", 0);
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1299=(($tbase_245_i+$_sum25_i_i)|0);
 var $1300=$1299;
 SAFE_HEAP_STORE($1300, $1223, "%struct.malloc_tree_chunk*", 0);
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1301=(($tbase_245_i+$_sum26_i_i)|0);
 var $1302=$1301;
 SAFE_HEAP_STORE($1302, $1223, "%struct.malloc_tree_chunk*", 0);
 label=303;break;
 case 298: 
 _abort();
 throw "Reached an unreachable!";
 case 299: 
 var $1305=(($T_0_i27_i+8)|0);
 var $1306=SAFE_HEAP_LOAD($1305, "%struct.malloc_tree_chunk*", 0, 0);
 var $1307=$T_0_i27_i;
 var $1308=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1309=($1307>>>0)<($1308>>>0);
 if($1309){label=302;break;}else{label=300;break;}
 case 300: 
 var $1311=$1306;
 var $1312=($1311>>>0)<($1308>>>0);
 if($1312){label=302;break;}else{label=301;break;}
 case 301: 
 var $1314=(($1306+12)|0);
 SAFE_HEAP_STORE($1314, $1223, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($1305, $1223, "%struct.malloc_tree_chunk*", 0);
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1315=(($tbase_245_i+$_sum21_i_i)|0);
 var $1316=$1315;
 SAFE_HEAP_STORE($1316, $1306, "%struct.malloc_tree_chunk*", 0);
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1317=(($tbase_245_i+$_sum22_i_i)|0);
 var $1318=$1317;
 SAFE_HEAP_STORE($1318, $T_0_i27_i, "%struct.malloc_tree_chunk*", 0);
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1319=(($tbase_245_i+$_sum23_i_i)|0);
 var $1320=$1319;
 SAFE_HEAP_STORE($1320, 0, "%struct.malloc_tree_chunk*", 0);
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$989|8;
 var $1321=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1321;label=341;break;
 case 304: 
 var $1322=$888;
 var $sp_0_i_i_i=16528;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1324=(($sp_0_i_i_i)|0);
 var $1325=SAFE_HEAP_LOAD($1324, "i8*", 0, 0);
 var $1326=($1325>>>0)>($1322>>>0);
 if($1326){label=307;break;}else{label=306;break;}
 case 306: 
 var $1328=(($sp_0_i_i_i+4)|0);
 var $1329=SAFE_HEAP_LOAD($1328, "i32", 0, 0);
 var $1330=(($1325+$1329)|0);
 var $1331=($1330>>>0)>($1322>>>0);
 if($1331){label=308;break;}else{label=307;break;}
 case 307: 
 var $1333=(($sp_0_i_i_i+8)|0);
 var $1334=SAFE_HEAP_LOAD($1333, "%struct.malloc_segment*", 0, 0);
 var $sp_0_i_i_i=$1334;label=305;break;
 case 308: 
 var $_sum_i15_i=((($1329)-(47))|0);
 var $_sum1_i16_i=((($1329)-(39))|0);
 var $1335=(($1325+$_sum1_i16_i)|0);
 var $1336=$1335;
 var $1337=$1336&7;
 var $1338=($1337|0)==0;
 if($1338){var $1343=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1340=(((-$1336))|0);
 var $1341=$1340&7;
 var $1343=$1341;label=310;break;
 case 310: 
 var $1343;
 var $_sum2_i17_i=((($_sum_i15_i)+($1343))|0);
 var $1344=(($1325+$_sum2_i17_i)|0);
 var $1345=(($888+16)|0);
 var $1346=$1345;
 var $1347=($1344>>>0)<($1346>>>0);
 var $1348=($1347?$1322:$1344);
 var $1349=(($1348+8)|0);
 var $1350=$1349;
 var $1351=((($tsize_244_i)-(40))|0);
 var $1352=(($tbase_245_i+8)|0);
 var $1353=$1352;
 var $1354=$1353&7;
 var $1355=($1354|0)==0;
 if($1355){var $1359=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1357=(((-$1353))|0);
 var $1358=$1357&7;
 var $1359=$1358;label=312;break;
 case 312: 
 var $1359;
 var $1360=(($tbase_245_i+$1359)|0);
 var $1361=$1360;
 var $1362=((($1351)-($1359))|0);
 SAFE_HEAP_STORE(16104, $1361, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE(16092, $1362, "i32", 0);
 var $1363=$1362|1;
 var $_sum_i_i_i=((($1359)+(4))|0);
 var $1364=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1365=$1364;
 SAFE_HEAP_STORE($1365, $1363, "i32", 0);
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1366=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1367=$1366;
 SAFE_HEAP_STORE($1367, 40, "i32", 0);
 var $1368=SAFE_HEAP_LOAD(2632, "i32", 0, 0);
 SAFE_HEAP_STORE(16108, $1368, "i32", 0);
 var $1369=(($1348+4)|0);
 var $1370=$1369;
 SAFE_HEAP_STORE($1370, 27, "i32", 0);
 assert(16 % 1 === 0);SAFE_HEAP_STORE($1349, SAFE_HEAP_LOAD(16528, "i32", 0, 0), "i32", 0);SAFE_HEAP_STORE(($1349)+(4), SAFE_HEAP_LOAD(16532, "i32", 0, 0), "i32", 0);SAFE_HEAP_STORE(($1349)+(8), SAFE_HEAP_LOAD(16536, "i32", 0, 0), "i32", 0);SAFE_HEAP_STORE(($1349)+(12), SAFE_HEAP_LOAD(16540, "i32", 0, 0), "i32", 0);
 SAFE_HEAP_STORE(16528, $tbase_245_i, "i8*", 0);
 SAFE_HEAP_STORE(16532, $tsize_244_i, "i32", 0);
 SAFE_HEAP_STORE(16540, 0, "i32", 0);
 SAFE_HEAP_STORE(16536, $1350, "%struct.malloc_segment*", 0);
 var $1371=(($1348+28)|0);
 var $1372=$1371;
 SAFE_HEAP_STORE($1372, 7, "i32", 0);
 var $1373=(($1348+32)|0);
 var $1374=($1373>>>0)<($1330>>>0);
 if($1374){var $1375=$1372;label=313;break;}else{label=314;break;}
 case 313: 
 var $1375;
 var $1376=(($1375+4)|0);
 SAFE_HEAP_STORE($1376, 7, "i32", 0);
 var $1377=(($1375+8)|0);
 var $1378=$1377;
 var $1379=($1378>>>0)<($1330>>>0);
 if($1379){var $1375=$1376;label=313;break;}else{label=314;break;}
 case 314: 
 var $1380=($1348|0)==($1322|0);
 if($1380){label=338;break;}else{label=315;break;}
 case 315: 
 var $1382=$1348;
 var $1383=$888;
 var $1384=((($1382)-($1383))|0);
 var $1385=(($1322+$1384)|0);
 var $_sum3_i_i=((($1384)+(4))|0);
 var $1386=(($1322+$_sum3_i_i)|0);
 var $1387=$1386;
 var $1388=SAFE_HEAP_LOAD($1387, "i32", 0, 0);
 var $1389=$1388&-2;
 SAFE_HEAP_STORE($1387, $1389, "i32", 0);
 var $1390=$1384|1;
 var $1391=(($888+4)|0);
 SAFE_HEAP_STORE($1391, $1390, "i32", 0);
 var $1392=$1385;
 SAFE_HEAP_STORE($1392, $1384, "i32", 0);
 var $1393=$1384>>>3;
 var $1394=($1384>>>0)<256;
 if($1394){label=316;break;}else{label=321;break;}
 case 316: 
 var $1396=$1393<<1;
 var $1397=((16120+($1396<<2))|0);
 var $1398=$1397;
 var $1399=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $1400=1<<$1393;
 var $1401=$1399&$1400;
 var $1402=($1401|0)==0;
 if($1402){label=317;break;}else{label=318;break;}
 case 317: 
 var $1404=$1399|$1400;
 SAFE_HEAP_STORE(16080, $1404, "i32", 0);
 var $_sum11_pre_i_i=((($1396)+(2))|0);
 var $_pre_i_i=((16120+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1398;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1396)+(2))|0);
 var $1406=((16120+($_sum12_i_i<<2))|0);
 var $1407=SAFE_HEAP_LOAD($1406, "%struct.malloc_chunk*", 0, 0);
 var $1408=$1407;
 var $1409=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1410=($1408>>>0)<($1409>>>0);
 if($1410){label=319;break;}else{var $F_0_i_i=$1407;var $_pre_phi_i_i=$1406;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 SAFE_HEAP_STORE($_pre_phi_i_i, $888, "%struct.malloc_chunk*", 0);
 var $1413=(($F_0_i_i+12)|0);
 SAFE_HEAP_STORE($1413, $888, "%struct.malloc_chunk*", 0);
 var $1414=(($888+8)|0);
 SAFE_HEAP_STORE($1414, $F_0_i_i, "%struct.malloc_chunk*", 0);
 var $1415=(($888+12)|0);
 SAFE_HEAP_STORE($1415, $1398, "%struct.malloc_chunk*", 0);
 label=338;break;
 case 321: 
 var $1417=$888;
 var $1418=$1384>>>8;
 var $1419=($1418|0)==0;
 if($1419){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1421=($1384>>>0)>16777215;
 if($1421){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1423=((($1418)+(1048320))|0);
 var $1424=$1423>>>16;
 var $1425=$1424&8;
 var $1426=$1418<<$1425;
 var $1427=((($1426)+(520192))|0);
 var $1428=$1427>>>16;
 var $1429=$1428&4;
 var $1430=$1429|$1425;
 var $1431=$1426<<$1429;
 var $1432=((($1431)+(245760))|0);
 var $1433=$1432>>>16;
 var $1434=$1433&2;
 var $1435=$1430|$1434;
 var $1436=(((14)-($1435))|0);
 var $1437=$1431<<$1434;
 var $1438=$1437>>>15;
 var $1439=((($1436)+($1438))|0);
 var $1440=$1439<<1;
 var $1441=((($1439)+(7))|0);
 var $1442=$1384>>>($1441>>>0);
 var $1443=$1442&1;
 var $1444=$1443|$1440;
 var $I1_0_i_i=$1444;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1446=((16384+($I1_0_i_i<<2))|0);
 var $1447=(($888+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 SAFE_HEAP_STORE($1447, $I1_0_c_i_i, "%struct.malloc_chunk*", 0);
 var $1448=(($888+20)|0);
 SAFE_HEAP_STORE($1448, 0, "i32", 0);
 var $1449=(($888+16)|0);
 SAFE_HEAP_STORE($1449, 0, "i32", 0);
 var $1450=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $1451=1<<$I1_0_i_i;
 var $1452=$1450&$1451;
 var $1453=($1452|0)==0;
 if($1453){label=325;break;}else{label=326;break;}
 case 325: 
 var $1455=$1450|$1451;
 SAFE_HEAP_STORE(16084, $1455, "i32", 0);
 SAFE_HEAP_STORE($1446, $1417, "%struct.malloc_tree_chunk*", 0);
 var $1456=(($888+24)|0);
 var $_c_i_i=$1446;
 SAFE_HEAP_STORE($1456, $_c_i_i, "%struct.malloc_chunk*", 0);
 var $1457=(($888+12)|0);
 SAFE_HEAP_STORE($1457, $888, "%struct.malloc_chunk*", 0);
 var $1458=(($888+8)|0);
 SAFE_HEAP_STORE($1458, $888, "%struct.malloc_chunk*", 0);
 label=338;break;
 case 326: 
 var $1460=SAFE_HEAP_LOAD($1446, "%struct.malloc_tree_chunk*", 0, 0);
 var $1461=($I1_0_i_i|0)==31;
 if($1461){var $1466=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1463=$I1_0_i_i>>>1;
 var $1464=(((25)-($1463))|0);
 var $1466=$1464;label=328;break;
 case 328: 
 var $1466;
 var $1467=$1384<<$1466;
 var $K2_0_i_i=$1467;var $T_0_i_i=$1460;label=329;break;
 case 329: 
 var $T_0_i_i;
 var $K2_0_i_i;
 var $1469=(($T_0_i_i+4)|0);
 var $1470=SAFE_HEAP_LOAD($1469, "i32", 0, 0);
 var $1471=$1470&-8;
 var $1472=($1471|0)==($1384|0);
 if($1472){label=334;break;}else{label=330;break;}
 case 330: 
 var $1474=$K2_0_i_i>>>31;
 var $1475=(($T_0_i_i+16+($1474<<2))|0);
 var $1476=SAFE_HEAP_LOAD($1475, "%struct.malloc_tree_chunk*", 0, 0);
 var $1477=($1476|0)==0;
 var $1478=$K2_0_i_i<<1;
 if($1477){label=331;break;}else{var $K2_0_i_i=$1478;var $T_0_i_i=$1476;label=329;break;}
 case 331: 
 var $1480=$1475;
 var $1481=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1482=($1480>>>0)<($1481>>>0);
 if($1482){label=333;break;}else{label=332;break;}
 case 332: 
 SAFE_HEAP_STORE($1475, $1417, "%struct.malloc_tree_chunk*", 0);
 var $1484=(($888+24)|0);
 var $T_0_c8_i_i=$T_0_i_i;
 SAFE_HEAP_STORE($1484, $T_0_c8_i_i, "%struct.malloc_chunk*", 0);
 var $1485=(($888+12)|0);
 SAFE_HEAP_STORE($1485, $888, "%struct.malloc_chunk*", 0);
 var $1486=(($888+8)|0);
 SAFE_HEAP_STORE($1486, $888, "%struct.malloc_chunk*", 0);
 label=338;break;
 case 333: 
 _abort();
 throw "Reached an unreachable!";
 case 334: 
 var $1489=(($T_0_i_i+8)|0);
 var $1490=SAFE_HEAP_LOAD($1489, "%struct.malloc_tree_chunk*", 0, 0);
 var $1491=$T_0_i_i;
 var $1492=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $1493=($1491>>>0)<($1492>>>0);
 if($1493){label=337;break;}else{label=335;break;}
 case 335: 
 var $1495=$1490;
 var $1496=($1495>>>0)<($1492>>>0);
 if($1496){label=337;break;}else{label=336;break;}
 case 336: 
 var $1498=(($1490+12)|0);
 SAFE_HEAP_STORE($1498, $1417, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($1489, $1417, "%struct.malloc_tree_chunk*", 0);
 var $1499=(($888+8)|0);
 var $_c7_i_i=$1490;
 SAFE_HEAP_STORE($1499, $_c7_i_i, "%struct.malloc_chunk*", 0);
 var $1500=(($888+12)|0);
 var $T_0_c_i_i=$T_0_i_i;
 SAFE_HEAP_STORE($1500, $T_0_c_i_i, "%struct.malloc_chunk*", 0);
 var $1501=(($888+24)|0);
 SAFE_HEAP_STORE($1501, 0, "%struct.malloc_chunk*", 0);
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1502=SAFE_HEAP_LOAD(16092, "i32", 0, 0);
 var $1503=($1502>>>0)>($nb_0>>>0);
 if($1503){label=339;break;}else{label=340;break;}
 case 339: 
 var $1505=((($1502)-($nb_0))|0);
 SAFE_HEAP_STORE(16092, $1505, "i32", 0);
 var $1506=SAFE_HEAP_LOAD(16104, "%struct.malloc_chunk*", 0, 0);
 var $1507=$1506;
 var $1508=(($1507+$nb_0)|0);
 var $1509=$1508;
 SAFE_HEAP_STORE(16104, $1509, "%struct.malloc_chunk*", 0);
 var $1510=$1505|1;
 var $_sum_i134=((($nb_0)+(4))|0);
 var $1511=(($1507+$_sum_i134)|0);
 var $1512=$1511;
 SAFE_HEAP_STORE($1512, $1510, "i32", 0);
 var $1513=$nb_0|3;
 var $1514=(($1506+4)|0);
 SAFE_HEAP_STORE($1514, $1513, "i32", 0);
 var $1515=(($1506+8)|0);
 var $1516=$1515;
 var $mem_0=$1516;label=341;break;
 case 340: 
 var $1517=___errno_location();
 SAFE_HEAP_STORE($1517, 12, "i32", 0);
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=SAFE_HEAP_LOAD($9, "i32", 0, 0);
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=SAFE_HEAP_LOAD($20, "i32", 0, 0);
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum232=(((-8)-($21))|0);
 var $24=(($mem+$_sum232)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=SAFE_HEAP_LOAD(16100, "%struct.malloc_chunk*", 0, 0);
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum276=((($_sum232)+(8))|0);
 var $35=(($mem+$_sum276)|0);
 var $36=$35;
 var $37=SAFE_HEAP_LOAD($36, "%struct.malloc_chunk*", 0, 0);
 var $_sum277=((($_sum232)+(12))|0);
 var $38=(($mem+$_sum277)|0);
 var $39=$38;
 var $40=SAFE_HEAP_LOAD($39, "%struct.malloc_chunk*", 0, 0);
 var $41=$32<<1;
 var $42=((16120+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=SAFE_HEAP_LOAD($49, "%struct.malloc_chunk*", 0, 0);
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $57=$56&$55;
 SAFE_HEAP_STORE(16080, $57, "i32", 0);
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre307=(($40+8)|0);
 var $_pre_phi308=$_pre307;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=SAFE_HEAP_LOAD($64, "%struct.malloc_chunk*", 0, 0);
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi308=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi308;
 var $67=(($37+12)|0);
 SAFE_HEAP_STORE($67, $40, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE($_pre_phi308, $37, "%struct.malloc_chunk*", 0);
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum266=((($_sum232)+(24))|0);
 var $70=(($mem+$_sum266)|0);
 var $71=$70;
 var $72=SAFE_HEAP_LOAD($71, "%struct.malloc_tree_chunk*", 0, 0);
 var $_sum267=((($_sum232)+(12))|0);
 var $73=(($mem+$_sum267)|0);
 var $74=$73;
 var $75=SAFE_HEAP_LOAD($74, "%struct.malloc_tree_chunk*", 0, 0);
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum273=((($_sum232)+(8))|0);
 var $78=(($mem+$_sum273)|0);
 var $79=$78;
 var $80=SAFE_HEAP_LOAD($79, "%struct.malloc_tree_chunk*", 0, 0);
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=SAFE_HEAP_LOAD($84, "%struct.malloc_tree_chunk*", 0, 0);
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=SAFE_HEAP_LOAD($88, "%struct.malloc_tree_chunk*", 0, 0);
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 SAFE_HEAP_STORE($84, $75, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($88, $80, "%struct.malloc_tree_chunk*", 0);
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum269=((($_sum232)+(20))|0);
 var $93=(($mem+$_sum269)|0);
 var $94=$93;
 var $95=SAFE_HEAP_LOAD($94, "%struct.malloc_tree_chunk*", 0, 0);
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum268=((($_sum232)+(16))|0);
 var $98=(($mem+$_sum268)|0);
 var $99=$98;
 var $100=SAFE_HEAP_LOAD($99, "%struct.malloc_tree_chunk*", 0, 0);
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=SAFE_HEAP_LOAD($102, "%struct.malloc_tree_chunk*", 0, 0);
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=SAFE_HEAP_LOAD($106, "%struct.malloc_tree_chunk*", 0, 0);
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 SAFE_HEAP_STORE($RP_0, 0, "%struct.malloc_tree_chunk*", 0);
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum270=((($_sum232)+(28))|0);
 var $117=(($mem+$_sum270)|0);
 var $118=$117;
 var $119=SAFE_HEAP_LOAD($118, "i32", 0, 0);
 var $120=((16384+($119<<2))|0);
 var $121=SAFE_HEAP_LOAD($120, "%struct.malloc_tree_chunk*", 0, 0);
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 SAFE_HEAP_STORE($120, $R_1, "%struct.malloc_tree_chunk*", 0);
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=1<<$119;
 var $125=$124^-1;
 var $126=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $127=$126&$125;
 SAFE_HEAP_STORE(16084, $127, "i32", 0);
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $129=$72;
 var $130=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $131=($129>>>0)<($130>>>0);
 if($131){label=42;break;}else{label=39;break;}
 case 39: 
 var $133=(($72+16)|0);
 var $134=SAFE_HEAP_LOAD($133, "%struct.malloc_tree_chunk*", 0, 0);
 var $135=($134|0)==($69|0);
 if($135){label=40;break;}else{label=41;break;}
 case 40: 
 SAFE_HEAP_STORE($133, $R_1, "%struct.malloc_tree_chunk*", 0);
 label=43;break;
 case 41: 
 var $138=(($72+20)|0);
 SAFE_HEAP_STORE($138, $R_1, "%struct.malloc_tree_chunk*", 0);
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $141=($R_1|0)==0;
 if($141){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $143=$R_1;
 var $144=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $145=($143>>>0)<($144>>>0);
 if($145){label=53;break;}else{label=45;break;}
 case 45: 
 var $147=(($R_1+24)|0);
 SAFE_HEAP_STORE($147, $72, "%struct.malloc_tree_chunk*", 0);
 var $_sum271=((($_sum232)+(16))|0);
 var $148=(($mem+$_sum271)|0);
 var $149=$148;
 var $150=SAFE_HEAP_LOAD($149, "%struct.malloc_tree_chunk*", 0, 0);
 var $151=($150|0)==0;
 if($151){label=49;break;}else{label=46;break;}
 case 46: 
 var $153=$150;
 var $154=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $155=($153>>>0)<($154>>>0);
 if($155){label=48;break;}else{label=47;break;}
 case 47: 
 var $157=(($R_1+16)|0);
 SAFE_HEAP_STORE($157, $150, "%struct.malloc_tree_chunk*", 0);
 var $158=(($150+24)|0);
 SAFE_HEAP_STORE($158, $R_1, "%struct.malloc_tree_chunk*", 0);
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum272=((($_sum232)+(20))|0);
 var $161=(($mem+$_sum272)|0);
 var $162=$161;
 var $163=SAFE_HEAP_LOAD($162, "%struct.malloc_tree_chunk*", 0, 0);
 var $164=($163|0)==0;
 if($164){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $166=$163;
 var $167=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $168=($166>>>0)<($167>>>0);
 if($168){label=52;break;}else{label=51;break;}
 case 51: 
 var $170=(($R_1+20)|0);
 SAFE_HEAP_STORE($170, $163, "%struct.malloc_tree_chunk*", 0);
 var $171=(($163+24)|0);
 SAFE_HEAP_STORE($171, $R_1, "%struct.malloc_tree_chunk*", 0);
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum233=((($14)-(4))|0);
 var $175=(($mem+$_sum233)|0);
 var $176=$175;
 var $177=SAFE_HEAP_LOAD($176, "i32", 0, 0);
 var $178=$177&3;
 var $179=($178|0)==3;
 if($179){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 SAFE_HEAP_STORE(16088, $26, "i32", 0);
 var $181=SAFE_HEAP_LOAD($176, "i32", 0, 0);
 var $182=$181&-2;
 SAFE_HEAP_STORE($176, $182, "i32", 0);
 var $183=$26|1;
 var $_sum264=((($_sum232)+(4))|0);
 var $184=(($mem+$_sum264)|0);
 var $185=$184;
 SAFE_HEAP_STORE($185, $183, "i32", 0);
 var $186=$15;
 SAFE_HEAP_STORE($186, $26, "i32", 0);
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $188=$p_0;
 var $189=($188>>>0)<($15>>>0);
 if($189){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum263=((($14)-(4))|0);
 var $191=(($mem+$_sum263)|0);
 var $192=$191;
 var $193=SAFE_HEAP_LOAD($192, "i32", 0, 0);
 var $194=$193&1;
 var $phitmp=($194|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $196=$193&2;
 var $197=($196|0)==0;
 if($197){label=59;break;}else{label=112;break;}
 case 59: 
 var $199=SAFE_HEAP_LOAD(16104, "%struct.malloc_chunk*", 0, 0);
 var $200=($16|0)==($199|0);
 if($200){label=60;break;}else{label=62;break;}
 case 60: 
 var $202=SAFE_HEAP_LOAD(16092, "i32", 0, 0);
 var $203=((($202)+($psize_0))|0);
 SAFE_HEAP_STORE(16092, $203, "i32", 0);
 SAFE_HEAP_STORE(16104, $p_0, "%struct.malloc_chunk*", 0);
 var $204=$203|1;
 var $205=(($p_0+4)|0);
 SAFE_HEAP_STORE($205, $204, "i32", 0);
 var $206=SAFE_HEAP_LOAD(16100, "%struct.malloc_chunk*", 0, 0);
 var $207=($p_0|0)==($206|0);
 if($207){label=61;break;}else{label=140;break;}
 case 61: 
 SAFE_HEAP_STORE(16100, 0, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE(16088, 0, "i32", 0);
 label=140;break;
 case 62: 
 var $210=SAFE_HEAP_LOAD(16100, "%struct.malloc_chunk*", 0, 0);
 var $211=($16|0)==($210|0);
 if($211){label=63;break;}else{label=64;break;}
 case 63: 
 var $213=SAFE_HEAP_LOAD(16088, "i32", 0, 0);
 var $214=((($213)+($psize_0))|0);
 SAFE_HEAP_STORE(16088, $214, "i32", 0);
 SAFE_HEAP_STORE(16100, $p_0, "%struct.malloc_chunk*", 0);
 var $215=$214|1;
 var $216=(($p_0+4)|0);
 SAFE_HEAP_STORE($216, $215, "i32", 0);
 var $217=(($188+$214)|0);
 var $218=$217;
 SAFE_HEAP_STORE($218, $214, "i32", 0);
 label=140;break;
 case 64: 
 var $220=$193&-8;
 var $221=((($220)+($psize_0))|0);
 var $222=$193>>>3;
 var $223=($193>>>0)<256;
 if($223){label=65;break;}else{label=77;break;}
 case 65: 
 var $225=(($mem+$14)|0);
 var $226=$225;
 var $227=SAFE_HEAP_LOAD($226, "%struct.malloc_chunk*", 0, 0);
 var $_sum257258=$14|4;
 var $228=(($mem+$_sum257258)|0);
 var $229=$228;
 var $230=SAFE_HEAP_LOAD($229, "%struct.malloc_chunk*", 0, 0);
 var $231=$222<<1;
 var $232=((16120+($231<<2))|0);
 var $233=$232;
 var $234=($227|0)==($233|0);
 if($234){label=68;break;}else{label=66;break;}
 case 66: 
 var $236=$227;
 var $237=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $238=($236>>>0)<($237>>>0);
 if($238){label=76;break;}else{label=67;break;}
 case 67: 
 var $240=(($227+12)|0);
 var $241=SAFE_HEAP_LOAD($240, "%struct.malloc_chunk*", 0, 0);
 var $242=($241|0)==($16|0);
 if($242){label=68;break;}else{label=76;break;}
 case 68: 
 var $243=($230|0)==($227|0);
 if($243){label=69;break;}else{label=70;break;}
 case 69: 
 var $245=1<<$222;
 var $246=$245^-1;
 var $247=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $248=$247&$246;
 SAFE_HEAP_STORE(16080, $248, "i32", 0);
 label=110;break;
 case 70: 
 var $250=($230|0)==($233|0);
 if($250){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre305=(($230+8)|0);
 var $_pre_phi306=$_pre305;label=74;break;
 case 72: 
 var $252=$230;
 var $253=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $254=($252>>>0)<($253>>>0);
 if($254){label=75;break;}else{label=73;break;}
 case 73: 
 var $256=(($230+8)|0);
 var $257=SAFE_HEAP_LOAD($256, "%struct.malloc_chunk*", 0, 0);
 var $258=($257|0)==($16|0);
 if($258){var $_pre_phi306=$256;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi306;
 var $259=(($227+12)|0);
 SAFE_HEAP_STORE($259, $230, "%struct.malloc_chunk*", 0);
 SAFE_HEAP_STORE($_pre_phi306, $227, "%struct.malloc_chunk*", 0);
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $261=$15;
 var $_sum235=((($14)+(16))|0);
 var $262=(($mem+$_sum235)|0);
 var $263=$262;
 var $264=SAFE_HEAP_LOAD($263, "%struct.malloc_tree_chunk*", 0, 0);
 var $_sum236237=$14|4;
 var $265=(($mem+$_sum236237)|0);
 var $266=$265;
 var $267=SAFE_HEAP_LOAD($266, "%struct.malloc_tree_chunk*", 0, 0);
 var $268=($267|0)==($261|0);
 if($268){label=83;break;}else{label=78;break;}
 case 78: 
 var $270=(($mem+$14)|0);
 var $271=$270;
 var $272=SAFE_HEAP_LOAD($271, "%struct.malloc_tree_chunk*", 0, 0);
 var $273=$272;
 var $274=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $275=($273>>>0)<($274>>>0);
 if($275){label=82;break;}else{label=79;break;}
 case 79: 
 var $277=(($272+12)|0);
 var $278=SAFE_HEAP_LOAD($277, "%struct.malloc_tree_chunk*", 0, 0);
 var $279=($278|0)==($261|0);
 if($279){label=80;break;}else{label=82;break;}
 case 80: 
 var $281=(($267+8)|0);
 var $282=SAFE_HEAP_LOAD($281, "%struct.malloc_tree_chunk*", 0, 0);
 var $283=($282|0)==($261|0);
 if($283){label=81;break;}else{label=82;break;}
 case 81: 
 SAFE_HEAP_STORE($277, $267, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($281, $272, "%struct.malloc_tree_chunk*", 0);
 var $R7_1=$267;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum239=((($14)+(12))|0);
 var $286=(($mem+$_sum239)|0);
 var $287=$286;
 var $288=SAFE_HEAP_LOAD($287, "%struct.malloc_tree_chunk*", 0, 0);
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=85;break;}
 case 84: 
 var $_sum238=((($14)+(8))|0);
 var $291=(($mem+$_sum238)|0);
 var $292=$291;
 var $293=SAFE_HEAP_LOAD($292, "%struct.malloc_tree_chunk*", 0, 0);
 var $294=($293|0)==0;
 if($294){var $R7_1=0;label=90;break;}else{var $R7_0=$293;var $RP9_0=$292;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $295=(($R7_0+20)|0);
 var $296=SAFE_HEAP_LOAD($295, "%struct.malloc_tree_chunk*", 0, 0);
 var $297=($296|0)==0;
 if($297){label=86;break;}else{var $R7_0=$296;var $RP9_0=$295;label=85;break;}
 case 86: 
 var $299=(($R7_0+16)|0);
 var $300=SAFE_HEAP_LOAD($299, "%struct.malloc_tree_chunk*", 0, 0);
 var $301=($300|0)==0;
 if($301){label=87;break;}else{var $R7_0=$300;var $RP9_0=$299;label=85;break;}
 case 87: 
 var $303=$RP9_0;
 var $304=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $305=($303>>>0)<($304>>>0);
 if($305){label=89;break;}else{label=88;break;}
 case 88: 
 SAFE_HEAP_STORE($RP9_0, 0, "%struct.malloc_tree_chunk*", 0);
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $309=($264|0)==0;
 if($309){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum250=((($14)+(20))|0);
 var $311=(($mem+$_sum250)|0);
 var $312=$311;
 var $313=SAFE_HEAP_LOAD($312, "i32", 0, 0);
 var $314=((16384+($313<<2))|0);
 var $315=SAFE_HEAP_LOAD($314, "%struct.malloc_tree_chunk*", 0, 0);
 var $316=($261|0)==($315|0);
 if($316){label=92;break;}else{label=94;break;}
 case 92: 
 SAFE_HEAP_STORE($314, $R7_1, "%struct.malloc_tree_chunk*", 0);
 var $cond298=($R7_1|0)==0;
 if($cond298){label=93;break;}else{label=100;break;}
 case 93: 
 var $318=1<<$313;
 var $319=$318^-1;
 var $320=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $321=$320&$319;
 SAFE_HEAP_STORE(16084, $321, "i32", 0);
 label=110;break;
 case 94: 
 var $323=$264;
 var $324=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $325=($323>>>0)<($324>>>0);
 if($325){label=98;break;}else{label=95;break;}
 case 95: 
 var $327=(($264+16)|0);
 var $328=SAFE_HEAP_LOAD($327, "%struct.malloc_tree_chunk*", 0, 0);
 var $329=($328|0)==($261|0);
 if($329){label=96;break;}else{label=97;break;}
 case 96: 
 SAFE_HEAP_STORE($327, $R7_1, "%struct.malloc_tree_chunk*", 0);
 label=99;break;
 case 97: 
 var $332=(($264+20)|0);
 SAFE_HEAP_STORE($332, $R7_1, "%struct.malloc_tree_chunk*", 0);
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $335=($R7_1|0)==0;
 if($335){label=110;break;}else{label=100;break;}
 case 100: 
 var $337=$R7_1;
 var $338=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $339=($337>>>0)<($338>>>0);
 if($339){label=109;break;}else{label=101;break;}
 case 101: 
 var $341=(($R7_1+24)|0);
 SAFE_HEAP_STORE($341, $264, "%struct.malloc_tree_chunk*", 0);
 var $_sum251=((($14)+(8))|0);
 var $342=(($mem+$_sum251)|0);
 var $343=$342;
 var $344=SAFE_HEAP_LOAD($343, "%struct.malloc_tree_chunk*", 0, 0);
 var $345=($344|0)==0;
 if($345){label=105;break;}else{label=102;break;}
 case 102: 
 var $347=$344;
 var $348=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $349=($347>>>0)<($348>>>0);
 if($349){label=104;break;}else{label=103;break;}
 case 103: 
 var $351=(($R7_1+16)|0);
 SAFE_HEAP_STORE($351, $344, "%struct.malloc_tree_chunk*", 0);
 var $352=(($344+24)|0);
 SAFE_HEAP_STORE($352, $R7_1, "%struct.malloc_tree_chunk*", 0);
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum252=((($14)+(12))|0);
 var $355=(($mem+$_sum252)|0);
 var $356=$355;
 var $357=SAFE_HEAP_LOAD($356, "%struct.malloc_tree_chunk*", 0, 0);
 var $358=($357|0)==0;
 if($358){label=110;break;}else{label=106;break;}
 case 106: 
 var $360=$357;
 var $361=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $362=($360>>>0)<($361>>>0);
 if($362){label=108;break;}else{label=107;break;}
 case 107: 
 var $364=(($R7_1+20)|0);
 SAFE_HEAP_STORE($364, $357, "%struct.malloc_tree_chunk*", 0);
 var $365=(($357+24)|0);
 SAFE_HEAP_STORE($365, $R7_1, "%struct.malloc_tree_chunk*", 0);
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $368=$221|1;
 var $369=(($p_0+4)|0);
 SAFE_HEAP_STORE($369, $368, "i32", 0);
 var $370=(($188+$221)|0);
 var $371=$370;
 SAFE_HEAP_STORE($371, $221, "i32", 0);
 var $372=SAFE_HEAP_LOAD(16100, "%struct.malloc_chunk*", 0, 0);
 var $373=($p_0|0)==($372|0);
 if($373){label=111;break;}else{var $psize_1=$221;label=113;break;}
 case 111: 
 SAFE_HEAP_STORE(16088, $221, "i32", 0);
 label=140;break;
 case 112: 
 var $376=$193&-2;
 SAFE_HEAP_STORE($192, $376, "i32", 0);
 var $377=$psize_0|1;
 var $378=(($p_0+4)|0);
 SAFE_HEAP_STORE($378, $377, "i32", 0);
 var $379=(($188+$psize_0)|0);
 var $380=$379;
 SAFE_HEAP_STORE($380, $psize_0, "i32", 0);
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $382=$psize_1>>>3;
 var $383=($psize_1>>>0)<256;
 if($383){label=114;break;}else{label=119;break;}
 case 114: 
 var $385=$382<<1;
 var $386=((16120+($385<<2))|0);
 var $387=$386;
 var $388=SAFE_HEAP_LOAD(16080, "i32", 0, 0);
 var $389=1<<$382;
 var $390=$388&$389;
 var $391=($390|0)==0;
 if($391){label=115;break;}else{label=116;break;}
 case 115: 
 var $393=$388|$389;
 SAFE_HEAP_STORE(16080, $393, "i32", 0);
 var $_sum248_pre=((($385)+(2))|0);
 var $_pre=((16120+($_sum248_pre<<2))|0);
 var $F16_0=$387;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum249=((($385)+(2))|0);
 var $395=((16120+($_sum249<<2))|0);
 var $396=SAFE_HEAP_LOAD($395, "%struct.malloc_chunk*", 0, 0);
 var $397=$396;
 var $398=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $399=($397>>>0)<($398>>>0);
 if($399){label=117;break;}else{var $F16_0=$396;var $_pre_phi=$395;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 SAFE_HEAP_STORE($_pre_phi, $p_0, "%struct.malloc_chunk*", 0);
 var $402=(($F16_0+12)|0);
 SAFE_HEAP_STORE($402, $p_0, "%struct.malloc_chunk*", 0);
 var $403=(($p_0+8)|0);
 SAFE_HEAP_STORE($403, $F16_0, "%struct.malloc_chunk*", 0);
 var $404=(($p_0+12)|0);
 SAFE_HEAP_STORE($404, $387, "%struct.malloc_chunk*", 0);
 label=140;break;
 case 119: 
 var $406=$p_0;
 var $407=$psize_1>>>8;
 var $408=($407|0)==0;
 if($408){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $410=($psize_1>>>0)>16777215;
 if($410){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $412=((($407)+(1048320))|0);
 var $413=$412>>>16;
 var $414=$413&8;
 var $415=$407<<$414;
 var $416=((($415)+(520192))|0);
 var $417=$416>>>16;
 var $418=$417&4;
 var $419=$418|$414;
 var $420=$415<<$418;
 var $421=((($420)+(245760))|0);
 var $422=$421>>>16;
 var $423=$422&2;
 var $424=$419|$423;
 var $425=(((14)-($424))|0);
 var $426=$420<<$423;
 var $427=$426>>>15;
 var $428=((($425)+($427))|0);
 var $429=$428<<1;
 var $430=((($428)+(7))|0);
 var $431=$psize_1>>>($430>>>0);
 var $432=$431&1;
 var $433=$432|$429;
 var $I18_0=$433;label=122;break;
 case 122: 
 var $I18_0;
 var $435=((16384+($I18_0<<2))|0);
 var $436=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 SAFE_HEAP_STORE($436, $I18_0_c, "%struct.malloc_chunk*", 0);
 var $437=(($p_0+20)|0);
 SAFE_HEAP_STORE($437, 0, "i32", 0);
 var $438=(($p_0+16)|0);
 SAFE_HEAP_STORE($438, 0, "i32", 0);
 var $439=SAFE_HEAP_LOAD(16084, "i32", 0, 0);
 var $440=1<<$I18_0;
 var $441=$439&$440;
 var $442=($441|0)==0;
 if($442){label=123;break;}else{label=124;break;}
 case 123: 
 var $444=$439|$440;
 SAFE_HEAP_STORE(16084, $444, "i32", 0);
 SAFE_HEAP_STORE($435, $406, "%struct.malloc_tree_chunk*", 0);
 var $445=(($p_0+24)|0);
 var $_c=$435;
 SAFE_HEAP_STORE($445, $_c, "%struct.malloc_chunk*", 0);
 var $446=(($p_0+12)|0);
 SAFE_HEAP_STORE($446, $p_0, "%struct.malloc_chunk*", 0);
 var $447=(($p_0+8)|0);
 SAFE_HEAP_STORE($447, $p_0, "%struct.malloc_chunk*", 0);
 label=136;break;
 case 124: 
 var $449=SAFE_HEAP_LOAD($435, "%struct.malloc_tree_chunk*", 0, 0);
 var $450=($I18_0|0)==31;
 if($450){var $455=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $452=$I18_0>>>1;
 var $453=(((25)-($452))|0);
 var $455=$453;label=126;break;
 case 126: 
 var $455;
 var $456=$psize_1<<$455;
 var $K19_0=$456;var $T_0=$449;label=127;break;
 case 127: 
 var $T_0;
 var $K19_0;
 var $458=(($T_0+4)|0);
 var $459=SAFE_HEAP_LOAD($458, "i32", 0, 0);
 var $460=$459&-8;
 var $461=($460|0)==($psize_1|0);
 if($461){label=132;break;}else{label=128;break;}
 case 128: 
 var $463=$K19_0>>>31;
 var $464=(($T_0+16+($463<<2))|0);
 var $465=SAFE_HEAP_LOAD($464, "%struct.malloc_tree_chunk*", 0, 0);
 var $466=($465|0)==0;
 var $467=$K19_0<<1;
 if($466){label=129;break;}else{var $K19_0=$467;var $T_0=$465;label=127;break;}
 case 129: 
 var $469=$464;
 var $470=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $471=($469>>>0)<($470>>>0);
 if($471){label=131;break;}else{label=130;break;}
 case 130: 
 SAFE_HEAP_STORE($464, $406, "%struct.malloc_tree_chunk*", 0);
 var $473=(($p_0+24)|0);
 var $T_0_c245=$T_0;
 SAFE_HEAP_STORE($473, $T_0_c245, "%struct.malloc_chunk*", 0);
 var $474=(($p_0+12)|0);
 SAFE_HEAP_STORE($474, $p_0, "%struct.malloc_chunk*", 0);
 var $475=(($p_0+8)|0);
 SAFE_HEAP_STORE($475, $p_0, "%struct.malloc_chunk*", 0);
 label=136;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 var $478=(($T_0+8)|0);
 var $479=SAFE_HEAP_LOAD($478, "%struct.malloc_tree_chunk*", 0, 0);
 var $480=$T_0;
 var $481=SAFE_HEAP_LOAD(16096, "i8*", 0, 0);
 var $482=($480>>>0)<($481>>>0);
 if($482){label=135;break;}else{label=133;break;}
 case 133: 
 var $484=$479;
 var $485=($484>>>0)<($481>>>0);
 if($485){label=135;break;}else{label=134;break;}
 case 134: 
 var $487=(($479+12)|0);
 SAFE_HEAP_STORE($487, $406, "%struct.malloc_tree_chunk*", 0);
 SAFE_HEAP_STORE($478, $406, "%struct.malloc_tree_chunk*", 0);
 var $488=(($p_0+8)|0);
 var $_c244=$479;
 SAFE_HEAP_STORE($488, $_c244, "%struct.malloc_chunk*", 0);
 var $489=(($p_0+12)|0);
 var $T_0_c=$T_0;
 SAFE_HEAP_STORE($489, $T_0_c, "%struct.malloc_chunk*", 0);
 var $490=(($p_0+24)|0);
 SAFE_HEAP_STORE($490, 0, "%struct.malloc_chunk*", 0);
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $492=SAFE_HEAP_LOAD(16112, "i32", 0, 0);
 var $493=((($492)-(1))|0);
 SAFE_HEAP_STORE(16112, $493, "i32", 0);
 var $494=($493|0)==0;
 if($494){var $sp_0_in_i=16536;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=SAFE_HEAP_LOAD($sp_0_in_i, "%struct.malloc_segment*", 0, 0);
 var $495=($sp_0_i|0)==0;
 var $496=(($sp_0_i+8)|0);
 if($495){label=138;break;}else{var $sp_0_in_i=$496;label=137;break;}
 case 138: 
 SAFE_HEAP_STORE(16112, -1, "i32", 0);
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function _memcmp($vl,$vr,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $14=0;label=5;break;}else{var $_011=$n;var $l_012=$vl;var $r_013=$vr;label=2;break;}
 case 2: 
 var $r_013;
 var $l_012;
 var $_011;
 var $2=SAFE_HEAP_LOAD($l_012, "i8", 0, 0);
 var $3=SAFE_HEAP_LOAD($r_013, "i8", 0, 0);
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=((($_011)-(1))|0);
 var $7=(($l_012+1)|0);
 var $8=(($r_013+1)|0);
 var $9=($6|0)==0;
 if($9){var $14=0;label=5;break;}else{var $_011=$6;var $l_012=$7;var $r_013=$8;label=2;break;}
 case 4: 
 var $11=($2&255);
 var $12=($3&255);
 var $13=((($11)-($12))|0);
 var $14=$13;label=5;break;
 case 5: 
 var $14;
 return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _strcmp($l,$r){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=SAFE_HEAP_LOAD($l, "i8", 0, 0);
 var $2=SAFE_HEAP_LOAD($r, "i8", 0, 0);
 var $3=(($1<<24)>>24)!=(($2<<24)>>24);
 var $4=(($1<<24)>>24)==0;
 var $or_cond12=$3|$4;
 var $5=(($2<<24)>>24)==0;
 var $or_cond1013=$or_cond12|$5;
 if($or_cond1013){var $_lcssa=$1;var $_lcssa11=$2;label=3;break;}else{var $_0914=$l;var $_015=$r;label=2;break;}
 case 2: 
 var $_015;
 var $_0914;
 var $6=(($_0914+1)|0);
 var $7=(($_015+1)|0);
 var $8=SAFE_HEAP_LOAD($6, "i8", 0, 0);
 var $9=SAFE_HEAP_LOAD($7, "i8", 0, 0);
 var $10=(($8<<24)>>24)!=(($9<<24)>>24);
 var $11=(($8<<24)>>24)==0;
 var $or_cond=$10|$11;
 var $12=(($9<<24)>>24)==0;
 var $or_cond10=$or_cond|$12;
 if($or_cond10){var $_lcssa=$8;var $_lcssa11=$9;label=3;break;}else{var $_0914=$6;var $_015=$7;label=2;break;}
 case 3: 
 var $_lcssa11;
 var $_lcssa;
 var $13=($_lcssa&255);
 var $14=($_lcssa11&255);
 var $15=((($13)-($14))|0);
 return $15;
  default: assert(0, "bad label: " + label);
 }

}



// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



